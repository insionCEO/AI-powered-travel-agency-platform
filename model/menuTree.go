package model

type MenuTree struct {
	MenuName        string `xorm:"not null default '' index(menu_parents) index(menu_parent_expand_child) VARCHAR(32)"`
	Mlid            int    `xorm:"not null pk autoincr INT(10)"`
	Id              string `xorm:"not null unique VARCHAR(255)"`
	Parent          string `xorm:"not null default '' index(menu_parent_expand_child) VARCHAR(255)"`
	RouteName       string `xorm:"index(route_values) VARCHAR(255)"`
	RouteParamKey   string `xorm:"index(route_values) VARCHAR(255)"`
	RouteParameters []byte `xorm:"LONGBLOB"`
	Url             string `xorm:"not null default '' VARCHAR(255)"`
	Title           []byte `xorm:"LONGBLOB"`
	Description     []byte `xorm:"LONGBLOB"`
	Class           string `xorm:"TEXT"`
	Options         []byte `xorm:"LONGBLOB"`
	Provider        string `xorm:"not null default 'system' VARCHAR(50)"`
	Enabled         int    `xorm:"not null default 1 SMALLINT(6)"`
	Discovered      int    `xorm:"not null default 0 SMALLINT(6)"`
	Expanded        int    `xorm:"not null default 0 index(menu_parent_expand_child) SMALLINT(6)"`
	Weight          int    `xorm:"not null default 0 INT(11)"`
	Metadata        []byte `xorm:"LONGBLOB"`
	HasChildren     int    `xorm:"not null default 0 index(menu_parent_expand_child) SMALLINT(6)"`
	Depth           int    `xorm:"not null default 0 SMALLINT(6)"`
	P1              int    `xorm:"not null default 0 index(menu_parents) INT(10)"`
	P2              int    `xorm:"not null default 0 index(menu_parents) INT(10)"`
	P3              int    `xorm:"not null default 0 index(menu_parents) INT(10)"`
	P4              int    `xorm:"not null default 0 index(menu_parents) INT(10)"`
	P5              int    `xorm:"not null default 0 index(menu_parents) INT(10)"`
	P6              int    `xorm:"not null default 0 index(menu_parents) INT(10)"`
	P7              int    `xorm:"not null default 0 index(menu_parents) INT(10)"`
	P8              int    `xorm:"not null default 0 index(menu_parents) INT(10)"`
	P9              int    `xorm:"not null default 0 index(menu_parents) INT(10)"`
	FormClass       string `xorm:"VARCHAR(255)"`
}

// GetMenuTreesCount MenuTrees' Count
func GetMenuTreesCount(offset int, limit int) (int64, error) {
	total, err := Engine.Limit(limit, offset).Count(&MenuTree{})
	return total, err
}

// GetMenuTreeCountViaMenuName Get MenuTree via MenuName
func GetMenuTreeCountViaMenuName(iMenuName string) int64 {
	n, _ := Engine.Where("menu_name = ?", iMenuName).Count(&MenuTree{MenuName: iMenuName})
	return n
}

// GetMenuTreeCountViaMlid Get MenuTree via Mlid
func GetMenuTreeCountViaMlid(iMlid int) int64 {
	n, _ := Engine.Where("mlid = ?", iMlid).Count(&MenuTree{Mlid: iMlid})
	return n
}

// GetMenuTreeCountViaId Get MenuTree via Id
func GetMenuTreeCountViaId(iId string) int64 {
	n, _ := Engine.Where("id = ?", iId).Count(&MenuTree{Id: iId})
	return n
}

// GetMenuTreeCountViaParent Get MenuTree via Parent
func GetMenuTreeCountViaParent(iParent string) int64 {
	n, _ := Engine.Where("parent = ?", iParent).Count(&MenuTree{Parent: iParent})
	return n
}

// GetMenuTreeCountViaRouteName Get MenuTree via RouteName
func GetMenuTreeCountViaRouteName(iRouteName string) int64 {
	n, _ := Engine.Where("route_name = ?", iRouteName).Count(&MenuTree{RouteName: iRouteName})
	return n
}

// GetMenuTreeCountViaRouteParamKey Get MenuTree via RouteParamKey
func GetMenuTreeCountViaRouteParamKey(iRouteParamKey string) int64 {
	n, _ := Engine.Where("route_param_key = ?", iRouteParamKey).Count(&MenuTree{RouteParamKey: iRouteParamKey})
	return n
}

// GetMenuTreeCountViaRouteParameters Get MenuTree via RouteParameters
func GetMenuTreeCountViaRouteParameters(iRouteParameters []byte) int64 {
	n, _ := Engine.Where("route_parameters = ?", iRouteParameters).Count(&MenuTree{RouteParameters: iRouteParameters})
	return n
}

// GetMenuTreeCountViaUrl Get MenuTree via Url
func GetMenuTreeCountViaUrl(iUrl string) int64 {
	n, _ := Engine.Where("url = ?", iUrl).Count(&MenuTree{Url: iUrl})
	return n
}

// GetMenuTreeCountViaTitle Get MenuTree via Title
func GetMenuTreeCountViaTitle(iTitle []byte) int64 {
	n, _ := Engine.Where("title = ?", iTitle).Count(&MenuTree{Title: iTitle})
	return n
}

// GetMenuTreeCountViaDescription Get MenuTree via Description
func GetMenuTreeCountViaDescription(iDescription []byte) int64 {
	n, _ := Engine.Where("description = ?", iDescription).Count(&MenuTree{Description: iDescription})
	return n
}

// GetMenuTreeCountViaClass Get MenuTree via Class
func GetMenuTreeCountViaClass(iClass string) int64 {
	n, _ := Engine.Where("class = ?", iClass).Count(&MenuTree{Class: iClass})
	return n
}

// GetMenuTreeCountViaOptions Get MenuTree via Options
func GetMenuTreeCountViaOptions(iOptions []byte) int64 {
	n, _ := Engine.Where("options = ?", iOptions).Count(&MenuTree{Options: iOptions})
	return n
}

// GetMenuTreeCountViaProvider Get MenuTree via Provider
func GetMenuTreeCountViaProvider(iProvider string) int64 {
	n, _ := Engine.Where("provider = ?", iProvider).Count(&MenuTree{Provider: iProvider})
	return n
}

// GetMenuTreeCountViaEnabled Get MenuTree via Enabled
func GetMenuTreeCountViaEnabled(iEnabled int) int64 {
	n, _ := Engine.Where("enabled = ?", iEnabled).Count(&MenuTree{Enabled: iEnabled})
	return n
}

// GetMenuTreeCountViaDiscovered Get MenuTree via Discovered
func GetMenuTreeCountViaDiscovered(iDiscovered int) int64 {
	n, _ := Engine.Where("discovered = ?", iDiscovered).Count(&MenuTree{Discovered: iDiscovered})
	return n
}

// GetMenuTreeCountViaExpanded Get MenuTree via Expanded
func GetMenuTreeCountViaExpanded(iExpanded int) int64 {
	n, _ := Engine.Where("expanded = ?", iExpanded).Count(&MenuTree{Expanded: iExpanded})
	return n
}

// GetMenuTreeCountViaWeight Get MenuTree via Weight
func GetMenuTreeCountViaWeight(iWeight int) int64 {
	n, _ := Engine.Where("weight = ?", iWeight).Count(&MenuTree{Weight: iWeight})
	return n
}

// GetMenuTreeCountViaMetadata Get MenuTree via Metadata
func GetMenuTreeCountViaMetadata(iMetadata []byte) int64 {
	n, _ := Engine.Where("metadata = ?", iMetadata).Count(&MenuTree{Metadata: iMetadata})
	return n
}

// GetMenuTreeCountViaHasChildren Get MenuTree via HasChildren
func GetMenuTreeCountViaHasChildren(iHasChildren int) int64 {
	n, _ := Engine.Where("has_children = ?", iHasChildren).Count(&MenuTree{HasChildren: iHasChildren})
	return n
}

// GetMenuTreeCountViaDepth Get MenuTree via Depth
func GetMenuTreeCountViaDepth(iDepth int) int64 {
	n, _ := Engine.Where("depth = ?", iDepth).Count(&MenuTree{Depth: iDepth})
	return n
}

// GetMenuTreeCountViaP1 Get MenuTree via P1
func GetMenuTreeCountViaP1(iP1 int) int64 {
	n, _ := Engine.Where("p1 = ?", iP1).Count(&MenuTree{P1: iP1})
	return n
}

// GetMenuTreeCountViaP2 Get MenuTree via P2
func GetMenuTreeCountViaP2(iP2 int) int64 {
	n, _ := Engine.Where("p2 = ?", iP2).Count(&MenuTree{P2: iP2})
	return n
}

// GetMenuTreeCountViaP3 Get MenuTree via P3
func GetMenuTreeCountViaP3(iP3 int) int64 {
	n, _ := Engine.Where("p3 = ?", iP3).Count(&MenuTree{P3: iP3})
	return n
}

// GetMenuTreeCountViaP4 Get MenuTree via P4
func GetMenuTreeCountViaP4(iP4 int) int64 {
	n, _ := Engine.Where("p4 = ?", iP4).Count(&MenuTree{P4: iP4})
	return n
}

// GetMenuTreeCountViaP5 Get MenuTree via P5
func GetMenuTreeCountViaP5(iP5 int) int64 {
	n, _ := Engine.Where("p5 = ?", iP5).Count(&MenuTree{P5: iP5})
	return n
}

// GetMenuTreeCountViaP6 Get MenuTree via P6
func GetMenuTreeCountViaP6(iP6 int) int64 {
	n, _ := Engine.Where("p6 = ?", iP6).Count(&MenuTree{P6: iP6})
	return n
}

// GetMenuTreeCountViaP7 Get MenuTree via P7
func GetMenuTreeCountViaP7(iP7 int) int64 {
	n, _ := Engine.Where("p7 = ?", iP7).Count(&MenuTree{P7: iP7})
	return n
}

// GetMenuTreeCountViaP8 Get MenuTree via P8
func GetMenuTreeCountViaP8(iP8 int) int64 {
	n, _ := Engine.Where("p8 = ?", iP8).Count(&MenuTree{P8: iP8})
	return n
}

// GetMenuTreeCountViaP9 Get MenuTree via P9
func GetMenuTreeCountViaP9(iP9 int) int64 {
	n, _ := Engine.Where("p9 = ?", iP9).Count(&MenuTree{P9: iP9})
	return n
}

// GetMenuTreeCountViaFormClass Get MenuTree via FormClass
func GetMenuTreeCountViaFormClass(iFormClass string) int64 {
	n, _ := Engine.Where("form_class = ?", iFormClass).Count(&MenuTree{FormClass: iFormClass})
	return n
}

// GetMenuTreesByMenuNameAndMlidAndId Get MenuTrees via MenuNameAndMlidAndId
func GetMenuTreesByMenuNameAndMlidAndId(offset int, limit int, MenuName_ string, Mlid_ int, Id_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and id = ?", MenuName_, Mlid_, Id_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndParent Get MenuTrees via MenuNameAndMlidAndParent
func GetMenuTreesByMenuNameAndMlidAndParent(offset int, limit int, MenuName_ string, Mlid_ int, Parent_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and parent = ?", MenuName_, Mlid_, Parent_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndRouteName Get MenuTrees via MenuNameAndMlidAndRouteName
func GetMenuTreesByMenuNameAndMlidAndRouteName(offset int, limit int, MenuName_ string, Mlid_ int, RouteName_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and route_name = ?", MenuName_, Mlid_, RouteName_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndRouteParamKey Get MenuTrees via MenuNameAndMlidAndRouteParamKey
func GetMenuTreesByMenuNameAndMlidAndRouteParamKey(offset int, limit int, MenuName_ string, Mlid_ int, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and route_param_key = ?", MenuName_, Mlid_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndRouteParameters Get MenuTrees via MenuNameAndMlidAndRouteParameters
func GetMenuTreesByMenuNameAndMlidAndRouteParameters(offset int, limit int, MenuName_ string, Mlid_ int, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and route_parameters = ?", MenuName_, Mlid_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndUrl Get MenuTrees via MenuNameAndMlidAndUrl
func GetMenuTreesByMenuNameAndMlidAndUrl(offset int, limit int, MenuName_ string, Mlid_ int, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and url = ?", MenuName_, Mlid_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndTitle Get MenuTrees via MenuNameAndMlidAndTitle
func GetMenuTreesByMenuNameAndMlidAndTitle(offset int, limit int, MenuName_ string, Mlid_ int, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and title = ?", MenuName_, Mlid_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndDescription Get MenuTrees via MenuNameAndMlidAndDescription
func GetMenuTreesByMenuNameAndMlidAndDescription(offset int, limit int, MenuName_ string, Mlid_ int, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and description = ?", MenuName_, Mlid_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndClass Get MenuTrees via MenuNameAndMlidAndClass
func GetMenuTreesByMenuNameAndMlidAndClass(offset int, limit int, MenuName_ string, Mlid_ int, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and class = ?", MenuName_, Mlid_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndOptions Get MenuTrees via MenuNameAndMlidAndOptions
func GetMenuTreesByMenuNameAndMlidAndOptions(offset int, limit int, MenuName_ string, Mlid_ int, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and options = ?", MenuName_, Mlid_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndProvider Get MenuTrees via MenuNameAndMlidAndProvider
func GetMenuTreesByMenuNameAndMlidAndProvider(offset int, limit int, MenuName_ string, Mlid_ int, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and provider = ?", MenuName_, Mlid_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndEnabled Get MenuTrees via MenuNameAndMlidAndEnabled
func GetMenuTreesByMenuNameAndMlidAndEnabled(offset int, limit int, MenuName_ string, Mlid_ int, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and enabled = ?", MenuName_, Mlid_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndDiscovered Get MenuTrees via MenuNameAndMlidAndDiscovered
func GetMenuTreesByMenuNameAndMlidAndDiscovered(offset int, limit int, MenuName_ string, Mlid_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and discovered = ?", MenuName_, Mlid_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndExpanded Get MenuTrees via MenuNameAndMlidAndExpanded
func GetMenuTreesByMenuNameAndMlidAndExpanded(offset int, limit int, MenuName_ string, Mlid_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and expanded = ?", MenuName_, Mlid_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndWeight Get MenuTrees via MenuNameAndMlidAndWeight
func GetMenuTreesByMenuNameAndMlidAndWeight(offset int, limit int, MenuName_ string, Mlid_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and weight = ?", MenuName_, Mlid_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndMetadata Get MenuTrees via MenuNameAndMlidAndMetadata
func GetMenuTreesByMenuNameAndMlidAndMetadata(offset int, limit int, MenuName_ string, Mlid_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and metadata = ?", MenuName_, Mlid_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndHasChildren Get MenuTrees via MenuNameAndMlidAndHasChildren
func GetMenuTreesByMenuNameAndMlidAndHasChildren(offset int, limit int, MenuName_ string, Mlid_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and has_children = ?", MenuName_, Mlid_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndDepth Get MenuTrees via MenuNameAndMlidAndDepth
func GetMenuTreesByMenuNameAndMlidAndDepth(offset int, limit int, MenuName_ string, Mlid_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and depth = ?", MenuName_, Mlid_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndP1 Get MenuTrees via MenuNameAndMlidAndP1
func GetMenuTreesByMenuNameAndMlidAndP1(offset int, limit int, MenuName_ string, Mlid_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and p1 = ?", MenuName_, Mlid_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndP2 Get MenuTrees via MenuNameAndMlidAndP2
func GetMenuTreesByMenuNameAndMlidAndP2(offset int, limit int, MenuName_ string, Mlid_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and p2 = ?", MenuName_, Mlid_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndP3 Get MenuTrees via MenuNameAndMlidAndP3
func GetMenuTreesByMenuNameAndMlidAndP3(offset int, limit int, MenuName_ string, Mlid_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and p3 = ?", MenuName_, Mlid_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndP4 Get MenuTrees via MenuNameAndMlidAndP4
func GetMenuTreesByMenuNameAndMlidAndP4(offset int, limit int, MenuName_ string, Mlid_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and p4 = ?", MenuName_, Mlid_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndP5 Get MenuTrees via MenuNameAndMlidAndP5
func GetMenuTreesByMenuNameAndMlidAndP5(offset int, limit int, MenuName_ string, Mlid_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and p5 = ?", MenuName_, Mlid_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndP6 Get MenuTrees via MenuNameAndMlidAndP6
func GetMenuTreesByMenuNameAndMlidAndP6(offset int, limit int, MenuName_ string, Mlid_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and p6 = ?", MenuName_, Mlid_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndP7 Get MenuTrees via MenuNameAndMlidAndP7
func GetMenuTreesByMenuNameAndMlidAndP7(offset int, limit int, MenuName_ string, Mlid_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and p7 = ?", MenuName_, Mlid_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndP8 Get MenuTrees via MenuNameAndMlidAndP8
func GetMenuTreesByMenuNameAndMlidAndP8(offset int, limit int, MenuName_ string, Mlid_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and p8 = ?", MenuName_, Mlid_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndP9 Get MenuTrees via MenuNameAndMlidAndP9
func GetMenuTreesByMenuNameAndMlidAndP9(offset int, limit int, MenuName_ string, Mlid_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and p9 = ?", MenuName_, Mlid_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlidAndFormClass Get MenuTrees via MenuNameAndMlidAndFormClass
func GetMenuTreesByMenuNameAndMlidAndFormClass(offset int, limit int, MenuName_ string, Mlid_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ? and form_class = ?", MenuName_, Mlid_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndParent Get MenuTrees via MenuNameAndIdAndParent
func GetMenuTreesByMenuNameAndIdAndParent(offset int, limit int, MenuName_ string, Id_ string, Parent_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and parent = ?", MenuName_, Id_, Parent_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndRouteName Get MenuTrees via MenuNameAndIdAndRouteName
func GetMenuTreesByMenuNameAndIdAndRouteName(offset int, limit int, MenuName_ string, Id_ string, RouteName_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and route_name = ?", MenuName_, Id_, RouteName_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndRouteParamKey Get MenuTrees via MenuNameAndIdAndRouteParamKey
func GetMenuTreesByMenuNameAndIdAndRouteParamKey(offset int, limit int, MenuName_ string, Id_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and route_param_key = ?", MenuName_, Id_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndRouteParameters Get MenuTrees via MenuNameAndIdAndRouteParameters
func GetMenuTreesByMenuNameAndIdAndRouteParameters(offset int, limit int, MenuName_ string, Id_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and route_parameters = ?", MenuName_, Id_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndUrl Get MenuTrees via MenuNameAndIdAndUrl
func GetMenuTreesByMenuNameAndIdAndUrl(offset int, limit int, MenuName_ string, Id_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and url = ?", MenuName_, Id_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndTitle Get MenuTrees via MenuNameAndIdAndTitle
func GetMenuTreesByMenuNameAndIdAndTitle(offset int, limit int, MenuName_ string, Id_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and title = ?", MenuName_, Id_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndDescription Get MenuTrees via MenuNameAndIdAndDescription
func GetMenuTreesByMenuNameAndIdAndDescription(offset int, limit int, MenuName_ string, Id_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and description = ?", MenuName_, Id_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndClass Get MenuTrees via MenuNameAndIdAndClass
func GetMenuTreesByMenuNameAndIdAndClass(offset int, limit int, MenuName_ string, Id_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and class = ?", MenuName_, Id_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndOptions Get MenuTrees via MenuNameAndIdAndOptions
func GetMenuTreesByMenuNameAndIdAndOptions(offset int, limit int, MenuName_ string, Id_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and options = ?", MenuName_, Id_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndProvider Get MenuTrees via MenuNameAndIdAndProvider
func GetMenuTreesByMenuNameAndIdAndProvider(offset int, limit int, MenuName_ string, Id_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and provider = ?", MenuName_, Id_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndEnabled Get MenuTrees via MenuNameAndIdAndEnabled
func GetMenuTreesByMenuNameAndIdAndEnabled(offset int, limit int, MenuName_ string, Id_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and enabled = ?", MenuName_, Id_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndDiscovered Get MenuTrees via MenuNameAndIdAndDiscovered
func GetMenuTreesByMenuNameAndIdAndDiscovered(offset int, limit int, MenuName_ string, Id_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and discovered = ?", MenuName_, Id_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndExpanded Get MenuTrees via MenuNameAndIdAndExpanded
func GetMenuTreesByMenuNameAndIdAndExpanded(offset int, limit int, MenuName_ string, Id_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and expanded = ?", MenuName_, Id_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndWeight Get MenuTrees via MenuNameAndIdAndWeight
func GetMenuTreesByMenuNameAndIdAndWeight(offset int, limit int, MenuName_ string, Id_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and weight = ?", MenuName_, Id_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndMetadata Get MenuTrees via MenuNameAndIdAndMetadata
func GetMenuTreesByMenuNameAndIdAndMetadata(offset int, limit int, MenuName_ string, Id_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and metadata = ?", MenuName_, Id_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndHasChildren Get MenuTrees via MenuNameAndIdAndHasChildren
func GetMenuTreesByMenuNameAndIdAndHasChildren(offset int, limit int, MenuName_ string, Id_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and has_children = ?", MenuName_, Id_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndDepth Get MenuTrees via MenuNameAndIdAndDepth
func GetMenuTreesByMenuNameAndIdAndDepth(offset int, limit int, MenuName_ string, Id_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and depth = ?", MenuName_, Id_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndP1 Get MenuTrees via MenuNameAndIdAndP1
func GetMenuTreesByMenuNameAndIdAndP1(offset int, limit int, MenuName_ string, Id_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and p1 = ?", MenuName_, Id_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndP2 Get MenuTrees via MenuNameAndIdAndP2
func GetMenuTreesByMenuNameAndIdAndP2(offset int, limit int, MenuName_ string, Id_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and p2 = ?", MenuName_, Id_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndP3 Get MenuTrees via MenuNameAndIdAndP3
func GetMenuTreesByMenuNameAndIdAndP3(offset int, limit int, MenuName_ string, Id_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and p3 = ?", MenuName_, Id_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndP4 Get MenuTrees via MenuNameAndIdAndP4
func GetMenuTreesByMenuNameAndIdAndP4(offset int, limit int, MenuName_ string, Id_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and p4 = ?", MenuName_, Id_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndP5 Get MenuTrees via MenuNameAndIdAndP5
func GetMenuTreesByMenuNameAndIdAndP5(offset int, limit int, MenuName_ string, Id_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and p5 = ?", MenuName_, Id_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndP6 Get MenuTrees via MenuNameAndIdAndP6
func GetMenuTreesByMenuNameAndIdAndP6(offset int, limit int, MenuName_ string, Id_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and p6 = ?", MenuName_, Id_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndP7 Get MenuTrees via MenuNameAndIdAndP7
func GetMenuTreesByMenuNameAndIdAndP7(offset int, limit int, MenuName_ string, Id_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and p7 = ?", MenuName_, Id_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndP8 Get MenuTrees via MenuNameAndIdAndP8
func GetMenuTreesByMenuNameAndIdAndP8(offset int, limit int, MenuName_ string, Id_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and p8 = ?", MenuName_, Id_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndP9 Get MenuTrees via MenuNameAndIdAndP9
func GetMenuTreesByMenuNameAndIdAndP9(offset int, limit int, MenuName_ string, Id_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and p9 = ?", MenuName_, Id_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndIdAndFormClass Get MenuTrees via MenuNameAndIdAndFormClass
func GetMenuTreesByMenuNameAndIdAndFormClass(offset int, limit int, MenuName_ string, Id_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ? and form_class = ?", MenuName_, Id_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndRouteName Get MenuTrees via MenuNameAndParentAndRouteName
func GetMenuTreesByMenuNameAndParentAndRouteName(offset int, limit int, MenuName_ string, Parent_ string, RouteName_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and route_name = ?", MenuName_, Parent_, RouteName_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndRouteParamKey Get MenuTrees via MenuNameAndParentAndRouteParamKey
func GetMenuTreesByMenuNameAndParentAndRouteParamKey(offset int, limit int, MenuName_ string, Parent_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and route_param_key = ?", MenuName_, Parent_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndRouteParameters Get MenuTrees via MenuNameAndParentAndRouteParameters
func GetMenuTreesByMenuNameAndParentAndRouteParameters(offset int, limit int, MenuName_ string, Parent_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and route_parameters = ?", MenuName_, Parent_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndUrl Get MenuTrees via MenuNameAndParentAndUrl
func GetMenuTreesByMenuNameAndParentAndUrl(offset int, limit int, MenuName_ string, Parent_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and url = ?", MenuName_, Parent_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndTitle Get MenuTrees via MenuNameAndParentAndTitle
func GetMenuTreesByMenuNameAndParentAndTitle(offset int, limit int, MenuName_ string, Parent_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and title = ?", MenuName_, Parent_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndDescription Get MenuTrees via MenuNameAndParentAndDescription
func GetMenuTreesByMenuNameAndParentAndDescription(offset int, limit int, MenuName_ string, Parent_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and description = ?", MenuName_, Parent_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndClass Get MenuTrees via MenuNameAndParentAndClass
func GetMenuTreesByMenuNameAndParentAndClass(offset int, limit int, MenuName_ string, Parent_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and class = ?", MenuName_, Parent_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndOptions Get MenuTrees via MenuNameAndParentAndOptions
func GetMenuTreesByMenuNameAndParentAndOptions(offset int, limit int, MenuName_ string, Parent_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and options = ?", MenuName_, Parent_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndProvider Get MenuTrees via MenuNameAndParentAndProvider
func GetMenuTreesByMenuNameAndParentAndProvider(offset int, limit int, MenuName_ string, Parent_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and provider = ?", MenuName_, Parent_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndEnabled Get MenuTrees via MenuNameAndParentAndEnabled
func GetMenuTreesByMenuNameAndParentAndEnabled(offset int, limit int, MenuName_ string, Parent_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and enabled = ?", MenuName_, Parent_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndDiscovered Get MenuTrees via MenuNameAndParentAndDiscovered
func GetMenuTreesByMenuNameAndParentAndDiscovered(offset int, limit int, MenuName_ string, Parent_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and discovered = ?", MenuName_, Parent_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndExpanded Get MenuTrees via MenuNameAndParentAndExpanded
func GetMenuTreesByMenuNameAndParentAndExpanded(offset int, limit int, MenuName_ string, Parent_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and expanded = ?", MenuName_, Parent_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndWeight Get MenuTrees via MenuNameAndParentAndWeight
func GetMenuTreesByMenuNameAndParentAndWeight(offset int, limit int, MenuName_ string, Parent_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and weight = ?", MenuName_, Parent_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndMetadata Get MenuTrees via MenuNameAndParentAndMetadata
func GetMenuTreesByMenuNameAndParentAndMetadata(offset int, limit int, MenuName_ string, Parent_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and metadata = ?", MenuName_, Parent_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndHasChildren Get MenuTrees via MenuNameAndParentAndHasChildren
func GetMenuTreesByMenuNameAndParentAndHasChildren(offset int, limit int, MenuName_ string, Parent_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and has_children = ?", MenuName_, Parent_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndDepth Get MenuTrees via MenuNameAndParentAndDepth
func GetMenuTreesByMenuNameAndParentAndDepth(offset int, limit int, MenuName_ string, Parent_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and depth = ?", MenuName_, Parent_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndP1 Get MenuTrees via MenuNameAndParentAndP1
func GetMenuTreesByMenuNameAndParentAndP1(offset int, limit int, MenuName_ string, Parent_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and p1 = ?", MenuName_, Parent_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndP2 Get MenuTrees via MenuNameAndParentAndP2
func GetMenuTreesByMenuNameAndParentAndP2(offset int, limit int, MenuName_ string, Parent_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and p2 = ?", MenuName_, Parent_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndP3 Get MenuTrees via MenuNameAndParentAndP3
func GetMenuTreesByMenuNameAndParentAndP3(offset int, limit int, MenuName_ string, Parent_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and p3 = ?", MenuName_, Parent_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndP4 Get MenuTrees via MenuNameAndParentAndP4
func GetMenuTreesByMenuNameAndParentAndP4(offset int, limit int, MenuName_ string, Parent_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and p4 = ?", MenuName_, Parent_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndP5 Get MenuTrees via MenuNameAndParentAndP5
func GetMenuTreesByMenuNameAndParentAndP5(offset int, limit int, MenuName_ string, Parent_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and p5 = ?", MenuName_, Parent_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndP6 Get MenuTrees via MenuNameAndParentAndP6
func GetMenuTreesByMenuNameAndParentAndP6(offset int, limit int, MenuName_ string, Parent_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and p6 = ?", MenuName_, Parent_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndP7 Get MenuTrees via MenuNameAndParentAndP7
func GetMenuTreesByMenuNameAndParentAndP7(offset int, limit int, MenuName_ string, Parent_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and p7 = ?", MenuName_, Parent_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndP8 Get MenuTrees via MenuNameAndParentAndP8
func GetMenuTreesByMenuNameAndParentAndP8(offset int, limit int, MenuName_ string, Parent_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and p8 = ?", MenuName_, Parent_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndP9 Get MenuTrees via MenuNameAndParentAndP9
func GetMenuTreesByMenuNameAndParentAndP9(offset int, limit int, MenuName_ string, Parent_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and p9 = ?", MenuName_, Parent_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParentAndFormClass Get MenuTrees via MenuNameAndParentAndFormClass
func GetMenuTreesByMenuNameAndParentAndFormClass(offset int, limit int, MenuName_ string, Parent_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ? and form_class = ?", MenuName_, Parent_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndRouteParamKey Get MenuTrees via MenuNameAndRouteNameAndRouteParamKey
func GetMenuTreesByMenuNameAndRouteNameAndRouteParamKey(offset int, limit int, MenuName_ string, RouteName_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and route_param_key = ?", MenuName_, RouteName_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndRouteParameters Get MenuTrees via MenuNameAndRouteNameAndRouteParameters
func GetMenuTreesByMenuNameAndRouteNameAndRouteParameters(offset int, limit int, MenuName_ string, RouteName_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and route_parameters = ?", MenuName_, RouteName_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndUrl Get MenuTrees via MenuNameAndRouteNameAndUrl
func GetMenuTreesByMenuNameAndRouteNameAndUrl(offset int, limit int, MenuName_ string, RouteName_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and url = ?", MenuName_, RouteName_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndTitle Get MenuTrees via MenuNameAndRouteNameAndTitle
func GetMenuTreesByMenuNameAndRouteNameAndTitle(offset int, limit int, MenuName_ string, RouteName_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and title = ?", MenuName_, RouteName_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndDescription Get MenuTrees via MenuNameAndRouteNameAndDescription
func GetMenuTreesByMenuNameAndRouteNameAndDescription(offset int, limit int, MenuName_ string, RouteName_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and description = ?", MenuName_, RouteName_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndClass Get MenuTrees via MenuNameAndRouteNameAndClass
func GetMenuTreesByMenuNameAndRouteNameAndClass(offset int, limit int, MenuName_ string, RouteName_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and class = ?", MenuName_, RouteName_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndOptions Get MenuTrees via MenuNameAndRouteNameAndOptions
func GetMenuTreesByMenuNameAndRouteNameAndOptions(offset int, limit int, MenuName_ string, RouteName_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and options = ?", MenuName_, RouteName_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndProvider Get MenuTrees via MenuNameAndRouteNameAndProvider
func GetMenuTreesByMenuNameAndRouteNameAndProvider(offset int, limit int, MenuName_ string, RouteName_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and provider = ?", MenuName_, RouteName_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndEnabled Get MenuTrees via MenuNameAndRouteNameAndEnabled
func GetMenuTreesByMenuNameAndRouteNameAndEnabled(offset int, limit int, MenuName_ string, RouteName_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and enabled = ?", MenuName_, RouteName_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndDiscovered Get MenuTrees via MenuNameAndRouteNameAndDiscovered
func GetMenuTreesByMenuNameAndRouteNameAndDiscovered(offset int, limit int, MenuName_ string, RouteName_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and discovered = ?", MenuName_, RouteName_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndExpanded Get MenuTrees via MenuNameAndRouteNameAndExpanded
func GetMenuTreesByMenuNameAndRouteNameAndExpanded(offset int, limit int, MenuName_ string, RouteName_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and expanded = ?", MenuName_, RouteName_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndWeight Get MenuTrees via MenuNameAndRouteNameAndWeight
func GetMenuTreesByMenuNameAndRouteNameAndWeight(offset int, limit int, MenuName_ string, RouteName_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and weight = ?", MenuName_, RouteName_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndMetadata Get MenuTrees via MenuNameAndRouteNameAndMetadata
func GetMenuTreesByMenuNameAndRouteNameAndMetadata(offset int, limit int, MenuName_ string, RouteName_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and metadata = ?", MenuName_, RouteName_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndHasChildren Get MenuTrees via MenuNameAndRouteNameAndHasChildren
func GetMenuTreesByMenuNameAndRouteNameAndHasChildren(offset int, limit int, MenuName_ string, RouteName_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and has_children = ?", MenuName_, RouteName_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndDepth Get MenuTrees via MenuNameAndRouteNameAndDepth
func GetMenuTreesByMenuNameAndRouteNameAndDepth(offset int, limit int, MenuName_ string, RouteName_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and depth = ?", MenuName_, RouteName_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndP1 Get MenuTrees via MenuNameAndRouteNameAndP1
func GetMenuTreesByMenuNameAndRouteNameAndP1(offset int, limit int, MenuName_ string, RouteName_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and p1 = ?", MenuName_, RouteName_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndP2 Get MenuTrees via MenuNameAndRouteNameAndP2
func GetMenuTreesByMenuNameAndRouteNameAndP2(offset int, limit int, MenuName_ string, RouteName_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and p2 = ?", MenuName_, RouteName_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndP3 Get MenuTrees via MenuNameAndRouteNameAndP3
func GetMenuTreesByMenuNameAndRouteNameAndP3(offset int, limit int, MenuName_ string, RouteName_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and p3 = ?", MenuName_, RouteName_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndP4 Get MenuTrees via MenuNameAndRouteNameAndP4
func GetMenuTreesByMenuNameAndRouteNameAndP4(offset int, limit int, MenuName_ string, RouteName_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and p4 = ?", MenuName_, RouteName_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndP5 Get MenuTrees via MenuNameAndRouteNameAndP5
func GetMenuTreesByMenuNameAndRouteNameAndP5(offset int, limit int, MenuName_ string, RouteName_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and p5 = ?", MenuName_, RouteName_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndP6 Get MenuTrees via MenuNameAndRouteNameAndP6
func GetMenuTreesByMenuNameAndRouteNameAndP6(offset int, limit int, MenuName_ string, RouteName_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and p6 = ?", MenuName_, RouteName_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndP7 Get MenuTrees via MenuNameAndRouteNameAndP7
func GetMenuTreesByMenuNameAndRouteNameAndP7(offset int, limit int, MenuName_ string, RouteName_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and p7 = ?", MenuName_, RouteName_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndP8 Get MenuTrees via MenuNameAndRouteNameAndP8
func GetMenuTreesByMenuNameAndRouteNameAndP8(offset int, limit int, MenuName_ string, RouteName_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and p8 = ?", MenuName_, RouteName_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndP9 Get MenuTrees via MenuNameAndRouteNameAndP9
func GetMenuTreesByMenuNameAndRouteNameAndP9(offset int, limit int, MenuName_ string, RouteName_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and p9 = ?", MenuName_, RouteName_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteNameAndFormClass Get MenuTrees via MenuNameAndRouteNameAndFormClass
func GetMenuTreesByMenuNameAndRouteNameAndFormClass(offset int, limit int, MenuName_ string, RouteName_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ? and form_class = ?", MenuName_, RouteName_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndRouteParameters Get MenuTrees via MenuNameAndRouteParamKeyAndRouteParameters
func GetMenuTreesByMenuNameAndRouteParamKeyAndRouteParameters(offset int, limit int, MenuName_ string, RouteParamKey_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and route_parameters = ?", MenuName_, RouteParamKey_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndUrl Get MenuTrees via MenuNameAndRouteParamKeyAndUrl
func GetMenuTreesByMenuNameAndRouteParamKeyAndUrl(offset int, limit int, MenuName_ string, RouteParamKey_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and url = ?", MenuName_, RouteParamKey_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndTitle Get MenuTrees via MenuNameAndRouteParamKeyAndTitle
func GetMenuTreesByMenuNameAndRouteParamKeyAndTitle(offset int, limit int, MenuName_ string, RouteParamKey_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and title = ?", MenuName_, RouteParamKey_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndDescription Get MenuTrees via MenuNameAndRouteParamKeyAndDescription
func GetMenuTreesByMenuNameAndRouteParamKeyAndDescription(offset int, limit int, MenuName_ string, RouteParamKey_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and description = ?", MenuName_, RouteParamKey_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndClass Get MenuTrees via MenuNameAndRouteParamKeyAndClass
func GetMenuTreesByMenuNameAndRouteParamKeyAndClass(offset int, limit int, MenuName_ string, RouteParamKey_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and class = ?", MenuName_, RouteParamKey_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndOptions Get MenuTrees via MenuNameAndRouteParamKeyAndOptions
func GetMenuTreesByMenuNameAndRouteParamKeyAndOptions(offset int, limit int, MenuName_ string, RouteParamKey_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and options = ?", MenuName_, RouteParamKey_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndProvider Get MenuTrees via MenuNameAndRouteParamKeyAndProvider
func GetMenuTreesByMenuNameAndRouteParamKeyAndProvider(offset int, limit int, MenuName_ string, RouteParamKey_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and provider = ?", MenuName_, RouteParamKey_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndEnabled Get MenuTrees via MenuNameAndRouteParamKeyAndEnabled
func GetMenuTreesByMenuNameAndRouteParamKeyAndEnabled(offset int, limit int, MenuName_ string, RouteParamKey_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and enabled = ?", MenuName_, RouteParamKey_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndDiscovered Get MenuTrees via MenuNameAndRouteParamKeyAndDiscovered
func GetMenuTreesByMenuNameAndRouteParamKeyAndDiscovered(offset int, limit int, MenuName_ string, RouteParamKey_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and discovered = ?", MenuName_, RouteParamKey_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndExpanded Get MenuTrees via MenuNameAndRouteParamKeyAndExpanded
func GetMenuTreesByMenuNameAndRouteParamKeyAndExpanded(offset int, limit int, MenuName_ string, RouteParamKey_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and expanded = ?", MenuName_, RouteParamKey_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndWeight Get MenuTrees via MenuNameAndRouteParamKeyAndWeight
func GetMenuTreesByMenuNameAndRouteParamKeyAndWeight(offset int, limit int, MenuName_ string, RouteParamKey_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and weight = ?", MenuName_, RouteParamKey_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndMetadata Get MenuTrees via MenuNameAndRouteParamKeyAndMetadata
func GetMenuTreesByMenuNameAndRouteParamKeyAndMetadata(offset int, limit int, MenuName_ string, RouteParamKey_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and metadata = ?", MenuName_, RouteParamKey_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndHasChildren Get MenuTrees via MenuNameAndRouteParamKeyAndHasChildren
func GetMenuTreesByMenuNameAndRouteParamKeyAndHasChildren(offset int, limit int, MenuName_ string, RouteParamKey_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and has_children = ?", MenuName_, RouteParamKey_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndDepth Get MenuTrees via MenuNameAndRouteParamKeyAndDepth
func GetMenuTreesByMenuNameAndRouteParamKeyAndDepth(offset int, limit int, MenuName_ string, RouteParamKey_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and depth = ?", MenuName_, RouteParamKey_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndP1 Get MenuTrees via MenuNameAndRouteParamKeyAndP1
func GetMenuTreesByMenuNameAndRouteParamKeyAndP1(offset int, limit int, MenuName_ string, RouteParamKey_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and p1 = ?", MenuName_, RouteParamKey_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndP2 Get MenuTrees via MenuNameAndRouteParamKeyAndP2
func GetMenuTreesByMenuNameAndRouteParamKeyAndP2(offset int, limit int, MenuName_ string, RouteParamKey_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and p2 = ?", MenuName_, RouteParamKey_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndP3 Get MenuTrees via MenuNameAndRouteParamKeyAndP3
func GetMenuTreesByMenuNameAndRouteParamKeyAndP3(offset int, limit int, MenuName_ string, RouteParamKey_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and p3 = ?", MenuName_, RouteParamKey_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndP4 Get MenuTrees via MenuNameAndRouteParamKeyAndP4
func GetMenuTreesByMenuNameAndRouteParamKeyAndP4(offset int, limit int, MenuName_ string, RouteParamKey_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and p4 = ?", MenuName_, RouteParamKey_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndP5 Get MenuTrees via MenuNameAndRouteParamKeyAndP5
func GetMenuTreesByMenuNameAndRouteParamKeyAndP5(offset int, limit int, MenuName_ string, RouteParamKey_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and p5 = ?", MenuName_, RouteParamKey_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndP6 Get MenuTrees via MenuNameAndRouteParamKeyAndP6
func GetMenuTreesByMenuNameAndRouteParamKeyAndP6(offset int, limit int, MenuName_ string, RouteParamKey_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and p6 = ?", MenuName_, RouteParamKey_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndP7 Get MenuTrees via MenuNameAndRouteParamKeyAndP7
func GetMenuTreesByMenuNameAndRouteParamKeyAndP7(offset int, limit int, MenuName_ string, RouteParamKey_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and p7 = ?", MenuName_, RouteParamKey_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndP8 Get MenuTrees via MenuNameAndRouteParamKeyAndP8
func GetMenuTreesByMenuNameAndRouteParamKeyAndP8(offset int, limit int, MenuName_ string, RouteParamKey_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and p8 = ?", MenuName_, RouteParamKey_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndP9 Get MenuTrees via MenuNameAndRouteParamKeyAndP9
func GetMenuTreesByMenuNameAndRouteParamKeyAndP9(offset int, limit int, MenuName_ string, RouteParamKey_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and p9 = ?", MenuName_, RouteParamKey_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKeyAndFormClass Get MenuTrees via MenuNameAndRouteParamKeyAndFormClass
func GetMenuTreesByMenuNameAndRouteParamKeyAndFormClass(offset int, limit int, MenuName_ string, RouteParamKey_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ? and form_class = ?", MenuName_, RouteParamKey_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndUrl Get MenuTrees via MenuNameAndRouteParametersAndUrl
func GetMenuTreesByMenuNameAndRouteParametersAndUrl(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and url = ?", MenuName_, RouteParameters_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndTitle Get MenuTrees via MenuNameAndRouteParametersAndTitle
func GetMenuTreesByMenuNameAndRouteParametersAndTitle(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and title = ?", MenuName_, RouteParameters_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndDescription Get MenuTrees via MenuNameAndRouteParametersAndDescription
func GetMenuTreesByMenuNameAndRouteParametersAndDescription(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and description = ?", MenuName_, RouteParameters_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndClass Get MenuTrees via MenuNameAndRouteParametersAndClass
func GetMenuTreesByMenuNameAndRouteParametersAndClass(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and class = ?", MenuName_, RouteParameters_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndOptions Get MenuTrees via MenuNameAndRouteParametersAndOptions
func GetMenuTreesByMenuNameAndRouteParametersAndOptions(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and options = ?", MenuName_, RouteParameters_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndProvider Get MenuTrees via MenuNameAndRouteParametersAndProvider
func GetMenuTreesByMenuNameAndRouteParametersAndProvider(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and provider = ?", MenuName_, RouteParameters_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndEnabled Get MenuTrees via MenuNameAndRouteParametersAndEnabled
func GetMenuTreesByMenuNameAndRouteParametersAndEnabled(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and enabled = ?", MenuName_, RouteParameters_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndDiscovered Get MenuTrees via MenuNameAndRouteParametersAndDiscovered
func GetMenuTreesByMenuNameAndRouteParametersAndDiscovered(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and discovered = ?", MenuName_, RouteParameters_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndExpanded Get MenuTrees via MenuNameAndRouteParametersAndExpanded
func GetMenuTreesByMenuNameAndRouteParametersAndExpanded(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and expanded = ?", MenuName_, RouteParameters_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndWeight Get MenuTrees via MenuNameAndRouteParametersAndWeight
func GetMenuTreesByMenuNameAndRouteParametersAndWeight(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and weight = ?", MenuName_, RouteParameters_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndMetadata Get MenuTrees via MenuNameAndRouteParametersAndMetadata
func GetMenuTreesByMenuNameAndRouteParametersAndMetadata(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and metadata = ?", MenuName_, RouteParameters_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndHasChildren Get MenuTrees via MenuNameAndRouteParametersAndHasChildren
func GetMenuTreesByMenuNameAndRouteParametersAndHasChildren(offset int, limit int, MenuName_ string, RouteParameters_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and has_children = ?", MenuName_, RouteParameters_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndDepth Get MenuTrees via MenuNameAndRouteParametersAndDepth
func GetMenuTreesByMenuNameAndRouteParametersAndDepth(offset int, limit int, MenuName_ string, RouteParameters_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and depth = ?", MenuName_, RouteParameters_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndP1 Get MenuTrees via MenuNameAndRouteParametersAndP1
func GetMenuTreesByMenuNameAndRouteParametersAndP1(offset int, limit int, MenuName_ string, RouteParameters_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and p1 = ?", MenuName_, RouteParameters_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndP2 Get MenuTrees via MenuNameAndRouteParametersAndP2
func GetMenuTreesByMenuNameAndRouteParametersAndP2(offset int, limit int, MenuName_ string, RouteParameters_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and p2 = ?", MenuName_, RouteParameters_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndP3 Get MenuTrees via MenuNameAndRouteParametersAndP3
func GetMenuTreesByMenuNameAndRouteParametersAndP3(offset int, limit int, MenuName_ string, RouteParameters_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and p3 = ?", MenuName_, RouteParameters_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndP4 Get MenuTrees via MenuNameAndRouteParametersAndP4
func GetMenuTreesByMenuNameAndRouteParametersAndP4(offset int, limit int, MenuName_ string, RouteParameters_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and p4 = ?", MenuName_, RouteParameters_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndP5 Get MenuTrees via MenuNameAndRouteParametersAndP5
func GetMenuTreesByMenuNameAndRouteParametersAndP5(offset int, limit int, MenuName_ string, RouteParameters_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and p5 = ?", MenuName_, RouteParameters_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndP6 Get MenuTrees via MenuNameAndRouteParametersAndP6
func GetMenuTreesByMenuNameAndRouteParametersAndP6(offset int, limit int, MenuName_ string, RouteParameters_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and p6 = ?", MenuName_, RouteParameters_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndP7 Get MenuTrees via MenuNameAndRouteParametersAndP7
func GetMenuTreesByMenuNameAndRouteParametersAndP7(offset int, limit int, MenuName_ string, RouteParameters_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and p7 = ?", MenuName_, RouteParameters_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndP8 Get MenuTrees via MenuNameAndRouteParametersAndP8
func GetMenuTreesByMenuNameAndRouteParametersAndP8(offset int, limit int, MenuName_ string, RouteParameters_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and p8 = ?", MenuName_, RouteParameters_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndP9 Get MenuTrees via MenuNameAndRouteParametersAndP9
func GetMenuTreesByMenuNameAndRouteParametersAndP9(offset int, limit int, MenuName_ string, RouteParameters_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and p9 = ?", MenuName_, RouteParameters_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParametersAndFormClass Get MenuTrees via MenuNameAndRouteParametersAndFormClass
func GetMenuTreesByMenuNameAndRouteParametersAndFormClass(offset int, limit int, MenuName_ string, RouteParameters_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ? and form_class = ?", MenuName_, RouteParameters_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndTitle Get MenuTrees via MenuNameAndUrlAndTitle
func GetMenuTreesByMenuNameAndUrlAndTitle(offset int, limit int, MenuName_ string, Url_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and title = ?", MenuName_, Url_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndDescription Get MenuTrees via MenuNameAndUrlAndDescription
func GetMenuTreesByMenuNameAndUrlAndDescription(offset int, limit int, MenuName_ string, Url_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and description = ?", MenuName_, Url_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndClass Get MenuTrees via MenuNameAndUrlAndClass
func GetMenuTreesByMenuNameAndUrlAndClass(offset int, limit int, MenuName_ string, Url_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and class = ?", MenuName_, Url_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndOptions Get MenuTrees via MenuNameAndUrlAndOptions
func GetMenuTreesByMenuNameAndUrlAndOptions(offset int, limit int, MenuName_ string, Url_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and options = ?", MenuName_, Url_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndProvider Get MenuTrees via MenuNameAndUrlAndProvider
func GetMenuTreesByMenuNameAndUrlAndProvider(offset int, limit int, MenuName_ string, Url_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and provider = ?", MenuName_, Url_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndEnabled Get MenuTrees via MenuNameAndUrlAndEnabled
func GetMenuTreesByMenuNameAndUrlAndEnabled(offset int, limit int, MenuName_ string, Url_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and enabled = ?", MenuName_, Url_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndDiscovered Get MenuTrees via MenuNameAndUrlAndDiscovered
func GetMenuTreesByMenuNameAndUrlAndDiscovered(offset int, limit int, MenuName_ string, Url_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and discovered = ?", MenuName_, Url_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndExpanded Get MenuTrees via MenuNameAndUrlAndExpanded
func GetMenuTreesByMenuNameAndUrlAndExpanded(offset int, limit int, MenuName_ string, Url_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and expanded = ?", MenuName_, Url_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndWeight Get MenuTrees via MenuNameAndUrlAndWeight
func GetMenuTreesByMenuNameAndUrlAndWeight(offset int, limit int, MenuName_ string, Url_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and weight = ?", MenuName_, Url_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndMetadata Get MenuTrees via MenuNameAndUrlAndMetadata
func GetMenuTreesByMenuNameAndUrlAndMetadata(offset int, limit int, MenuName_ string, Url_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and metadata = ?", MenuName_, Url_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndHasChildren Get MenuTrees via MenuNameAndUrlAndHasChildren
func GetMenuTreesByMenuNameAndUrlAndHasChildren(offset int, limit int, MenuName_ string, Url_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and has_children = ?", MenuName_, Url_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndDepth Get MenuTrees via MenuNameAndUrlAndDepth
func GetMenuTreesByMenuNameAndUrlAndDepth(offset int, limit int, MenuName_ string, Url_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and depth = ?", MenuName_, Url_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndP1 Get MenuTrees via MenuNameAndUrlAndP1
func GetMenuTreesByMenuNameAndUrlAndP1(offset int, limit int, MenuName_ string, Url_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and p1 = ?", MenuName_, Url_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndP2 Get MenuTrees via MenuNameAndUrlAndP2
func GetMenuTreesByMenuNameAndUrlAndP2(offset int, limit int, MenuName_ string, Url_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and p2 = ?", MenuName_, Url_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndP3 Get MenuTrees via MenuNameAndUrlAndP3
func GetMenuTreesByMenuNameAndUrlAndP3(offset int, limit int, MenuName_ string, Url_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and p3 = ?", MenuName_, Url_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndP4 Get MenuTrees via MenuNameAndUrlAndP4
func GetMenuTreesByMenuNameAndUrlAndP4(offset int, limit int, MenuName_ string, Url_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and p4 = ?", MenuName_, Url_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndP5 Get MenuTrees via MenuNameAndUrlAndP5
func GetMenuTreesByMenuNameAndUrlAndP5(offset int, limit int, MenuName_ string, Url_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and p5 = ?", MenuName_, Url_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndP6 Get MenuTrees via MenuNameAndUrlAndP6
func GetMenuTreesByMenuNameAndUrlAndP6(offset int, limit int, MenuName_ string, Url_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and p6 = ?", MenuName_, Url_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndP7 Get MenuTrees via MenuNameAndUrlAndP7
func GetMenuTreesByMenuNameAndUrlAndP7(offset int, limit int, MenuName_ string, Url_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and p7 = ?", MenuName_, Url_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndP8 Get MenuTrees via MenuNameAndUrlAndP8
func GetMenuTreesByMenuNameAndUrlAndP8(offset int, limit int, MenuName_ string, Url_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and p8 = ?", MenuName_, Url_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndP9 Get MenuTrees via MenuNameAndUrlAndP9
func GetMenuTreesByMenuNameAndUrlAndP9(offset int, limit int, MenuName_ string, Url_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and p9 = ?", MenuName_, Url_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrlAndFormClass Get MenuTrees via MenuNameAndUrlAndFormClass
func GetMenuTreesByMenuNameAndUrlAndFormClass(offset int, limit int, MenuName_ string, Url_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ? and form_class = ?", MenuName_, Url_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndDescription Get MenuTrees via MenuNameAndTitleAndDescription
func GetMenuTreesByMenuNameAndTitleAndDescription(offset int, limit int, MenuName_ string, Title_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and description = ?", MenuName_, Title_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndClass Get MenuTrees via MenuNameAndTitleAndClass
func GetMenuTreesByMenuNameAndTitleAndClass(offset int, limit int, MenuName_ string, Title_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and class = ?", MenuName_, Title_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndOptions Get MenuTrees via MenuNameAndTitleAndOptions
func GetMenuTreesByMenuNameAndTitleAndOptions(offset int, limit int, MenuName_ string, Title_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and options = ?", MenuName_, Title_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndProvider Get MenuTrees via MenuNameAndTitleAndProvider
func GetMenuTreesByMenuNameAndTitleAndProvider(offset int, limit int, MenuName_ string, Title_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and provider = ?", MenuName_, Title_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndEnabled Get MenuTrees via MenuNameAndTitleAndEnabled
func GetMenuTreesByMenuNameAndTitleAndEnabled(offset int, limit int, MenuName_ string, Title_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and enabled = ?", MenuName_, Title_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndDiscovered Get MenuTrees via MenuNameAndTitleAndDiscovered
func GetMenuTreesByMenuNameAndTitleAndDiscovered(offset int, limit int, MenuName_ string, Title_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and discovered = ?", MenuName_, Title_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndExpanded Get MenuTrees via MenuNameAndTitleAndExpanded
func GetMenuTreesByMenuNameAndTitleAndExpanded(offset int, limit int, MenuName_ string, Title_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and expanded = ?", MenuName_, Title_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndWeight Get MenuTrees via MenuNameAndTitleAndWeight
func GetMenuTreesByMenuNameAndTitleAndWeight(offset int, limit int, MenuName_ string, Title_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and weight = ?", MenuName_, Title_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndMetadata Get MenuTrees via MenuNameAndTitleAndMetadata
func GetMenuTreesByMenuNameAndTitleAndMetadata(offset int, limit int, MenuName_ string, Title_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and metadata = ?", MenuName_, Title_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndHasChildren Get MenuTrees via MenuNameAndTitleAndHasChildren
func GetMenuTreesByMenuNameAndTitleAndHasChildren(offset int, limit int, MenuName_ string, Title_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and has_children = ?", MenuName_, Title_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndDepth Get MenuTrees via MenuNameAndTitleAndDepth
func GetMenuTreesByMenuNameAndTitleAndDepth(offset int, limit int, MenuName_ string, Title_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and depth = ?", MenuName_, Title_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndP1 Get MenuTrees via MenuNameAndTitleAndP1
func GetMenuTreesByMenuNameAndTitleAndP1(offset int, limit int, MenuName_ string, Title_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and p1 = ?", MenuName_, Title_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndP2 Get MenuTrees via MenuNameAndTitleAndP2
func GetMenuTreesByMenuNameAndTitleAndP2(offset int, limit int, MenuName_ string, Title_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and p2 = ?", MenuName_, Title_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndP3 Get MenuTrees via MenuNameAndTitleAndP3
func GetMenuTreesByMenuNameAndTitleAndP3(offset int, limit int, MenuName_ string, Title_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and p3 = ?", MenuName_, Title_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndP4 Get MenuTrees via MenuNameAndTitleAndP4
func GetMenuTreesByMenuNameAndTitleAndP4(offset int, limit int, MenuName_ string, Title_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and p4 = ?", MenuName_, Title_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndP5 Get MenuTrees via MenuNameAndTitleAndP5
func GetMenuTreesByMenuNameAndTitleAndP5(offset int, limit int, MenuName_ string, Title_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and p5 = ?", MenuName_, Title_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndP6 Get MenuTrees via MenuNameAndTitleAndP6
func GetMenuTreesByMenuNameAndTitleAndP6(offset int, limit int, MenuName_ string, Title_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and p6 = ?", MenuName_, Title_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndP7 Get MenuTrees via MenuNameAndTitleAndP7
func GetMenuTreesByMenuNameAndTitleAndP7(offset int, limit int, MenuName_ string, Title_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and p7 = ?", MenuName_, Title_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndP8 Get MenuTrees via MenuNameAndTitleAndP8
func GetMenuTreesByMenuNameAndTitleAndP8(offset int, limit int, MenuName_ string, Title_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and p8 = ?", MenuName_, Title_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndP9 Get MenuTrees via MenuNameAndTitleAndP9
func GetMenuTreesByMenuNameAndTitleAndP9(offset int, limit int, MenuName_ string, Title_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and p9 = ?", MenuName_, Title_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitleAndFormClass Get MenuTrees via MenuNameAndTitleAndFormClass
func GetMenuTreesByMenuNameAndTitleAndFormClass(offset int, limit int, MenuName_ string, Title_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ? and form_class = ?", MenuName_, Title_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndClass Get MenuTrees via MenuNameAndDescriptionAndClass
func GetMenuTreesByMenuNameAndDescriptionAndClass(offset int, limit int, MenuName_ string, Description_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and class = ?", MenuName_, Description_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndOptions Get MenuTrees via MenuNameAndDescriptionAndOptions
func GetMenuTreesByMenuNameAndDescriptionAndOptions(offset int, limit int, MenuName_ string, Description_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and options = ?", MenuName_, Description_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndProvider Get MenuTrees via MenuNameAndDescriptionAndProvider
func GetMenuTreesByMenuNameAndDescriptionAndProvider(offset int, limit int, MenuName_ string, Description_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and provider = ?", MenuName_, Description_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndEnabled Get MenuTrees via MenuNameAndDescriptionAndEnabled
func GetMenuTreesByMenuNameAndDescriptionAndEnabled(offset int, limit int, MenuName_ string, Description_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and enabled = ?", MenuName_, Description_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndDiscovered Get MenuTrees via MenuNameAndDescriptionAndDiscovered
func GetMenuTreesByMenuNameAndDescriptionAndDiscovered(offset int, limit int, MenuName_ string, Description_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and discovered = ?", MenuName_, Description_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndExpanded Get MenuTrees via MenuNameAndDescriptionAndExpanded
func GetMenuTreesByMenuNameAndDescriptionAndExpanded(offset int, limit int, MenuName_ string, Description_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and expanded = ?", MenuName_, Description_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndWeight Get MenuTrees via MenuNameAndDescriptionAndWeight
func GetMenuTreesByMenuNameAndDescriptionAndWeight(offset int, limit int, MenuName_ string, Description_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and weight = ?", MenuName_, Description_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndMetadata Get MenuTrees via MenuNameAndDescriptionAndMetadata
func GetMenuTreesByMenuNameAndDescriptionAndMetadata(offset int, limit int, MenuName_ string, Description_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and metadata = ?", MenuName_, Description_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndHasChildren Get MenuTrees via MenuNameAndDescriptionAndHasChildren
func GetMenuTreesByMenuNameAndDescriptionAndHasChildren(offset int, limit int, MenuName_ string, Description_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and has_children = ?", MenuName_, Description_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndDepth Get MenuTrees via MenuNameAndDescriptionAndDepth
func GetMenuTreesByMenuNameAndDescriptionAndDepth(offset int, limit int, MenuName_ string, Description_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and depth = ?", MenuName_, Description_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndP1 Get MenuTrees via MenuNameAndDescriptionAndP1
func GetMenuTreesByMenuNameAndDescriptionAndP1(offset int, limit int, MenuName_ string, Description_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and p1 = ?", MenuName_, Description_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndP2 Get MenuTrees via MenuNameAndDescriptionAndP2
func GetMenuTreesByMenuNameAndDescriptionAndP2(offset int, limit int, MenuName_ string, Description_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and p2 = ?", MenuName_, Description_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndP3 Get MenuTrees via MenuNameAndDescriptionAndP3
func GetMenuTreesByMenuNameAndDescriptionAndP3(offset int, limit int, MenuName_ string, Description_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and p3 = ?", MenuName_, Description_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndP4 Get MenuTrees via MenuNameAndDescriptionAndP4
func GetMenuTreesByMenuNameAndDescriptionAndP4(offset int, limit int, MenuName_ string, Description_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and p4 = ?", MenuName_, Description_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndP5 Get MenuTrees via MenuNameAndDescriptionAndP5
func GetMenuTreesByMenuNameAndDescriptionAndP5(offset int, limit int, MenuName_ string, Description_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and p5 = ?", MenuName_, Description_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndP6 Get MenuTrees via MenuNameAndDescriptionAndP6
func GetMenuTreesByMenuNameAndDescriptionAndP6(offset int, limit int, MenuName_ string, Description_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and p6 = ?", MenuName_, Description_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndP7 Get MenuTrees via MenuNameAndDescriptionAndP7
func GetMenuTreesByMenuNameAndDescriptionAndP7(offset int, limit int, MenuName_ string, Description_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and p7 = ?", MenuName_, Description_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndP8 Get MenuTrees via MenuNameAndDescriptionAndP8
func GetMenuTreesByMenuNameAndDescriptionAndP8(offset int, limit int, MenuName_ string, Description_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and p8 = ?", MenuName_, Description_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndP9 Get MenuTrees via MenuNameAndDescriptionAndP9
func GetMenuTreesByMenuNameAndDescriptionAndP9(offset int, limit int, MenuName_ string, Description_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and p9 = ?", MenuName_, Description_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescriptionAndFormClass Get MenuTrees via MenuNameAndDescriptionAndFormClass
func GetMenuTreesByMenuNameAndDescriptionAndFormClass(offset int, limit int, MenuName_ string, Description_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ? and form_class = ?", MenuName_, Description_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndOptions Get MenuTrees via MenuNameAndClassAndOptions
func GetMenuTreesByMenuNameAndClassAndOptions(offset int, limit int, MenuName_ string, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and options = ?", MenuName_, Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndProvider Get MenuTrees via MenuNameAndClassAndProvider
func GetMenuTreesByMenuNameAndClassAndProvider(offset int, limit int, MenuName_ string, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and provider = ?", MenuName_, Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndEnabled Get MenuTrees via MenuNameAndClassAndEnabled
func GetMenuTreesByMenuNameAndClassAndEnabled(offset int, limit int, MenuName_ string, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and enabled = ?", MenuName_, Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndDiscovered Get MenuTrees via MenuNameAndClassAndDiscovered
func GetMenuTreesByMenuNameAndClassAndDiscovered(offset int, limit int, MenuName_ string, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and discovered = ?", MenuName_, Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndExpanded Get MenuTrees via MenuNameAndClassAndExpanded
func GetMenuTreesByMenuNameAndClassAndExpanded(offset int, limit int, MenuName_ string, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and expanded = ?", MenuName_, Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndWeight Get MenuTrees via MenuNameAndClassAndWeight
func GetMenuTreesByMenuNameAndClassAndWeight(offset int, limit int, MenuName_ string, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and weight = ?", MenuName_, Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndMetadata Get MenuTrees via MenuNameAndClassAndMetadata
func GetMenuTreesByMenuNameAndClassAndMetadata(offset int, limit int, MenuName_ string, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and metadata = ?", MenuName_, Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndHasChildren Get MenuTrees via MenuNameAndClassAndHasChildren
func GetMenuTreesByMenuNameAndClassAndHasChildren(offset int, limit int, MenuName_ string, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and has_children = ?", MenuName_, Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndDepth Get MenuTrees via MenuNameAndClassAndDepth
func GetMenuTreesByMenuNameAndClassAndDepth(offset int, limit int, MenuName_ string, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and depth = ?", MenuName_, Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndP1 Get MenuTrees via MenuNameAndClassAndP1
func GetMenuTreesByMenuNameAndClassAndP1(offset int, limit int, MenuName_ string, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and p1 = ?", MenuName_, Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndP2 Get MenuTrees via MenuNameAndClassAndP2
func GetMenuTreesByMenuNameAndClassAndP2(offset int, limit int, MenuName_ string, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and p2 = ?", MenuName_, Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndP3 Get MenuTrees via MenuNameAndClassAndP3
func GetMenuTreesByMenuNameAndClassAndP3(offset int, limit int, MenuName_ string, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and p3 = ?", MenuName_, Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndP4 Get MenuTrees via MenuNameAndClassAndP4
func GetMenuTreesByMenuNameAndClassAndP4(offset int, limit int, MenuName_ string, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and p4 = ?", MenuName_, Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndP5 Get MenuTrees via MenuNameAndClassAndP5
func GetMenuTreesByMenuNameAndClassAndP5(offset int, limit int, MenuName_ string, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and p5 = ?", MenuName_, Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndP6 Get MenuTrees via MenuNameAndClassAndP6
func GetMenuTreesByMenuNameAndClassAndP6(offset int, limit int, MenuName_ string, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and p6 = ?", MenuName_, Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndP7 Get MenuTrees via MenuNameAndClassAndP7
func GetMenuTreesByMenuNameAndClassAndP7(offset int, limit int, MenuName_ string, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and p7 = ?", MenuName_, Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndP8 Get MenuTrees via MenuNameAndClassAndP8
func GetMenuTreesByMenuNameAndClassAndP8(offset int, limit int, MenuName_ string, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and p8 = ?", MenuName_, Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndP9 Get MenuTrees via MenuNameAndClassAndP9
func GetMenuTreesByMenuNameAndClassAndP9(offset int, limit int, MenuName_ string, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and p9 = ?", MenuName_, Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClassAndFormClass Get MenuTrees via MenuNameAndClassAndFormClass
func GetMenuTreesByMenuNameAndClassAndFormClass(offset int, limit int, MenuName_ string, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ? and form_class = ?", MenuName_, Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndProvider Get MenuTrees via MenuNameAndOptionsAndProvider
func GetMenuTreesByMenuNameAndOptionsAndProvider(offset int, limit int, MenuName_ string, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and provider = ?", MenuName_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndEnabled Get MenuTrees via MenuNameAndOptionsAndEnabled
func GetMenuTreesByMenuNameAndOptionsAndEnabled(offset int, limit int, MenuName_ string, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and enabled = ?", MenuName_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndDiscovered Get MenuTrees via MenuNameAndOptionsAndDiscovered
func GetMenuTreesByMenuNameAndOptionsAndDiscovered(offset int, limit int, MenuName_ string, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and discovered = ?", MenuName_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndExpanded Get MenuTrees via MenuNameAndOptionsAndExpanded
func GetMenuTreesByMenuNameAndOptionsAndExpanded(offset int, limit int, MenuName_ string, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and expanded = ?", MenuName_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndWeight Get MenuTrees via MenuNameAndOptionsAndWeight
func GetMenuTreesByMenuNameAndOptionsAndWeight(offset int, limit int, MenuName_ string, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and weight = ?", MenuName_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndMetadata Get MenuTrees via MenuNameAndOptionsAndMetadata
func GetMenuTreesByMenuNameAndOptionsAndMetadata(offset int, limit int, MenuName_ string, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and metadata = ?", MenuName_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndHasChildren Get MenuTrees via MenuNameAndOptionsAndHasChildren
func GetMenuTreesByMenuNameAndOptionsAndHasChildren(offset int, limit int, MenuName_ string, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and has_children = ?", MenuName_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndDepth Get MenuTrees via MenuNameAndOptionsAndDepth
func GetMenuTreesByMenuNameAndOptionsAndDepth(offset int, limit int, MenuName_ string, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and depth = ?", MenuName_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndP1 Get MenuTrees via MenuNameAndOptionsAndP1
func GetMenuTreesByMenuNameAndOptionsAndP1(offset int, limit int, MenuName_ string, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and p1 = ?", MenuName_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndP2 Get MenuTrees via MenuNameAndOptionsAndP2
func GetMenuTreesByMenuNameAndOptionsAndP2(offset int, limit int, MenuName_ string, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and p2 = ?", MenuName_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndP3 Get MenuTrees via MenuNameAndOptionsAndP3
func GetMenuTreesByMenuNameAndOptionsAndP3(offset int, limit int, MenuName_ string, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and p3 = ?", MenuName_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndP4 Get MenuTrees via MenuNameAndOptionsAndP4
func GetMenuTreesByMenuNameAndOptionsAndP4(offset int, limit int, MenuName_ string, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and p4 = ?", MenuName_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndP5 Get MenuTrees via MenuNameAndOptionsAndP5
func GetMenuTreesByMenuNameAndOptionsAndP5(offset int, limit int, MenuName_ string, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and p5 = ?", MenuName_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndP6 Get MenuTrees via MenuNameAndOptionsAndP6
func GetMenuTreesByMenuNameAndOptionsAndP6(offset int, limit int, MenuName_ string, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and p6 = ?", MenuName_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndP7 Get MenuTrees via MenuNameAndOptionsAndP7
func GetMenuTreesByMenuNameAndOptionsAndP7(offset int, limit int, MenuName_ string, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and p7 = ?", MenuName_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndP8 Get MenuTrees via MenuNameAndOptionsAndP8
func GetMenuTreesByMenuNameAndOptionsAndP8(offset int, limit int, MenuName_ string, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and p8 = ?", MenuName_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndP9 Get MenuTrees via MenuNameAndOptionsAndP9
func GetMenuTreesByMenuNameAndOptionsAndP9(offset int, limit int, MenuName_ string, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and p9 = ?", MenuName_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptionsAndFormClass Get MenuTrees via MenuNameAndOptionsAndFormClass
func GetMenuTreesByMenuNameAndOptionsAndFormClass(offset int, limit int, MenuName_ string, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ? and form_class = ?", MenuName_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndEnabled Get MenuTrees via MenuNameAndProviderAndEnabled
func GetMenuTreesByMenuNameAndProviderAndEnabled(offset int, limit int, MenuName_ string, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and enabled = ?", MenuName_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndDiscovered Get MenuTrees via MenuNameAndProviderAndDiscovered
func GetMenuTreesByMenuNameAndProviderAndDiscovered(offset int, limit int, MenuName_ string, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and discovered = ?", MenuName_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndExpanded Get MenuTrees via MenuNameAndProviderAndExpanded
func GetMenuTreesByMenuNameAndProviderAndExpanded(offset int, limit int, MenuName_ string, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and expanded = ?", MenuName_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndWeight Get MenuTrees via MenuNameAndProviderAndWeight
func GetMenuTreesByMenuNameAndProviderAndWeight(offset int, limit int, MenuName_ string, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and weight = ?", MenuName_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndMetadata Get MenuTrees via MenuNameAndProviderAndMetadata
func GetMenuTreesByMenuNameAndProviderAndMetadata(offset int, limit int, MenuName_ string, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and metadata = ?", MenuName_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndHasChildren Get MenuTrees via MenuNameAndProviderAndHasChildren
func GetMenuTreesByMenuNameAndProviderAndHasChildren(offset int, limit int, MenuName_ string, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and has_children = ?", MenuName_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndDepth Get MenuTrees via MenuNameAndProviderAndDepth
func GetMenuTreesByMenuNameAndProviderAndDepth(offset int, limit int, MenuName_ string, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and depth = ?", MenuName_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndP1 Get MenuTrees via MenuNameAndProviderAndP1
func GetMenuTreesByMenuNameAndProviderAndP1(offset int, limit int, MenuName_ string, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and p1 = ?", MenuName_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndP2 Get MenuTrees via MenuNameAndProviderAndP2
func GetMenuTreesByMenuNameAndProviderAndP2(offset int, limit int, MenuName_ string, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and p2 = ?", MenuName_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndP3 Get MenuTrees via MenuNameAndProviderAndP3
func GetMenuTreesByMenuNameAndProviderAndP3(offset int, limit int, MenuName_ string, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and p3 = ?", MenuName_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndP4 Get MenuTrees via MenuNameAndProviderAndP4
func GetMenuTreesByMenuNameAndProviderAndP4(offset int, limit int, MenuName_ string, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and p4 = ?", MenuName_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndP5 Get MenuTrees via MenuNameAndProviderAndP5
func GetMenuTreesByMenuNameAndProviderAndP5(offset int, limit int, MenuName_ string, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and p5 = ?", MenuName_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndP6 Get MenuTrees via MenuNameAndProviderAndP6
func GetMenuTreesByMenuNameAndProviderAndP6(offset int, limit int, MenuName_ string, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and p6 = ?", MenuName_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndP7 Get MenuTrees via MenuNameAndProviderAndP7
func GetMenuTreesByMenuNameAndProviderAndP7(offset int, limit int, MenuName_ string, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and p7 = ?", MenuName_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndP8 Get MenuTrees via MenuNameAndProviderAndP8
func GetMenuTreesByMenuNameAndProviderAndP8(offset int, limit int, MenuName_ string, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and p8 = ?", MenuName_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndP9 Get MenuTrees via MenuNameAndProviderAndP9
func GetMenuTreesByMenuNameAndProviderAndP9(offset int, limit int, MenuName_ string, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and p9 = ?", MenuName_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProviderAndFormClass Get MenuTrees via MenuNameAndProviderAndFormClass
func GetMenuTreesByMenuNameAndProviderAndFormClass(offset int, limit int, MenuName_ string, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ? and form_class = ?", MenuName_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndDiscovered Get MenuTrees via MenuNameAndEnabledAndDiscovered
func GetMenuTreesByMenuNameAndEnabledAndDiscovered(offset int, limit int, MenuName_ string, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and discovered = ?", MenuName_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndExpanded Get MenuTrees via MenuNameAndEnabledAndExpanded
func GetMenuTreesByMenuNameAndEnabledAndExpanded(offset int, limit int, MenuName_ string, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and expanded = ?", MenuName_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndWeight Get MenuTrees via MenuNameAndEnabledAndWeight
func GetMenuTreesByMenuNameAndEnabledAndWeight(offset int, limit int, MenuName_ string, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and weight = ?", MenuName_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndMetadata Get MenuTrees via MenuNameAndEnabledAndMetadata
func GetMenuTreesByMenuNameAndEnabledAndMetadata(offset int, limit int, MenuName_ string, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and metadata = ?", MenuName_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndHasChildren Get MenuTrees via MenuNameAndEnabledAndHasChildren
func GetMenuTreesByMenuNameAndEnabledAndHasChildren(offset int, limit int, MenuName_ string, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and has_children = ?", MenuName_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndDepth Get MenuTrees via MenuNameAndEnabledAndDepth
func GetMenuTreesByMenuNameAndEnabledAndDepth(offset int, limit int, MenuName_ string, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and depth = ?", MenuName_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndP1 Get MenuTrees via MenuNameAndEnabledAndP1
func GetMenuTreesByMenuNameAndEnabledAndP1(offset int, limit int, MenuName_ string, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and p1 = ?", MenuName_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndP2 Get MenuTrees via MenuNameAndEnabledAndP2
func GetMenuTreesByMenuNameAndEnabledAndP2(offset int, limit int, MenuName_ string, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and p2 = ?", MenuName_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndP3 Get MenuTrees via MenuNameAndEnabledAndP3
func GetMenuTreesByMenuNameAndEnabledAndP3(offset int, limit int, MenuName_ string, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and p3 = ?", MenuName_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndP4 Get MenuTrees via MenuNameAndEnabledAndP4
func GetMenuTreesByMenuNameAndEnabledAndP4(offset int, limit int, MenuName_ string, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and p4 = ?", MenuName_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndP5 Get MenuTrees via MenuNameAndEnabledAndP5
func GetMenuTreesByMenuNameAndEnabledAndP5(offset int, limit int, MenuName_ string, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and p5 = ?", MenuName_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndP6 Get MenuTrees via MenuNameAndEnabledAndP6
func GetMenuTreesByMenuNameAndEnabledAndP6(offset int, limit int, MenuName_ string, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and p6 = ?", MenuName_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndP7 Get MenuTrees via MenuNameAndEnabledAndP7
func GetMenuTreesByMenuNameAndEnabledAndP7(offset int, limit int, MenuName_ string, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and p7 = ?", MenuName_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndP8 Get MenuTrees via MenuNameAndEnabledAndP8
func GetMenuTreesByMenuNameAndEnabledAndP8(offset int, limit int, MenuName_ string, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and p8 = ?", MenuName_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndP9 Get MenuTrees via MenuNameAndEnabledAndP9
func GetMenuTreesByMenuNameAndEnabledAndP9(offset int, limit int, MenuName_ string, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and p9 = ?", MenuName_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabledAndFormClass Get MenuTrees via MenuNameAndEnabledAndFormClass
func GetMenuTreesByMenuNameAndEnabledAndFormClass(offset int, limit int, MenuName_ string, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ? and form_class = ?", MenuName_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndExpanded Get MenuTrees via MenuNameAndDiscoveredAndExpanded
func GetMenuTreesByMenuNameAndDiscoveredAndExpanded(offset int, limit int, MenuName_ string, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and expanded = ?", MenuName_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndWeight Get MenuTrees via MenuNameAndDiscoveredAndWeight
func GetMenuTreesByMenuNameAndDiscoveredAndWeight(offset int, limit int, MenuName_ string, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and weight = ?", MenuName_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndMetadata Get MenuTrees via MenuNameAndDiscoveredAndMetadata
func GetMenuTreesByMenuNameAndDiscoveredAndMetadata(offset int, limit int, MenuName_ string, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and metadata = ?", MenuName_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndHasChildren Get MenuTrees via MenuNameAndDiscoveredAndHasChildren
func GetMenuTreesByMenuNameAndDiscoveredAndHasChildren(offset int, limit int, MenuName_ string, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and has_children = ?", MenuName_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndDepth Get MenuTrees via MenuNameAndDiscoveredAndDepth
func GetMenuTreesByMenuNameAndDiscoveredAndDepth(offset int, limit int, MenuName_ string, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and depth = ?", MenuName_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndP1 Get MenuTrees via MenuNameAndDiscoveredAndP1
func GetMenuTreesByMenuNameAndDiscoveredAndP1(offset int, limit int, MenuName_ string, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and p1 = ?", MenuName_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndP2 Get MenuTrees via MenuNameAndDiscoveredAndP2
func GetMenuTreesByMenuNameAndDiscoveredAndP2(offset int, limit int, MenuName_ string, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and p2 = ?", MenuName_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndP3 Get MenuTrees via MenuNameAndDiscoveredAndP3
func GetMenuTreesByMenuNameAndDiscoveredAndP3(offset int, limit int, MenuName_ string, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and p3 = ?", MenuName_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndP4 Get MenuTrees via MenuNameAndDiscoveredAndP4
func GetMenuTreesByMenuNameAndDiscoveredAndP4(offset int, limit int, MenuName_ string, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and p4 = ?", MenuName_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndP5 Get MenuTrees via MenuNameAndDiscoveredAndP5
func GetMenuTreesByMenuNameAndDiscoveredAndP5(offset int, limit int, MenuName_ string, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and p5 = ?", MenuName_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndP6 Get MenuTrees via MenuNameAndDiscoveredAndP6
func GetMenuTreesByMenuNameAndDiscoveredAndP6(offset int, limit int, MenuName_ string, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and p6 = ?", MenuName_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndP7 Get MenuTrees via MenuNameAndDiscoveredAndP7
func GetMenuTreesByMenuNameAndDiscoveredAndP7(offset int, limit int, MenuName_ string, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and p7 = ?", MenuName_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndP8 Get MenuTrees via MenuNameAndDiscoveredAndP8
func GetMenuTreesByMenuNameAndDiscoveredAndP8(offset int, limit int, MenuName_ string, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and p8 = ?", MenuName_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndP9 Get MenuTrees via MenuNameAndDiscoveredAndP9
func GetMenuTreesByMenuNameAndDiscoveredAndP9(offset int, limit int, MenuName_ string, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and p9 = ?", MenuName_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscoveredAndFormClass Get MenuTrees via MenuNameAndDiscoveredAndFormClass
func GetMenuTreesByMenuNameAndDiscoveredAndFormClass(offset int, limit int, MenuName_ string, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ? and form_class = ?", MenuName_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndWeight Get MenuTrees via MenuNameAndExpandedAndWeight
func GetMenuTreesByMenuNameAndExpandedAndWeight(offset int, limit int, MenuName_ string, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and weight = ?", MenuName_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndMetadata Get MenuTrees via MenuNameAndExpandedAndMetadata
func GetMenuTreesByMenuNameAndExpandedAndMetadata(offset int, limit int, MenuName_ string, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and metadata = ?", MenuName_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndHasChildren Get MenuTrees via MenuNameAndExpandedAndHasChildren
func GetMenuTreesByMenuNameAndExpandedAndHasChildren(offset int, limit int, MenuName_ string, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and has_children = ?", MenuName_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndDepth Get MenuTrees via MenuNameAndExpandedAndDepth
func GetMenuTreesByMenuNameAndExpandedAndDepth(offset int, limit int, MenuName_ string, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and depth = ?", MenuName_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndP1 Get MenuTrees via MenuNameAndExpandedAndP1
func GetMenuTreesByMenuNameAndExpandedAndP1(offset int, limit int, MenuName_ string, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and p1 = ?", MenuName_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndP2 Get MenuTrees via MenuNameAndExpandedAndP2
func GetMenuTreesByMenuNameAndExpandedAndP2(offset int, limit int, MenuName_ string, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and p2 = ?", MenuName_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndP3 Get MenuTrees via MenuNameAndExpandedAndP3
func GetMenuTreesByMenuNameAndExpandedAndP3(offset int, limit int, MenuName_ string, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and p3 = ?", MenuName_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndP4 Get MenuTrees via MenuNameAndExpandedAndP4
func GetMenuTreesByMenuNameAndExpandedAndP4(offset int, limit int, MenuName_ string, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and p4 = ?", MenuName_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndP5 Get MenuTrees via MenuNameAndExpandedAndP5
func GetMenuTreesByMenuNameAndExpandedAndP5(offset int, limit int, MenuName_ string, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and p5 = ?", MenuName_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndP6 Get MenuTrees via MenuNameAndExpandedAndP6
func GetMenuTreesByMenuNameAndExpandedAndP6(offset int, limit int, MenuName_ string, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and p6 = ?", MenuName_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndP7 Get MenuTrees via MenuNameAndExpandedAndP7
func GetMenuTreesByMenuNameAndExpandedAndP7(offset int, limit int, MenuName_ string, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and p7 = ?", MenuName_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndP8 Get MenuTrees via MenuNameAndExpandedAndP8
func GetMenuTreesByMenuNameAndExpandedAndP8(offset int, limit int, MenuName_ string, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and p8 = ?", MenuName_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndP9 Get MenuTrees via MenuNameAndExpandedAndP9
func GetMenuTreesByMenuNameAndExpandedAndP9(offset int, limit int, MenuName_ string, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and p9 = ?", MenuName_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpandedAndFormClass Get MenuTrees via MenuNameAndExpandedAndFormClass
func GetMenuTreesByMenuNameAndExpandedAndFormClass(offset int, limit int, MenuName_ string, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ? and form_class = ?", MenuName_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndMetadata Get MenuTrees via MenuNameAndWeightAndMetadata
func GetMenuTreesByMenuNameAndWeightAndMetadata(offset int, limit int, MenuName_ string, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and metadata = ?", MenuName_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndHasChildren Get MenuTrees via MenuNameAndWeightAndHasChildren
func GetMenuTreesByMenuNameAndWeightAndHasChildren(offset int, limit int, MenuName_ string, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and has_children = ?", MenuName_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndDepth Get MenuTrees via MenuNameAndWeightAndDepth
func GetMenuTreesByMenuNameAndWeightAndDepth(offset int, limit int, MenuName_ string, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and depth = ?", MenuName_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndP1 Get MenuTrees via MenuNameAndWeightAndP1
func GetMenuTreesByMenuNameAndWeightAndP1(offset int, limit int, MenuName_ string, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and p1 = ?", MenuName_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndP2 Get MenuTrees via MenuNameAndWeightAndP2
func GetMenuTreesByMenuNameAndWeightAndP2(offset int, limit int, MenuName_ string, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and p2 = ?", MenuName_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndP3 Get MenuTrees via MenuNameAndWeightAndP3
func GetMenuTreesByMenuNameAndWeightAndP3(offset int, limit int, MenuName_ string, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and p3 = ?", MenuName_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndP4 Get MenuTrees via MenuNameAndWeightAndP4
func GetMenuTreesByMenuNameAndWeightAndP4(offset int, limit int, MenuName_ string, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and p4 = ?", MenuName_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndP5 Get MenuTrees via MenuNameAndWeightAndP5
func GetMenuTreesByMenuNameAndWeightAndP5(offset int, limit int, MenuName_ string, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and p5 = ?", MenuName_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndP6 Get MenuTrees via MenuNameAndWeightAndP6
func GetMenuTreesByMenuNameAndWeightAndP6(offset int, limit int, MenuName_ string, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and p6 = ?", MenuName_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndP7 Get MenuTrees via MenuNameAndWeightAndP7
func GetMenuTreesByMenuNameAndWeightAndP7(offset int, limit int, MenuName_ string, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and p7 = ?", MenuName_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndP8 Get MenuTrees via MenuNameAndWeightAndP8
func GetMenuTreesByMenuNameAndWeightAndP8(offset int, limit int, MenuName_ string, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and p8 = ?", MenuName_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndP9 Get MenuTrees via MenuNameAndWeightAndP9
func GetMenuTreesByMenuNameAndWeightAndP9(offset int, limit int, MenuName_ string, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and p9 = ?", MenuName_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeightAndFormClass Get MenuTrees via MenuNameAndWeightAndFormClass
func GetMenuTreesByMenuNameAndWeightAndFormClass(offset int, limit int, MenuName_ string, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ? and form_class = ?", MenuName_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndHasChildren Get MenuTrees via MenuNameAndMetadataAndHasChildren
func GetMenuTreesByMenuNameAndMetadataAndHasChildren(offset int, limit int, MenuName_ string, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and has_children = ?", MenuName_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndDepth Get MenuTrees via MenuNameAndMetadataAndDepth
func GetMenuTreesByMenuNameAndMetadataAndDepth(offset int, limit int, MenuName_ string, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and depth = ?", MenuName_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndP1 Get MenuTrees via MenuNameAndMetadataAndP1
func GetMenuTreesByMenuNameAndMetadataAndP1(offset int, limit int, MenuName_ string, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and p1 = ?", MenuName_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndP2 Get MenuTrees via MenuNameAndMetadataAndP2
func GetMenuTreesByMenuNameAndMetadataAndP2(offset int, limit int, MenuName_ string, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and p2 = ?", MenuName_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndP3 Get MenuTrees via MenuNameAndMetadataAndP3
func GetMenuTreesByMenuNameAndMetadataAndP3(offset int, limit int, MenuName_ string, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and p3 = ?", MenuName_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndP4 Get MenuTrees via MenuNameAndMetadataAndP4
func GetMenuTreesByMenuNameAndMetadataAndP4(offset int, limit int, MenuName_ string, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and p4 = ?", MenuName_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndP5 Get MenuTrees via MenuNameAndMetadataAndP5
func GetMenuTreesByMenuNameAndMetadataAndP5(offset int, limit int, MenuName_ string, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and p5 = ?", MenuName_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndP6 Get MenuTrees via MenuNameAndMetadataAndP6
func GetMenuTreesByMenuNameAndMetadataAndP6(offset int, limit int, MenuName_ string, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and p6 = ?", MenuName_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndP7 Get MenuTrees via MenuNameAndMetadataAndP7
func GetMenuTreesByMenuNameAndMetadataAndP7(offset int, limit int, MenuName_ string, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and p7 = ?", MenuName_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndP8 Get MenuTrees via MenuNameAndMetadataAndP8
func GetMenuTreesByMenuNameAndMetadataAndP8(offset int, limit int, MenuName_ string, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and p8 = ?", MenuName_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndP9 Get MenuTrees via MenuNameAndMetadataAndP9
func GetMenuTreesByMenuNameAndMetadataAndP9(offset int, limit int, MenuName_ string, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and p9 = ?", MenuName_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadataAndFormClass Get MenuTrees via MenuNameAndMetadataAndFormClass
func GetMenuTreesByMenuNameAndMetadataAndFormClass(offset int, limit int, MenuName_ string, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ? and form_class = ?", MenuName_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndDepth Get MenuTrees via MenuNameAndHasChildrenAndDepth
func GetMenuTreesByMenuNameAndHasChildrenAndDepth(offset int, limit int, MenuName_ string, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and depth = ?", MenuName_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndP1 Get MenuTrees via MenuNameAndHasChildrenAndP1
func GetMenuTreesByMenuNameAndHasChildrenAndP1(offset int, limit int, MenuName_ string, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and p1 = ?", MenuName_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndP2 Get MenuTrees via MenuNameAndHasChildrenAndP2
func GetMenuTreesByMenuNameAndHasChildrenAndP2(offset int, limit int, MenuName_ string, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and p2 = ?", MenuName_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndP3 Get MenuTrees via MenuNameAndHasChildrenAndP3
func GetMenuTreesByMenuNameAndHasChildrenAndP3(offset int, limit int, MenuName_ string, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and p3 = ?", MenuName_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndP4 Get MenuTrees via MenuNameAndHasChildrenAndP4
func GetMenuTreesByMenuNameAndHasChildrenAndP4(offset int, limit int, MenuName_ string, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and p4 = ?", MenuName_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndP5 Get MenuTrees via MenuNameAndHasChildrenAndP5
func GetMenuTreesByMenuNameAndHasChildrenAndP5(offset int, limit int, MenuName_ string, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and p5 = ?", MenuName_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndP6 Get MenuTrees via MenuNameAndHasChildrenAndP6
func GetMenuTreesByMenuNameAndHasChildrenAndP6(offset int, limit int, MenuName_ string, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and p6 = ?", MenuName_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndP7 Get MenuTrees via MenuNameAndHasChildrenAndP7
func GetMenuTreesByMenuNameAndHasChildrenAndP7(offset int, limit int, MenuName_ string, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and p7 = ?", MenuName_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndP8 Get MenuTrees via MenuNameAndHasChildrenAndP8
func GetMenuTreesByMenuNameAndHasChildrenAndP8(offset int, limit int, MenuName_ string, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and p8 = ?", MenuName_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndP9 Get MenuTrees via MenuNameAndHasChildrenAndP9
func GetMenuTreesByMenuNameAndHasChildrenAndP9(offset int, limit int, MenuName_ string, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and p9 = ?", MenuName_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildrenAndFormClass Get MenuTrees via MenuNameAndHasChildrenAndFormClass
func GetMenuTreesByMenuNameAndHasChildrenAndFormClass(offset int, limit int, MenuName_ string, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ? and form_class = ?", MenuName_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepthAndP1 Get MenuTrees via MenuNameAndDepthAndP1
func GetMenuTreesByMenuNameAndDepthAndP1(offset int, limit int, MenuName_ string, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ? and p1 = ?", MenuName_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepthAndP2 Get MenuTrees via MenuNameAndDepthAndP2
func GetMenuTreesByMenuNameAndDepthAndP2(offset int, limit int, MenuName_ string, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ? and p2 = ?", MenuName_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepthAndP3 Get MenuTrees via MenuNameAndDepthAndP3
func GetMenuTreesByMenuNameAndDepthAndP3(offset int, limit int, MenuName_ string, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ? and p3 = ?", MenuName_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepthAndP4 Get MenuTrees via MenuNameAndDepthAndP4
func GetMenuTreesByMenuNameAndDepthAndP4(offset int, limit int, MenuName_ string, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ? and p4 = ?", MenuName_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepthAndP5 Get MenuTrees via MenuNameAndDepthAndP5
func GetMenuTreesByMenuNameAndDepthAndP5(offset int, limit int, MenuName_ string, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ? and p5 = ?", MenuName_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepthAndP6 Get MenuTrees via MenuNameAndDepthAndP6
func GetMenuTreesByMenuNameAndDepthAndP6(offset int, limit int, MenuName_ string, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ? and p6 = ?", MenuName_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepthAndP7 Get MenuTrees via MenuNameAndDepthAndP7
func GetMenuTreesByMenuNameAndDepthAndP7(offset int, limit int, MenuName_ string, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ? and p7 = ?", MenuName_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepthAndP8 Get MenuTrees via MenuNameAndDepthAndP8
func GetMenuTreesByMenuNameAndDepthAndP8(offset int, limit int, MenuName_ string, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ? and p8 = ?", MenuName_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepthAndP9 Get MenuTrees via MenuNameAndDepthAndP9
func GetMenuTreesByMenuNameAndDepthAndP9(offset int, limit int, MenuName_ string, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ? and p9 = ?", MenuName_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepthAndFormClass Get MenuTrees via MenuNameAndDepthAndFormClass
func GetMenuTreesByMenuNameAndDepthAndFormClass(offset int, limit int, MenuName_ string, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ? and form_class = ?", MenuName_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP1AndP2 Get MenuTrees via MenuNameAndP1AndP2
func GetMenuTreesByMenuNameAndP1AndP2(offset int, limit int, MenuName_ string, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p1 = ? and p2 = ?", MenuName_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP1AndP3 Get MenuTrees via MenuNameAndP1AndP3
func GetMenuTreesByMenuNameAndP1AndP3(offset int, limit int, MenuName_ string, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p1 = ? and p3 = ?", MenuName_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP1AndP4 Get MenuTrees via MenuNameAndP1AndP4
func GetMenuTreesByMenuNameAndP1AndP4(offset int, limit int, MenuName_ string, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p1 = ? and p4 = ?", MenuName_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP1AndP5 Get MenuTrees via MenuNameAndP1AndP5
func GetMenuTreesByMenuNameAndP1AndP5(offset int, limit int, MenuName_ string, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p1 = ? and p5 = ?", MenuName_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP1AndP6 Get MenuTrees via MenuNameAndP1AndP6
func GetMenuTreesByMenuNameAndP1AndP6(offset int, limit int, MenuName_ string, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p1 = ? and p6 = ?", MenuName_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP1AndP7 Get MenuTrees via MenuNameAndP1AndP7
func GetMenuTreesByMenuNameAndP1AndP7(offset int, limit int, MenuName_ string, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p1 = ? and p7 = ?", MenuName_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP1AndP8 Get MenuTrees via MenuNameAndP1AndP8
func GetMenuTreesByMenuNameAndP1AndP8(offset int, limit int, MenuName_ string, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p1 = ? and p8 = ?", MenuName_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP1AndP9 Get MenuTrees via MenuNameAndP1AndP9
func GetMenuTreesByMenuNameAndP1AndP9(offset int, limit int, MenuName_ string, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p1 = ? and p9 = ?", MenuName_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP1AndFormClass Get MenuTrees via MenuNameAndP1AndFormClass
func GetMenuTreesByMenuNameAndP1AndFormClass(offset int, limit int, MenuName_ string, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p1 = ? and form_class = ?", MenuName_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP2AndP3 Get MenuTrees via MenuNameAndP2AndP3
func GetMenuTreesByMenuNameAndP2AndP3(offset int, limit int, MenuName_ string, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p2 = ? and p3 = ?", MenuName_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP2AndP4 Get MenuTrees via MenuNameAndP2AndP4
func GetMenuTreesByMenuNameAndP2AndP4(offset int, limit int, MenuName_ string, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p2 = ? and p4 = ?", MenuName_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP2AndP5 Get MenuTrees via MenuNameAndP2AndP5
func GetMenuTreesByMenuNameAndP2AndP5(offset int, limit int, MenuName_ string, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p2 = ? and p5 = ?", MenuName_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP2AndP6 Get MenuTrees via MenuNameAndP2AndP6
func GetMenuTreesByMenuNameAndP2AndP6(offset int, limit int, MenuName_ string, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p2 = ? and p6 = ?", MenuName_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP2AndP7 Get MenuTrees via MenuNameAndP2AndP7
func GetMenuTreesByMenuNameAndP2AndP7(offset int, limit int, MenuName_ string, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p2 = ? and p7 = ?", MenuName_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP2AndP8 Get MenuTrees via MenuNameAndP2AndP8
func GetMenuTreesByMenuNameAndP2AndP8(offset int, limit int, MenuName_ string, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p2 = ? and p8 = ?", MenuName_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP2AndP9 Get MenuTrees via MenuNameAndP2AndP9
func GetMenuTreesByMenuNameAndP2AndP9(offset int, limit int, MenuName_ string, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p2 = ? and p9 = ?", MenuName_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP2AndFormClass Get MenuTrees via MenuNameAndP2AndFormClass
func GetMenuTreesByMenuNameAndP2AndFormClass(offset int, limit int, MenuName_ string, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p2 = ? and form_class = ?", MenuName_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP3AndP4 Get MenuTrees via MenuNameAndP3AndP4
func GetMenuTreesByMenuNameAndP3AndP4(offset int, limit int, MenuName_ string, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p3 = ? and p4 = ?", MenuName_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP3AndP5 Get MenuTrees via MenuNameAndP3AndP5
func GetMenuTreesByMenuNameAndP3AndP5(offset int, limit int, MenuName_ string, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p3 = ? and p5 = ?", MenuName_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP3AndP6 Get MenuTrees via MenuNameAndP3AndP6
func GetMenuTreesByMenuNameAndP3AndP6(offset int, limit int, MenuName_ string, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p3 = ? and p6 = ?", MenuName_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP3AndP7 Get MenuTrees via MenuNameAndP3AndP7
func GetMenuTreesByMenuNameAndP3AndP7(offset int, limit int, MenuName_ string, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p3 = ? and p7 = ?", MenuName_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP3AndP8 Get MenuTrees via MenuNameAndP3AndP8
func GetMenuTreesByMenuNameAndP3AndP8(offset int, limit int, MenuName_ string, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p3 = ? and p8 = ?", MenuName_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP3AndP9 Get MenuTrees via MenuNameAndP3AndP9
func GetMenuTreesByMenuNameAndP3AndP9(offset int, limit int, MenuName_ string, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p3 = ? and p9 = ?", MenuName_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP3AndFormClass Get MenuTrees via MenuNameAndP3AndFormClass
func GetMenuTreesByMenuNameAndP3AndFormClass(offset int, limit int, MenuName_ string, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p3 = ? and form_class = ?", MenuName_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP4AndP5 Get MenuTrees via MenuNameAndP4AndP5
func GetMenuTreesByMenuNameAndP4AndP5(offset int, limit int, MenuName_ string, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p4 = ? and p5 = ?", MenuName_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP4AndP6 Get MenuTrees via MenuNameAndP4AndP6
func GetMenuTreesByMenuNameAndP4AndP6(offset int, limit int, MenuName_ string, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p4 = ? and p6 = ?", MenuName_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP4AndP7 Get MenuTrees via MenuNameAndP4AndP7
func GetMenuTreesByMenuNameAndP4AndP7(offset int, limit int, MenuName_ string, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p4 = ? and p7 = ?", MenuName_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP4AndP8 Get MenuTrees via MenuNameAndP4AndP8
func GetMenuTreesByMenuNameAndP4AndP8(offset int, limit int, MenuName_ string, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p4 = ? and p8 = ?", MenuName_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP4AndP9 Get MenuTrees via MenuNameAndP4AndP9
func GetMenuTreesByMenuNameAndP4AndP9(offset int, limit int, MenuName_ string, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p4 = ? and p9 = ?", MenuName_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP4AndFormClass Get MenuTrees via MenuNameAndP4AndFormClass
func GetMenuTreesByMenuNameAndP4AndFormClass(offset int, limit int, MenuName_ string, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p4 = ? and form_class = ?", MenuName_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP5AndP6 Get MenuTrees via MenuNameAndP5AndP6
func GetMenuTreesByMenuNameAndP5AndP6(offset int, limit int, MenuName_ string, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p5 = ? and p6 = ?", MenuName_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP5AndP7 Get MenuTrees via MenuNameAndP5AndP7
func GetMenuTreesByMenuNameAndP5AndP7(offset int, limit int, MenuName_ string, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p5 = ? and p7 = ?", MenuName_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP5AndP8 Get MenuTrees via MenuNameAndP5AndP8
func GetMenuTreesByMenuNameAndP5AndP8(offset int, limit int, MenuName_ string, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p5 = ? and p8 = ?", MenuName_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP5AndP9 Get MenuTrees via MenuNameAndP5AndP9
func GetMenuTreesByMenuNameAndP5AndP9(offset int, limit int, MenuName_ string, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p5 = ? and p9 = ?", MenuName_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP5AndFormClass Get MenuTrees via MenuNameAndP5AndFormClass
func GetMenuTreesByMenuNameAndP5AndFormClass(offset int, limit int, MenuName_ string, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p5 = ? and form_class = ?", MenuName_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP6AndP7 Get MenuTrees via MenuNameAndP6AndP7
func GetMenuTreesByMenuNameAndP6AndP7(offset int, limit int, MenuName_ string, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p6 = ? and p7 = ?", MenuName_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP6AndP8 Get MenuTrees via MenuNameAndP6AndP8
func GetMenuTreesByMenuNameAndP6AndP8(offset int, limit int, MenuName_ string, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p6 = ? and p8 = ?", MenuName_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP6AndP9 Get MenuTrees via MenuNameAndP6AndP9
func GetMenuTreesByMenuNameAndP6AndP9(offset int, limit int, MenuName_ string, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p6 = ? and p9 = ?", MenuName_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP6AndFormClass Get MenuTrees via MenuNameAndP6AndFormClass
func GetMenuTreesByMenuNameAndP6AndFormClass(offset int, limit int, MenuName_ string, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p6 = ? and form_class = ?", MenuName_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP7AndP8 Get MenuTrees via MenuNameAndP7AndP8
func GetMenuTreesByMenuNameAndP7AndP8(offset int, limit int, MenuName_ string, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p7 = ? and p8 = ?", MenuName_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP7AndP9 Get MenuTrees via MenuNameAndP7AndP9
func GetMenuTreesByMenuNameAndP7AndP9(offset int, limit int, MenuName_ string, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p7 = ? and p9 = ?", MenuName_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP7AndFormClass Get MenuTrees via MenuNameAndP7AndFormClass
func GetMenuTreesByMenuNameAndP7AndFormClass(offset int, limit int, MenuName_ string, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p7 = ? and form_class = ?", MenuName_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP8AndP9 Get MenuTrees via MenuNameAndP8AndP9
func GetMenuTreesByMenuNameAndP8AndP9(offset int, limit int, MenuName_ string, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p8 = ? and p9 = ?", MenuName_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP8AndFormClass Get MenuTrees via MenuNameAndP8AndFormClass
func GetMenuTreesByMenuNameAndP8AndFormClass(offset int, limit int, MenuName_ string, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p8 = ? and form_class = ?", MenuName_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP9AndFormClass Get MenuTrees via MenuNameAndP9AndFormClass
func GetMenuTreesByMenuNameAndP9AndFormClass(offset int, limit int, MenuName_ string, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p9 = ? and form_class = ?", MenuName_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndParent Get MenuTrees via MlidAndIdAndParent
func GetMenuTreesByMlidAndIdAndParent(offset int, limit int, Mlid_ int, Id_ string, Parent_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and parent = ?", Mlid_, Id_, Parent_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndRouteName Get MenuTrees via MlidAndIdAndRouteName
func GetMenuTreesByMlidAndIdAndRouteName(offset int, limit int, Mlid_ int, Id_ string, RouteName_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and route_name = ?", Mlid_, Id_, RouteName_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndRouteParamKey Get MenuTrees via MlidAndIdAndRouteParamKey
func GetMenuTreesByMlidAndIdAndRouteParamKey(offset int, limit int, Mlid_ int, Id_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and route_param_key = ?", Mlid_, Id_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndRouteParameters Get MenuTrees via MlidAndIdAndRouteParameters
func GetMenuTreesByMlidAndIdAndRouteParameters(offset int, limit int, Mlid_ int, Id_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and route_parameters = ?", Mlid_, Id_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndUrl Get MenuTrees via MlidAndIdAndUrl
func GetMenuTreesByMlidAndIdAndUrl(offset int, limit int, Mlid_ int, Id_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and url = ?", Mlid_, Id_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndTitle Get MenuTrees via MlidAndIdAndTitle
func GetMenuTreesByMlidAndIdAndTitle(offset int, limit int, Mlid_ int, Id_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and title = ?", Mlid_, Id_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndDescription Get MenuTrees via MlidAndIdAndDescription
func GetMenuTreesByMlidAndIdAndDescription(offset int, limit int, Mlid_ int, Id_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and description = ?", Mlid_, Id_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndClass Get MenuTrees via MlidAndIdAndClass
func GetMenuTreesByMlidAndIdAndClass(offset int, limit int, Mlid_ int, Id_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and class = ?", Mlid_, Id_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndOptions Get MenuTrees via MlidAndIdAndOptions
func GetMenuTreesByMlidAndIdAndOptions(offset int, limit int, Mlid_ int, Id_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and options = ?", Mlid_, Id_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndProvider Get MenuTrees via MlidAndIdAndProvider
func GetMenuTreesByMlidAndIdAndProvider(offset int, limit int, Mlid_ int, Id_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and provider = ?", Mlid_, Id_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndEnabled Get MenuTrees via MlidAndIdAndEnabled
func GetMenuTreesByMlidAndIdAndEnabled(offset int, limit int, Mlid_ int, Id_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and enabled = ?", Mlid_, Id_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndDiscovered Get MenuTrees via MlidAndIdAndDiscovered
func GetMenuTreesByMlidAndIdAndDiscovered(offset int, limit int, Mlid_ int, Id_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and discovered = ?", Mlid_, Id_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndExpanded Get MenuTrees via MlidAndIdAndExpanded
func GetMenuTreesByMlidAndIdAndExpanded(offset int, limit int, Mlid_ int, Id_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and expanded = ?", Mlid_, Id_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndWeight Get MenuTrees via MlidAndIdAndWeight
func GetMenuTreesByMlidAndIdAndWeight(offset int, limit int, Mlid_ int, Id_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and weight = ?", Mlid_, Id_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndMetadata Get MenuTrees via MlidAndIdAndMetadata
func GetMenuTreesByMlidAndIdAndMetadata(offset int, limit int, Mlid_ int, Id_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and metadata = ?", Mlid_, Id_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndHasChildren Get MenuTrees via MlidAndIdAndHasChildren
func GetMenuTreesByMlidAndIdAndHasChildren(offset int, limit int, Mlid_ int, Id_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and has_children = ?", Mlid_, Id_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndDepth Get MenuTrees via MlidAndIdAndDepth
func GetMenuTreesByMlidAndIdAndDepth(offset int, limit int, Mlid_ int, Id_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and depth = ?", Mlid_, Id_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndP1 Get MenuTrees via MlidAndIdAndP1
func GetMenuTreesByMlidAndIdAndP1(offset int, limit int, Mlid_ int, Id_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and p1 = ?", Mlid_, Id_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndP2 Get MenuTrees via MlidAndIdAndP2
func GetMenuTreesByMlidAndIdAndP2(offset int, limit int, Mlid_ int, Id_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and p2 = ?", Mlid_, Id_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndP3 Get MenuTrees via MlidAndIdAndP3
func GetMenuTreesByMlidAndIdAndP3(offset int, limit int, Mlid_ int, Id_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and p3 = ?", Mlid_, Id_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndP4 Get MenuTrees via MlidAndIdAndP4
func GetMenuTreesByMlidAndIdAndP4(offset int, limit int, Mlid_ int, Id_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and p4 = ?", Mlid_, Id_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndP5 Get MenuTrees via MlidAndIdAndP5
func GetMenuTreesByMlidAndIdAndP5(offset int, limit int, Mlid_ int, Id_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and p5 = ?", Mlid_, Id_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndP6 Get MenuTrees via MlidAndIdAndP6
func GetMenuTreesByMlidAndIdAndP6(offset int, limit int, Mlid_ int, Id_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and p6 = ?", Mlid_, Id_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndP7 Get MenuTrees via MlidAndIdAndP7
func GetMenuTreesByMlidAndIdAndP7(offset int, limit int, Mlid_ int, Id_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and p7 = ?", Mlid_, Id_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndP8 Get MenuTrees via MlidAndIdAndP8
func GetMenuTreesByMlidAndIdAndP8(offset int, limit int, Mlid_ int, Id_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and p8 = ?", Mlid_, Id_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndP9 Get MenuTrees via MlidAndIdAndP9
func GetMenuTreesByMlidAndIdAndP9(offset int, limit int, Mlid_ int, Id_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and p9 = ?", Mlid_, Id_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndIdAndFormClass Get MenuTrees via MlidAndIdAndFormClass
func GetMenuTreesByMlidAndIdAndFormClass(offset int, limit int, Mlid_ int, Id_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ? and form_class = ?", Mlid_, Id_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndRouteName Get MenuTrees via MlidAndParentAndRouteName
func GetMenuTreesByMlidAndParentAndRouteName(offset int, limit int, Mlid_ int, Parent_ string, RouteName_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and route_name = ?", Mlid_, Parent_, RouteName_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndRouteParamKey Get MenuTrees via MlidAndParentAndRouteParamKey
func GetMenuTreesByMlidAndParentAndRouteParamKey(offset int, limit int, Mlid_ int, Parent_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and route_param_key = ?", Mlid_, Parent_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndRouteParameters Get MenuTrees via MlidAndParentAndRouteParameters
func GetMenuTreesByMlidAndParentAndRouteParameters(offset int, limit int, Mlid_ int, Parent_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and route_parameters = ?", Mlid_, Parent_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndUrl Get MenuTrees via MlidAndParentAndUrl
func GetMenuTreesByMlidAndParentAndUrl(offset int, limit int, Mlid_ int, Parent_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and url = ?", Mlid_, Parent_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndTitle Get MenuTrees via MlidAndParentAndTitle
func GetMenuTreesByMlidAndParentAndTitle(offset int, limit int, Mlid_ int, Parent_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and title = ?", Mlid_, Parent_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndDescription Get MenuTrees via MlidAndParentAndDescription
func GetMenuTreesByMlidAndParentAndDescription(offset int, limit int, Mlid_ int, Parent_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and description = ?", Mlid_, Parent_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndClass Get MenuTrees via MlidAndParentAndClass
func GetMenuTreesByMlidAndParentAndClass(offset int, limit int, Mlid_ int, Parent_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and class = ?", Mlid_, Parent_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndOptions Get MenuTrees via MlidAndParentAndOptions
func GetMenuTreesByMlidAndParentAndOptions(offset int, limit int, Mlid_ int, Parent_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and options = ?", Mlid_, Parent_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndProvider Get MenuTrees via MlidAndParentAndProvider
func GetMenuTreesByMlidAndParentAndProvider(offset int, limit int, Mlid_ int, Parent_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and provider = ?", Mlid_, Parent_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndEnabled Get MenuTrees via MlidAndParentAndEnabled
func GetMenuTreesByMlidAndParentAndEnabled(offset int, limit int, Mlid_ int, Parent_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and enabled = ?", Mlid_, Parent_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndDiscovered Get MenuTrees via MlidAndParentAndDiscovered
func GetMenuTreesByMlidAndParentAndDiscovered(offset int, limit int, Mlid_ int, Parent_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and discovered = ?", Mlid_, Parent_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndExpanded Get MenuTrees via MlidAndParentAndExpanded
func GetMenuTreesByMlidAndParentAndExpanded(offset int, limit int, Mlid_ int, Parent_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and expanded = ?", Mlid_, Parent_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndWeight Get MenuTrees via MlidAndParentAndWeight
func GetMenuTreesByMlidAndParentAndWeight(offset int, limit int, Mlid_ int, Parent_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and weight = ?", Mlid_, Parent_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndMetadata Get MenuTrees via MlidAndParentAndMetadata
func GetMenuTreesByMlidAndParentAndMetadata(offset int, limit int, Mlid_ int, Parent_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and metadata = ?", Mlid_, Parent_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndHasChildren Get MenuTrees via MlidAndParentAndHasChildren
func GetMenuTreesByMlidAndParentAndHasChildren(offset int, limit int, Mlid_ int, Parent_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and has_children = ?", Mlid_, Parent_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndDepth Get MenuTrees via MlidAndParentAndDepth
func GetMenuTreesByMlidAndParentAndDepth(offset int, limit int, Mlid_ int, Parent_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and depth = ?", Mlid_, Parent_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndP1 Get MenuTrees via MlidAndParentAndP1
func GetMenuTreesByMlidAndParentAndP1(offset int, limit int, Mlid_ int, Parent_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and p1 = ?", Mlid_, Parent_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndP2 Get MenuTrees via MlidAndParentAndP2
func GetMenuTreesByMlidAndParentAndP2(offset int, limit int, Mlid_ int, Parent_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and p2 = ?", Mlid_, Parent_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndP3 Get MenuTrees via MlidAndParentAndP3
func GetMenuTreesByMlidAndParentAndP3(offset int, limit int, Mlid_ int, Parent_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and p3 = ?", Mlid_, Parent_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndP4 Get MenuTrees via MlidAndParentAndP4
func GetMenuTreesByMlidAndParentAndP4(offset int, limit int, Mlid_ int, Parent_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and p4 = ?", Mlid_, Parent_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndP5 Get MenuTrees via MlidAndParentAndP5
func GetMenuTreesByMlidAndParentAndP5(offset int, limit int, Mlid_ int, Parent_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and p5 = ?", Mlid_, Parent_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndP6 Get MenuTrees via MlidAndParentAndP6
func GetMenuTreesByMlidAndParentAndP6(offset int, limit int, Mlid_ int, Parent_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and p6 = ?", Mlid_, Parent_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndP7 Get MenuTrees via MlidAndParentAndP7
func GetMenuTreesByMlidAndParentAndP7(offset int, limit int, Mlid_ int, Parent_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and p7 = ?", Mlid_, Parent_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndP8 Get MenuTrees via MlidAndParentAndP8
func GetMenuTreesByMlidAndParentAndP8(offset int, limit int, Mlid_ int, Parent_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and p8 = ?", Mlid_, Parent_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndP9 Get MenuTrees via MlidAndParentAndP9
func GetMenuTreesByMlidAndParentAndP9(offset int, limit int, Mlid_ int, Parent_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and p9 = ?", Mlid_, Parent_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParentAndFormClass Get MenuTrees via MlidAndParentAndFormClass
func GetMenuTreesByMlidAndParentAndFormClass(offset int, limit int, Mlid_ int, Parent_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ? and form_class = ?", Mlid_, Parent_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndRouteParamKey Get MenuTrees via MlidAndRouteNameAndRouteParamKey
func GetMenuTreesByMlidAndRouteNameAndRouteParamKey(offset int, limit int, Mlid_ int, RouteName_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and route_param_key = ?", Mlid_, RouteName_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndRouteParameters Get MenuTrees via MlidAndRouteNameAndRouteParameters
func GetMenuTreesByMlidAndRouteNameAndRouteParameters(offset int, limit int, Mlid_ int, RouteName_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and route_parameters = ?", Mlid_, RouteName_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndUrl Get MenuTrees via MlidAndRouteNameAndUrl
func GetMenuTreesByMlidAndRouteNameAndUrl(offset int, limit int, Mlid_ int, RouteName_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and url = ?", Mlid_, RouteName_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndTitle Get MenuTrees via MlidAndRouteNameAndTitle
func GetMenuTreesByMlidAndRouteNameAndTitle(offset int, limit int, Mlid_ int, RouteName_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and title = ?", Mlid_, RouteName_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndDescription Get MenuTrees via MlidAndRouteNameAndDescription
func GetMenuTreesByMlidAndRouteNameAndDescription(offset int, limit int, Mlid_ int, RouteName_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and description = ?", Mlid_, RouteName_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndClass Get MenuTrees via MlidAndRouteNameAndClass
func GetMenuTreesByMlidAndRouteNameAndClass(offset int, limit int, Mlid_ int, RouteName_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and class = ?", Mlid_, RouteName_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndOptions Get MenuTrees via MlidAndRouteNameAndOptions
func GetMenuTreesByMlidAndRouteNameAndOptions(offset int, limit int, Mlid_ int, RouteName_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and options = ?", Mlid_, RouteName_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndProvider Get MenuTrees via MlidAndRouteNameAndProvider
func GetMenuTreesByMlidAndRouteNameAndProvider(offset int, limit int, Mlid_ int, RouteName_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and provider = ?", Mlid_, RouteName_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndEnabled Get MenuTrees via MlidAndRouteNameAndEnabled
func GetMenuTreesByMlidAndRouteNameAndEnabled(offset int, limit int, Mlid_ int, RouteName_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and enabled = ?", Mlid_, RouteName_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndDiscovered Get MenuTrees via MlidAndRouteNameAndDiscovered
func GetMenuTreesByMlidAndRouteNameAndDiscovered(offset int, limit int, Mlid_ int, RouteName_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and discovered = ?", Mlid_, RouteName_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndExpanded Get MenuTrees via MlidAndRouteNameAndExpanded
func GetMenuTreesByMlidAndRouteNameAndExpanded(offset int, limit int, Mlid_ int, RouteName_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and expanded = ?", Mlid_, RouteName_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndWeight Get MenuTrees via MlidAndRouteNameAndWeight
func GetMenuTreesByMlidAndRouteNameAndWeight(offset int, limit int, Mlid_ int, RouteName_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and weight = ?", Mlid_, RouteName_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndMetadata Get MenuTrees via MlidAndRouteNameAndMetadata
func GetMenuTreesByMlidAndRouteNameAndMetadata(offset int, limit int, Mlid_ int, RouteName_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and metadata = ?", Mlid_, RouteName_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndHasChildren Get MenuTrees via MlidAndRouteNameAndHasChildren
func GetMenuTreesByMlidAndRouteNameAndHasChildren(offset int, limit int, Mlid_ int, RouteName_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and has_children = ?", Mlid_, RouteName_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndDepth Get MenuTrees via MlidAndRouteNameAndDepth
func GetMenuTreesByMlidAndRouteNameAndDepth(offset int, limit int, Mlid_ int, RouteName_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and depth = ?", Mlid_, RouteName_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndP1 Get MenuTrees via MlidAndRouteNameAndP1
func GetMenuTreesByMlidAndRouteNameAndP1(offset int, limit int, Mlid_ int, RouteName_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and p1 = ?", Mlid_, RouteName_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndP2 Get MenuTrees via MlidAndRouteNameAndP2
func GetMenuTreesByMlidAndRouteNameAndP2(offset int, limit int, Mlid_ int, RouteName_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and p2 = ?", Mlid_, RouteName_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndP3 Get MenuTrees via MlidAndRouteNameAndP3
func GetMenuTreesByMlidAndRouteNameAndP3(offset int, limit int, Mlid_ int, RouteName_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and p3 = ?", Mlid_, RouteName_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndP4 Get MenuTrees via MlidAndRouteNameAndP4
func GetMenuTreesByMlidAndRouteNameAndP4(offset int, limit int, Mlid_ int, RouteName_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and p4 = ?", Mlid_, RouteName_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndP5 Get MenuTrees via MlidAndRouteNameAndP5
func GetMenuTreesByMlidAndRouteNameAndP5(offset int, limit int, Mlid_ int, RouteName_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and p5 = ?", Mlid_, RouteName_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndP6 Get MenuTrees via MlidAndRouteNameAndP6
func GetMenuTreesByMlidAndRouteNameAndP6(offset int, limit int, Mlid_ int, RouteName_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and p6 = ?", Mlid_, RouteName_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndP7 Get MenuTrees via MlidAndRouteNameAndP7
func GetMenuTreesByMlidAndRouteNameAndP7(offset int, limit int, Mlid_ int, RouteName_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and p7 = ?", Mlid_, RouteName_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndP8 Get MenuTrees via MlidAndRouteNameAndP8
func GetMenuTreesByMlidAndRouteNameAndP8(offset int, limit int, Mlid_ int, RouteName_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and p8 = ?", Mlid_, RouteName_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndP9 Get MenuTrees via MlidAndRouteNameAndP9
func GetMenuTreesByMlidAndRouteNameAndP9(offset int, limit int, Mlid_ int, RouteName_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and p9 = ?", Mlid_, RouteName_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteNameAndFormClass Get MenuTrees via MlidAndRouteNameAndFormClass
func GetMenuTreesByMlidAndRouteNameAndFormClass(offset int, limit int, Mlid_ int, RouteName_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ? and form_class = ?", Mlid_, RouteName_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndRouteParameters Get MenuTrees via MlidAndRouteParamKeyAndRouteParameters
func GetMenuTreesByMlidAndRouteParamKeyAndRouteParameters(offset int, limit int, Mlid_ int, RouteParamKey_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and route_parameters = ?", Mlid_, RouteParamKey_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndUrl Get MenuTrees via MlidAndRouteParamKeyAndUrl
func GetMenuTreesByMlidAndRouteParamKeyAndUrl(offset int, limit int, Mlid_ int, RouteParamKey_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and url = ?", Mlid_, RouteParamKey_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndTitle Get MenuTrees via MlidAndRouteParamKeyAndTitle
func GetMenuTreesByMlidAndRouteParamKeyAndTitle(offset int, limit int, Mlid_ int, RouteParamKey_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and title = ?", Mlid_, RouteParamKey_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndDescription Get MenuTrees via MlidAndRouteParamKeyAndDescription
func GetMenuTreesByMlidAndRouteParamKeyAndDescription(offset int, limit int, Mlid_ int, RouteParamKey_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and description = ?", Mlid_, RouteParamKey_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndClass Get MenuTrees via MlidAndRouteParamKeyAndClass
func GetMenuTreesByMlidAndRouteParamKeyAndClass(offset int, limit int, Mlid_ int, RouteParamKey_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and class = ?", Mlid_, RouteParamKey_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndOptions Get MenuTrees via MlidAndRouteParamKeyAndOptions
func GetMenuTreesByMlidAndRouteParamKeyAndOptions(offset int, limit int, Mlid_ int, RouteParamKey_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and options = ?", Mlid_, RouteParamKey_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndProvider Get MenuTrees via MlidAndRouteParamKeyAndProvider
func GetMenuTreesByMlidAndRouteParamKeyAndProvider(offset int, limit int, Mlid_ int, RouteParamKey_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and provider = ?", Mlid_, RouteParamKey_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndEnabled Get MenuTrees via MlidAndRouteParamKeyAndEnabled
func GetMenuTreesByMlidAndRouteParamKeyAndEnabled(offset int, limit int, Mlid_ int, RouteParamKey_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and enabled = ?", Mlid_, RouteParamKey_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndDiscovered Get MenuTrees via MlidAndRouteParamKeyAndDiscovered
func GetMenuTreesByMlidAndRouteParamKeyAndDiscovered(offset int, limit int, Mlid_ int, RouteParamKey_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and discovered = ?", Mlid_, RouteParamKey_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndExpanded Get MenuTrees via MlidAndRouteParamKeyAndExpanded
func GetMenuTreesByMlidAndRouteParamKeyAndExpanded(offset int, limit int, Mlid_ int, RouteParamKey_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and expanded = ?", Mlid_, RouteParamKey_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndWeight Get MenuTrees via MlidAndRouteParamKeyAndWeight
func GetMenuTreesByMlidAndRouteParamKeyAndWeight(offset int, limit int, Mlid_ int, RouteParamKey_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and weight = ?", Mlid_, RouteParamKey_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndMetadata Get MenuTrees via MlidAndRouteParamKeyAndMetadata
func GetMenuTreesByMlidAndRouteParamKeyAndMetadata(offset int, limit int, Mlid_ int, RouteParamKey_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and metadata = ?", Mlid_, RouteParamKey_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndHasChildren Get MenuTrees via MlidAndRouteParamKeyAndHasChildren
func GetMenuTreesByMlidAndRouteParamKeyAndHasChildren(offset int, limit int, Mlid_ int, RouteParamKey_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and has_children = ?", Mlid_, RouteParamKey_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndDepth Get MenuTrees via MlidAndRouteParamKeyAndDepth
func GetMenuTreesByMlidAndRouteParamKeyAndDepth(offset int, limit int, Mlid_ int, RouteParamKey_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and depth = ?", Mlid_, RouteParamKey_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndP1 Get MenuTrees via MlidAndRouteParamKeyAndP1
func GetMenuTreesByMlidAndRouteParamKeyAndP1(offset int, limit int, Mlid_ int, RouteParamKey_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and p1 = ?", Mlid_, RouteParamKey_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndP2 Get MenuTrees via MlidAndRouteParamKeyAndP2
func GetMenuTreesByMlidAndRouteParamKeyAndP2(offset int, limit int, Mlid_ int, RouteParamKey_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and p2 = ?", Mlid_, RouteParamKey_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndP3 Get MenuTrees via MlidAndRouteParamKeyAndP3
func GetMenuTreesByMlidAndRouteParamKeyAndP3(offset int, limit int, Mlid_ int, RouteParamKey_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and p3 = ?", Mlid_, RouteParamKey_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndP4 Get MenuTrees via MlidAndRouteParamKeyAndP4
func GetMenuTreesByMlidAndRouteParamKeyAndP4(offset int, limit int, Mlid_ int, RouteParamKey_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and p4 = ?", Mlid_, RouteParamKey_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndP5 Get MenuTrees via MlidAndRouteParamKeyAndP5
func GetMenuTreesByMlidAndRouteParamKeyAndP5(offset int, limit int, Mlid_ int, RouteParamKey_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and p5 = ?", Mlid_, RouteParamKey_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndP6 Get MenuTrees via MlidAndRouteParamKeyAndP6
func GetMenuTreesByMlidAndRouteParamKeyAndP6(offset int, limit int, Mlid_ int, RouteParamKey_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and p6 = ?", Mlid_, RouteParamKey_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndP7 Get MenuTrees via MlidAndRouteParamKeyAndP7
func GetMenuTreesByMlidAndRouteParamKeyAndP7(offset int, limit int, Mlid_ int, RouteParamKey_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and p7 = ?", Mlid_, RouteParamKey_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndP8 Get MenuTrees via MlidAndRouteParamKeyAndP8
func GetMenuTreesByMlidAndRouteParamKeyAndP8(offset int, limit int, Mlid_ int, RouteParamKey_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and p8 = ?", Mlid_, RouteParamKey_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndP9 Get MenuTrees via MlidAndRouteParamKeyAndP9
func GetMenuTreesByMlidAndRouteParamKeyAndP9(offset int, limit int, Mlid_ int, RouteParamKey_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and p9 = ?", Mlid_, RouteParamKey_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKeyAndFormClass Get MenuTrees via MlidAndRouteParamKeyAndFormClass
func GetMenuTreesByMlidAndRouteParamKeyAndFormClass(offset int, limit int, Mlid_ int, RouteParamKey_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ? and form_class = ?", Mlid_, RouteParamKey_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndUrl Get MenuTrees via MlidAndRouteParametersAndUrl
func GetMenuTreesByMlidAndRouteParametersAndUrl(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and url = ?", Mlid_, RouteParameters_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndTitle Get MenuTrees via MlidAndRouteParametersAndTitle
func GetMenuTreesByMlidAndRouteParametersAndTitle(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and title = ?", Mlid_, RouteParameters_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndDescription Get MenuTrees via MlidAndRouteParametersAndDescription
func GetMenuTreesByMlidAndRouteParametersAndDescription(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and description = ?", Mlid_, RouteParameters_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndClass Get MenuTrees via MlidAndRouteParametersAndClass
func GetMenuTreesByMlidAndRouteParametersAndClass(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and class = ?", Mlid_, RouteParameters_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndOptions Get MenuTrees via MlidAndRouteParametersAndOptions
func GetMenuTreesByMlidAndRouteParametersAndOptions(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and options = ?", Mlid_, RouteParameters_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndProvider Get MenuTrees via MlidAndRouteParametersAndProvider
func GetMenuTreesByMlidAndRouteParametersAndProvider(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and provider = ?", Mlid_, RouteParameters_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndEnabled Get MenuTrees via MlidAndRouteParametersAndEnabled
func GetMenuTreesByMlidAndRouteParametersAndEnabled(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and enabled = ?", Mlid_, RouteParameters_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndDiscovered Get MenuTrees via MlidAndRouteParametersAndDiscovered
func GetMenuTreesByMlidAndRouteParametersAndDiscovered(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and discovered = ?", Mlid_, RouteParameters_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndExpanded Get MenuTrees via MlidAndRouteParametersAndExpanded
func GetMenuTreesByMlidAndRouteParametersAndExpanded(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and expanded = ?", Mlid_, RouteParameters_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndWeight Get MenuTrees via MlidAndRouteParametersAndWeight
func GetMenuTreesByMlidAndRouteParametersAndWeight(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and weight = ?", Mlid_, RouteParameters_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndMetadata Get MenuTrees via MlidAndRouteParametersAndMetadata
func GetMenuTreesByMlidAndRouteParametersAndMetadata(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and metadata = ?", Mlid_, RouteParameters_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndHasChildren Get MenuTrees via MlidAndRouteParametersAndHasChildren
func GetMenuTreesByMlidAndRouteParametersAndHasChildren(offset int, limit int, Mlid_ int, RouteParameters_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and has_children = ?", Mlid_, RouteParameters_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndDepth Get MenuTrees via MlidAndRouteParametersAndDepth
func GetMenuTreesByMlidAndRouteParametersAndDepth(offset int, limit int, Mlid_ int, RouteParameters_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and depth = ?", Mlid_, RouteParameters_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndP1 Get MenuTrees via MlidAndRouteParametersAndP1
func GetMenuTreesByMlidAndRouteParametersAndP1(offset int, limit int, Mlid_ int, RouteParameters_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and p1 = ?", Mlid_, RouteParameters_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndP2 Get MenuTrees via MlidAndRouteParametersAndP2
func GetMenuTreesByMlidAndRouteParametersAndP2(offset int, limit int, Mlid_ int, RouteParameters_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and p2 = ?", Mlid_, RouteParameters_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndP3 Get MenuTrees via MlidAndRouteParametersAndP3
func GetMenuTreesByMlidAndRouteParametersAndP3(offset int, limit int, Mlid_ int, RouteParameters_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and p3 = ?", Mlid_, RouteParameters_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndP4 Get MenuTrees via MlidAndRouteParametersAndP4
func GetMenuTreesByMlidAndRouteParametersAndP4(offset int, limit int, Mlid_ int, RouteParameters_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and p4 = ?", Mlid_, RouteParameters_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndP5 Get MenuTrees via MlidAndRouteParametersAndP5
func GetMenuTreesByMlidAndRouteParametersAndP5(offset int, limit int, Mlid_ int, RouteParameters_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and p5 = ?", Mlid_, RouteParameters_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndP6 Get MenuTrees via MlidAndRouteParametersAndP6
func GetMenuTreesByMlidAndRouteParametersAndP6(offset int, limit int, Mlid_ int, RouteParameters_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and p6 = ?", Mlid_, RouteParameters_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndP7 Get MenuTrees via MlidAndRouteParametersAndP7
func GetMenuTreesByMlidAndRouteParametersAndP7(offset int, limit int, Mlid_ int, RouteParameters_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and p7 = ?", Mlid_, RouteParameters_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndP8 Get MenuTrees via MlidAndRouteParametersAndP8
func GetMenuTreesByMlidAndRouteParametersAndP8(offset int, limit int, Mlid_ int, RouteParameters_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and p8 = ?", Mlid_, RouteParameters_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndP9 Get MenuTrees via MlidAndRouteParametersAndP9
func GetMenuTreesByMlidAndRouteParametersAndP9(offset int, limit int, Mlid_ int, RouteParameters_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and p9 = ?", Mlid_, RouteParameters_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParametersAndFormClass Get MenuTrees via MlidAndRouteParametersAndFormClass
func GetMenuTreesByMlidAndRouteParametersAndFormClass(offset int, limit int, Mlid_ int, RouteParameters_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ? and form_class = ?", Mlid_, RouteParameters_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndTitle Get MenuTrees via MlidAndUrlAndTitle
func GetMenuTreesByMlidAndUrlAndTitle(offset int, limit int, Mlid_ int, Url_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and title = ?", Mlid_, Url_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndDescription Get MenuTrees via MlidAndUrlAndDescription
func GetMenuTreesByMlidAndUrlAndDescription(offset int, limit int, Mlid_ int, Url_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and description = ?", Mlid_, Url_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndClass Get MenuTrees via MlidAndUrlAndClass
func GetMenuTreesByMlidAndUrlAndClass(offset int, limit int, Mlid_ int, Url_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and class = ?", Mlid_, Url_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndOptions Get MenuTrees via MlidAndUrlAndOptions
func GetMenuTreesByMlidAndUrlAndOptions(offset int, limit int, Mlid_ int, Url_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and options = ?", Mlid_, Url_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndProvider Get MenuTrees via MlidAndUrlAndProvider
func GetMenuTreesByMlidAndUrlAndProvider(offset int, limit int, Mlid_ int, Url_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and provider = ?", Mlid_, Url_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndEnabled Get MenuTrees via MlidAndUrlAndEnabled
func GetMenuTreesByMlidAndUrlAndEnabled(offset int, limit int, Mlid_ int, Url_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and enabled = ?", Mlid_, Url_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndDiscovered Get MenuTrees via MlidAndUrlAndDiscovered
func GetMenuTreesByMlidAndUrlAndDiscovered(offset int, limit int, Mlid_ int, Url_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and discovered = ?", Mlid_, Url_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndExpanded Get MenuTrees via MlidAndUrlAndExpanded
func GetMenuTreesByMlidAndUrlAndExpanded(offset int, limit int, Mlid_ int, Url_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and expanded = ?", Mlid_, Url_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndWeight Get MenuTrees via MlidAndUrlAndWeight
func GetMenuTreesByMlidAndUrlAndWeight(offset int, limit int, Mlid_ int, Url_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and weight = ?", Mlid_, Url_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndMetadata Get MenuTrees via MlidAndUrlAndMetadata
func GetMenuTreesByMlidAndUrlAndMetadata(offset int, limit int, Mlid_ int, Url_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and metadata = ?", Mlid_, Url_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndHasChildren Get MenuTrees via MlidAndUrlAndHasChildren
func GetMenuTreesByMlidAndUrlAndHasChildren(offset int, limit int, Mlid_ int, Url_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and has_children = ?", Mlid_, Url_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndDepth Get MenuTrees via MlidAndUrlAndDepth
func GetMenuTreesByMlidAndUrlAndDepth(offset int, limit int, Mlid_ int, Url_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and depth = ?", Mlid_, Url_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndP1 Get MenuTrees via MlidAndUrlAndP1
func GetMenuTreesByMlidAndUrlAndP1(offset int, limit int, Mlid_ int, Url_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and p1 = ?", Mlid_, Url_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndP2 Get MenuTrees via MlidAndUrlAndP2
func GetMenuTreesByMlidAndUrlAndP2(offset int, limit int, Mlid_ int, Url_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and p2 = ?", Mlid_, Url_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndP3 Get MenuTrees via MlidAndUrlAndP3
func GetMenuTreesByMlidAndUrlAndP3(offset int, limit int, Mlid_ int, Url_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and p3 = ?", Mlid_, Url_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndP4 Get MenuTrees via MlidAndUrlAndP4
func GetMenuTreesByMlidAndUrlAndP4(offset int, limit int, Mlid_ int, Url_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and p4 = ?", Mlid_, Url_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndP5 Get MenuTrees via MlidAndUrlAndP5
func GetMenuTreesByMlidAndUrlAndP5(offset int, limit int, Mlid_ int, Url_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and p5 = ?", Mlid_, Url_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndP6 Get MenuTrees via MlidAndUrlAndP6
func GetMenuTreesByMlidAndUrlAndP6(offset int, limit int, Mlid_ int, Url_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and p6 = ?", Mlid_, Url_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndP7 Get MenuTrees via MlidAndUrlAndP7
func GetMenuTreesByMlidAndUrlAndP7(offset int, limit int, Mlid_ int, Url_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and p7 = ?", Mlid_, Url_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndP8 Get MenuTrees via MlidAndUrlAndP8
func GetMenuTreesByMlidAndUrlAndP8(offset int, limit int, Mlid_ int, Url_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and p8 = ?", Mlid_, Url_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndP9 Get MenuTrees via MlidAndUrlAndP9
func GetMenuTreesByMlidAndUrlAndP9(offset int, limit int, Mlid_ int, Url_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and p9 = ?", Mlid_, Url_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrlAndFormClass Get MenuTrees via MlidAndUrlAndFormClass
func GetMenuTreesByMlidAndUrlAndFormClass(offset int, limit int, Mlid_ int, Url_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ? and form_class = ?", Mlid_, Url_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndDescription Get MenuTrees via MlidAndTitleAndDescription
func GetMenuTreesByMlidAndTitleAndDescription(offset int, limit int, Mlid_ int, Title_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and description = ?", Mlid_, Title_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndClass Get MenuTrees via MlidAndTitleAndClass
func GetMenuTreesByMlidAndTitleAndClass(offset int, limit int, Mlid_ int, Title_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and class = ?", Mlid_, Title_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndOptions Get MenuTrees via MlidAndTitleAndOptions
func GetMenuTreesByMlidAndTitleAndOptions(offset int, limit int, Mlid_ int, Title_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and options = ?", Mlid_, Title_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndProvider Get MenuTrees via MlidAndTitleAndProvider
func GetMenuTreesByMlidAndTitleAndProvider(offset int, limit int, Mlid_ int, Title_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and provider = ?", Mlid_, Title_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndEnabled Get MenuTrees via MlidAndTitleAndEnabled
func GetMenuTreesByMlidAndTitleAndEnabled(offset int, limit int, Mlid_ int, Title_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and enabled = ?", Mlid_, Title_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndDiscovered Get MenuTrees via MlidAndTitleAndDiscovered
func GetMenuTreesByMlidAndTitleAndDiscovered(offset int, limit int, Mlid_ int, Title_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and discovered = ?", Mlid_, Title_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndExpanded Get MenuTrees via MlidAndTitleAndExpanded
func GetMenuTreesByMlidAndTitleAndExpanded(offset int, limit int, Mlid_ int, Title_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and expanded = ?", Mlid_, Title_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndWeight Get MenuTrees via MlidAndTitleAndWeight
func GetMenuTreesByMlidAndTitleAndWeight(offset int, limit int, Mlid_ int, Title_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and weight = ?", Mlid_, Title_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndMetadata Get MenuTrees via MlidAndTitleAndMetadata
func GetMenuTreesByMlidAndTitleAndMetadata(offset int, limit int, Mlid_ int, Title_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and metadata = ?", Mlid_, Title_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndHasChildren Get MenuTrees via MlidAndTitleAndHasChildren
func GetMenuTreesByMlidAndTitleAndHasChildren(offset int, limit int, Mlid_ int, Title_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and has_children = ?", Mlid_, Title_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndDepth Get MenuTrees via MlidAndTitleAndDepth
func GetMenuTreesByMlidAndTitleAndDepth(offset int, limit int, Mlid_ int, Title_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and depth = ?", Mlid_, Title_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndP1 Get MenuTrees via MlidAndTitleAndP1
func GetMenuTreesByMlidAndTitleAndP1(offset int, limit int, Mlid_ int, Title_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and p1 = ?", Mlid_, Title_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndP2 Get MenuTrees via MlidAndTitleAndP2
func GetMenuTreesByMlidAndTitleAndP2(offset int, limit int, Mlid_ int, Title_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and p2 = ?", Mlid_, Title_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndP3 Get MenuTrees via MlidAndTitleAndP3
func GetMenuTreesByMlidAndTitleAndP3(offset int, limit int, Mlid_ int, Title_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and p3 = ?", Mlid_, Title_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndP4 Get MenuTrees via MlidAndTitleAndP4
func GetMenuTreesByMlidAndTitleAndP4(offset int, limit int, Mlid_ int, Title_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and p4 = ?", Mlid_, Title_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndP5 Get MenuTrees via MlidAndTitleAndP5
func GetMenuTreesByMlidAndTitleAndP5(offset int, limit int, Mlid_ int, Title_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and p5 = ?", Mlid_, Title_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndP6 Get MenuTrees via MlidAndTitleAndP6
func GetMenuTreesByMlidAndTitleAndP6(offset int, limit int, Mlid_ int, Title_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and p6 = ?", Mlid_, Title_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndP7 Get MenuTrees via MlidAndTitleAndP7
func GetMenuTreesByMlidAndTitleAndP7(offset int, limit int, Mlid_ int, Title_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and p7 = ?", Mlid_, Title_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndP8 Get MenuTrees via MlidAndTitleAndP8
func GetMenuTreesByMlidAndTitleAndP8(offset int, limit int, Mlid_ int, Title_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and p8 = ?", Mlid_, Title_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndP9 Get MenuTrees via MlidAndTitleAndP9
func GetMenuTreesByMlidAndTitleAndP9(offset int, limit int, Mlid_ int, Title_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and p9 = ?", Mlid_, Title_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitleAndFormClass Get MenuTrees via MlidAndTitleAndFormClass
func GetMenuTreesByMlidAndTitleAndFormClass(offset int, limit int, Mlid_ int, Title_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ? and form_class = ?", Mlid_, Title_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndClass Get MenuTrees via MlidAndDescriptionAndClass
func GetMenuTreesByMlidAndDescriptionAndClass(offset int, limit int, Mlid_ int, Description_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and class = ?", Mlid_, Description_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndOptions Get MenuTrees via MlidAndDescriptionAndOptions
func GetMenuTreesByMlidAndDescriptionAndOptions(offset int, limit int, Mlid_ int, Description_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and options = ?", Mlid_, Description_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndProvider Get MenuTrees via MlidAndDescriptionAndProvider
func GetMenuTreesByMlidAndDescriptionAndProvider(offset int, limit int, Mlid_ int, Description_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and provider = ?", Mlid_, Description_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndEnabled Get MenuTrees via MlidAndDescriptionAndEnabled
func GetMenuTreesByMlidAndDescriptionAndEnabled(offset int, limit int, Mlid_ int, Description_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and enabled = ?", Mlid_, Description_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndDiscovered Get MenuTrees via MlidAndDescriptionAndDiscovered
func GetMenuTreesByMlidAndDescriptionAndDiscovered(offset int, limit int, Mlid_ int, Description_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and discovered = ?", Mlid_, Description_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndExpanded Get MenuTrees via MlidAndDescriptionAndExpanded
func GetMenuTreesByMlidAndDescriptionAndExpanded(offset int, limit int, Mlid_ int, Description_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and expanded = ?", Mlid_, Description_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndWeight Get MenuTrees via MlidAndDescriptionAndWeight
func GetMenuTreesByMlidAndDescriptionAndWeight(offset int, limit int, Mlid_ int, Description_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and weight = ?", Mlid_, Description_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndMetadata Get MenuTrees via MlidAndDescriptionAndMetadata
func GetMenuTreesByMlidAndDescriptionAndMetadata(offset int, limit int, Mlid_ int, Description_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and metadata = ?", Mlid_, Description_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndHasChildren Get MenuTrees via MlidAndDescriptionAndHasChildren
func GetMenuTreesByMlidAndDescriptionAndHasChildren(offset int, limit int, Mlid_ int, Description_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and has_children = ?", Mlid_, Description_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndDepth Get MenuTrees via MlidAndDescriptionAndDepth
func GetMenuTreesByMlidAndDescriptionAndDepth(offset int, limit int, Mlid_ int, Description_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and depth = ?", Mlid_, Description_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndP1 Get MenuTrees via MlidAndDescriptionAndP1
func GetMenuTreesByMlidAndDescriptionAndP1(offset int, limit int, Mlid_ int, Description_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and p1 = ?", Mlid_, Description_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndP2 Get MenuTrees via MlidAndDescriptionAndP2
func GetMenuTreesByMlidAndDescriptionAndP2(offset int, limit int, Mlid_ int, Description_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and p2 = ?", Mlid_, Description_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndP3 Get MenuTrees via MlidAndDescriptionAndP3
func GetMenuTreesByMlidAndDescriptionAndP3(offset int, limit int, Mlid_ int, Description_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and p3 = ?", Mlid_, Description_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndP4 Get MenuTrees via MlidAndDescriptionAndP4
func GetMenuTreesByMlidAndDescriptionAndP4(offset int, limit int, Mlid_ int, Description_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and p4 = ?", Mlid_, Description_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndP5 Get MenuTrees via MlidAndDescriptionAndP5
func GetMenuTreesByMlidAndDescriptionAndP5(offset int, limit int, Mlid_ int, Description_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and p5 = ?", Mlid_, Description_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndP6 Get MenuTrees via MlidAndDescriptionAndP6
func GetMenuTreesByMlidAndDescriptionAndP6(offset int, limit int, Mlid_ int, Description_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and p6 = ?", Mlid_, Description_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndP7 Get MenuTrees via MlidAndDescriptionAndP7
func GetMenuTreesByMlidAndDescriptionAndP7(offset int, limit int, Mlid_ int, Description_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and p7 = ?", Mlid_, Description_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndP8 Get MenuTrees via MlidAndDescriptionAndP8
func GetMenuTreesByMlidAndDescriptionAndP8(offset int, limit int, Mlid_ int, Description_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and p8 = ?", Mlid_, Description_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndP9 Get MenuTrees via MlidAndDescriptionAndP9
func GetMenuTreesByMlidAndDescriptionAndP9(offset int, limit int, Mlid_ int, Description_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and p9 = ?", Mlid_, Description_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescriptionAndFormClass Get MenuTrees via MlidAndDescriptionAndFormClass
func GetMenuTreesByMlidAndDescriptionAndFormClass(offset int, limit int, Mlid_ int, Description_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ? and form_class = ?", Mlid_, Description_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndOptions Get MenuTrees via MlidAndClassAndOptions
func GetMenuTreesByMlidAndClassAndOptions(offset int, limit int, Mlid_ int, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and options = ?", Mlid_, Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndProvider Get MenuTrees via MlidAndClassAndProvider
func GetMenuTreesByMlidAndClassAndProvider(offset int, limit int, Mlid_ int, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and provider = ?", Mlid_, Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndEnabled Get MenuTrees via MlidAndClassAndEnabled
func GetMenuTreesByMlidAndClassAndEnabled(offset int, limit int, Mlid_ int, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and enabled = ?", Mlid_, Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndDiscovered Get MenuTrees via MlidAndClassAndDiscovered
func GetMenuTreesByMlidAndClassAndDiscovered(offset int, limit int, Mlid_ int, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and discovered = ?", Mlid_, Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndExpanded Get MenuTrees via MlidAndClassAndExpanded
func GetMenuTreesByMlidAndClassAndExpanded(offset int, limit int, Mlid_ int, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and expanded = ?", Mlid_, Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndWeight Get MenuTrees via MlidAndClassAndWeight
func GetMenuTreesByMlidAndClassAndWeight(offset int, limit int, Mlid_ int, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and weight = ?", Mlid_, Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndMetadata Get MenuTrees via MlidAndClassAndMetadata
func GetMenuTreesByMlidAndClassAndMetadata(offset int, limit int, Mlid_ int, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and metadata = ?", Mlid_, Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndHasChildren Get MenuTrees via MlidAndClassAndHasChildren
func GetMenuTreesByMlidAndClassAndHasChildren(offset int, limit int, Mlid_ int, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and has_children = ?", Mlid_, Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndDepth Get MenuTrees via MlidAndClassAndDepth
func GetMenuTreesByMlidAndClassAndDepth(offset int, limit int, Mlid_ int, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and depth = ?", Mlid_, Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndP1 Get MenuTrees via MlidAndClassAndP1
func GetMenuTreesByMlidAndClassAndP1(offset int, limit int, Mlid_ int, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and p1 = ?", Mlid_, Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndP2 Get MenuTrees via MlidAndClassAndP2
func GetMenuTreesByMlidAndClassAndP2(offset int, limit int, Mlid_ int, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and p2 = ?", Mlid_, Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndP3 Get MenuTrees via MlidAndClassAndP3
func GetMenuTreesByMlidAndClassAndP3(offset int, limit int, Mlid_ int, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and p3 = ?", Mlid_, Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndP4 Get MenuTrees via MlidAndClassAndP4
func GetMenuTreesByMlidAndClassAndP4(offset int, limit int, Mlid_ int, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and p4 = ?", Mlid_, Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndP5 Get MenuTrees via MlidAndClassAndP5
func GetMenuTreesByMlidAndClassAndP5(offset int, limit int, Mlid_ int, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and p5 = ?", Mlid_, Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndP6 Get MenuTrees via MlidAndClassAndP6
func GetMenuTreesByMlidAndClassAndP6(offset int, limit int, Mlid_ int, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and p6 = ?", Mlid_, Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndP7 Get MenuTrees via MlidAndClassAndP7
func GetMenuTreesByMlidAndClassAndP7(offset int, limit int, Mlid_ int, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and p7 = ?", Mlid_, Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndP8 Get MenuTrees via MlidAndClassAndP8
func GetMenuTreesByMlidAndClassAndP8(offset int, limit int, Mlid_ int, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and p8 = ?", Mlid_, Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndP9 Get MenuTrees via MlidAndClassAndP9
func GetMenuTreesByMlidAndClassAndP9(offset int, limit int, Mlid_ int, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and p9 = ?", Mlid_, Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClassAndFormClass Get MenuTrees via MlidAndClassAndFormClass
func GetMenuTreesByMlidAndClassAndFormClass(offset int, limit int, Mlid_ int, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ? and form_class = ?", Mlid_, Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndProvider Get MenuTrees via MlidAndOptionsAndProvider
func GetMenuTreesByMlidAndOptionsAndProvider(offset int, limit int, Mlid_ int, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and provider = ?", Mlid_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndEnabled Get MenuTrees via MlidAndOptionsAndEnabled
func GetMenuTreesByMlidAndOptionsAndEnabled(offset int, limit int, Mlid_ int, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and enabled = ?", Mlid_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndDiscovered Get MenuTrees via MlidAndOptionsAndDiscovered
func GetMenuTreesByMlidAndOptionsAndDiscovered(offset int, limit int, Mlid_ int, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and discovered = ?", Mlid_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndExpanded Get MenuTrees via MlidAndOptionsAndExpanded
func GetMenuTreesByMlidAndOptionsAndExpanded(offset int, limit int, Mlid_ int, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and expanded = ?", Mlid_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndWeight Get MenuTrees via MlidAndOptionsAndWeight
func GetMenuTreesByMlidAndOptionsAndWeight(offset int, limit int, Mlid_ int, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and weight = ?", Mlid_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndMetadata Get MenuTrees via MlidAndOptionsAndMetadata
func GetMenuTreesByMlidAndOptionsAndMetadata(offset int, limit int, Mlid_ int, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and metadata = ?", Mlid_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndHasChildren Get MenuTrees via MlidAndOptionsAndHasChildren
func GetMenuTreesByMlidAndOptionsAndHasChildren(offset int, limit int, Mlid_ int, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and has_children = ?", Mlid_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndDepth Get MenuTrees via MlidAndOptionsAndDepth
func GetMenuTreesByMlidAndOptionsAndDepth(offset int, limit int, Mlid_ int, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and depth = ?", Mlid_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndP1 Get MenuTrees via MlidAndOptionsAndP1
func GetMenuTreesByMlidAndOptionsAndP1(offset int, limit int, Mlid_ int, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and p1 = ?", Mlid_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndP2 Get MenuTrees via MlidAndOptionsAndP2
func GetMenuTreesByMlidAndOptionsAndP2(offset int, limit int, Mlid_ int, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and p2 = ?", Mlid_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndP3 Get MenuTrees via MlidAndOptionsAndP3
func GetMenuTreesByMlidAndOptionsAndP3(offset int, limit int, Mlid_ int, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and p3 = ?", Mlid_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndP4 Get MenuTrees via MlidAndOptionsAndP4
func GetMenuTreesByMlidAndOptionsAndP4(offset int, limit int, Mlid_ int, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and p4 = ?", Mlid_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndP5 Get MenuTrees via MlidAndOptionsAndP5
func GetMenuTreesByMlidAndOptionsAndP5(offset int, limit int, Mlid_ int, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and p5 = ?", Mlid_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndP6 Get MenuTrees via MlidAndOptionsAndP6
func GetMenuTreesByMlidAndOptionsAndP6(offset int, limit int, Mlid_ int, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and p6 = ?", Mlid_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndP7 Get MenuTrees via MlidAndOptionsAndP7
func GetMenuTreesByMlidAndOptionsAndP7(offset int, limit int, Mlid_ int, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and p7 = ?", Mlid_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndP8 Get MenuTrees via MlidAndOptionsAndP8
func GetMenuTreesByMlidAndOptionsAndP8(offset int, limit int, Mlid_ int, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and p8 = ?", Mlid_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndP9 Get MenuTrees via MlidAndOptionsAndP9
func GetMenuTreesByMlidAndOptionsAndP9(offset int, limit int, Mlid_ int, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and p9 = ?", Mlid_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptionsAndFormClass Get MenuTrees via MlidAndOptionsAndFormClass
func GetMenuTreesByMlidAndOptionsAndFormClass(offset int, limit int, Mlid_ int, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ? and form_class = ?", Mlid_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndEnabled Get MenuTrees via MlidAndProviderAndEnabled
func GetMenuTreesByMlidAndProviderAndEnabled(offset int, limit int, Mlid_ int, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and enabled = ?", Mlid_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndDiscovered Get MenuTrees via MlidAndProviderAndDiscovered
func GetMenuTreesByMlidAndProviderAndDiscovered(offset int, limit int, Mlid_ int, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and discovered = ?", Mlid_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndExpanded Get MenuTrees via MlidAndProviderAndExpanded
func GetMenuTreesByMlidAndProviderAndExpanded(offset int, limit int, Mlid_ int, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and expanded = ?", Mlid_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndWeight Get MenuTrees via MlidAndProviderAndWeight
func GetMenuTreesByMlidAndProviderAndWeight(offset int, limit int, Mlid_ int, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and weight = ?", Mlid_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndMetadata Get MenuTrees via MlidAndProviderAndMetadata
func GetMenuTreesByMlidAndProviderAndMetadata(offset int, limit int, Mlid_ int, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and metadata = ?", Mlid_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndHasChildren Get MenuTrees via MlidAndProviderAndHasChildren
func GetMenuTreesByMlidAndProviderAndHasChildren(offset int, limit int, Mlid_ int, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and has_children = ?", Mlid_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndDepth Get MenuTrees via MlidAndProviderAndDepth
func GetMenuTreesByMlidAndProviderAndDepth(offset int, limit int, Mlid_ int, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and depth = ?", Mlid_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndP1 Get MenuTrees via MlidAndProviderAndP1
func GetMenuTreesByMlidAndProviderAndP1(offset int, limit int, Mlid_ int, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and p1 = ?", Mlid_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndP2 Get MenuTrees via MlidAndProviderAndP2
func GetMenuTreesByMlidAndProviderAndP2(offset int, limit int, Mlid_ int, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and p2 = ?", Mlid_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndP3 Get MenuTrees via MlidAndProviderAndP3
func GetMenuTreesByMlidAndProviderAndP3(offset int, limit int, Mlid_ int, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and p3 = ?", Mlid_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndP4 Get MenuTrees via MlidAndProviderAndP4
func GetMenuTreesByMlidAndProviderAndP4(offset int, limit int, Mlid_ int, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and p4 = ?", Mlid_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndP5 Get MenuTrees via MlidAndProviderAndP5
func GetMenuTreesByMlidAndProviderAndP5(offset int, limit int, Mlid_ int, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and p5 = ?", Mlid_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndP6 Get MenuTrees via MlidAndProviderAndP6
func GetMenuTreesByMlidAndProviderAndP6(offset int, limit int, Mlid_ int, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and p6 = ?", Mlid_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndP7 Get MenuTrees via MlidAndProviderAndP7
func GetMenuTreesByMlidAndProviderAndP7(offset int, limit int, Mlid_ int, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and p7 = ?", Mlid_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndP8 Get MenuTrees via MlidAndProviderAndP8
func GetMenuTreesByMlidAndProviderAndP8(offset int, limit int, Mlid_ int, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and p8 = ?", Mlid_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndP9 Get MenuTrees via MlidAndProviderAndP9
func GetMenuTreesByMlidAndProviderAndP9(offset int, limit int, Mlid_ int, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and p9 = ?", Mlid_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProviderAndFormClass Get MenuTrees via MlidAndProviderAndFormClass
func GetMenuTreesByMlidAndProviderAndFormClass(offset int, limit int, Mlid_ int, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ? and form_class = ?", Mlid_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndDiscovered Get MenuTrees via MlidAndEnabledAndDiscovered
func GetMenuTreesByMlidAndEnabledAndDiscovered(offset int, limit int, Mlid_ int, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and discovered = ?", Mlid_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndExpanded Get MenuTrees via MlidAndEnabledAndExpanded
func GetMenuTreesByMlidAndEnabledAndExpanded(offset int, limit int, Mlid_ int, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and expanded = ?", Mlid_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndWeight Get MenuTrees via MlidAndEnabledAndWeight
func GetMenuTreesByMlidAndEnabledAndWeight(offset int, limit int, Mlid_ int, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and weight = ?", Mlid_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndMetadata Get MenuTrees via MlidAndEnabledAndMetadata
func GetMenuTreesByMlidAndEnabledAndMetadata(offset int, limit int, Mlid_ int, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and metadata = ?", Mlid_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndHasChildren Get MenuTrees via MlidAndEnabledAndHasChildren
func GetMenuTreesByMlidAndEnabledAndHasChildren(offset int, limit int, Mlid_ int, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and has_children = ?", Mlid_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndDepth Get MenuTrees via MlidAndEnabledAndDepth
func GetMenuTreesByMlidAndEnabledAndDepth(offset int, limit int, Mlid_ int, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and depth = ?", Mlid_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndP1 Get MenuTrees via MlidAndEnabledAndP1
func GetMenuTreesByMlidAndEnabledAndP1(offset int, limit int, Mlid_ int, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and p1 = ?", Mlid_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndP2 Get MenuTrees via MlidAndEnabledAndP2
func GetMenuTreesByMlidAndEnabledAndP2(offset int, limit int, Mlid_ int, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and p2 = ?", Mlid_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndP3 Get MenuTrees via MlidAndEnabledAndP3
func GetMenuTreesByMlidAndEnabledAndP3(offset int, limit int, Mlid_ int, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and p3 = ?", Mlid_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndP4 Get MenuTrees via MlidAndEnabledAndP4
func GetMenuTreesByMlidAndEnabledAndP4(offset int, limit int, Mlid_ int, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and p4 = ?", Mlid_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndP5 Get MenuTrees via MlidAndEnabledAndP5
func GetMenuTreesByMlidAndEnabledAndP5(offset int, limit int, Mlid_ int, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and p5 = ?", Mlid_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndP6 Get MenuTrees via MlidAndEnabledAndP6
func GetMenuTreesByMlidAndEnabledAndP6(offset int, limit int, Mlid_ int, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and p6 = ?", Mlid_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndP7 Get MenuTrees via MlidAndEnabledAndP7
func GetMenuTreesByMlidAndEnabledAndP7(offset int, limit int, Mlid_ int, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and p7 = ?", Mlid_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndP8 Get MenuTrees via MlidAndEnabledAndP8
func GetMenuTreesByMlidAndEnabledAndP8(offset int, limit int, Mlid_ int, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and p8 = ?", Mlid_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndP9 Get MenuTrees via MlidAndEnabledAndP9
func GetMenuTreesByMlidAndEnabledAndP9(offset int, limit int, Mlid_ int, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and p9 = ?", Mlid_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabledAndFormClass Get MenuTrees via MlidAndEnabledAndFormClass
func GetMenuTreesByMlidAndEnabledAndFormClass(offset int, limit int, Mlid_ int, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ? and form_class = ?", Mlid_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndExpanded Get MenuTrees via MlidAndDiscoveredAndExpanded
func GetMenuTreesByMlidAndDiscoveredAndExpanded(offset int, limit int, Mlid_ int, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and expanded = ?", Mlid_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndWeight Get MenuTrees via MlidAndDiscoveredAndWeight
func GetMenuTreesByMlidAndDiscoveredAndWeight(offset int, limit int, Mlid_ int, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and weight = ?", Mlid_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndMetadata Get MenuTrees via MlidAndDiscoveredAndMetadata
func GetMenuTreesByMlidAndDiscoveredAndMetadata(offset int, limit int, Mlid_ int, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and metadata = ?", Mlid_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndHasChildren Get MenuTrees via MlidAndDiscoveredAndHasChildren
func GetMenuTreesByMlidAndDiscoveredAndHasChildren(offset int, limit int, Mlid_ int, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and has_children = ?", Mlid_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndDepth Get MenuTrees via MlidAndDiscoveredAndDepth
func GetMenuTreesByMlidAndDiscoveredAndDepth(offset int, limit int, Mlid_ int, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and depth = ?", Mlid_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndP1 Get MenuTrees via MlidAndDiscoveredAndP1
func GetMenuTreesByMlidAndDiscoveredAndP1(offset int, limit int, Mlid_ int, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and p1 = ?", Mlid_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndP2 Get MenuTrees via MlidAndDiscoveredAndP2
func GetMenuTreesByMlidAndDiscoveredAndP2(offset int, limit int, Mlid_ int, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and p2 = ?", Mlid_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndP3 Get MenuTrees via MlidAndDiscoveredAndP3
func GetMenuTreesByMlidAndDiscoveredAndP3(offset int, limit int, Mlid_ int, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and p3 = ?", Mlid_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndP4 Get MenuTrees via MlidAndDiscoveredAndP4
func GetMenuTreesByMlidAndDiscoveredAndP4(offset int, limit int, Mlid_ int, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and p4 = ?", Mlid_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndP5 Get MenuTrees via MlidAndDiscoveredAndP5
func GetMenuTreesByMlidAndDiscoveredAndP5(offset int, limit int, Mlid_ int, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and p5 = ?", Mlid_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndP6 Get MenuTrees via MlidAndDiscoveredAndP6
func GetMenuTreesByMlidAndDiscoveredAndP6(offset int, limit int, Mlid_ int, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and p6 = ?", Mlid_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndP7 Get MenuTrees via MlidAndDiscoveredAndP7
func GetMenuTreesByMlidAndDiscoveredAndP7(offset int, limit int, Mlid_ int, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and p7 = ?", Mlid_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndP8 Get MenuTrees via MlidAndDiscoveredAndP8
func GetMenuTreesByMlidAndDiscoveredAndP8(offset int, limit int, Mlid_ int, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and p8 = ?", Mlid_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndP9 Get MenuTrees via MlidAndDiscoveredAndP9
func GetMenuTreesByMlidAndDiscoveredAndP9(offset int, limit int, Mlid_ int, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and p9 = ?", Mlid_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscoveredAndFormClass Get MenuTrees via MlidAndDiscoveredAndFormClass
func GetMenuTreesByMlidAndDiscoveredAndFormClass(offset int, limit int, Mlid_ int, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ? and form_class = ?", Mlid_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndWeight Get MenuTrees via MlidAndExpandedAndWeight
func GetMenuTreesByMlidAndExpandedAndWeight(offset int, limit int, Mlid_ int, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and weight = ?", Mlid_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndMetadata Get MenuTrees via MlidAndExpandedAndMetadata
func GetMenuTreesByMlidAndExpandedAndMetadata(offset int, limit int, Mlid_ int, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and metadata = ?", Mlid_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndHasChildren Get MenuTrees via MlidAndExpandedAndHasChildren
func GetMenuTreesByMlidAndExpandedAndHasChildren(offset int, limit int, Mlid_ int, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and has_children = ?", Mlid_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndDepth Get MenuTrees via MlidAndExpandedAndDepth
func GetMenuTreesByMlidAndExpandedAndDepth(offset int, limit int, Mlid_ int, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and depth = ?", Mlid_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndP1 Get MenuTrees via MlidAndExpandedAndP1
func GetMenuTreesByMlidAndExpandedAndP1(offset int, limit int, Mlid_ int, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and p1 = ?", Mlid_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndP2 Get MenuTrees via MlidAndExpandedAndP2
func GetMenuTreesByMlidAndExpandedAndP2(offset int, limit int, Mlid_ int, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and p2 = ?", Mlid_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndP3 Get MenuTrees via MlidAndExpandedAndP3
func GetMenuTreesByMlidAndExpandedAndP3(offset int, limit int, Mlid_ int, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and p3 = ?", Mlid_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndP4 Get MenuTrees via MlidAndExpandedAndP4
func GetMenuTreesByMlidAndExpandedAndP4(offset int, limit int, Mlid_ int, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and p4 = ?", Mlid_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndP5 Get MenuTrees via MlidAndExpandedAndP5
func GetMenuTreesByMlidAndExpandedAndP5(offset int, limit int, Mlid_ int, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and p5 = ?", Mlid_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndP6 Get MenuTrees via MlidAndExpandedAndP6
func GetMenuTreesByMlidAndExpandedAndP6(offset int, limit int, Mlid_ int, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and p6 = ?", Mlid_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndP7 Get MenuTrees via MlidAndExpandedAndP7
func GetMenuTreesByMlidAndExpandedAndP7(offset int, limit int, Mlid_ int, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and p7 = ?", Mlid_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndP8 Get MenuTrees via MlidAndExpandedAndP8
func GetMenuTreesByMlidAndExpandedAndP8(offset int, limit int, Mlid_ int, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and p8 = ?", Mlid_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndP9 Get MenuTrees via MlidAndExpandedAndP9
func GetMenuTreesByMlidAndExpandedAndP9(offset int, limit int, Mlid_ int, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and p9 = ?", Mlid_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpandedAndFormClass Get MenuTrees via MlidAndExpandedAndFormClass
func GetMenuTreesByMlidAndExpandedAndFormClass(offset int, limit int, Mlid_ int, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ? and form_class = ?", Mlid_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndMetadata Get MenuTrees via MlidAndWeightAndMetadata
func GetMenuTreesByMlidAndWeightAndMetadata(offset int, limit int, Mlid_ int, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and metadata = ?", Mlid_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndHasChildren Get MenuTrees via MlidAndWeightAndHasChildren
func GetMenuTreesByMlidAndWeightAndHasChildren(offset int, limit int, Mlid_ int, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and has_children = ?", Mlid_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndDepth Get MenuTrees via MlidAndWeightAndDepth
func GetMenuTreesByMlidAndWeightAndDepth(offset int, limit int, Mlid_ int, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and depth = ?", Mlid_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndP1 Get MenuTrees via MlidAndWeightAndP1
func GetMenuTreesByMlidAndWeightAndP1(offset int, limit int, Mlid_ int, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and p1 = ?", Mlid_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndP2 Get MenuTrees via MlidAndWeightAndP2
func GetMenuTreesByMlidAndWeightAndP2(offset int, limit int, Mlid_ int, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and p2 = ?", Mlid_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndP3 Get MenuTrees via MlidAndWeightAndP3
func GetMenuTreesByMlidAndWeightAndP3(offset int, limit int, Mlid_ int, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and p3 = ?", Mlid_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndP4 Get MenuTrees via MlidAndWeightAndP4
func GetMenuTreesByMlidAndWeightAndP4(offset int, limit int, Mlid_ int, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and p4 = ?", Mlid_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndP5 Get MenuTrees via MlidAndWeightAndP5
func GetMenuTreesByMlidAndWeightAndP5(offset int, limit int, Mlid_ int, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and p5 = ?", Mlid_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndP6 Get MenuTrees via MlidAndWeightAndP6
func GetMenuTreesByMlidAndWeightAndP6(offset int, limit int, Mlid_ int, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and p6 = ?", Mlid_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndP7 Get MenuTrees via MlidAndWeightAndP7
func GetMenuTreesByMlidAndWeightAndP7(offset int, limit int, Mlid_ int, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and p7 = ?", Mlid_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndP8 Get MenuTrees via MlidAndWeightAndP8
func GetMenuTreesByMlidAndWeightAndP8(offset int, limit int, Mlid_ int, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and p8 = ?", Mlid_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndP9 Get MenuTrees via MlidAndWeightAndP9
func GetMenuTreesByMlidAndWeightAndP9(offset int, limit int, Mlid_ int, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and p9 = ?", Mlid_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeightAndFormClass Get MenuTrees via MlidAndWeightAndFormClass
func GetMenuTreesByMlidAndWeightAndFormClass(offset int, limit int, Mlid_ int, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ? and form_class = ?", Mlid_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndHasChildren Get MenuTrees via MlidAndMetadataAndHasChildren
func GetMenuTreesByMlidAndMetadataAndHasChildren(offset int, limit int, Mlid_ int, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and has_children = ?", Mlid_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndDepth Get MenuTrees via MlidAndMetadataAndDepth
func GetMenuTreesByMlidAndMetadataAndDepth(offset int, limit int, Mlid_ int, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and depth = ?", Mlid_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndP1 Get MenuTrees via MlidAndMetadataAndP1
func GetMenuTreesByMlidAndMetadataAndP1(offset int, limit int, Mlid_ int, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and p1 = ?", Mlid_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndP2 Get MenuTrees via MlidAndMetadataAndP2
func GetMenuTreesByMlidAndMetadataAndP2(offset int, limit int, Mlid_ int, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and p2 = ?", Mlid_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndP3 Get MenuTrees via MlidAndMetadataAndP3
func GetMenuTreesByMlidAndMetadataAndP3(offset int, limit int, Mlid_ int, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and p3 = ?", Mlid_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndP4 Get MenuTrees via MlidAndMetadataAndP4
func GetMenuTreesByMlidAndMetadataAndP4(offset int, limit int, Mlid_ int, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and p4 = ?", Mlid_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndP5 Get MenuTrees via MlidAndMetadataAndP5
func GetMenuTreesByMlidAndMetadataAndP5(offset int, limit int, Mlid_ int, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and p5 = ?", Mlid_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndP6 Get MenuTrees via MlidAndMetadataAndP6
func GetMenuTreesByMlidAndMetadataAndP6(offset int, limit int, Mlid_ int, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and p6 = ?", Mlid_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndP7 Get MenuTrees via MlidAndMetadataAndP7
func GetMenuTreesByMlidAndMetadataAndP7(offset int, limit int, Mlid_ int, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and p7 = ?", Mlid_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndP8 Get MenuTrees via MlidAndMetadataAndP8
func GetMenuTreesByMlidAndMetadataAndP8(offset int, limit int, Mlid_ int, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and p8 = ?", Mlid_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndP9 Get MenuTrees via MlidAndMetadataAndP9
func GetMenuTreesByMlidAndMetadataAndP9(offset int, limit int, Mlid_ int, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and p9 = ?", Mlid_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadataAndFormClass Get MenuTrees via MlidAndMetadataAndFormClass
func GetMenuTreesByMlidAndMetadataAndFormClass(offset int, limit int, Mlid_ int, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ? and form_class = ?", Mlid_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndDepth Get MenuTrees via MlidAndHasChildrenAndDepth
func GetMenuTreesByMlidAndHasChildrenAndDepth(offset int, limit int, Mlid_ int, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and depth = ?", Mlid_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndP1 Get MenuTrees via MlidAndHasChildrenAndP1
func GetMenuTreesByMlidAndHasChildrenAndP1(offset int, limit int, Mlid_ int, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and p1 = ?", Mlid_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndP2 Get MenuTrees via MlidAndHasChildrenAndP2
func GetMenuTreesByMlidAndHasChildrenAndP2(offset int, limit int, Mlid_ int, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and p2 = ?", Mlid_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndP3 Get MenuTrees via MlidAndHasChildrenAndP3
func GetMenuTreesByMlidAndHasChildrenAndP3(offset int, limit int, Mlid_ int, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and p3 = ?", Mlid_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndP4 Get MenuTrees via MlidAndHasChildrenAndP4
func GetMenuTreesByMlidAndHasChildrenAndP4(offset int, limit int, Mlid_ int, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and p4 = ?", Mlid_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndP5 Get MenuTrees via MlidAndHasChildrenAndP5
func GetMenuTreesByMlidAndHasChildrenAndP5(offset int, limit int, Mlid_ int, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and p5 = ?", Mlid_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndP6 Get MenuTrees via MlidAndHasChildrenAndP6
func GetMenuTreesByMlidAndHasChildrenAndP6(offset int, limit int, Mlid_ int, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and p6 = ?", Mlid_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndP7 Get MenuTrees via MlidAndHasChildrenAndP7
func GetMenuTreesByMlidAndHasChildrenAndP7(offset int, limit int, Mlid_ int, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and p7 = ?", Mlid_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndP8 Get MenuTrees via MlidAndHasChildrenAndP8
func GetMenuTreesByMlidAndHasChildrenAndP8(offset int, limit int, Mlid_ int, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and p8 = ?", Mlid_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndP9 Get MenuTrees via MlidAndHasChildrenAndP9
func GetMenuTreesByMlidAndHasChildrenAndP9(offset int, limit int, Mlid_ int, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and p9 = ?", Mlid_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildrenAndFormClass Get MenuTrees via MlidAndHasChildrenAndFormClass
func GetMenuTreesByMlidAndHasChildrenAndFormClass(offset int, limit int, Mlid_ int, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ? and form_class = ?", Mlid_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepthAndP1 Get MenuTrees via MlidAndDepthAndP1
func GetMenuTreesByMlidAndDepthAndP1(offset int, limit int, Mlid_ int, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ? and p1 = ?", Mlid_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepthAndP2 Get MenuTrees via MlidAndDepthAndP2
func GetMenuTreesByMlidAndDepthAndP2(offset int, limit int, Mlid_ int, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ? and p2 = ?", Mlid_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepthAndP3 Get MenuTrees via MlidAndDepthAndP3
func GetMenuTreesByMlidAndDepthAndP3(offset int, limit int, Mlid_ int, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ? and p3 = ?", Mlid_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepthAndP4 Get MenuTrees via MlidAndDepthAndP4
func GetMenuTreesByMlidAndDepthAndP4(offset int, limit int, Mlid_ int, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ? and p4 = ?", Mlid_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepthAndP5 Get MenuTrees via MlidAndDepthAndP5
func GetMenuTreesByMlidAndDepthAndP5(offset int, limit int, Mlid_ int, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ? and p5 = ?", Mlid_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepthAndP6 Get MenuTrees via MlidAndDepthAndP6
func GetMenuTreesByMlidAndDepthAndP6(offset int, limit int, Mlid_ int, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ? and p6 = ?", Mlid_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepthAndP7 Get MenuTrees via MlidAndDepthAndP7
func GetMenuTreesByMlidAndDepthAndP7(offset int, limit int, Mlid_ int, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ? and p7 = ?", Mlid_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepthAndP8 Get MenuTrees via MlidAndDepthAndP8
func GetMenuTreesByMlidAndDepthAndP8(offset int, limit int, Mlid_ int, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ? and p8 = ?", Mlid_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepthAndP9 Get MenuTrees via MlidAndDepthAndP9
func GetMenuTreesByMlidAndDepthAndP9(offset int, limit int, Mlid_ int, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ? and p9 = ?", Mlid_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepthAndFormClass Get MenuTrees via MlidAndDepthAndFormClass
func GetMenuTreesByMlidAndDepthAndFormClass(offset int, limit int, Mlid_ int, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ? and form_class = ?", Mlid_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP1AndP2 Get MenuTrees via MlidAndP1AndP2
func GetMenuTreesByMlidAndP1AndP2(offset int, limit int, Mlid_ int, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p1 = ? and p2 = ?", Mlid_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP1AndP3 Get MenuTrees via MlidAndP1AndP3
func GetMenuTreesByMlidAndP1AndP3(offset int, limit int, Mlid_ int, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p1 = ? and p3 = ?", Mlid_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP1AndP4 Get MenuTrees via MlidAndP1AndP4
func GetMenuTreesByMlidAndP1AndP4(offset int, limit int, Mlid_ int, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p1 = ? and p4 = ?", Mlid_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP1AndP5 Get MenuTrees via MlidAndP1AndP5
func GetMenuTreesByMlidAndP1AndP5(offset int, limit int, Mlid_ int, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p1 = ? and p5 = ?", Mlid_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP1AndP6 Get MenuTrees via MlidAndP1AndP6
func GetMenuTreesByMlidAndP1AndP6(offset int, limit int, Mlid_ int, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p1 = ? and p6 = ?", Mlid_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP1AndP7 Get MenuTrees via MlidAndP1AndP7
func GetMenuTreesByMlidAndP1AndP7(offset int, limit int, Mlid_ int, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p1 = ? and p7 = ?", Mlid_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP1AndP8 Get MenuTrees via MlidAndP1AndP8
func GetMenuTreesByMlidAndP1AndP8(offset int, limit int, Mlid_ int, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p1 = ? and p8 = ?", Mlid_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP1AndP9 Get MenuTrees via MlidAndP1AndP9
func GetMenuTreesByMlidAndP1AndP9(offset int, limit int, Mlid_ int, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p1 = ? and p9 = ?", Mlid_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP1AndFormClass Get MenuTrees via MlidAndP1AndFormClass
func GetMenuTreesByMlidAndP1AndFormClass(offset int, limit int, Mlid_ int, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p1 = ? and form_class = ?", Mlid_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP2AndP3 Get MenuTrees via MlidAndP2AndP3
func GetMenuTreesByMlidAndP2AndP3(offset int, limit int, Mlid_ int, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p2 = ? and p3 = ?", Mlid_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP2AndP4 Get MenuTrees via MlidAndP2AndP4
func GetMenuTreesByMlidAndP2AndP4(offset int, limit int, Mlid_ int, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p2 = ? and p4 = ?", Mlid_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP2AndP5 Get MenuTrees via MlidAndP2AndP5
func GetMenuTreesByMlidAndP2AndP5(offset int, limit int, Mlid_ int, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p2 = ? and p5 = ?", Mlid_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP2AndP6 Get MenuTrees via MlidAndP2AndP6
func GetMenuTreesByMlidAndP2AndP6(offset int, limit int, Mlid_ int, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p2 = ? and p6 = ?", Mlid_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP2AndP7 Get MenuTrees via MlidAndP2AndP7
func GetMenuTreesByMlidAndP2AndP7(offset int, limit int, Mlid_ int, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p2 = ? and p7 = ?", Mlid_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP2AndP8 Get MenuTrees via MlidAndP2AndP8
func GetMenuTreesByMlidAndP2AndP8(offset int, limit int, Mlid_ int, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p2 = ? and p8 = ?", Mlid_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP2AndP9 Get MenuTrees via MlidAndP2AndP9
func GetMenuTreesByMlidAndP2AndP9(offset int, limit int, Mlid_ int, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p2 = ? and p9 = ?", Mlid_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP2AndFormClass Get MenuTrees via MlidAndP2AndFormClass
func GetMenuTreesByMlidAndP2AndFormClass(offset int, limit int, Mlid_ int, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p2 = ? and form_class = ?", Mlid_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP3AndP4 Get MenuTrees via MlidAndP3AndP4
func GetMenuTreesByMlidAndP3AndP4(offset int, limit int, Mlid_ int, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p3 = ? and p4 = ?", Mlid_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP3AndP5 Get MenuTrees via MlidAndP3AndP5
func GetMenuTreesByMlidAndP3AndP5(offset int, limit int, Mlid_ int, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p3 = ? and p5 = ?", Mlid_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP3AndP6 Get MenuTrees via MlidAndP3AndP6
func GetMenuTreesByMlidAndP3AndP6(offset int, limit int, Mlid_ int, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p3 = ? and p6 = ?", Mlid_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP3AndP7 Get MenuTrees via MlidAndP3AndP7
func GetMenuTreesByMlidAndP3AndP7(offset int, limit int, Mlid_ int, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p3 = ? and p7 = ?", Mlid_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP3AndP8 Get MenuTrees via MlidAndP3AndP8
func GetMenuTreesByMlidAndP3AndP8(offset int, limit int, Mlid_ int, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p3 = ? and p8 = ?", Mlid_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP3AndP9 Get MenuTrees via MlidAndP3AndP9
func GetMenuTreesByMlidAndP3AndP9(offset int, limit int, Mlid_ int, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p3 = ? and p9 = ?", Mlid_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP3AndFormClass Get MenuTrees via MlidAndP3AndFormClass
func GetMenuTreesByMlidAndP3AndFormClass(offset int, limit int, Mlid_ int, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p3 = ? and form_class = ?", Mlid_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP4AndP5 Get MenuTrees via MlidAndP4AndP5
func GetMenuTreesByMlidAndP4AndP5(offset int, limit int, Mlid_ int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p4 = ? and p5 = ?", Mlid_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP4AndP6 Get MenuTrees via MlidAndP4AndP6
func GetMenuTreesByMlidAndP4AndP6(offset int, limit int, Mlid_ int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p4 = ? and p6 = ?", Mlid_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP4AndP7 Get MenuTrees via MlidAndP4AndP7
func GetMenuTreesByMlidAndP4AndP7(offset int, limit int, Mlid_ int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p4 = ? and p7 = ?", Mlid_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP4AndP8 Get MenuTrees via MlidAndP4AndP8
func GetMenuTreesByMlidAndP4AndP8(offset int, limit int, Mlid_ int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p4 = ? and p8 = ?", Mlid_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP4AndP9 Get MenuTrees via MlidAndP4AndP9
func GetMenuTreesByMlidAndP4AndP9(offset int, limit int, Mlid_ int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p4 = ? and p9 = ?", Mlid_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP4AndFormClass Get MenuTrees via MlidAndP4AndFormClass
func GetMenuTreesByMlidAndP4AndFormClass(offset int, limit int, Mlid_ int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p4 = ? and form_class = ?", Mlid_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP5AndP6 Get MenuTrees via MlidAndP5AndP6
func GetMenuTreesByMlidAndP5AndP6(offset int, limit int, Mlid_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p5 = ? and p6 = ?", Mlid_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP5AndP7 Get MenuTrees via MlidAndP5AndP7
func GetMenuTreesByMlidAndP5AndP7(offset int, limit int, Mlid_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p5 = ? and p7 = ?", Mlid_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP5AndP8 Get MenuTrees via MlidAndP5AndP8
func GetMenuTreesByMlidAndP5AndP8(offset int, limit int, Mlid_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p5 = ? and p8 = ?", Mlid_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP5AndP9 Get MenuTrees via MlidAndP5AndP9
func GetMenuTreesByMlidAndP5AndP9(offset int, limit int, Mlid_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p5 = ? and p9 = ?", Mlid_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP5AndFormClass Get MenuTrees via MlidAndP5AndFormClass
func GetMenuTreesByMlidAndP5AndFormClass(offset int, limit int, Mlid_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p5 = ? and form_class = ?", Mlid_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP6AndP7 Get MenuTrees via MlidAndP6AndP7
func GetMenuTreesByMlidAndP6AndP7(offset int, limit int, Mlid_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p6 = ? and p7 = ?", Mlid_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP6AndP8 Get MenuTrees via MlidAndP6AndP8
func GetMenuTreesByMlidAndP6AndP8(offset int, limit int, Mlid_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p6 = ? and p8 = ?", Mlid_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP6AndP9 Get MenuTrees via MlidAndP6AndP9
func GetMenuTreesByMlidAndP6AndP9(offset int, limit int, Mlid_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p6 = ? and p9 = ?", Mlid_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP6AndFormClass Get MenuTrees via MlidAndP6AndFormClass
func GetMenuTreesByMlidAndP6AndFormClass(offset int, limit int, Mlid_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p6 = ? and form_class = ?", Mlid_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP7AndP8 Get MenuTrees via MlidAndP7AndP8
func GetMenuTreesByMlidAndP7AndP8(offset int, limit int, Mlid_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p7 = ? and p8 = ?", Mlid_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP7AndP9 Get MenuTrees via MlidAndP7AndP9
func GetMenuTreesByMlidAndP7AndP9(offset int, limit int, Mlid_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p7 = ? and p9 = ?", Mlid_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP7AndFormClass Get MenuTrees via MlidAndP7AndFormClass
func GetMenuTreesByMlidAndP7AndFormClass(offset int, limit int, Mlid_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p7 = ? and form_class = ?", Mlid_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP8AndP9 Get MenuTrees via MlidAndP8AndP9
func GetMenuTreesByMlidAndP8AndP9(offset int, limit int, Mlid_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p8 = ? and p9 = ?", Mlid_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP8AndFormClass Get MenuTrees via MlidAndP8AndFormClass
func GetMenuTreesByMlidAndP8AndFormClass(offset int, limit int, Mlid_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p8 = ? and form_class = ?", Mlid_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP9AndFormClass Get MenuTrees via MlidAndP9AndFormClass
func GetMenuTreesByMlidAndP9AndFormClass(offset int, limit int, Mlid_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p9 = ? and form_class = ?", Mlid_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndRouteName Get MenuTrees via IdAndParentAndRouteName
func GetMenuTreesByIdAndParentAndRouteName(offset int, limit int, Id_ string, Parent_ string, RouteName_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and route_name = ?", Id_, Parent_, RouteName_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndRouteParamKey Get MenuTrees via IdAndParentAndRouteParamKey
func GetMenuTreesByIdAndParentAndRouteParamKey(offset int, limit int, Id_ string, Parent_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and route_param_key = ?", Id_, Parent_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndRouteParameters Get MenuTrees via IdAndParentAndRouteParameters
func GetMenuTreesByIdAndParentAndRouteParameters(offset int, limit int, Id_ string, Parent_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and route_parameters = ?", Id_, Parent_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndUrl Get MenuTrees via IdAndParentAndUrl
func GetMenuTreesByIdAndParentAndUrl(offset int, limit int, Id_ string, Parent_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and url = ?", Id_, Parent_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndTitle Get MenuTrees via IdAndParentAndTitle
func GetMenuTreesByIdAndParentAndTitle(offset int, limit int, Id_ string, Parent_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and title = ?", Id_, Parent_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndDescription Get MenuTrees via IdAndParentAndDescription
func GetMenuTreesByIdAndParentAndDescription(offset int, limit int, Id_ string, Parent_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and description = ?", Id_, Parent_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndClass Get MenuTrees via IdAndParentAndClass
func GetMenuTreesByIdAndParentAndClass(offset int, limit int, Id_ string, Parent_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and class = ?", Id_, Parent_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndOptions Get MenuTrees via IdAndParentAndOptions
func GetMenuTreesByIdAndParentAndOptions(offset int, limit int, Id_ string, Parent_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and options = ?", Id_, Parent_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndProvider Get MenuTrees via IdAndParentAndProvider
func GetMenuTreesByIdAndParentAndProvider(offset int, limit int, Id_ string, Parent_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and provider = ?", Id_, Parent_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndEnabled Get MenuTrees via IdAndParentAndEnabled
func GetMenuTreesByIdAndParentAndEnabled(offset int, limit int, Id_ string, Parent_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and enabled = ?", Id_, Parent_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndDiscovered Get MenuTrees via IdAndParentAndDiscovered
func GetMenuTreesByIdAndParentAndDiscovered(offset int, limit int, Id_ string, Parent_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and discovered = ?", Id_, Parent_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndExpanded Get MenuTrees via IdAndParentAndExpanded
func GetMenuTreesByIdAndParentAndExpanded(offset int, limit int, Id_ string, Parent_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and expanded = ?", Id_, Parent_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndWeight Get MenuTrees via IdAndParentAndWeight
func GetMenuTreesByIdAndParentAndWeight(offset int, limit int, Id_ string, Parent_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and weight = ?", Id_, Parent_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndMetadata Get MenuTrees via IdAndParentAndMetadata
func GetMenuTreesByIdAndParentAndMetadata(offset int, limit int, Id_ string, Parent_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and metadata = ?", Id_, Parent_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndHasChildren Get MenuTrees via IdAndParentAndHasChildren
func GetMenuTreesByIdAndParentAndHasChildren(offset int, limit int, Id_ string, Parent_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and has_children = ?", Id_, Parent_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndDepth Get MenuTrees via IdAndParentAndDepth
func GetMenuTreesByIdAndParentAndDepth(offset int, limit int, Id_ string, Parent_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and depth = ?", Id_, Parent_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndP1 Get MenuTrees via IdAndParentAndP1
func GetMenuTreesByIdAndParentAndP1(offset int, limit int, Id_ string, Parent_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and p1 = ?", Id_, Parent_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndP2 Get MenuTrees via IdAndParentAndP2
func GetMenuTreesByIdAndParentAndP2(offset int, limit int, Id_ string, Parent_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and p2 = ?", Id_, Parent_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndP3 Get MenuTrees via IdAndParentAndP3
func GetMenuTreesByIdAndParentAndP3(offset int, limit int, Id_ string, Parent_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and p3 = ?", Id_, Parent_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndP4 Get MenuTrees via IdAndParentAndP4
func GetMenuTreesByIdAndParentAndP4(offset int, limit int, Id_ string, Parent_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and p4 = ?", Id_, Parent_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndP5 Get MenuTrees via IdAndParentAndP5
func GetMenuTreesByIdAndParentAndP5(offset int, limit int, Id_ string, Parent_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and p5 = ?", Id_, Parent_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndP6 Get MenuTrees via IdAndParentAndP6
func GetMenuTreesByIdAndParentAndP6(offset int, limit int, Id_ string, Parent_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and p6 = ?", Id_, Parent_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndP7 Get MenuTrees via IdAndParentAndP7
func GetMenuTreesByIdAndParentAndP7(offset int, limit int, Id_ string, Parent_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and p7 = ?", Id_, Parent_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndP8 Get MenuTrees via IdAndParentAndP8
func GetMenuTreesByIdAndParentAndP8(offset int, limit int, Id_ string, Parent_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and p8 = ?", Id_, Parent_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndP9 Get MenuTrees via IdAndParentAndP9
func GetMenuTreesByIdAndParentAndP9(offset int, limit int, Id_ string, Parent_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and p9 = ?", Id_, Parent_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParentAndFormClass Get MenuTrees via IdAndParentAndFormClass
func GetMenuTreesByIdAndParentAndFormClass(offset int, limit int, Id_ string, Parent_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ? and form_class = ?", Id_, Parent_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndRouteParamKey Get MenuTrees via IdAndRouteNameAndRouteParamKey
func GetMenuTreesByIdAndRouteNameAndRouteParamKey(offset int, limit int, Id_ string, RouteName_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and route_param_key = ?", Id_, RouteName_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndRouteParameters Get MenuTrees via IdAndRouteNameAndRouteParameters
func GetMenuTreesByIdAndRouteNameAndRouteParameters(offset int, limit int, Id_ string, RouteName_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and route_parameters = ?", Id_, RouteName_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndUrl Get MenuTrees via IdAndRouteNameAndUrl
func GetMenuTreesByIdAndRouteNameAndUrl(offset int, limit int, Id_ string, RouteName_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and url = ?", Id_, RouteName_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndTitle Get MenuTrees via IdAndRouteNameAndTitle
func GetMenuTreesByIdAndRouteNameAndTitle(offset int, limit int, Id_ string, RouteName_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and title = ?", Id_, RouteName_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndDescription Get MenuTrees via IdAndRouteNameAndDescription
func GetMenuTreesByIdAndRouteNameAndDescription(offset int, limit int, Id_ string, RouteName_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and description = ?", Id_, RouteName_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndClass Get MenuTrees via IdAndRouteNameAndClass
func GetMenuTreesByIdAndRouteNameAndClass(offset int, limit int, Id_ string, RouteName_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and class = ?", Id_, RouteName_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndOptions Get MenuTrees via IdAndRouteNameAndOptions
func GetMenuTreesByIdAndRouteNameAndOptions(offset int, limit int, Id_ string, RouteName_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and options = ?", Id_, RouteName_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndProvider Get MenuTrees via IdAndRouteNameAndProvider
func GetMenuTreesByIdAndRouteNameAndProvider(offset int, limit int, Id_ string, RouteName_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and provider = ?", Id_, RouteName_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndEnabled Get MenuTrees via IdAndRouteNameAndEnabled
func GetMenuTreesByIdAndRouteNameAndEnabled(offset int, limit int, Id_ string, RouteName_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and enabled = ?", Id_, RouteName_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndDiscovered Get MenuTrees via IdAndRouteNameAndDiscovered
func GetMenuTreesByIdAndRouteNameAndDiscovered(offset int, limit int, Id_ string, RouteName_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and discovered = ?", Id_, RouteName_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndExpanded Get MenuTrees via IdAndRouteNameAndExpanded
func GetMenuTreesByIdAndRouteNameAndExpanded(offset int, limit int, Id_ string, RouteName_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and expanded = ?", Id_, RouteName_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndWeight Get MenuTrees via IdAndRouteNameAndWeight
func GetMenuTreesByIdAndRouteNameAndWeight(offset int, limit int, Id_ string, RouteName_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and weight = ?", Id_, RouteName_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndMetadata Get MenuTrees via IdAndRouteNameAndMetadata
func GetMenuTreesByIdAndRouteNameAndMetadata(offset int, limit int, Id_ string, RouteName_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and metadata = ?", Id_, RouteName_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndHasChildren Get MenuTrees via IdAndRouteNameAndHasChildren
func GetMenuTreesByIdAndRouteNameAndHasChildren(offset int, limit int, Id_ string, RouteName_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and has_children = ?", Id_, RouteName_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndDepth Get MenuTrees via IdAndRouteNameAndDepth
func GetMenuTreesByIdAndRouteNameAndDepth(offset int, limit int, Id_ string, RouteName_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and depth = ?", Id_, RouteName_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndP1 Get MenuTrees via IdAndRouteNameAndP1
func GetMenuTreesByIdAndRouteNameAndP1(offset int, limit int, Id_ string, RouteName_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and p1 = ?", Id_, RouteName_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndP2 Get MenuTrees via IdAndRouteNameAndP2
func GetMenuTreesByIdAndRouteNameAndP2(offset int, limit int, Id_ string, RouteName_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and p2 = ?", Id_, RouteName_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndP3 Get MenuTrees via IdAndRouteNameAndP3
func GetMenuTreesByIdAndRouteNameAndP3(offset int, limit int, Id_ string, RouteName_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and p3 = ?", Id_, RouteName_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndP4 Get MenuTrees via IdAndRouteNameAndP4
func GetMenuTreesByIdAndRouteNameAndP4(offset int, limit int, Id_ string, RouteName_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and p4 = ?", Id_, RouteName_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndP5 Get MenuTrees via IdAndRouteNameAndP5
func GetMenuTreesByIdAndRouteNameAndP5(offset int, limit int, Id_ string, RouteName_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and p5 = ?", Id_, RouteName_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndP6 Get MenuTrees via IdAndRouteNameAndP6
func GetMenuTreesByIdAndRouteNameAndP6(offset int, limit int, Id_ string, RouteName_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and p6 = ?", Id_, RouteName_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndP7 Get MenuTrees via IdAndRouteNameAndP7
func GetMenuTreesByIdAndRouteNameAndP7(offset int, limit int, Id_ string, RouteName_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and p7 = ?", Id_, RouteName_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndP8 Get MenuTrees via IdAndRouteNameAndP8
func GetMenuTreesByIdAndRouteNameAndP8(offset int, limit int, Id_ string, RouteName_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and p8 = ?", Id_, RouteName_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndP9 Get MenuTrees via IdAndRouteNameAndP9
func GetMenuTreesByIdAndRouteNameAndP9(offset int, limit int, Id_ string, RouteName_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and p9 = ?", Id_, RouteName_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteNameAndFormClass Get MenuTrees via IdAndRouteNameAndFormClass
func GetMenuTreesByIdAndRouteNameAndFormClass(offset int, limit int, Id_ string, RouteName_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ? and form_class = ?", Id_, RouteName_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndRouteParameters Get MenuTrees via IdAndRouteParamKeyAndRouteParameters
func GetMenuTreesByIdAndRouteParamKeyAndRouteParameters(offset int, limit int, Id_ string, RouteParamKey_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and route_parameters = ?", Id_, RouteParamKey_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndUrl Get MenuTrees via IdAndRouteParamKeyAndUrl
func GetMenuTreesByIdAndRouteParamKeyAndUrl(offset int, limit int, Id_ string, RouteParamKey_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and url = ?", Id_, RouteParamKey_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndTitle Get MenuTrees via IdAndRouteParamKeyAndTitle
func GetMenuTreesByIdAndRouteParamKeyAndTitle(offset int, limit int, Id_ string, RouteParamKey_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and title = ?", Id_, RouteParamKey_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndDescription Get MenuTrees via IdAndRouteParamKeyAndDescription
func GetMenuTreesByIdAndRouteParamKeyAndDescription(offset int, limit int, Id_ string, RouteParamKey_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and description = ?", Id_, RouteParamKey_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndClass Get MenuTrees via IdAndRouteParamKeyAndClass
func GetMenuTreesByIdAndRouteParamKeyAndClass(offset int, limit int, Id_ string, RouteParamKey_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and class = ?", Id_, RouteParamKey_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndOptions Get MenuTrees via IdAndRouteParamKeyAndOptions
func GetMenuTreesByIdAndRouteParamKeyAndOptions(offset int, limit int, Id_ string, RouteParamKey_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and options = ?", Id_, RouteParamKey_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndProvider Get MenuTrees via IdAndRouteParamKeyAndProvider
func GetMenuTreesByIdAndRouteParamKeyAndProvider(offset int, limit int, Id_ string, RouteParamKey_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and provider = ?", Id_, RouteParamKey_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndEnabled Get MenuTrees via IdAndRouteParamKeyAndEnabled
func GetMenuTreesByIdAndRouteParamKeyAndEnabled(offset int, limit int, Id_ string, RouteParamKey_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and enabled = ?", Id_, RouteParamKey_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndDiscovered Get MenuTrees via IdAndRouteParamKeyAndDiscovered
func GetMenuTreesByIdAndRouteParamKeyAndDiscovered(offset int, limit int, Id_ string, RouteParamKey_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and discovered = ?", Id_, RouteParamKey_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndExpanded Get MenuTrees via IdAndRouteParamKeyAndExpanded
func GetMenuTreesByIdAndRouteParamKeyAndExpanded(offset int, limit int, Id_ string, RouteParamKey_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and expanded = ?", Id_, RouteParamKey_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndWeight Get MenuTrees via IdAndRouteParamKeyAndWeight
func GetMenuTreesByIdAndRouteParamKeyAndWeight(offset int, limit int, Id_ string, RouteParamKey_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and weight = ?", Id_, RouteParamKey_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndMetadata Get MenuTrees via IdAndRouteParamKeyAndMetadata
func GetMenuTreesByIdAndRouteParamKeyAndMetadata(offset int, limit int, Id_ string, RouteParamKey_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and metadata = ?", Id_, RouteParamKey_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndHasChildren Get MenuTrees via IdAndRouteParamKeyAndHasChildren
func GetMenuTreesByIdAndRouteParamKeyAndHasChildren(offset int, limit int, Id_ string, RouteParamKey_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and has_children = ?", Id_, RouteParamKey_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndDepth Get MenuTrees via IdAndRouteParamKeyAndDepth
func GetMenuTreesByIdAndRouteParamKeyAndDepth(offset int, limit int, Id_ string, RouteParamKey_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and depth = ?", Id_, RouteParamKey_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndP1 Get MenuTrees via IdAndRouteParamKeyAndP1
func GetMenuTreesByIdAndRouteParamKeyAndP1(offset int, limit int, Id_ string, RouteParamKey_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and p1 = ?", Id_, RouteParamKey_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndP2 Get MenuTrees via IdAndRouteParamKeyAndP2
func GetMenuTreesByIdAndRouteParamKeyAndP2(offset int, limit int, Id_ string, RouteParamKey_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and p2 = ?", Id_, RouteParamKey_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndP3 Get MenuTrees via IdAndRouteParamKeyAndP3
func GetMenuTreesByIdAndRouteParamKeyAndP3(offset int, limit int, Id_ string, RouteParamKey_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and p3 = ?", Id_, RouteParamKey_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndP4 Get MenuTrees via IdAndRouteParamKeyAndP4
func GetMenuTreesByIdAndRouteParamKeyAndP4(offset int, limit int, Id_ string, RouteParamKey_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and p4 = ?", Id_, RouteParamKey_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndP5 Get MenuTrees via IdAndRouteParamKeyAndP5
func GetMenuTreesByIdAndRouteParamKeyAndP5(offset int, limit int, Id_ string, RouteParamKey_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and p5 = ?", Id_, RouteParamKey_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndP6 Get MenuTrees via IdAndRouteParamKeyAndP6
func GetMenuTreesByIdAndRouteParamKeyAndP6(offset int, limit int, Id_ string, RouteParamKey_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and p6 = ?", Id_, RouteParamKey_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndP7 Get MenuTrees via IdAndRouteParamKeyAndP7
func GetMenuTreesByIdAndRouteParamKeyAndP7(offset int, limit int, Id_ string, RouteParamKey_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and p7 = ?", Id_, RouteParamKey_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndP8 Get MenuTrees via IdAndRouteParamKeyAndP8
func GetMenuTreesByIdAndRouteParamKeyAndP8(offset int, limit int, Id_ string, RouteParamKey_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and p8 = ?", Id_, RouteParamKey_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndP9 Get MenuTrees via IdAndRouteParamKeyAndP9
func GetMenuTreesByIdAndRouteParamKeyAndP9(offset int, limit int, Id_ string, RouteParamKey_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and p9 = ?", Id_, RouteParamKey_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKeyAndFormClass Get MenuTrees via IdAndRouteParamKeyAndFormClass
func GetMenuTreesByIdAndRouteParamKeyAndFormClass(offset int, limit int, Id_ string, RouteParamKey_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ? and form_class = ?", Id_, RouteParamKey_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndUrl Get MenuTrees via IdAndRouteParametersAndUrl
func GetMenuTreesByIdAndRouteParametersAndUrl(offset int, limit int, Id_ string, RouteParameters_ []byte, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and url = ?", Id_, RouteParameters_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndTitle Get MenuTrees via IdAndRouteParametersAndTitle
func GetMenuTreesByIdAndRouteParametersAndTitle(offset int, limit int, Id_ string, RouteParameters_ []byte, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and title = ?", Id_, RouteParameters_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndDescription Get MenuTrees via IdAndRouteParametersAndDescription
func GetMenuTreesByIdAndRouteParametersAndDescription(offset int, limit int, Id_ string, RouteParameters_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and description = ?", Id_, RouteParameters_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndClass Get MenuTrees via IdAndRouteParametersAndClass
func GetMenuTreesByIdAndRouteParametersAndClass(offset int, limit int, Id_ string, RouteParameters_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and class = ?", Id_, RouteParameters_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndOptions Get MenuTrees via IdAndRouteParametersAndOptions
func GetMenuTreesByIdAndRouteParametersAndOptions(offset int, limit int, Id_ string, RouteParameters_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and options = ?", Id_, RouteParameters_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndProvider Get MenuTrees via IdAndRouteParametersAndProvider
func GetMenuTreesByIdAndRouteParametersAndProvider(offset int, limit int, Id_ string, RouteParameters_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and provider = ?", Id_, RouteParameters_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndEnabled Get MenuTrees via IdAndRouteParametersAndEnabled
func GetMenuTreesByIdAndRouteParametersAndEnabled(offset int, limit int, Id_ string, RouteParameters_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and enabled = ?", Id_, RouteParameters_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndDiscovered Get MenuTrees via IdAndRouteParametersAndDiscovered
func GetMenuTreesByIdAndRouteParametersAndDiscovered(offset int, limit int, Id_ string, RouteParameters_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and discovered = ?", Id_, RouteParameters_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndExpanded Get MenuTrees via IdAndRouteParametersAndExpanded
func GetMenuTreesByIdAndRouteParametersAndExpanded(offset int, limit int, Id_ string, RouteParameters_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and expanded = ?", Id_, RouteParameters_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndWeight Get MenuTrees via IdAndRouteParametersAndWeight
func GetMenuTreesByIdAndRouteParametersAndWeight(offset int, limit int, Id_ string, RouteParameters_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and weight = ?", Id_, RouteParameters_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndMetadata Get MenuTrees via IdAndRouteParametersAndMetadata
func GetMenuTreesByIdAndRouteParametersAndMetadata(offset int, limit int, Id_ string, RouteParameters_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and metadata = ?", Id_, RouteParameters_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndHasChildren Get MenuTrees via IdAndRouteParametersAndHasChildren
func GetMenuTreesByIdAndRouteParametersAndHasChildren(offset int, limit int, Id_ string, RouteParameters_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and has_children = ?", Id_, RouteParameters_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndDepth Get MenuTrees via IdAndRouteParametersAndDepth
func GetMenuTreesByIdAndRouteParametersAndDepth(offset int, limit int, Id_ string, RouteParameters_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and depth = ?", Id_, RouteParameters_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndP1 Get MenuTrees via IdAndRouteParametersAndP1
func GetMenuTreesByIdAndRouteParametersAndP1(offset int, limit int, Id_ string, RouteParameters_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and p1 = ?", Id_, RouteParameters_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndP2 Get MenuTrees via IdAndRouteParametersAndP2
func GetMenuTreesByIdAndRouteParametersAndP2(offset int, limit int, Id_ string, RouteParameters_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and p2 = ?", Id_, RouteParameters_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndP3 Get MenuTrees via IdAndRouteParametersAndP3
func GetMenuTreesByIdAndRouteParametersAndP3(offset int, limit int, Id_ string, RouteParameters_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and p3 = ?", Id_, RouteParameters_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndP4 Get MenuTrees via IdAndRouteParametersAndP4
func GetMenuTreesByIdAndRouteParametersAndP4(offset int, limit int, Id_ string, RouteParameters_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and p4 = ?", Id_, RouteParameters_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndP5 Get MenuTrees via IdAndRouteParametersAndP5
func GetMenuTreesByIdAndRouteParametersAndP5(offset int, limit int, Id_ string, RouteParameters_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and p5 = ?", Id_, RouteParameters_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndP6 Get MenuTrees via IdAndRouteParametersAndP6
func GetMenuTreesByIdAndRouteParametersAndP6(offset int, limit int, Id_ string, RouteParameters_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and p6 = ?", Id_, RouteParameters_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndP7 Get MenuTrees via IdAndRouteParametersAndP7
func GetMenuTreesByIdAndRouteParametersAndP7(offset int, limit int, Id_ string, RouteParameters_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and p7 = ?", Id_, RouteParameters_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndP8 Get MenuTrees via IdAndRouteParametersAndP8
func GetMenuTreesByIdAndRouteParametersAndP8(offset int, limit int, Id_ string, RouteParameters_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and p8 = ?", Id_, RouteParameters_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndP9 Get MenuTrees via IdAndRouteParametersAndP9
func GetMenuTreesByIdAndRouteParametersAndP9(offset int, limit int, Id_ string, RouteParameters_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and p9 = ?", Id_, RouteParameters_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParametersAndFormClass Get MenuTrees via IdAndRouteParametersAndFormClass
func GetMenuTreesByIdAndRouteParametersAndFormClass(offset int, limit int, Id_ string, RouteParameters_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ? and form_class = ?", Id_, RouteParameters_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndTitle Get MenuTrees via IdAndUrlAndTitle
func GetMenuTreesByIdAndUrlAndTitle(offset int, limit int, Id_ string, Url_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and title = ?", Id_, Url_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndDescription Get MenuTrees via IdAndUrlAndDescription
func GetMenuTreesByIdAndUrlAndDescription(offset int, limit int, Id_ string, Url_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and description = ?", Id_, Url_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndClass Get MenuTrees via IdAndUrlAndClass
func GetMenuTreesByIdAndUrlAndClass(offset int, limit int, Id_ string, Url_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and class = ?", Id_, Url_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndOptions Get MenuTrees via IdAndUrlAndOptions
func GetMenuTreesByIdAndUrlAndOptions(offset int, limit int, Id_ string, Url_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and options = ?", Id_, Url_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndProvider Get MenuTrees via IdAndUrlAndProvider
func GetMenuTreesByIdAndUrlAndProvider(offset int, limit int, Id_ string, Url_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and provider = ?", Id_, Url_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndEnabled Get MenuTrees via IdAndUrlAndEnabled
func GetMenuTreesByIdAndUrlAndEnabled(offset int, limit int, Id_ string, Url_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and enabled = ?", Id_, Url_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndDiscovered Get MenuTrees via IdAndUrlAndDiscovered
func GetMenuTreesByIdAndUrlAndDiscovered(offset int, limit int, Id_ string, Url_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and discovered = ?", Id_, Url_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndExpanded Get MenuTrees via IdAndUrlAndExpanded
func GetMenuTreesByIdAndUrlAndExpanded(offset int, limit int, Id_ string, Url_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and expanded = ?", Id_, Url_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndWeight Get MenuTrees via IdAndUrlAndWeight
func GetMenuTreesByIdAndUrlAndWeight(offset int, limit int, Id_ string, Url_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and weight = ?", Id_, Url_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndMetadata Get MenuTrees via IdAndUrlAndMetadata
func GetMenuTreesByIdAndUrlAndMetadata(offset int, limit int, Id_ string, Url_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and metadata = ?", Id_, Url_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndHasChildren Get MenuTrees via IdAndUrlAndHasChildren
func GetMenuTreesByIdAndUrlAndHasChildren(offset int, limit int, Id_ string, Url_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and has_children = ?", Id_, Url_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndDepth Get MenuTrees via IdAndUrlAndDepth
func GetMenuTreesByIdAndUrlAndDepth(offset int, limit int, Id_ string, Url_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and depth = ?", Id_, Url_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndP1 Get MenuTrees via IdAndUrlAndP1
func GetMenuTreesByIdAndUrlAndP1(offset int, limit int, Id_ string, Url_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and p1 = ?", Id_, Url_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndP2 Get MenuTrees via IdAndUrlAndP2
func GetMenuTreesByIdAndUrlAndP2(offset int, limit int, Id_ string, Url_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and p2 = ?", Id_, Url_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndP3 Get MenuTrees via IdAndUrlAndP3
func GetMenuTreesByIdAndUrlAndP3(offset int, limit int, Id_ string, Url_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and p3 = ?", Id_, Url_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndP4 Get MenuTrees via IdAndUrlAndP4
func GetMenuTreesByIdAndUrlAndP4(offset int, limit int, Id_ string, Url_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and p4 = ?", Id_, Url_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndP5 Get MenuTrees via IdAndUrlAndP5
func GetMenuTreesByIdAndUrlAndP5(offset int, limit int, Id_ string, Url_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and p5 = ?", Id_, Url_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndP6 Get MenuTrees via IdAndUrlAndP6
func GetMenuTreesByIdAndUrlAndP6(offset int, limit int, Id_ string, Url_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and p6 = ?", Id_, Url_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndP7 Get MenuTrees via IdAndUrlAndP7
func GetMenuTreesByIdAndUrlAndP7(offset int, limit int, Id_ string, Url_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and p7 = ?", Id_, Url_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndP8 Get MenuTrees via IdAndUrlAndP8
func GetMenuTreesByIdAndUrlAndP8(offset int, limit int, Id_ string, Url_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and p8 = ?", Id_, Url_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndP9 Get MenuTrees via IdAndUrlAndP9
func GetMenuTreesByIdAndUrlAndP9(offset int, limit int, Id_ string, Url_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and p9 = ?", Id_, Url_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrlAndFormClass Get MenuTrees via IdAndUrlAndFormClass
func GetMenuTreesByIdAndUrlAndFormClass(offset int, limit int, Id_ string, Url_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ? and form_class = ?", Id_, Url_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndDescription Get MenuTrees via IdAndTitleAndDescription
func GetMenuTreesByIdAndTitleAndDescription(offset int, limit int, Id_ string, Title_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and description = ?", Id_, Title_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndClass Get MenuTrees via IdAndTitleAndClass
func GetMenuTreesByIdAndTitleAndClass(offset int, limit int, Id_ string, Title_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and class = ?", Id_, Title_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndOptions Get MenuTrees via IdAndTitleAndOptions
func GetMenuTreesByIdAndTitleAndOptions(offset int, limit int, Id_ string, Title_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and options = ?", Id_, Title_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndProvider Get MenuTrees via IdAndTitleAndProvider
func GetMenuTreesByIdAndTitleAndProvider(offset int, limit int, Id_ string, Title_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and provider = ?", Id_, Title_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndEnabled Get MenuTrees via IdAndTitleAndEnabled
func GetMenuTreesByIdAndTitleAndEnabled(offset int, limit int, Id_ string, Title_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and enabled = ?", Id_, Title_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndDiscovered Get MenuTrees via IdAndTitleAndDiscovered
func GetMenuTreesByIdAndTitleAndDiscovered(offset int, limit int, Id_ string, Title_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and discovered = ?", Id_, Title_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndExpanded Get MenuTrees via IdAndTitleAndExpanded
func GetMenuTreesByIdAndTitleAndExpanded(offset int, limit int, Id_ string, Title_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and expanded = ?", Id_, Title_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndWeight Get MenuTrees via IdAndTitleAndWeight
func GetMenuTreesByIdAndTitleAndWeight(offset int, limit int, Id_ string, Title_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and weight = ?", Id_, Title_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndMetadata Get MenuTrees via IdAndTitleAndMetadata
func GetMenuTreesByIdAndTitleAndMetadata(offset int, limit int, Id_ string, Title_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and metadata = ?", Id_, Title_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndHasChildren Get MenuTrees via IdAndTitleAndHasChildren
func GetMenuTreesByIdAndTitleAndHasChildren(offset int, limit int, Id_ string, Title_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and has_children = ?", Id_, Title_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndDepth Get MenuTrees via IdAndTitleAndDepth
func GetMenuTreesByIdAndTitleAndDepth(offset int, limit int, Id_ string, Title_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and depth = ?", Id_, Title_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndP1 Get MenuTrees via IdAndTitleAndP1
func GetMenuTreesByIdAndTitleAndP1(offset int, limit int, Id_ string, Title_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and p1 = ?", Id_, Title_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndP2 Get MenuTrees via IdAndTitleAndP2
func GetMenuTreesByIdAndTitleAndP2(offset int, limit int, Id_ string, Title_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and p2 = ?", Id_, Title_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndP3 Get MenuTrees via IdAndTitleAndP3
func GetMenuTreesByIdAndTitleAndP3(offset int, limit int, Id_ string, Title_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and p3 = ?", Id_, Title_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndP4 Get MenuTrees via IdAndTitleAndP4
func GetMenuTreesByIdAndTitleAndP4(offset int, limit int, Id_ string, Title_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and p4 = ?", Id_, Title_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndP5 Get MenuTrees via IdAndTitleAndP5
func GetMenuTreesByIdAndTitleAndP5(offset int, limit int, Id_ string, Title_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and p5 = ?", Id_, Title_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndP6 Get MenuTrees via IdAndTitleAndP6
func GetMenuTreesByIdAndTitleAndP6(offset int, limit int, Id_ string, Title_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and p6 = ?", Id_, Title_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndP7 Get MenuTrees via IdAndTitleAndP7
func GetMenuTreesByIdAndTitleAndP7(offset int, limit int, Id_ string, Title_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and p7 = ?", Id_, Title_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndP8 Get MenuTrees via IdAndTitleAndP8
func GetMenuTreesByIdAndTitleAndP8(offset int, limit int, Id_ string, Title_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and p8 = ?", Id_, Title_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndP9 Get MenuTrees via IdAndTitleAndP9
func GetMenuTreesByIdAndTitleAndP9(offset int, limit int, Id_ string, Title_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and p9 = ?", Id_, Title_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitleAndFormClass Get MenuTrees via IdAndTitleAndFormClass
func GetMenuTreesByIdAndTitleAndFormClass(offset int, limit int, Id_ string, Title_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ? and form_class = ?", Id_, Title_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndClass Get MenuTrees via IdAndDescriptionAndClass
func GetMenuTreesByIdAndDescriptionAndClass(offset int, limit int, Id_ string, Description_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and class = ?", Id_, Description_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndOptions Get MenuTrees via IdAndDescriptionAndOptions
func GetMenuTreesByIdAndDescriptionAndOptions(offset int, limit int, Id_ string, Description_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and options = ?", Id_, Description_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndProvider Get MenuTrees via IdAndDescriptionAndProvider
func GetMenuTreesByIdAndDescriptionAndProvider(offset int, limit int, Id_ string, Description_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and provider = ?", Id_, Description_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndEnabled Get MenuTrees via IdAndDescriptionAndEnabled
func GetMenuTreesByIdAndDescriptionAndEnabled(offset int, limit int, Id_ string, Description_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and enabled = ?", Id_, Description_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndDiscovered Get MenuTrees via IdAndDescriptionAndDiscovered
func GetMenuTreesByIdAndDescriptionAndDiscovered(offset int, limit int, Id_ string, Description_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and discovered = ?", Id_, Description_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndExpanded Get MenuTrees via IdAndDescriptionAndExpanded
func GetMenuTreesByIdAndDescriptionAndExpanded(offset int, limit int, Id_ string, Description_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and expanded = ?", Id_, Description_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndWeight Get MenuTrees via IdAndDescriptionAndWeight
func GetMenuTreesByIdAndDescriptionAndWeight(offset int, limit int, Id_ string, Description_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and weight = ?", Id_, Description_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndMetadata Get MenuTrees via IdAndDescriptionAndMetadata
func GetMenuTreesByIdAndDescriptionAndMetadata(offset int, limit int, Id_ string, Description_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and metadata = ?", Id_, Description_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndHasChildren Get MenuTrees via IdAndDescriptionAndHasChildren
func GetMenuTreesByIdAndDescriptionAndHasChildren(offset int, limit int, Id_ string, Description_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and has_children = ?", Id_, Description_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndDepth Get MenuTrees via IdAndDescriptionAndDepth
func GetMenuTreesByIdAndDescriptionAndDepth(offset int, limit int, Id_ string, Description_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and depth = ?", Id_, Description_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndP1 Get MenuTrees via IdAndDescriptionAndP1
func GetMenuTreesByIdAndDescriptionAndP1(offset int, limit int, Id_ string, Description_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and p1 = ?", Id_, Description_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndP2 Get MenuTrees via IdAndDescriptionAndP2
func GetMenuTreesByIdAndDescriptionAndP2(offset int, limit int, Id_ string, Description_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and p2 = ?", Id_, Description_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndP3 Get MenuTrees via IdAndDescriptionAndP3
func GetMenuTreesByIdAndDescriptionAndP3(offset int, limit int, Id_ string, Description_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and p3 = ?", Id_, Description_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndP4 Get MenuTrees via IdAndDescriptionAndP4
func GetMenuTreesByIdAndDescriptionAndP4(offset int, limit int, Id_ string, Description_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and p4 = ?", Id_, Description_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndP5 Get MenuTrees via IdAndDescriptionAndP5
func GetMenuTreesByIdAndDescriptionAndP5(offset int, limit int, Id_ string, Description_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and p5 = ?", Id_, Description_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndP6 Get MenuTrees via IdAndDescriptionAndP6
func GetMenuTreesByIdAndDescriptionAndP6(offset int, limit int, Id_ string, Description_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and p6 = ?", Id_, Description_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndP7 Get MenuTrees via IdAndDescriptionAndP7
func GetMenuTreesByIdAndDescriptionAndP7(offset int, limit int, Id_ string, Description_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and p7 = ?", Id_, Description_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndP8 Get MenuTrees via IdAndDescriptionAndP8
func GetMenuTreesByIdAndDescriptionAndP8(offset int, limit int, Id_ string, Description_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and p8 = ?", Id_, Description_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndP9 Get MenuTrees via IdAndDescriptionAndP9
func GetMenuTreesByIdAndDescriptionAndP9(offset int, limit int, Id_ string, Description_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and p9 = ?", Id_, Description_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescriptionAndFormClass Get MenuTrees via IdAndDescriptionAndFormClass
func GetMenuTreesByIdAndDescriptionAndFormClass(offset int, limit int, Id_ string, Description_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ? and form_class = ?", Id_, Description_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndOptions Get MenuTrees via IdAndClassAndOptions
func GetMenuTreesByIdAndClassAndOptions(offset int, limit int, Id_ string, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and options = ?", Id_, Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndProvider Get MenuTrees via IdAndClassAndProvider
func GetMenuTreesByIdAndClassAndProvider(offset int, limit int, Id_ string, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and provider = ?", Id_, Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndEnabled Get MenuTrees via IdAndClassAndEnabled
func GetMenuTreesByIdAndClassAndEnabled(offset int, limit int, Id_ string, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and enabled = ?", Id_, Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndDiscovered Get MenuTrees via IdAndClassAndDiscovered
func GetMenuTreesByIdAndClassAndDiscovered(offset int, limit int, Id_ string, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and discovered = ?", Id_, Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndExpanded Get MenuTrees via IdAndClassAndExpanded
func GetMenuTreesByIdAndClassAndExpanded(offset int, limit int, Id_ string, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and expanded = ?", Id_, Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndWeight Get MenuTrees via IdAndClassAndWeight
func GetMenuTreesByIdAndClassAndWeight(offset int, limit int, Id_ string, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and weight = ?", Id_, Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndMetadata Get MenuTrees via IdAndClassAndMetadata
func GetMenuTreesByIdAndClassAndMetadata(offset int, limit int, Id_ string, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and metadata = ?", Id_, Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndHasChildren Get MenuTrees via IdAndClassAndHasChildren
func GetMenuTreesByIdAndClassAndHasChildren(offset int, limit int, Id_ string, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and has_children = ?", Id_, Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndDepth Get MenuTrees via IdAndClassAndDepth
func GetMenuTreesByIdAndClassAndDepth(offset int, limit int, Id_ string, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and depth = ?", Id_, Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndP1 Get MenuTrees via IdAndClassAndP1
func GetMenuTreesByIdAndClassAndP1(offset int, limit int, Id_ string, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and p1 = ?", Id_, Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndP2 Get MenuTrees via IdAndClassAndP2
func GetMenuTreesByIdAndClassAndP2(offset int, limit int, Id_ string, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and p2 = ?", Id_, Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndP3 Get MenuTrees via IdAndClassAndP3
func GetMenuTreesByIdAndClassAndP3(offset int, limit int, Id_ string, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and p3 = ?", Id_, Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndP4 Get MenuTrees via IdAndClassAndP4
func GetMenuTreesByIdAndClassAndP4(offset int, limit int, Id_ string, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and p4 = ?", Id_, Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndP5 Get MenuTrees via IdAndClassAndP5
func GetMenuTreesByIdAndClassAndP5(offset int, limit int, Id_ string, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and p5 = ?", Id_, Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndP6 Get MenuTrees via IdAndClassAndP6
func GetMenuTreesByIdAndClassAndP6(offset int, limit int, Id_ string, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and p6 = ?", Id_, Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndP7 Get MenuTrees via IdAndClassAndP7
func GetMenuTreesByIdAndClassAndP7(offset int, limit int, Id_ string, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and p7 = ?", Id_, Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndP8 Get MenuTrees via IdAndClassAndP8
func GetMenuTreesByIdAndClassAndP8(offset int, limit int, Id_ string, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and p8 = ?", Id_, Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndP9 Get MenuTrees via IdAndClassAndP9
func GetMenuTreesByIdAndClassAndP9(offset int, limit int, Id_ string, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and p9 = ?", Id_, Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClassAndFormClass Get MenuTrees via IdAndClassAndFormClass
func GetMenuTreesByIdAndClassAndFormClass(offset int, limit int, Id_ string, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ? and form_class = ?", Id_, Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndProvider Get MenuTrees via IdAndOptionsAndProvider
func GetMenuTreesByIdAndOptionsAndProvider(offset int, limit int, Id_ string, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and provider = ?", Id_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndEnabled Get MenuTrees via IdAndOptionsAndEnabled
func GetMenuTreesByIdAndOptionsAndEnabled(offset int, limit int, Id_ string, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and enabled = ?", Id_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndDiscovered Get MenuTrees via IdAndOptionsAndDiscovered
func GetMenuTreesByIdAndOptionsAndDiscovered(offset int, limit int, Id_ string, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and discovered = ?", Id_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndExpanded Get MenuTrees via IdAndOptionsAndExpanded
func GetMenuTreesByIdAndOptionsAndExpanded(offset int, limit int, Id_ string, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and expanded = ?", Id_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndWeight Get MenuTrees via IdAndOptionsAndWeight
func GetMenuTreesByIdAndOptionsAndWeight(offset int, limit int, Id_ string, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and weight = ?", Id_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndMetadata Get MenuTrees via IdAndOptionsAndMetadata
func GetMenuTreesByIdAndOptionsAndMetadata(offset int, limit int, Id_ string, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and metadata = ?", Id_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndHasChildren Get MenuTrees via IdAndOptionsAndHasChildren
func GetMenuTreesByIdAndOptionsAndHasChildren(offset int, limit int, Id_ string, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and has_children = ?", Id_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndDepth Get MenuTrees via IdAndOptionsAndDepth
func GetMenuTreesByIdAndOptionsAndDepth(offset int, limit int, Id_ string, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and depth = ?", Id_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndP1 Get MenuTrees via IdAndOptionsAndP1
func GetMenuTreesByIdAndOptionsAndP1(offset int, limit int, Id_ string, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and p1 = ?", Id_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndP2 Get MenuTrees via IdAndOptionsAndP2
func GetMenuTreesByIdAndOptionsAndP2(offset int, limit int, Id_ string, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and p2 = ?", Id_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndP3 Get MenuTrees via IdAndOptionsAndP3
func GetMenuTreesByIdAndOptionsAndP3(offset int, limit int, Id_ string, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and p3 = ?", Id_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndP4 Get MenuTrees via IdAndOptionsAndP4
func GetMenuTreesByIdAndOptionsAndP4(offset int, limit int, Id_ string, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and p4 = ?", Id_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndP5 Get MenuTrees via IdAndOptionsAndP5
func GetMenuTreesByIdAndOptionsAndP5(offset int, limit int, Id_ string, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and p5 = ?", Id_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndP6 Get MenuTrees via IdAndOptionsAndP6
func GetMenuTreesByIdAndOptionsAndP6(offset int, limit int, Id_ string, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and p6 = ?", Id_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndP7 Get MenuTrees via IdAndOptionsAndP7
func GetMenuTreesByIdAndOptionsAndP7(offset int, limit int, Id_ string, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and p7 = ?", Id_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndP8 Get MenuTrees via IdAndOptionsAndP8
func GetMenuTreesByIdAndOptionsAndP8(offset int, limit int, Id_ string, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and p8 = ?", Id_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndP9 Get MenuTrees via IdAndOptionsAndP9
func GetMenuTreesByIdAndOptionsAndP9(offset int, limit int, Id_ string, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and p9 = ?", Id_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptionsAndFormClass Get MenuTrees via IdAndOptionsAndFormClass
func GetMenuTreesByIdAndOptionsAndFormClass(offset int, limit int, Id_ string, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ? and form_class = ?", Id_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndEnabled Get MenuTrees via IdAndProviderAndEnabled
func GetMenuTreesByIdAndProviderAndEnabled(offset int, limit int, Id_ string, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and enabled = ?", Id_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndDiscovered Get MenuTrees via IdAndProviderAndDiscovered
func GetMenuTreesByIdAndProviderAndDiscovered(offset int, limit int, Id_ string, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and discovered = ?", Id_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndExpanded Get MenuTrees via IdAndProviderAndExpanded
func GetMenuTreesByIdAndProviderAndExpanded(offset int, limit int, Id_ string, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and expanded = ?", Id_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndWeight Get MenuTrees via IdAndProviderAndWeight
func GetMenuTreesByIdAndProviderAndWeight(offset int, limit int, Id_ string, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and weight = ?", Id_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndMetadata Get MenuTrees via IdAndProviderAndMetadata
func GetMenuTreesByIdAndProviderAndMetadata(offset int, limit int, Id_ string, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and metadata = ?", Id_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndHasChildren Get MenuTrees via IdAndProviderAndHasChildren
func GetMenuTreesByIdAndProviderAndHasChildren(offset int, limit int, Id_ string, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and has_children = ?", Id_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndDepth Get MenuTrees via IdAndProviderAndDepth
func GetMenuTreesByIdAndProviderAndDepth(offset int, limit int, Id_ string, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and depth = ?", Id_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndP1 Get MenuTrees via IdAndProviderAndP1
func GetMenuTreesByIdAndProviderAndP1(offset int, limit int, Id_ string, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and p1 = ?", Id_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndP2 Get MenuTrees via IdAndProviderAndP2
func GetMenuTreesByIdAndProviderAndP2(offset int, limit int, Id_ string, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and p2 = ?", Id_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndP3 Get MenuTrees via IdAndProviderAndP3
func GetMenuTreesByIdAndProviderAndP3(offset int, limit int, Id_ string, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and p3 = ?", Id_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndP4 Get MenuTrees via IdAndProviderAndP4
func GetMenuTreesByIdAndProviderAndP4(offset int, limit int, Id_ string, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and p4 = ?", Id_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndP5 Get MenuTrees via IdAndProviderAndP5
func GetMenuTreesByIdAndProviderAndP5(offset int, limit int, Id_ string, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and p5 = ?", Id_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndP6 Get MenuTrees via IdAndProviderAndP6
func GetMenuTreesByIdAndProviderAndP6(offset int, limit int, Id_ string, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and p6 = ?", Id_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndP7 Get MenuTrees via IdAndProviderAndP7
func GetMenuTreesByIdAndProviderAndP7(offset int, limit int, Id_ string, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and p7 = ?", Id_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndP8 Get MenuTrees via IdAndProviderAndP8
func GetMenuTreesByIdAndProviderAndP8(offset int, limit int, Id_ string, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and p8 = ?", Id_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndP9 Get MenuTrees via IdAndProviderAndP9
func GetMenuTreesByIdAndProviderAndP9(offset int, limit int, Id_ string, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and p9 = ?", Id_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProviderAndFormClass Get MenuTrees via IdAndProviderAndFormClass
func GetMenuTreesByIdAndProviderAndFormClass(offset int, limit int, Id_ string, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ? and form_class = ?", Id_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndDiscovered Get MenuTrees via IdAndEnabledAndDiscovered
func GetMenuTreesByIdAndEnabledAndDiscovered(offset int, limit int, Id_ string, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and discovered = ?", Id_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndExpanded Get MenuTrees via IdAndEnabledAndExpanded
func GetMenuTreesByIdAndEnabledAndExpanded(offset int, limit int, Id_ string, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and expanded = ?", Id_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndWeight Get MenuTrees via IdAndEnabledAndWeight
func GetMenuTreesByIdAndEnabledAndWeight(offset int, limit int, Id_ string, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and weight = ?", Id_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndMetadata Get MenuTrees via IdAndEnabledAndMetadata
func GetMenuTreesByIdAndEnabledAndMetadata(offset int, limit int, Id_ string, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and metadata = ?", Id_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndHasChildren Get MenuTrees via IdAndEnabledAndHasChildren
func GetMenuTreesByIdAndEnabledAndHasChildren(offset int, limit int, Id_ string, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and has_children = ?", Id_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndDepth Get MenuTrees via IdAndEnabledAndDepth
func GetMenuTreesByIdAndEnabledAndDepth(offset int, limit int, Id_ string, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and depth = ?", Id_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndP1 Get MenuTrees via IdAndEnabledAndP1
func GetMenuTreesByIdAndEnabledAndP1(offset int, limit int, Id_ string, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and p1 = ?", Id_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndP2 Get MenuTrees via IdAndEnabledAndP2
func GetMenuTreesByIdAndEnabledAndP2(offset int, limit int, Id_ string, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and p2 = ?", Id_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndP3 Get MenuTrees via IdAndEnabledAndP3
func GetMenuTreesByIdAndEnabledAndP3(offset int, limit int, Id_ string, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and p3 = ?", Id_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndP4 Get MenuTrees via IdAndEnabledAndP4
func GetMenuTreesByIdAndEnabledAndP4(offset int, limit int, Id_ string, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and p4 = ?", Id_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndP5 Get MenuTrees via IdAndEnabledAndP5
func GetMenuTreesByIdAndEnabledAndP5(offset int, limit int, Id_ string, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and p5 = ?", Id_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndP6 Get MenuTrees via IdAndEnabledAndP6
func GetMenuTreesByIdAndEnabledAndP6(offset int, limit int, Id_ string, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and p6 = ?", Id_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndP7 Get MenuTrees via IdAndEnabledAndP7
func GetMenuTreesByIdAndEnabledAndP7(offset int, limit int, Id_ string, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and p7 = ?", Id_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndP8 Get MenuTrees via IdAndEnabledAndP8
func GetMenuTreesByIdAndEnabledAndP8(offset int, limit int, Id_ string, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and p8 = ?", Id_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndP9 Get MenuTrees via IdAndEnabledAndP9
func GetMenuTreesByIdAndEnabledAndP9(offset int, limit int, Id_ string, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and p9 = ?", Id_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabledAndFormClass Get MenuTrees via IdAndEnabledAndFormClass
func GetMenuTreesByIdAndEnabledAndFormClass(offset int, limit int, Id_ string, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ? and form_class = ?", Id_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndExpanded Get MenuTrees via IdAndDiscoveredAndExpanded
func GetMenuTreesByIdAndDiscoveredAndExpanded(offset int, limit int, Id_ string, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and expanded = ?", Id_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndWeight Get MenuTrees via IdAndDiscoveredAndWeight
func GetMenuTreesByIdAndDiscoveredAndWeight(offset int, limit int, Id_ string, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and weight = ?", Id_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndMetadata Get MenuTrees via IdAndDiscoveredAndMetadata
func GetMenuTreesByIdAndDiscoveredAndMetadata(offset int, limit int, Id_ string, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and metadata = ?", Id_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndHasChildren Get MenuTrees via IdAndDiscoveredAndHasChildren
func GetMenuTreesByIdAndDiscoveredAndHasChildren(offset int, limit int, Id_ string, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and has_children = ?", Id_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndDepth Get MenuTrees via IdAndDiscoveredAndDepth
func GetMenuTreesByIdAndDiscoveredAndDepth(offset int, limit int, Id_ string, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and depth = ?", Id_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndP1 Get MenuTrees via IdAndDiscoveredAndP1
func GetMenuTreesByIdAndDiscoveredAndP1(offset int, limit int, Id_ string, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and p1 = ?", Id_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndP2 Get MenuTrees via IdAndDiscoveredAndP2
func GetMenuTreesByIdAndDiscoveredAndP2(offset int, limit int, Id_ string, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and p2 = ?", Id_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndP3 Get MenuTrees via IdAndDiscoveredAndP3
func GetMenuTreesByIdAndDiscoveredAndP3(offset int, limit int, Id_ string, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and p3 = ?", Id_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndP4 Get MenuTrees via IdAndDiscoveredAndP4
func GetMenuTreesByIdAndDiscoveredAndP4(offset int, limit int, Id_ string, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and p4 = ?", Id_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndP5 Get MenuTrees via IdAndDiscoveredAndP5
func GetMenuTreesByIdAndDiscoveredAndP5(offset int, limit int, Id_ string, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and p5 = ?", Id_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndP6 Get MenuTrees via IdAndDiscoveredAndP6
func GetMenuTreesByIdAndDiscoveredAndP6(offset int, limit int, Id_ string, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and p6 = ?", Id_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndP7 Get MenuTrees via IdAndDiscoveredAndP7
func GetMenuTreesByIdAndDiscoveredAndP7(offset int, limit int, Id_ string, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and p7 = ?", Id_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndP8 Get MenuTrees via IdAndDiscoveredAndP8
func GetMenuTreesByIdAndDiscoveredAndP8(offset int, limit int, Id_ string, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and p8 = ?", Id_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndP9 Get MenuTrees via IdAndDiscoveredAndP9
func GetMenuTreesByIdAndDiscoveredAndP9(offset int, limit int, Id_ string, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and p9 = ?", Id_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscoveredAndFormClass Get MenuTrees via IdAndDiscoveredAndFormClass
func GetMenuTreesByIdAndDiscoveredAndFormClass(offset int, limit int, Id_ string, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ? and form_class = ?", Id_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndWeight Get MenuTrees via IdAndExpandedAndWeight
func GetMenuTreesByIdAndExpandedAndWeight(offset int, limit int, Id_ string, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and weight = ?", Id_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndMetadata Get MenuTrees via IdAndExpandedAndMetadata
func GetMenuTreesByIdAndExpandedAndMetadata(offset int, limit int, Id_ string, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and metadata = ?", Id_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndHasChildren Get MenuTrees via IdAndExpandedAndHasChildren
func GetMenuTreesByIdAndExpandedAndHasChildren(offset int, limit int, Id_ string, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and has_children = ?", Id_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndDepth Get MenuTrees via IdAndExpandedAndDepth
func GetMenuTreesByIdAndExpandedAndDepth(offset int, limit int, Id_ string, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and depth = ?", Id_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndP1 Get MenuTrees via IdAndExpandedAndP1
func GetMenuTreesByIdAndExpandedAndP1(offset int, limit int, Id_ string, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and p1 = ?", Id_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndP2 Get MenuTrees via IdAndExpandedAndP2
func GetMenuTreesByIdAndExpandedAndP2(offset int, limit int, Id_ string, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and p2 = ?", Id_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndP3 Get MenuTrees via IdAndExpandedAndP3
func GetMenuTreesByIdAndExpandedAndP3(offset int, limit int, Id_ string, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and p3 = ?", Id_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndP4 Get MenuTrees via IdAndExpandedAndP4
func GetMenuTreesByIdAndExpandedAndP4(offset int, limit int, Id_ string, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and p4 = ?", Id_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndP5 Get MenuTrees via IdAndExpandedAndP5
func GetMenuTreesByIdAndExpandedAndP5(offset int, limit int, Id_ string, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and p5 = ?", Id_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndP6 Get MenuTrees via IdAndExpandedAndP6
func GetMenuTreesByIdAndExpandedAndP6(offset int, limit int, Id_ string, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and p6 = ?", Id_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndP7 Get MenuTrees via IdAndExpandedAndP7
func GetMenuTreesByIdAndExpandedAndP7(offset int, limit int, Id_ string, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and p7 = ?", Id_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndP8 Get MenuTrees via IdAndExpandedAndP8
func GetMenuTreesByIdAndExpandedAndP8(offset int, limit int, Id_ string, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and p8 = ?", Id_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndP9 Get MenuTrees via IdAndExpandedAndP9
func GetMenuTreesByIdAndExpandedAndP9(offset int, limit int, Id_ string, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and p9 = ?", Id_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpandedAndFormClass Get MenuTrees via IdAndExpandedAndFormClass
func GetMenuTreesByIdAndExpandedAndFormClass(offset int, limit int, Id_ string, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ? and form_class = ?", Id_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndMetadata Get MenuTrees via IdAndWeightAndMetadata
func GetMenuTreesByIdAndWeightAndMetadata(offset int, limit int, Id_ string, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and metadata = ?", Id_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndHasChildren Get MenuTrees via IdAndWeightAndHasChildren
func GetMenuTreesByIdAndWeightAndHasChildren(offset int, limit int, Id_ string, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and has_children = ?", Id_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndDepth Get MenuTrees via IdAndWeightAndDepth
func GetMenuTreesByIdAndWeightAndDepth(offset int, limit int, Id_ string, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and depth = ?", Id_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndP1 Get MenuTrees via IdAndWeightAndP1
func GetMenuTreesByIdAndWeightAndP1(offset int, limit int, Id_ string, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and p1 = ?", Id_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndP2 Get MenuTrees via IdAndWeightAndP2
func GetMenuTreesByIdAndWeightAndP2(offset int, limit int, Id_ string, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and p2 = ?", Id_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndP3 Get MenuTrees via IdAndWeightAndP3
func GetMenuTreesByIdAndWeightAndP3(offset int, limit int, Id_ string, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and p3 = ?", Id_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndP4 Get MenuTrees via IdAndWeightAndP4
func GetMenuTreesByIdAndWeightAndP4(offset int, limit int, Id_ string, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and p4 = ?", Id_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndP5 Get MenuTrees via IdAndWeightAndP5
func GetMenuTreesByIdAndWeightAndP5(offset int, limit int, Id_ string, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and p5 = ?", Id_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndP6 Get MenuTrees via IdAndWeightAndP6
func GetMenuTreesByIdAndWeightAndP6(offset int, limit int, Id_ string, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and p6 = ?", Id_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndP7 Get MenuTrees via IdAndWeightAndP7
func GetMenuTreesByIdAndWeightAndP7(offset int, limit int, Id_ string, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and p7 = ?", Id_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndP8 Get MenuTrees via IdAndWeightAndP8
func GetMenuTreesByIdAndWeightAndP8(offset int, limit int, Id_ string, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and p8 = ?", Id_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndP9 Get MenuTrees via IdAndWeightAndP9
func GetMenuTreesByIdAndWeightAndP9(offset int, limit int, Id_ string, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and p9 = ?", Id_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeightAndFormClass Get MenuTrees via IdAndWeightAndFormClass
func GetMenuTreesByIdAndWeightAndFormClass(offset int, limit int, Id_ string, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ? and form_class = ?", Id_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndHasChildren Get MenuTrees via IdAndMetadataAndHasChildren
func GetMenuTreesByIdAndMetadataAndHasChildren(offset int, limit int, Id_ string, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and has_children = ?", Id_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndDepth Get MenuTrees via IdAndMetadataAndDepth
func GetMenuTreesByIdAndMetadataAndDepth(offset int, limit int, Id_ string, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and depth = ?", Id_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndP1 Get MenuTrees via IdAndMetadataAndP1
func GetMenuTreesByIdAndMetadataAndP1(offset int, limit int, Id_ string, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and p1 = ?", Id_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndP2 Get MenuTrees via IdAndMetadataAndP2
func GetMenuTreesByIdAndMetadataAndP2(offset int, limit int, Id_ string, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and p2 = ?", Id_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndP3 Get MenuTrees via IdAndMetadataAndP3
func GetMenuTreesByIdAndMetadataAndP3(offset int, limit int, Id_ string, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and p3 = ?", Id_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndP4 Get MenuTrees via IdAndMetadataAndP4
func GetMenuTreesByIdAndMetadataAndP4(offset int, limit int, Id_ string, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and p4 = ?", Id_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndP5 Get MenuTrees via IdAndMetadataAndP5
func GetMenuTreesByIdAndMetadataAndP5(offset int, limit int, Id_ string, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and p5 = ?", Id_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndP6 Get MenuTrees via IdAndMetadataAndP6
func GetMenuTreesByIdAndMetadataAndP6(offset int, limit int, Id_ string, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and p6 = ?", Id_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndP7 Get MenuTrees via IdAndMetadataAndP7
func GetMenuTreesByIdAndMetadataAndP7(offset int, limit int, Id_ string, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and p7 = ?", Id_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndP8 Get MenuTrees via IdAndMetadataAndP8
func GetMenuTreesByIdAndMetadataAndP8(offset int, limit int, Id_ string, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and p8 = ?", Id_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndP9 Get MenuTrees via IdAndMetadataAndP9
func GetMenuTreesByIdAndMetadataAndP9(offset int, limit int, Id_ string, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and p9 = ?", Id_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadataAndFormClass Get MenuTrees via IdAndMetadataAndFormClass
func GetMenuTreesByIdAndMetadataAndFormClass(offset int, limit int, Id_ string, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ? and form_class = ?", Id_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndDepth Get MenuTrees via IdAndHasChildrenAndDepth
func GetMenuTreesByIdAndHasChildrenAndDepth(offset int, limit int, Id_ string, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and depth = ?", Id_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndP1 Get MenuTrees via IdAndHasChildrenAndP1
func GetMenuTreesByIdAndHasChildrenAndP1(offset int, limit int, Id_ string, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and p1 = ?", Id_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndP2 Get MenuTrees via IdAndHasChildrenAndP2
func GetMenuTreesByIdAndHasChildrenAndP2(offset int, limit int, Id_ string, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and p2 = ?", Id_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndP3 Get MenuTrees via IdAndHasChildrenAndP3
func GetMenuTreesByIdAndHasChildrenAndP3(offset int, limit int, Id_ string, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and p3 = ?", Id_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndP4 Get MenuTrees via IdAndHasChildrenAndP4
func GetMenuTreesByIdAndHasChildrenAndP4(offset int, limit int, Id_ string, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and p4 = ?", Id_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndP5 Get MenuTrees via IdAndHasChildrenAndP5
func GetMenuTreesByIdAndHasChildrenAndP5(offset int, limit int, Id_ string, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and p5 = ?", Id_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndP6 Get MenuTrees via IdAndHasChildrenAndP6
func GetMenuTreesByIdAndHasChildrenAndP6(offset int, limit int, Id_ string, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and p6 = ?", Id_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndP7 Get MenuTrees via IdAndHasChildrenAndP7
func GetMenuTreesByIdAndHasChildrenAndP7(offset int, limit int, Id_ string, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and p7 = ?", Id_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndP8 Get MenuTrees via IdAndHasChildrenAndP8
func GetMenuTreesByIdAndHasChildrenAndP8(offset int, limit int, Id_ string, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and p8 = ?", Id_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndP9 Get MenuTrees via IdAndHasChildrenAndP9
func GetMenuTreesByIdAndHasChildrenAndP9(offset int, limit int, Id_ string, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and p9 = ?", Id_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildrenAndFormClass Get MenuTrees via IdAndHasChildrenAndFormClass
func GetMenuTreesByIdAndHasChildrenAndFormClass(offset int, limit int, Id_ string, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ? and form_class = ?", Id_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepthAndP1 Get MenuTrees via IdAndDepthAndP1
func GetMenuTreesByIdAndDepthAndP1(offset int, limit int, Id_ string, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ? and p1 = ?", Id_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepthAndP2 Get MenuTrees via IdAndDepthAndP2
func GetMenuTreesByIdAndDepthAndP2(offset int, limit int, Id_ string, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ? and p2 = ?", Id_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepthAndP3 Get MenuTrees via IdAndDepthAndP3
func GetMenuTreesByIdAndDepthAndP3(offset int, limit int, Id_ string, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ? and p3 = ?", Id_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepthAndP4 Get MenuTrees via IdAndDepthAndP4
func GetMenuTreesByIdAndDepthAndP4(offset int, limit int, Id_ string, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ? and p4 = ?", Id_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepthAndP5 Get MenuTrees via IdAndDepthAndP5
func GetMenuTreesByIdAndDepthAndP5(offset int, limit int, Id_ string, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ? and p5 = ?", Id_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepthAndP6 Get MenuTrees via IdAndDepthAndP6
func GetMenuTreesByIdAndDepthAndP6(offset int, limit int, Id_ string, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ? and p6 = ?", Id_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepthAndP7 Get MenuTrees via IdAndDepthAndP7
func GetMenuTreesByIdAndDepthAndP7(offset int, limit int, Id_ string, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ? and p7 = ?", Id_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepthAndP8 Get MenuTrees via IdAndDepthAndP8
func GetMenuTreesByIdAndDepthAndP8(offset int, limit int, Id_ string, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ? and p8 = ?", Id_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepthAndP9 Get MenuTrees via IdAndDepthAndP9
func GetMenuTreesByIdAndDepthAndP9(offset int, limit int, Id_ string, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ? and p9 = ?", Id_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepthAndFormClass Get MenuTrees via IdAndDepthAndFormClass
func GetMenuTreesByIdAndDepthAndFormClass(offset int, limit int, Id_ string, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ? and form_class = ?", Id_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP1AndP2 Get MenuTrees via IdAndP1AndP2
func GetMenuTreesByIdAndP1AndP2(offset int, limit int, Id_ string, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p1 = ? and p2 = ?", Id_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP1AndP3 Get MenuTrees via IdAndP1AndP3
func GetMenuTreesByIdAndP1AndP3(offset int, limit int, Id_ string, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p1 = ? and p3 = ?", Id_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP1AndP4 Get MenuTrees via IdAndP1AndP4
func GetMenuTreesByIdAndP1AndP4(offset int, limit int, Id_ string, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p1 = ? and p4 = ?", Id_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP1AndP5 Get MenuTrees via IdAndP1AndP5
func GetMenuTreesByIdAndP1AndP5(offset int, limit int, Id_ string, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p1 = ? and p5 = ?", Id_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP1AndP6 Get MenuTrees via IdAndP1AndP6
func GetMenuTreesByIdAndP1AndP6(offset int, limit int, Id_ string, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p1 = ? and p6 = ?", Id_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP1AndP7 Get MenuTrees via IdAndP1AndP7
func GetMenuTreesByIdAndP1AndP7(offset int, limit int, Id_ string, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p1 = ? and p7 = ?", Id_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP1AndP8 Get MenuTrees via IdAndP1AndP8
func GetMenuTreesByIdAndP1AndP8(offset int, limit int, Id_ string, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p1 = ? and p8 = ?", Id_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP1AndP9 Get MenuTrees via IdAndP1AndP9
func GetMenuTreesByIdAndP1AndP9(offset int, limit int, Id_ string, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p1 = ? and p9 = ?", Id_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP1AndFormClass Get MenuTrees via IdAndP1AndFormClass
func GetMenuTreesByIdAndP1AndFormClass(offset int, limit int, Id_ string, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p1 = ? and form_class = ?", Id_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP2AndP3 Get MenuTrees via IdAndP2AndP3
func GetMenuTreesByIdAndP2AndP3(offset int, limit int, Id_ string, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p2 = ? and p3 = ?", Id_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP2AndP4 Get MenuTrees via IdAndP2AndP4
func GetMenuTreesByIdAndP2AndP4(offset int, limit int, Id_ string, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p2 = ? and p4 = ?", Id_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP2AndP5 Get MenuTrees via IdAndP2AndP5
func GetMenuTreesByIdAndP2AndP5(offset int, limit int, Id_ string, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p2 = ? and p5 = ?", Id_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP2AndP6 Get MenuTrees via IdAndP2AndP6
func GetMenuTreesByIdAndP2AndP6(offset int, limit int, Id_ string, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p2 = ? and p6 = ?", Id_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP2AndP7 Get MenuTrees via IdAndP2AndP7
func GetMenuTreesByIdAndP2AndP7(offset int, limit int, Id_ string, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p2 = ? and p7 = ?", Id_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP2AndP8 Get MenuTrees via IdAndP2AndP8
func GetMenuTreesByIdAndP2AndP8(offset int, limit int, Id_ string, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p2 = ? and p8 = ?", Id_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP2AndP9 Get MenuTrees via IdAndP2AndP9
func GetMenuTreesByIdAndP2AndP9(offset int, limit int, Id_ string, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p2 = ? and p9 = ?", Id_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP2AndFormClass Get MenuTrees via IdAndP2AndFormClass
func GetMenuTreesByIdAndP2AndFormClass(offset int, limit int, Id_ string, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p2 = ? and form_class = ?", Id_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP3AndP4 Get MenuTrees via IdAndP3AndP4
func GetMenuTreesByIdAndP3AndP4(offset int, limit int, Id_ string, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p3 = ? and p4 = ?", Id_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP3AndP5 Get MenuTrees via IdAndP3AndP5
func GetMenuTreesByIdAndP3AndP5(offset int, limit int, Id_ string, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p3 = ? and p5 = ?", Id_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP3AndP6 Get MenuTrees via IdAndP3AndP6
func GetMenuTreesByIdAndP3AndP6(offset int, limit int, Id_ string, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p3 = ? and p6 = ?", Id_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP3AndP7 Get MenuTrees via IdAndP3AndP7
func GetMenuTreesByIdAndP3AndP7(offset int, limit int, Id_ string, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p3 = ? and p7 = ?", Id_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP3AndP8 Get MenuTrees via IdAndP3AndP8
func GetMenuTreesByIdAndP3AndP8(offset int, limit int, Id_ string, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p3 = ? and p8 = ?", Id_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP3AndP9 Get MenuTrees via IdAndP3AndP9
func GetMenuTreesByIdAndP3AndP9(offset int, limit int, Id_ string, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p3 = ? and p9 = ?", Id_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP3AndFormClass Get MenuTrees via IdAndP3AndFormClass
func GetMenuTreesByIdAndP3AndFormClass(offset int, limit int, Id_ string, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p3 = ? and form_class = ?", Id_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP4AndP5 Get MenuTrees via IdAndP4AndP5
func GetMenuTreesByIdAndP4AndP5(offset int, limit int, Id_ string, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p4 = ? and p5 = ?", Id_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP4AndP6 Get MenuTrees via IdAndP4AndP6
func GetMenuTreesByIdAndP4AndP6(offset int, limit int, Id_ string, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p4 = ? and p6 = ?", Id_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP4AndP7 Get MenuTrees via IdAndP4AndP7
func GetMenuTreesByIdAndP4AndP7(offset int, limit int, Id_ string, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p4 = ? and p7 = ?", Id_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP4AndP8 Get MenuTrees via IdAndP4AndP8
func GetMenuTreesByIdAndP4AndP8(offset int, limit int, Id_ string, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p4 = ? and p8 = ?", Id_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP4AndP9 Get MenuTrees via IdAndP4AndP9
func GetMenuTreesByIdAndP4AndP9(offset int, limit int, Id_ string, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p4 = ? and p9 = ?", Id_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP4AndFormClass Get MenuTrees via IdAndP4AndFormClass
func GetMenuTreesByIdAndP4AndFormClass(offset int, limit int, Id_ string, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p4 = ? and form_class = ?", Id_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP5AndP6 Get MenuTrees via IdAndP5AndP6
func GetMenuTreesByIdAndP5AndP6(offset int, limit int, Id_ string, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p5 = ? and p6 = ?", Id_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP5AndP7 Get MenuTrees via IdAndP5AndP7
func GetMenuTreesByIdAndP5AndP7(offset int, limit int, Id_ string, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p5 = ? and p7 = ?", Id_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP5AndP8 Get MenuTrees via IdAndP5AndP8
func GetMenuTreesByIdAndP5AndP8(offset int, limit int, Id_ string, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p5 = ? and p8 = ?", Id_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP5AndP9 Get MenuTrees via IdAndP5AndP9
func GetMenuTreesByIdAndP5AndP9(offset int, limit int, Id_ string, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p5 = ? and p9 = ?", Id_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP5AndFormClass Get MenuTrees via IdAndP5AndFormClass
func GetMenuTreesByIdAndP5AndFormClass(offset int, limit int, Id_ string, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p5 = ? and form_class = ?", Id_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP6AndP7 Get MenuTrees via IdAndP6AndP7
func GetMenuTreesByIdAndP6AndP7(offset int, limit int, Id_ string, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p6 = ? and p7 = ?", Id_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP6AndP8 Get MenuTrees via IdAndP6AndP8
func GetMenuTreesByIdAndP6AndP8(offset int, limit int, Id_ string, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p6 = ? and p8 = ?", Id_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP6AndP9 Get MenuTrees via IdAndP6AndP9
func GetMenuTreesByIdAndP6AndP9(offset int, limit int, Id_ string, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p6 = ? and p9 = ?", Id_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP6AndFormClass Get MenuTrees via IdAndP6AndFormClass
func GetMenuTreesByIdAndP6AndFormClass(offset int, limit int, Id_ string, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p6 = ? and form_class = ?", Id_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP7AndP8 Get MenuTrees via IdAndP7AndP8
func GetMenuTreesByIdAndP7AndP8(offset int, limit int, Id_ string, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p7 = ? and p8 = ?", Id_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP7AndP9 Get MenuTrees via IdAndP7AndP9
func GetMenuTreesByIdAndP7AndP9(offset int, limit int, Id_ string, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p7 = ? and p9 = ?", Id_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP7AndFormClass Get MenuTrees via IdAndP7AndFormClass
func GetMenuTreesByIdAndP7AndFormClass(offset int, limit int, Id_ string, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p7 = ? and form_class = ?", Id_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP8AndP9 Get MenuTrees via IdAndP8AndP9
func GetMenuTreesByIdAndP8AndP9(offset int, limit int, Id_ string, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p8 = ? and p9 = ?", Id_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP8AndFormClass Get MenuTrees via IdAndP8AndFormClass
func GetMenuTreesByIdAndP8AndFormClass(offset int, limit int, Id_ string, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p8 = ? and form_class = ?", Id_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP9AndFormClass Get MenuTrees via IdAndP9AndFormClass
func GetMenuTreesByIdAndP9AndFormClass(offset int, limit int, Id_ string, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p9 = ? and form_class = ?", Id_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndRouteParamKey Get MenuTrees via ParentAndRouteNameAndRouteParamKey
func GetMenuTreesByParentAndRouteNameAndRouteParamKey(offset int, limit int, Parent_ string, RouteName_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and route_param_key = ?", Parent_, RouteName_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndRouteParameters Get MenuTrees via ParentAndRouteNameAndRouteParameters
func GetMenuTreesByParentAndRouteNameAndRouteParameters(offset int, limit int, Parent_ string, RouteName_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and route_parameters = ?", Parent_, RouteName_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndUrl Get MenuTrees via ParentAndRouteNameAndUrl
func GetMenuTreesByParentAndRouteNameAndUrl(offset int, limit int, Parent_ string, RouteName_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and url = ?", Parent_, RouteName_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndTitle Get MenuTrees via ParentAndRouteNameAndTitle
func GetMenuTreesByParentAndRouteNameAndTitle(offset int, limit int, Parent_ string, RouteName_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and title = ?", Parent_, RouteName_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndDescription Get MenuTrees via ParentAndRouteNameAndDescription
func GetMenuTreesByParentAndRouteNameAndDescription(offset int, limit int, Parent_ string, RouteName_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and description = ?", Parent_, RouteName_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndClass Get MenuTrees via ParentAndRouteNameAndClass
func GetMenuTreesByParentAndRouteNameAndClass(offset int, limit int, Parent_ string, RouteName_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and class = ?", Parent_, RouteName_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndOptions Get MenuTrees via ParentAndRouteNameAndOptions
func GetMenuTreesByParentAndRouteNameAndOptions(offset int, limit int, Parent_ string, RouteName_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and options = ?", Parent_, RouteName_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndProvider Get MenuTrees via ParentAndRouteNameAndProvider
func GetMenuTreesByParentAndRouteNameAndProvider(offset int, limit int, Parent_ string, RouteName_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and provider = ?", Parent_, RouteName_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndEnabled Get MenuTrees via ParentAndRouteNameAndEnabled
func GetMenuTreesByParentAndRouteNameAndEnabled(offset int, limit int, Parent_ string, RouteName_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and enabled = ?", Parent_, RouteName_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndDiscovered Get MenuTrees via ParentAndRouteNameAndDiscovered
func GetMenuTreesByParentAndRouteNameAndDiscovered(offset int, limit int, Parent_ string, RouteName_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and discovered = ?", Parent_, RouteName_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndExpanded Get MenuTrees via ParentAndRouteNameAndExpanded
func GetMenuTreesByParentAndRouteNameAndExpanded(offset int, limit int, Parent_ string, RouteName_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and expanded = ?", Parent_, RouteName_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndWeight Get MenuTrees via ParentAndRouteNameAndWeight
func GetMenuTreesByParentAndRouteNameAndWeight(offset int, limit int, Parent_ string, RouteName_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and weight = ?", Parent_, RouteName_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndMetadata Get MenuTrees via ParentAndRouteNameAndMetadata
func GetMenuTreesByParentAndRouteNameAndMetadata(offset int, limit int, Parent_ string, RouteName_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and metadata = ?", Parent_, RouteName_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndHasChildren Get MenuTrees via ParentAndRouteNameAndHasChildren
func GetMenuTreesByParentAndRouteNameAndHasChildren(offset int, limit int, Parent_ string, RouteName_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and has_children = ?", Parent_, RouteName_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndDepth Get MenuTrees via ParentAndRouteNameAndDepth
func GetMenuTreesByParentAndRouteNameAndDepth(offset int, limit int, Parent_ string, RouteName_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and depth = ?", Parent_, RouteName_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndP1 Get MenuTrees via ParentAndRouteNameAndP1
func GetMenuTreesByParentAndRouteNameAndP1(offset int, limit int, Parent_ string, RouteName_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and p1 = ?", Parent_, RouteName_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndP2 Get MenuTrees via ParentAndRouteNameAndP2
func GetMenuTreesByParentAndRouteNameAndP2(offset int, limit int, Parent_ string, RouteName_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and p2 = ?", Parent_, RouteName_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndP3 Get MenuTrees via ParentAndRouteNameAndP3
func GetMenuTreesByParentAndRouteNameAndP3(offset int, limit int, Parent_ string, RouteName_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and p3 = ?", Parent_, RouteName_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndP4 Get MenuTrees via ParentAndRouteNameAndP4
func GetMenuTreesByParentAndRouteNameAndP4(offset int, limit int, Parent_ string, RouteName_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and p4 = ?", Parent_, RouteName_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndP5 Get MenuTrees via ParentAndRouteNameAndP5
func GetMenuTreesByParentAndRouteNameAndP5(offset int, limit int, Parent_ string, RouteName_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and p5 = ?", Parent_, RouteName_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndP6 Get MenuTrees via ParentAndRouteNameAndP6
func GetMenuTreesByParentAndRouteNameAndP6(offset int, limit int, Parent_ string, RouteName_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and p6 = ?", Parent_, RouteName_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndP7 Get MenuTrees via ParentAndRouteNameAndP7
func GetMenuTreesByParentAndRouteNameAndP7(offset int, limit int, Parent_ string, RouteName_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and p7 = ?", Parent_, RouteName_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndP8 Get MenuTrees via ParentAndRouteNameAndP8
func GetMenuTreesByParentAndRouteNameAndP8(offset int, limit int, Parent_ string, RouteName_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and p8 = ?", Parent_, RouteName_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndP9 Get MenuTrees via ParentAndRouteNameAndP9
func GetMenuTreesByParentAndRouteNameAndP9(offset int, limit int, Parent_ string, RouteName_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and p9 = ?", Parent_, RouteName_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteNameAndFormClass Get MenuTrees via ParentAndRouteNameAndFormClass
func GetMenuTreesByParentAndRouteNameAndFormClass(offset int, limit int, Parent_ string, RouteName_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ? and form_class = ?", Parent_, RouteName_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndRouteParameters Get MenuTrees via ParentAndRouteParamKeyAndRouteParameters
func GetMenuTreesByParentAndRouteParamKeyAndRouteParameters(offset int, limit int, Parent_ string, RouteParamKey_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and route_parameters = ?", Parent_, RouteParamKey_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndUrl Get MenuTrees via ParentAndRouteParamKeyAndUrl
func GetMenuTreesByParentAndRouteParamKeyAndUrl(offset int, limit int, Parent_ string, RouteParamKey_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and url = ?", Parent_, RouteParamKey_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndTitle Get MenuTrees via ParentAndRouteParamKeyAndTitle
func GetMenuTreesByParentAndRouteParamKeyAndTitle(offset int, limit int, Parent_ string, RouteParamKey_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and title = ?", Parent_, RouteParamKey_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndDescription Get MenuTrees via ParentAndRouteParamKeyAndDescription
func GetMenuTreesByParentAndRouteParamKeyAndDescription(offset int, limit int, Parent_ string, RouteParamKey_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and description = ?", Parent_, RouteParamKey_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndClass Get MenuTrees via ParentAndRouteParamKeyAndClass
func GetMenuTreesByParentAndRouteParamKeyAndClass(offset int, limit int, Parent_ string, RouteParamKey_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and class = ?", Parent_, RouteParamKey_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndOptions Get MenuTrees via ParentAndRouteParamKeyAndOptions
func GetMenuTreesByParentAndRouteParamKeyAndOptions(offset int, limit int, Parent_ string, RouteParamKey_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and options = ?", Parent_, RouteParamKey_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndProvider Get MenuTrees via ParentAndRouteParamKeyAndProvider
func GetMenuTreesByParentAndRouteParamKeyAndProvider(offset int, limit int, Parent_ string, RouteParamKey_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and provider = ?", Parent_, RouteParamKey_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndEnabled Get MenuTrees via ParentAndRouteParamKeyAndEnabled
func GetMenuTreesByParentAndRouteParamKeyAndEnabled(offset int, limit int, Parent_ string, RouteParamKey_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and enabled = ?", Parent_, RouteParamKey_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndDiscovered Get MenuTrees via ParentAndRouteParamKeyAndDiscovered
func GetMenuTreesByParentAndRouteParamKeyAndDiscovered(offset int, limit int, Parent_ string, RouteParamKey_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and discovered = ?", Parent_, RouteParamKey_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndExpanded Get MenuTrees via ParentAndRouteParamKeyAndExpanded
func GetMenuTreesByParentAndRouteParamKeyAndExpanded(offset int, limit int, Parent_ string, RouteParamKey_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and expanded = ?", Parent_, RouteParamKey_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndWeight Get MenuTrees via ParentAndRouteParamKeyAndWeight
func GetMenuTreesByParentAndRouteParamKeyAndWeight(offset int, limit int, Parent_ string, RouteParamKey_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and weight = ?", Parent_, RouteParamKey_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndMetadata Get MenuTrees via ParentAndRouteParamKeyAndMetadata
func GetMenuTreesByParentAndRouteParamKeyAndMetadata(offset int, limit int, Parent_ string, RouteParamKey_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and metadata = ?", Parent_, RouteParamKey_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndHasChildren Get MenuTrees via ParentAndRouteParamKeyAndHasChildren
func GetMenuTreesByParentAndRouteParamKeyAndHasChildren(offset int, limit int, Parent_ string, RouteParamKey_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and has_children = ?", Parent_, RouteParamKey_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndDepth Get MenuTrees via ParentAndRouteParamKeyAndDepth
func GetMenuTreesByParentAndRouteParamKeyAndDepth(offset int, limit int, Parent_ string, RouteParamKey_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and depth = ?", Parent_, RouteParamKey_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndP1 Get MenuTrees via ParentAndRouteParamKeyAndP1
func GetMenuTreesByParentAndRouteParamKeyAndP1(offset int, limit int, Parent_ string, RouteParamKey_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and p1 = ?", Parent_, RouteParamKey_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndP2 Get MenuTrees via ParentAndRouteParamKeyAndP2
func GetMenuTreesByParentAndRouteParamKeyAndP2(offset int, limit int, Parent_ string, RouteParamKey_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and p2 = ?", Parent_, RouteParamKey_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndP3 Get MenuTrees via ParentAndRouteParamKeyAndP3
func GetMenuTreesByParentAndRouteParamKeyAndP3(offset int, limit int, Parent_ string, RouteParamKey_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and p3 = ?", Parent_, RouteParamKey_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndP4 Get MenuTrees via ParentAndRouteParamKeyAndP4
func GetMenuTreesByParentAndRouteParamKeyAndP4(offset int, limit int, Parent_ string, RouteParamKey_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and p4 = ?", Parent_, RouteParamKey_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndP5 Get MenuTrees via ParentAndRouteParamKeyAndP5
func GetMenuTreesByParentAndRouteParamKeyAndP5(offset int, limit int, Parent_ string, RouteParamKey_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and p5 = ?", Parent_, RouteParamKey_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndP6 Get MenuTrees via ParentAndRouteParamKeyAndP6
func GetMenuTreesByParentAndRouteParamKeyAndP6(offset int, limit int, Parent_ string, RouteParamKey_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and p6 = ?", Parent_, RouteParamKey_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndP7 Get MenuTrees via ParentAndRouteParamKeyAndP7
func GetMenuTreesByParentAndRouteParamKeyAndP7(offset int, limit int, Parent_ string, RouteParamKey_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and p7 = ?", Parent_, RouteParamKey_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndP8 Get MenuTrees via ParentAndRouteParamKeyAndP8
func GetMenuTreesByParentAndRouteParamKeyAndP8(offset int, limit int, Parent_ string, RouteParamKey_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and p8 = ?", Parent_, RouteParamKey_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndP9 Get MenuTrees via ParentAndRouteParamKeyAndP9
func GetMenuTreesByParentAndRouteParamKeyAndP9(offset int, limit int, Parent_ string, RouteParamKey_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and p9 = ?", Parent_, RouteParamKey_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKeyAndFormClass Get MenuTrees via ParentAndRouteParamKeyAndFormClass
func GetMenuTreesByParentAndRouteParamKeyAndFormClass(offset int, limit int, Parent_ string, RouteParamKey_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ? and form_class = ?", Parent_, RouteParamKey_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndUrl Get MenuTrees via ParentAndRouteParametersAndUrl
func GetMenuTreesByParentAndRouteParametersAndUrl(offset int, limit int, Parent_ string, RouteParameters_ []byte, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and url = ?", Parent_, RouteParameters_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndTitle Get MenuTrees via ParentAndRouteParametersAndTitle
func GetMenuTreesByParentAndRouteParametersAndTitle(offset int, limit int, Parent_ string, RouteParameters_ []byte, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and title = ?", Parent_, RouteParameters_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndDescription Get MenuTrees via ParentAndRouteParametersAndDescription
func GetMenuTreesByParentAndRouteParametersAndDescription(offset int, limit int, Parent_ string, RouteParameters_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and description = ?", Parent_, RouteParameters_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndClass Get MenuTrees via ParentAndRouteParametersAndClass
func GetMenuTreesByParentAndRouteParametersAndClass(offset int, limit int, Parent_ string, RouteParameters_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and class = ?", Parent_, RouteParameters_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndOptions Get MenuTrees via ParentAndRouteParametersAndOptions
func GetMenuTreesByParentAndRouteParametersAndOptions(offset int, limit int, Parent_ string, RouteParameters_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and options = ?", Parent_, RouteParameters_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndProvider Get MenuTrees via ParentAndRouteParametersAndProvider
func GetMenuTreesByParentAndRouteParametersAndProvider(offset int, limit int, Parent_ string, RouteParameters_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and provider = ?", Parent_, RouteParameters_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndEnabled Get MenuTrees via ParentAndRouteParametersAndEnabled
func GetMenuTreesByParentAndRouteParametersAndEnabled(offset int, limit int, Parent_ string, RouteParameters_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and enabled = ?", Parent_, RouteParameters_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndDiscovered Get MenuTrees via ParentAndRouteParametersAndDiscovered
func GetMenuTreesByParentAndRouteParametersAndDiscovered(offset int, limit int, Parent_ string, RouteParameters_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and discovered = ?", Parent_, RouteParameters_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndExpanded Get MenuTrees via ParentAndRouteParametersAndExpanded
func GetMenuTreesByParentAndRouteParametersAndExpanded(offset int, limit int, Parent_ string, RouteParameters_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and expanded = ?", Parent_, RouteParameters_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndWeight Get MenuTrees via ParentAndRouteParametersAndWeight
func GetMenuTreesByParentAndRouteParametersAndWeight(offset int, limit int, Parent_ string, RouteParameters_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and weight = ?", Parent_, RouteParameters_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndMetadata Get MenuTrees via ParentAndRouteParametersAndMetadata
func GetMenuTreesByParentAndRouteParametersAndMetadata(offset int, limit int, Parent_ string, RouteParameters_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and metadata = ?", Parent_, RouteParameters_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndHasChildren Get MenuTrees via ParentAndRouteParametersAndHasChildren
func GetMenuTreesByParentAndRouteParametersAndHasChildren(offset int, limit int, Parent_ string, RouteParameters_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and has_children = ?", Parent_, RouteParameters_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndDepth Get MenuTrees via ParentAndRouteParametersAndDepth
func GetMenuTreesByParentAndRouteParametersAndDepth(offset int, limit int, Parent_ string, RouteParameters_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and depth = ?", Parent_, RouteParameters_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndP1 Get MenuTrees via ParentAndRouteParametersAndP1
func GetMenuTreesByParentAndRouteParametersAndP1(offset int, limit int, Parent_ string, RouteParameters_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and p1 = ?", Parent_, RouteParameters_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndP2 Get MenuTrees via ParentAndRouteParametersAndP2
func GetMenuTreesByParentAndRouteParametersAndP2(offset int, limit int, Parent_ string, RouteParameters_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and p2 = ?", Parent_, RouteParameters_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndP3 Get MenuTrees via ParentAndRouteParametersAndP3
func GetMenuTreesByParentAndRouteParametersAndP3(offset int, limit int, Parent_ string, RouteParameters_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and p3 = ?", Parent_, RouteParameters_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndP4 Get MenuTrees via ParentAndRouteParametersAndP4
func GetMenuTreesByParentAndRouteParametersAndP4(offset int, limit int, Parent_ string, RouteParameters_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and p4 = ?", Parent_, RouteParameters_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndP5 Get MenuTrees via ParentAndRouteParametersAndP5
func GetMenuTreesByParentAndRouteParametersAndP5(offset int, limit int, Parent_ string, RouteParameters_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and p5 = ?", Parent_, RouteParameters_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndP6 Get MenuTrees via ParentAndRouteParametersAndP6
func GetMenuTreesByParentAndRouteParametersAndP6(offset int, limit int, Parent_ string, RouteParameters_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and p6 = ?", Parent_, RouteParameters_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndP7 Get MenuTrees via ParentAndRouteParametersAndP7
func GetMenuTreesByParentAndRouteParametersAndP7(offset int, limit int, Parent_ string, RouteParameters_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and p7 = ?", Parent_, RouteParameters_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndP8 Get MenuTrees via ParentAndRouteParametersAndP8
func GetMenuTreesByParentAndRouteParametersAndP8(offset int, limit int, Parent_ string, RouteParameters_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and p8 = ?", Parent_, RouteParameters_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndP9 Get MenuTrees via ParentAndRouteParametersAndP9
func GetMenuTreesByParentAndRouteParametersAndP9(offset int, limit int, Parent_ string, RouteParameters_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and p9 = ?", Parent_, RouteParameters_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParametersAndFormClass Get MenuTrees via ParentAndRouteParametersAndFormClass
func GetMenuTreesByParentAndRouteParametersAndFormClass(offset int, limit int, Parent_ string, RouteParameters_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ? and form_class = ?", Parent_, RouteParameters_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndTitle Get MenuTrees via ParentAndUrlAndTitle
func GetMenuTreesByParentAndUrlAndTitle(offset int, limit int, Parent_ string, Url_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and title = ?", Parent_, Url_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndDescription Get MenuTrees via ParentAndUrlAndDescription
func GetMenuTreesByParentAndUrlAndDescription(offset int, limit int, Parent_ string, Url_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and description = ?", Parent_, Url_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndClass Get MenuTrees via ParentAndUrlAndClass
func GetMenuTreesByParentAndUrlAndClass(offset int, limit int, Parent_ string, Url_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and class = ?", Parent_, Url_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndOptions Get MenuTrees via ParentAndUrlAndOptions
func GetMenuTreesByParentAndUrlAndOptions(offset int, limit int, Parent_ string, Url_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and options = ?", Parent_, Url_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndProvider Get MenuTrees via ParentAndUrlAndProvider
func GetMenuTreesByParentAndUrlAndProvider(offset int, limit int, Parent_ string, Url_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and provider = ?", Parent_, Url_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndEnabled Get MenuTrees via ParentAndUrlAndEnabled
func GetMenuTreesByParentAndUrlAndEnabled(offset int, limit int, Parent_ string, Url_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and enabled = ?", Parent_, Url_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndDiscovered Get MenuTrees via ParentAndUrlAndDiscovered
func GetMenuTreesByParentAndUrlAndDiscovered(offset int, limit int, Parent_ string, Url_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and discovered = ?", Parent_, Url_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndExpanded Get MenuTrees via ParentAndUrlAndExpanded
func GetMenuTreesByParentAndUrlAndExpanded(offset int, limit int, Parent_ string, Url_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and expanded = ?", Parent_, Url_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndWeight Get MenuTrees via ParentAndUrlAndWeight
func GetMenuTreesByParentAndUrlAndWeight(offset int, limit int, Parent_ string, Url_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and weight = ?", Parent_, Url_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndMetadata Get MenuTrees via ParentAndUrlAndMetadata
func GetMenuTreesByParentAndUrlAndMetadata(offset int, limit int, Parent_ string, Url_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and metadata = ?", Parent_, Url_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndHasChildren Get MenuTrees via ParentAndUrlAndHasChildren
func GetMenuTreesByParentAndUrlAndHasChildren(offset int, limit int, Parent_ string, Url_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and has_children = ?", Parent_, Url_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndDepth Get MenuTrees via ParentAndUrlAndDepth
func GetMenuTreesByParentAndUrlAndDepth(offset int, limit int, Parent_ string, Url_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and depth = ?", Parent_, Url_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndP1 Get MenuTrees via ParentAndUrlAndP1
func GetMenuTreesByParentAndUrlAndP1(offset int, limit int, Parent_ string, Url_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and p1 = ?", Parent_, Url_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndP2 Get MenuTrees via ParentAndUrlAndP2
func GetMenuTreesByParentAndUrlAndP2(offset int, limit int, Parent_ string, Url_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and p2 = ?", Parent_, Url_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndP3 Get MenuTrees via ParentAndUrlAndP3
func GetMenuTreesByParentAndUrlAndP3(offset int, limit int, Parent_ string, Url_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and p3 = ?", Parent_, Url_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndP4 Get MenuTrees via ParentAndUrlAndP4
func GetMenuTreesByParentAndUrlAndP4(offset int, limit int, Parent_ string, Url_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and p4 = ?", Parent_, Url_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndP5 Get MenuTrees via ParentAndUrlAndP5
func GetMenuTreesByParentAndUrlAndP5(offset int, limit int, Parent_ string, Url_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and p5 = ?", Parent_, Url_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndP6 Get MenuTrees via ParentAndUrlAndP6
func GetMenuTreesByParentAndUrlAndP6(offset int, limit int, Parent_ string, Url_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and p6 = ?", Parent_, Url_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndP7 Get MenuTrees via ParentAndUrlAndP7
func GetMenuTreesByParentAndUrlAndP7(offset int, limit int, Parent_ string, Url_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and p7 = ?", Parent_, Url_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndP8 Get MenuTrees via ParentAndUrlAndP8
func GetMenuTreesByParentAndUrlAndP8(offset int, limit int, Parent_ string, Url_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and p8 = ?", Parent_, Url_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndP9 Get MenuTrees via ParentAndUrlAndP9
func GetMenuTreesByParentAndUrlAndP9(offset int, limit int, Parent_ string, Url_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and p9 = ?", Parent_, Url_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrlAndFormClass Get MenuTrees via ParentAndUrlAndFormClass
func GetMenuTreesByParentAndUrlAndFormClass(offset int, limit int, Parent_ string, Url_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ? and form_class = ?", Parent_, Url_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndDescription Get MenuTrees via ParentAndTitleAndDescription
func GetMenuTreesByParentAndTitleAndDescription(offset int, limit int, Parent_ string, Title_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and description = ?", Parent_, Title_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndClass Get MenuTrees via ParentAndTitleAndClass
func GetMenuTreesByParentAndTitleAndClass(offset int, limit int, Parent_ string, Title_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and class = ?", Parent_, Title_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndOptions Get MenuTrees via ParentAndTitleAndOptions
func GetMenuTreesByParentAndTitleAndOptions(offset int, limit int, Parent_ string, Title_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and options = ?", Parent_, Title_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndProvider Get MenuTrees via ParentAndTitleAndProvider
func GetMenuTreesByParentAndTitleAndProvider(offset int, limit int, Parent_ string, Title_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and provider = ?", Parent_, Title_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndEnabled Get MenuTrees via ParentAndTitleAndEnabled
func GetMenuTreesByParentAndTitleAndEnabled(offset int, limit int, Parent_ string, Title_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and enabled = ?", Parent_, Title_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndDiscovered Get MenuTrees via ParentAndTitleAndDiscovered
func GetMenuTreesByParentAndTitleAndDiscovered(offset int, limit int, Parent_ string, Title_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and discovered = ?", Parent_, Title_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndExpanded Get MenuTrees via ParentAndTitleAndExpanded
func GetMenuTreesByParentAndTitleAndExpanded(offset int, limit int, Parent_ string, Title_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and expanded = ?", Parent_, Title_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndWeight Get MenuTrees via ParentAndTitleAndWeight
func GetMenuTreesByParentAndTitleAndWeight(offset int, limit int, Parent_ string, Title_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and weight = ?", Parent_, Title_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndMetadata Get MenuTrees via ParentAndTitleAndMetadata
func GetMenuTreesByParentAndTitleAndMetadata(offset int, limit int, Parent_ string, Title_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and metadata = ?", Parent_, Title_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndHasChildren Get MenuTrees via ParentAndTitleAndHasChildren
func GetMenuTreesByParentAndTitleAndHasChildren(offset int, limit int, Parent_ string, Title_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and has_children = ?", Parent_, Title_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndDepth Get MenuTrees via ParentAndTitleAndDepth
func GetMenuTreesByParentAndTitleAndDepth(offset int, limit int, Parent_ string, Title_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and depth = ?", Parent_, Title_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndP1 Get MenuTrees via ParentAndTitleAndP1
func GetMenuTreesByParentAndTitleAndP1(offset int, limit int, Parent_ string, Title_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and p1 = ?", Parent_, Title_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndP2 Get MenuTrees via ParentAndTitleAndP2
func GetMenuTreesByParentAndTitleAndP2(offset int, limit int, Parent_ string, Title_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and p2 = ?", Parent_, Title_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndP3 Get MenuTrees via ParentAndTitleAndP3
func GetMenuTreesByParentAndTitleAndP3(offset int, limit int, Parent_ string, Title_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and p3 = ?", Parent_, Title_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndP4 Get MenuTrees via ParentAndTitleAndP4
func GetMenuTreesByParentAndTitleAndP4(offset int, limit int, Parent_ string, Title_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and p4 = ?", Parent_, Title_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndP5 Get MenuTrees via ParentAndTitleAndP5
func GetMenuTreesByParentAndTitleAndP5(offset int, limit int, Parent_ string, Title_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and p5 = ?", Parent_, Title_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndP6 Get MenuTrees via ParentAndTitleAndP6
func GetMenuTreesByParentAndTitleAndP6(offset int, limit int, Parent_ string, Title_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and p6 = ?", Parent_, Title_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndP7 Get MenuTrees via ParentAndTitleAndP7
func GetMenuTreesByParentAndTitleAndP7(offset int, limit int, Parent_ string, Title_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and p7 = ?", Parent_, Title_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndP8 Get MenuTrees via ParentAndTitleAndP8
func GetMenuTreesByParentAndTitleAndP8(offset int, limit int, Parent_ string, Title_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and p8 = ?", Parent_, Title_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndP9 Get MenuTrees via ParentAndTitleAndP9
func GetMenuTreesByParentAndTitleAndP9(offset int, limit int, Parent_ string, Title_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and p9 = ?", Parent_, Title_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitleAndFormClass Get MenuTrees via ParentAndTitleAndFormClass
func GetMenuTreesByParentAndTitleAndFormClass(offset int, limit int, Parent_ string, Title_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ? and form_class = ?", Parent_, Title_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndClass Get MenuTrees via ParentAndDescriptionAndClass
func GetMenuTreesByParentAndDescriptionAndClass(offset int, limit int, Parent_ string, Description_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and class = ?", Parent_, Description_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndOptions Get MenuTrees via ParentAndDescriptionAndOptions
func GetMenuTreesByParentAndDescriptionAndOptions(offset int, limit int, Parent_ string, Description_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and options = ?", Parent_, Description_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndProvider Get MenuTrees via ParentAndDescriptionAndProvider
func GetMenuTreesByParentAndDescriptionAndProvider(offset int, limit int, Parent_ string, Description_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and provider = ?", Parent_, Description_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndEnabled Get MenuTrees via ParentAndDescriptionAndEnabled
func GetMenuTreesByParentAndDescriptionAndEnabled(offset int, limit int, Parent_ string, Description_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and enabled = ?", Parent_, Description_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndDiscovered Get MenuTrees via ParentAndDescriptionAndDiscovered
func GetMenuTreesByParentAndDescriptionAndDiscovered(offset int, limit int, Parent_ string, Description_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and discovered = ?", Parent_, Description_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndExpanded Get MenuTrees via ParentAndDescriptionAndExpanded
func GetMenuTreesByParentAndDescriptionAndExpanded(offset int, limit int, Parent_ string, Description_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and expanded = ?", Parent_, Description_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndWeight Get MenuTrees via ParentAndDescriptionAndWeight
func GetMenuTreesByParentAndDescriptionAndWeight(offset int, limit int, Parent_ string, Description_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and weight = ?", Parent_, Description_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndMetadata Get MenuTrees via ParentAndDescriptionAndMetadata
func GetMenuTreesByParentAndDescriptionAndMetadata(offset int, limit int, Parent_ string, Description_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and metadata = ?", Parent_, Description_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndHasChildren Get MenuTrees via ParentAndDescriptionAndHasChildren
func GetMenuTreesByParentAndDescriptionAndHasChildren(offset int, limit int, Parent_ string, Description_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and has_children = ?", Parent_, Description_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndDepth Get MenuTrees via ParentAndDescriptionAndDepth
func GetMenuTreesByParentAndDescriptionAndDepth(offset int, limit int, Parent_ string, Description_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and depth = ?", Parent_, Description_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndP1 Get MenuTrees via ParentAndDescriptionAndP1
func GetMenuTreesByParentAndDescriptionAndP1(offset int, limit int, Parent_ string, Description_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and p1 = ?", Parent_, Description_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndP2 Get MenuTrees via ParentAndDescriptionAndP2
func GetMenuTreesByParentAndDescriptionAndP2(offset int, limit int, Parent_ string, Description_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and p2 = ?", Parent_, Description_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndP3 Get MenuTrees via ParentAndDescriptionAndP3
func GetMenuTreesByParentAndDescriptionAndP3(offset int, limit int, Parent_ string, Description_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and p3 = ?", Parent_, Description_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndP4 Get MenuTrees via ParentAndDescriptionAndP4
func GetMenuTreesByParentAndDescriptionAndP4(offset int, limit int, Parent_ string, Description_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and p4 = ?", Parent_, Description_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndP5 Get MenuTrees via ParentAndDescriptionAndP5
func GetMenuTreesByParentAndDescriptionAndP5(offset int, limit int, Parent_ string, Description_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and p5 = ?", Parent_, Description_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndP6 Get MenuTrees via ParentAndDescriptionAndP6
func GetMenuTreesByParentAndDescriptionAndP6(offset int, limit int, Parent_ string, Description_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and p6 = ?", Parent_, Description_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndP7 Get MenuTrees via ParentAndDescriptionAndP7
func GetMenuTreesByParentAndDescriptionAndP7(offset int, limit int, Parent_ string, Description_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and p7 = ?", Parent_, Description_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndP8 Get MenuTrees via ParentAndDescriptionAndP8
func GetMenuTreesByParentAndDescriptionAndP8(offset int, limit int, Parent_ string, Description_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and p8 = ?", Parent_, Description_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndP9 Get MenuTrees via ParentAndDescriptionAndP9
func GetMenuTreesByParentAndDescriptionAndP9(offset int, limit int, Parent_ string, Description_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and p9 = ?", Parent_, Description_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescriptionAndFormClass Get MenuTrees via ParentAndDescriptionAndFormClass
func GetMenuTreesByParentAndDescriptionAndFormClass(offset int, limit int, Parent_ string, Description_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ? and form_class = ?", Parent_, Description_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndOptions Get MenuTrees via ParentAndClassAndOptions
func GetMenuTreesByParentAndClassAndOptions(offset int, limit int, Parent_ string, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and options = ?", Parent_, Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndProvider Get MenuTrees via ParentAndClassAndProvider
func GetMenuTreesByParentAndClassAndProvider(offset int, limit int, Parent_ string, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and provider = ?", Parent_, Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndEnabled Get MenuTrees via ParentAndClassAndEnabled
func GetMenuTreesByParentAndClassAndEnabled(offset int, limit int, Parent_ string, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and enabled = ?", Parent_, Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndDiscovered Get MenuTrees via ParentAndClassAndDiscovered
func GetMenuTreesByParentAndClassAndDiscovered(offset int, limit int, Parent_ string, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and discovered = ?", Parent_, Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndExpanded Get MenuTrees via ParentAndClassAndExpanded
func GetMenuTreesByParentAndClassAndExpanded(offset int, limit int, Parent_ string, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and expanded = ?", Parent_, Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndWeight Get MenuTrees via ParentAndClassAndWeight
func GetMenuTreesByParentAndClassAndWeight(offset int, limit int, Parent_ string, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and weight = ?", Parent_, Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndMetadata Get MenuTrees via ParentAndClassAndMetadata
func GetMenuTreesByParentAndClassAndMetadata(offset int, limit int, Parent_ string, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and metadata = ?", Parent_, Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndHasChildren Get MenuTrees via ParentAndClassAndHasChildren
func GetMenuTreesByParentAndClassAndHasChildren(offset int, limit int, Parent_ string, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and has_children = ?", Parent_, Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndDepth Get MenuTrees via ParentAndClassAndDepth
func GetMenuTreesByParentAndClassAndDepth(offset int, limit int, Parent_ string, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and depth = ?", Parent_, Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndP1 Get MenuTrees via ParentAndClassAndP1
func GetMenuTreesByParentAndClassAndP1(offset int, limit int, Parent_ string, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and p1 = ?", Parent_, Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndP2 Get MenuTrees via ParentAndClassAndP2
func GetMenuTreesByParentAndClassAndP2(offset int, limit int, Parent_ string, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and p2 = ?", Parent_, Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndP3 Get MenuTrees via ParentAndClassAndP3
func GetMenuTreesByParentAndClassAndP3(offset int, limit int, Parent_ string, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and p3 = ?", Parent_, Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndP4 Get MenuTrees via ParentAndClassAndP4
func GetMenuTreesByParentAndClassAndP4(offset int, limit int, Parent_ string, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and p4 = ?", Parent_, Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndP5 Get MenuTrees via ParentAndClassAndP5
func GetMenuTreesByParentAndClassAndP5(offset int, limit int, Parent_ string, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and p5 = ?", Parent_, Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndP6 Get MenuTrees via ParentAndClassAndP6
func GetMenuTreesByParentAndClassAndP6(offset int, limit int, Parent_ string, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and p6 = ?", Parent_, Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndP7 Get MenuTrees via ParentAndClassAndP7
func GetMenuTreesByParentAndClassAndP7(offset int, limit int, Parent_ string, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and p7 = ?", Parent_, Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndP8 Get MenuTrees via ParentAndClassAndP8
func GetMenuTreesByParentAndClassAndP8(offset int, limit int, Parent_ string, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and p8 = ?", Parent_, Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndP9 Get MenuTrees via ParentAndClassAndP9
func GetMenuTreesByParentAndClassAndP9(offset int, limit int, Parent_ string, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and p9 = ?", Parent_, Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClassAndFormClass Get MenuTrees via ParentAndClassAndFormClass
func GetMenuTreesByParentAndClassAndFormClass(offset int, limit int, Parent_ string, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ? and form_class = ?", Parent_, Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndProvider Get MenuTrees via ParentAndOptionsAndProvider
func GetMenuTreesByParentAndOptionsAndProvider(offset int, limit int, Parent_ string, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and provider = ?", Parent_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndEnabled Get MenuTrees via ParentAndOptionsAndEnabled
func GetMenuTreesByParentAndOptionsAndEnabled(offset int, limit int, Parent_ string, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and enabled = ?", Parent_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndDiscovered Get MenuTrees via ParentAndOptionsAndDiscovered
func GetMenuTreesByParentAndOptionsAndDiscovered(offset int, limit int, Parent_ string, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and discovered = ?", Parent_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndExpanded Get MenuTrees via ParentAndOptionsAndExpanded
func GetMenuTreesByParentAndOptionsAndExpanded(offset int, limit int, Parent_ string, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and expanded = ?", Parent_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndWeight Get MenuTrees via ParentAndOptionsAndWeight
func GetMenuTreesByParentAndOptionsAndWeight(offset int, limit int, Parent_ string, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and weight = ?", Parent_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndMetadata Get MenuTrees via ParentAndOptionsAndMetadata
func GetMenuTreesByParentAndOptionsAndMetadata(offset int, limit int, Parent_ string, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and metadata = ?", Parent_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndHasChildren Get MenuTrees via ParentAndOptionsAndHasChildren
func GetMenuTreesByParentAndOptionsAndHasChildren(offset int, limit int, Parent_ string, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and has_children = ?", Parent_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndDepth Get MenuTrees via ParentAndOptionsAndDepth
func GetMenuTreesByParentAndOptionsAndDepth(offset int, limit int, Parent_ string, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and depth = ?", Parent_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndP1 Get MenuTrees via ParentAndOptionsAndP1
func GetMenuTreesByParentAndOptionsAndP1(offset int, limit int, Parent_ string, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and p1 = ?", Parent_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndP2 Get MenuTrees via ParentAndOptionsAndP2
func GetMenuTreesByParentAndOptionsAndP2(offset int, limit int, Parent_ string, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and p2 = ?", Parent_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndP3 Get MenuTrees via ParentAndOptionsAndP3
func GetMenuTreesByParentAndOptionsAndP3(offset int, limit int, Parent_ string, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and p3 = ?", Parent_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndP4 Get MenuTrees via ParentAndOptionsAndP4
func GetMenuTreesByParentAndOptionsAndP4(offset int, limit int, Parent_ string, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and p4 = ?", Parent_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndP5 Get MenuTrees via ParentAndOptionsAndP5
func GetMenuTreesByParentAndOptionsAndP5(offset int, limit int, Parent_ string, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and p5 = ?", Parent_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndP6 Get MenuTrees via ParentAndOptionsAndP6
func GetMenuTreesByParentAndOptionsAndP6(offset int, limit int, Parent_ string, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and p6 = ?", Parent_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndP7 Get MenuTrees via ParentAndOptionsAndP7
func GetMenuTreesByParentAndOptionsAndP7(offset int, limit int, Parent_ string, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and p7 = ?", Parent_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndP8 Get MenuTrees via ParentAndOptionsAndP8
func GetMenuTreesByParentAndOptionsAndP8(offset int, limit int, Parent_ string, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and p8 = ?", Parent_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndP9 Get MenuTrees via ParentAndOptionsAndP9
func GetMenuTreesByParentAndOptionsAndP9(offset int, limit int, Parent_ string, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and p9 = ?", Parent_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptionsAndFormClass Get MenuTrees via ParentAndOptionsAndFormClass
func GetMenuTreesByParentAndOptionsAndFormClass(offset int, limit int, Parent_ string, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ? and form_class = ?", Parent_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndEnabled Get MenuTrees via ParentAndProviderAndEnabled
func GetMenuTreesByParentAndProviderAndEnabled(offset int, limit int, Parent_ string, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and enabled = ?", Parent_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndDiscovered Get MenuTrees via ParentAndProviderAndDiscovered
func GetMenuTreesByParentAndProviderAndDiscovered(offset int, limit int, Parent_ string, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and discovered = ?", Parent_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndExpanded Get MenuTrees via ParentAndProviderAndExpanded
func GetMenuTreesByParentAndProviderAndExpanded(offset int, limit int, Parent_ string, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and expanded = ?", Parent_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndWeight Get MenuTrees via ParentAndProviderAndWeight
func GetMenuTreesByParentAndProviderAndWeight(offset int, limit int, Parent_ string, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and weight = ?", Parent_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndMetadata Get MenuTrees via ParentAndProviderAndMetadata
func GetMenuTreesByParentAndProviderAndMetadata(offset int, limit int, Parent_ string, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and metadata = ?", Parent_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndHasChildren Get MenuTrees via ParentAndProviderAndHasChildren
func GetMenuTreesByParentAndProviderAndHasChildren(offset int, limit int, Parent_ string, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and has_children = ?", Parent_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndDepth Get MenuTrees via ParentAndProviderAndDepth
func GetMenuTreesByParentAndProviderAndDepth(offset int, limit int, Parent_ string, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and depth = ?", Parent_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndP1 Get MenuTrees via ParentAndProviderAndP1
func GetMenuTreesByParentAndProviderAndP1(offset int, limit int, Parent_ string, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and p1 = ?", Parent_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndP2 Get MenuTrees via ParentAndProviderAndP2
func GetMenuTreesByParentAndProviderAndP2(offset int, limit int, Parent_ string, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and p2 = ?", Parent_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndP3 Get MenuTrees via ParentAndProviderAndP3
func GetMenuTreesByParentAndProviderAndP3(offset int, limit int, Parent_ string, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and p3 = ?", Parent_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndP4 Get MenuTrees via ParentAndProviderAndP4
func GetMenuTreesByParentAndProviderAndP4(offset int, limit int, Parent_ string, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and p4 = ?", Parent_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndP5 Get MenuTrees via ParentAndProviderAndP5
func GetMenuTreesByParentAndProviderAndP5(offset int, limit int, Parent_ string, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and p5 = ?", Parent_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndP6 Get MenuTrees via ParentAndProviderAndP6
func GetMenuTreesByParentAndProviderAndP6(offset int, limit int, Parent_ string, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and p6 = ?", Parent_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndP7 Get MenuTrees via ParentAndProviderAndP7
func GetMenuTreesByParentAndProviderAndP7(offset int, limit int, Parent_ string, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and p7 = ?", Parent_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndP8 Get MenuTrees via ParentAndProviderAndP8
func GetMenuTreesByParentAndProviderAndP8(offset int, limit int, Parent_ string, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and p8 = ?", Parent_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndP9 Get MenuTrees via ParentAndProviderAndP9
func GetMenuTreesByParentAndProviderAndP9(offset int, limit int, Parent_ string, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and p9 = ?", Parent_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProviderAndFormClass Get MenuTrees via ParentAndProviderAndFormClass
func GetMenuTreesByParentAndProviderAndFormClass(offset int, limit int, Parent_ string, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ? and form_class = ?", Parent_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndDiscovered Get MenuTrees via ParentAndEnabledAndDiscovered
func GetMenuTreesByParentAndEnabledAndDiscovered(offset int, limit int, Parent_ string, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and discovered = ?", Parent_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndExpanded Get MenuTrees via ParentAndEnabledAndExpanded
func GetMenuTreesByParentAndEnabledAndExpanded(offset int, limit int, Parent_ string, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and expanded = ?", Parent_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndWeight Get MenuTrees via ParentAndEnabledAndWeight
func GetMenuTreesByParentAndEnabledAndWeight(offset int, limit int, Parent_ string, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and weight = ?", Parent_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndMetadata Get MenuTrees via ParentAndEnabledAndMetadata
func GetMenuTreesByParentAndEnabledAndMetadata(offset int, limit int, Parent_ string, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and metadata = ?", Parent_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndHasChildren Get MenuTrees via ParentAndEnabledAndHasChildren
func GetMenuTreesByParentAndEnabledAndHasChildren(offset int, limit int, Parent_ string, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and has_children = ?", Parent_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndDepth Get MenuTrees via ParentAndEnabledAndDepth
func GetMenuTreesByParentAndEnabledAndDepth(offset int, limit int, Parent_ string, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and depth = ?", Parent_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndP1 Get MenuTrees via ParentAndEnabledAndP1
func GetMenuTreesByParentAndEnabledAndP1(offset int, limit int, Parent_ string, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and p1 = ?", Parent_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndP2 Get MenuTrees via ParentAndEnabledAndP2
func GetMenuTreesByParentAndEnabledAndP2(offset int, limit int, Parent_ string, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and p2 = ?", Parent_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndP3 Get MenuTrees via ParentAndEnabledAndP3
func GetMenuTreesByParentAndEnabledAndP3(offset int, limit int, Parent_ string, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and p3 = ?", Parent_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndP4 Get MenuTrees via ParentAndEnabledAndP4
func GetMenuTreesByParentAndEnabledAndP4(offset int, limit int, Parent_ string, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and p4 = ?", Parent_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndP5 Get MenuTrees via ParentAndEnabledAndP5
func GetMenuTreesByParentAndEnabledAndP5(offset int, limit int, Parent_ string, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and p5 = ?", Parent_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndP6 Get MenuTrees via ParentAndEnabledAndP6
func GetMenuTreesByParentAndEnabledAndP6(offset int, limit int, Parent_ string, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and p6 = ?", Parent_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndP7 Get MenuTrees via ParentAndEnabledAndP7
func GetMenuTreesByParentAndEnabledAndP7(offset int, limit int, Parent_ string, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and p7 = ?", Parent_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndP8 Get MenuTrees via ParentAndEnabledAndP8
func GetMenuTreesByParentAndEnabledAndP8(offset int, limit int, Parent_ string, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and p8 = ?", Parent_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndP9 Get MenuTrees via ParentAndEnabledAndP9
func GetMenuTreesByParentAndEnabledAndP9(offset int, limit int, Parent_ string, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and p9 = ?", Parent_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabledAndFormClass Get MenuTrees via ParentAndEnabledAndFormClass
func GetMenuTreesByParentAndEnabledAndFormClass(offset int, limit int, Parent_ string, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ? and form_class = ?", Parent_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndExpanded Get MenuTrees via ParentAndDiscoveredAndExpanded
func GetMenuTreesByParentAndDiscoveredAndExpanded(offset int, limit int, Parent_ string, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and expanded = ?", Parent_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndWeight Get MenuTrees via ParentAndDiscoveredAndWeight
func GetMenuTreesByParentAndDiscoveredAndWeight(offset int, limit int, Parent_ string, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and weight = ?", Parent_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndMetadata Get MenuTrees via ParentAndDiscoveredAndMetadata
func GetMenuTreesByParentAndDiscoveredAndMetadata(offset int, limit int, Parent_ string, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and metadata = ?", Parent_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndHasChildren Get MenuTrees via ParentAndDiscoveredAndHasChildren
func GetMenuTreesByParentAndDiscoveredAndHasChildren(offset int, limit int, Parent_ string, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and has_children = ?", Parent_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndDepth Get MenuTrees via ParentAndDiscoveredAndDepth
func GetMenuTreesByParentAndDiscoveredAndDepth(offset int, limit int, Parent_ string, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and depth = ?", Parent_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndP1 Get MenuTrees via ParentAndDiscoveredAndP1
func GetMenuTreesByParentAndDiscoveredAndP1(offset int, limit int, Parent_ string, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and p1 = ?", Parent_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndP2 Get MenuTrees via ParentAndDiscoveredAndP2
func GetMenuTreesByParentAndDiscoveredAndP2(offset int, limit int, Parent_ string, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and p2 = ?", Parent_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndP3 Get MenuTrees via ParentAndDiscoveredAndP3
func GetMenuTreesByParentAndDiscoveredAndP3(offset int, limit int, Parent_ string, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and p3 = ?", Parent_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndP4 Get MenuTrees via ParentAndDiscoveredAndP4
func GetMenuTreesByParentAndDiscoveredAndP4(offset int, limit int, Parent_ string, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and p4 = ?", Parent_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndP5 Get MenuTrees via ParentAndDiscoveredAndP5
func GetMenuTreesByParentAndDiscoveredAndP5(offset int, limit int, Parent_ string, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and p5 = ?", Parent_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndP6 Get MenuTrees via ParentAndDiscoveredAndP6
func GetMenuTreesByParentAndDiscoveredAndP6(offset int, limit int, Parent_ string, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and p6 = ?", Parent_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndP7 Get MenuTrees via ParentAndDiscoveredAndP7
func GetMenuTreesByParentAndDiscoveredAndP7(offset int, limit int, Parent_ string, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and p7 = ?", Parent_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndP8 Get MenuTrees via ParentAndDiscoveredAndP8
func GetMenuTreesByParentAndDiscoveredAndP8(offset int, limit int, Parent_ string, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and p8 = ?", Parent_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndP9 Get MenuTrees via ParentAndDiscoveredAndP9
func GetMenuTreesByParentAndDiscoveredAndP9(offset int, limit int, Parent_ string, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and p9 = ?", Parent_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscoveredAndFormClass Get MenuTrees via ParentAndDiscoveredAndFormClass
func GetMenuTreesByParentAndDiscoveredAndFormClass(offset int, limit int, Parent_ string, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ? and form_class = ?", Parent_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndWeight Get MenuTrees via ParentAndExpandedAndWeight
func GetMenuTreesByParentAndExpandedAndWeight(offset int, limit int, Parent_ string, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and weight = ?", Parent_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndMetadata Get MenuTrees via ParentAndExpandedAndMetadata
func GetMenuTreesByParentAndExpandedAndMetadata(offset int, limit int, Parent_ string, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and metadata = ?", Parent_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndHasChildren Get MenuTrees via ParentAndExpandedAndHasChildren
func GetMenuTreesByParentAndExpandedAndHasChildren(offset int, limit int, Parent_ string, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and has_children = ?", Parent_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndDepth Get MenuTrees via ParentAndExpandedAndDepth
func GetMenuTreesByParentAndExpandedAndDepth(offset int, limit int, Parent_ string, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and depth = ?", Parent_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndP1 Get MenuTrees via ParentAndExpandedAndP1
func GetMenuTreesByParentAndExpandedAndP1(offset int, limit int, Parent_ string, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and p1 = ?", Parent_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndP2 Get MenuTrees via ParentAndExpandedAndP2
func GetMenuTreesByParentAndExpandedAndP2(offset int, limit int, Parent_ string, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and p2 = ?", Parent_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndP3 Get MenuTrees via ParentAndExpandedAndP3
func GetMenuTreesByParentAndExpandedAndP3(offset int, limit int, Parent_ string, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and p3 = ?", Parent_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndP4 Get MenuTrees via ParentAndExpandedAndP4
func GetMenuTreesByParentAndExpandedAndP4(offset int, limit int, Parent_ string, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and p4 = ?", Parent_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndP5 Get MenuTrees via ParentAndExpandedAndP5
func GetMenuTreesByParentAndExpandedAndP5(offset int, limit int, Parent_ string, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and p5 = ?", Parent_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndP6 Get MenuTrees via ParentAndExpandedAndP6
func GetMenuTreesByParentAndExpandedAndP6(offset int, limit int, Parent_ string, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and p6 = ?", Parent_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndP7 Get MenuTrees via ParentAndExpandedAndP7
func GetMenuTreesByParentAndExpandedAndP7(offset int, limit int, Parent_ string, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and p7 = ?", Parent_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndP8 Get MenuTrees via ParentAndExpandedAndP8
func GetMenuTreesByParentAndExpandedAndP8(offset int, limit int, Parent_ string, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and p8 = ?", Parent_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndP9 Get MenuTrees via ParentAndExpandedAndP9
func GetMenuTreesByParentAndExpandedAndP9(offset int, limit int, Parent_ string, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and p9 = ?", Parent_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpandedAndFormClass Get MenuTrees via ParentAndExpandedAndFormClass
func GetMenuTreesByParentAndExpandedAndFormClass(offset int, limit int, Parent_ string, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ? and form_class = ?", Parent_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndMetadata Get MenuTrees via ParentAndWeightAndMetadata
func GetMenuTreesByParentAndWeightAndMetadata(offset int, limit int, Parent_ string, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and metadata = ?", Parent_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndHasChildren Get MenuTrees via ParentAndWeightAndHasChildren
func GetMenuTreesByParentAndWeightAndHasChildren(offset int, limit int, Parent_ string, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and has_children = ?", Parent_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndDepth Get MenuTrees via ParentAndWeightAndDepth
func GetMenuTreesByParentAndWeightAndDepth(offset int, limit int, Parent_ string, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and depth = ?", Parent_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndP1 Get MenuTrees via ParentAndWeightAndP1
func GetMenuTreesByParentAndWeightAndP1(offset int, limit int, Parent_ string, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and p1 = ?", Parent_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndP2 Get MenuTrees via ParentAndWeightAndP2
func GetMenuTreesByParentAndWeightAndP2(offset int, limit int, Parent_ string, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and p2 = ?", Parent_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndP3 Get MenuTrees via ParentAndWeightAndP3
func GetMenuTreesByParentAndWeightAndP3(offset int, limit int, Parent_ string, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and p3 = ?", Parent_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndP4 Get MenuTrees via ParentAndWeightAndP4
func GetMenuTreesByParentAndWeightAndP4(offset int, limit int, Parent_ string, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and p4 = ?", Parent_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndP5 Get MenuTrees via ParentAndWeightAndP5
func GetMenuTreesByParentAndWeightAndP5(offset int, limit int, Parent_ string, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and p5 = ?", Parent_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndP6 Get MenuTrees via ParentAndWeightAndP6
func GetMenuTreesByParentAndWeightAndP6(offset int, limit int, Parent_ string, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and p6 = ?", Parent_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndP7 Get MenuTrees via ParentAndWeightAndP7
func GetMenuTreesByParentAndWeightAndP7(offset int, limit int, Parent_ string, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and p7 = ?", Parent_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndP8 Get MenuTrees via ParentAndWeightAndP8
func GetMenuTreesByParentAndWeightAndP8(offset int, limit int, Parent_ string, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and p8 = ?", Parent_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndP9 Get MenuTrees via ParentAndWeightAndP9
func GetMenuTreesByParentAndWeightAndP9(offset int, limit int, Parent_ string, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and p9 = ?", Parent_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeightAndFormClass Get MenuTrees via ParentAndWeightAndFormClass
func GetMenuTreesByParentAndWeightAndFormClass(offset int, limit int, Parent_ string, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ? and form_class = ?", Parent_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndHasChildren Get MenuTrees via ParentAndMetadataAndHasChildren
func GetMenuTreesByParentAndMetadataAndHasChildren(offset int, limit int, Parent_ string, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and has_children = ?", Parent_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndDepth Get MenuTrees via ParentAndMetadataAndDepth
func GetMenuTreesByParentAndMetadataAndDepth(offset int, limit int, Parent_ string, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and depth = ?", Parent_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndP1 Get MenuTrees via ParentAndMetadataAndP1
func GetMenuTreesByParentAndMetadataAndP1(offset int, limit int, Parent_ string, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and p1 = ?", Parent_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndP2 Get MenuTrees via ParentAndMetadataAndP2
func GetMenuTreesByParentAndMetadataAndP2(offset int, limit int, Parent_ string, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and p2 = ?", Parent_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndP3 Get MenuTrees via ParentAndMetadataAndP3
func GetMenuTreesByParentAndMetadataAndP3(offset int, limit int, Parent_ string, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and p3 = ?", Parent_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndP4 Get MenuTrees via ParentAndMetadataAndP4
func GetMenuTreesByParentAndMetadataAndP4(offset int, limit int, Parent_ string, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and p4 = ?", Parent_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndP5 Get MenuTrees via ParentAndMetadataAndP5
func GetMenuTreesByParentAndMetadataAndP5(offset int, limit int, Parent_ string, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and p5 = ?", Parent_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndP6 Get MenuTrees via ParentAndMetadataAndP6
func GetMenuTreesByParentAndMetadataAndP6(offset int, limit int, Parent_ string, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and p6 = ?", Parent_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndP7 Get MenuTrees via ParentAndMetadataAndP7
func GetMenuTreesByParentAndMetadataAndP7(offset int, limit int, Parent_ string, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and p7 = ?", Parent_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndP8 Get MenuTrees via ParentAndMetadataAndP8
func GetMenuTreesByParentAndMetadataAndP8(offset int, limit int, Parent_ string, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and p8 = ?", Parent_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndP9 Get MenuTrees via ParentAndMetadataAndP9
func GetMenuTreesByParentAndMetadataAndP9(offset int, limit int, Parent_ string, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and p9 = ?", Parent_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadataAndFormClass Get MenuTrees via ParentAndMetadataAndFormClass
func GetMenuTreesByParentAndMetadataAndFormClass(offset int, limit int, Parent_ string, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ? and form_class = ?", Parent_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndDepth Get MenuTrees via ParentAndHasChildrenAndDepth
func GetMenuTreesByParentAndHasChildrenAndDepth(offset int, limit int, Parent_ string, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and depth = ?", Parent_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndP1 Get MenuTrees via ParentAndHasChildrenAndP1
func GetMenuTreesByParentAndHasChildrenAndP1(offset int, limit int, Parent_ string, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and p1 = ?", Parent_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndP2 Get MenuTrees via ParentAndHasChildrenAndP2
func GetMenuTreesByParentAndHasChildrenAndP2(offset int, limit int, Parent_ string, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and p2 = ?", Parent_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndP3 Get MenuTrees via ParentAndHasChildrenAndP3
func GetMenuTreesByParentAndHasChildrenAndP3(offset int, limit int, Parent_ string, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and p3 = ?", Parent_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndP4 Get MenuTrees via ParentAndHasChildrenAndP4
func GetMenuTreesByParentAndHasChildrenAndP4(offset int, limit int, Parent_ string, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and p4 = ?", Parent_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndP5 Get MenuTrees via ParentAndHasChildrenAndP5
func GetMenuTreesByParentAndHasChildrenAndP5(offset int, limit int, Parent_ string, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and p5 = ?", Parent_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndP6 Get MenuTrees via ParentAndHasChildrenAndP6
func GetMenuTreesByParentAndHasChildrenAndP6(offset int, limit int, Parent_ string, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and p6 = ?", Parent_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndP7 Get MenuTrees via ParentAndHasChildrenAndP7
func GetMenuTreesByParentAndHasChildrenAndP7(offset int, limit int, Parent_ string, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and p7 = ?", Parent_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndP8 Get MenuTrees via ParentAndHasChildrenAndP8
func GetMenuTreesByParentAndHasChildrenAndP8(offset int, limit int, Parent_ string, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and p8 = ?", Parent_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndP9 Get MenuTrees via ParentAndHasChildrenAndP9
func GetMenuTreesByParentAndHasChildrenAndP9(offset int, limit int, Parent_ string, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and p9 = ?", Parent_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildrenAndFormClass Get MenuTrees via ParentAndHasChildrenAndFormClass
func GetMenuTreesByParentAndHasChildrenAndFormClass(offset int, limit int, Parent_ string, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ? and form_class = ?", Parent_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepthAndP1 Get MenuTrees via ParentAndDepthAndP1
func GetMenuTreesByParentAndDepthAndP1(offset int, limit int, Parent_ string, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ? and p1 = ?", Parent_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepthAndP2 Get MenuTrees via ParentAndDepthAndP2
func GetMenuTreesByParentAndDepthAndP2(offset int, limit int, Parent_ string, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ? and p2 = ?", Parent_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepthAndP3 Get MenuTrees via ParentAndDepthAndP3
func GetMenuTreesByParentAndDepthAndP3(offset int, limit int, Parent_ string, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ? and p3 = ?", Parent_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepthAndP4 Get MenuTrees via ParentAndDepthAndP4
func GetMenuTreesByParentAndDepthAndP4(offset int, limit int, Parent_ string, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ? and p4 = ?", Parent_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepthAndP5 Get MenuTrees via ParentAndDepthAndP5
func GetMenuTreesByParentAndDepthAndP5(offset int, limit int, Parent_ string, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ? and p5 = ?", Parent_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepthAndP6 Get MenuTrees via ParentAndDepthAndP6
func GetMenuTreesByParentAndDepthAndP6(offset int, limit int, Parent_ string, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ? and p6 = ?", Parent_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepthAndP7 Get MenuTrees via ParentAndDepthAndP7
func GetMenuTreesByParentAndDepthAndP7(offset int, limit int, Parent_ string, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ? and p7 = ?", Parent_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepthAndP8 Get MenuTrees via ParentAndDepthAndP8
func GetMenuTreesByParentAndDepthAndP8(offset int, limit int, Parent_ string, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ? and p8 = ?", Parent_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepthAndP9 Get MenuTrees via ParentAndDepthAndP9
func GetMenuTreesByParentAndDepthAndP9(offset int, limit int, Parent_ string, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ? and p9 = ?", Parent_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepthAndFormClass Get MenuTrees via ParentAndDepthAndFormClass
func GetMenuTreesByParentAndDepthAndFormClass(offset int, limit int, Parent_ string, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ? and form_class = ?", Parent_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP1AndP2 Get MenuTrees via ParentAndP1AndP2
func GetMenuTreesByParentAndP1AndP2(offset int, limit int, Parent_ string, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p1 = ? and p2 = ?", Parent_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP1AndP3 Get MenuTrees via ParentAndP1AndP3
func GetMenuTreesByParentAndP1AndP3(offset int, limit int, Parent_ string, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p1 = ? and p3 = ?", Parent_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP1AndP4 Get MenuTrees via ParentAndP1AndP4
func GetMenuTreesByParentAndP1AndP4(offset int, limit int, Parent_ string, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p1 = ? and p4 = ?", Parent_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP1AndP5 Get MenuTrees via ParentAndP1AndP5
func GetMenuTreesByParentAndP1AndP5(offset int, limit int, Parent_ string, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p1 = ? and p5 = ?", Parent_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP1AndP6 Get MenuTrees via ParentAndP1AndP6
func GetMenuTreesByParentAndP1AndP6(offset int, limit int, Parent_ string, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p1 = ? and p6 = ?", Parent_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP1AndP7 Get MenuTrees via ParentAndP1AndP7
func GetMenuTreesByParentAndP1AndP7(offset int, limit int, Parent_ string, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p1 = ? and p7 = ?", Parent_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP1AndP8 Get MenuTrees via ParentAndP1AndP8
func GetMenuTreesByParentAndP1AndP8(offset int, limit int, Parent_ string, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p1 = ? and p8 = ?", Parent_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP1AndP9 Get MenuTrees via ParentAndP1AndP9
func GetMenuTreesByParentAndP1AndP9(offset int, limit int, Parent_ string, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p1 = ? and p9 = ?", Parent_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP1AndFormClass Get MenuTrees via ParentAndP1AndFormClass
func GetMenuTreesByParentAndP1AndFormClass(offset int, limit int, Parent_ string, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p1 = ? and form_class = ?", Parent_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP2AndP3 Get MenuTrees via ParentAndP2AndP3
func GetMenuTreesByParentAndP2AndP3(offset int, limit int, Parent_ string, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p2 = ? and p3 = ?", Parent_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP2AndP4 Get MenuTrees via ParentAndP2AndP4
func GetMenuTreesByParentAndP2AndP4(offset int, limit int, Parent_ string, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p2 = ? and p4 = ?", Parent_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP2AndP5 Get MenuTrees via ParentAndP2AndP5
func GetMenuTreesByParentAndP2AndP5(offset int, limit int, Parent_ string, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p2 = ? and p5 = ?", Parent_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP2AndP6 Get MenuTrees via ParentAndP2AndP6
func GetMenuTreesByParentAndP2AndP6(offset int, limit int, Parent_ string, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p2 = ? and p6 = ?", Parent_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP2AndP7 Get MenuTrees via ParentAndP2AndP7
func GetMenuTreesByParentAndP2AndP7(offset int, limit int, Parent_ string, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p2 = ? and p7 = ?", Parent_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP2AndP8 Get MenuTrees via ParentAndP2AndP8
func GetMenuTreesByParentAndP2AndP8(offset int, limit int, Parent_ string, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p2 = ? and p8 = ?", Parent_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP2AndP9 Get MenuTrees via ParentAndP2AndP9
func GetMenuTreesByParentAndP2AndP9(offset int, limit int, Parent_ string, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p2 = ? and p9 = ?", Parent_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP2AndFormClass Get MenuTrees via ParentAndP2AndFormClass
func GetMenuTreesByParentAndP2AndFormClass(offset int, limit int, Parent_ string, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p2 = ? and form_class = ?", Parent_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP3AndP4 Get MenuTrees via ParentAndP3AndP4
func GetMenuTreesByParentAndP3AndP4(offset int, limit int, Parent_ string, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p3 = ? and p4 = ?", Parent_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP3AndP5 Get MenuTrees via ParentAndP3AndP5
func GetMenuTreesByParentAndP3AndP5(offset int, limit int, Parent_ string, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p3 = ? and p5 = ?", Parent_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP3AndP6 Get MenuTrees via ParentAndP3AndP6
func GetMenuTreesByParentAndP3AndP6(offset int, limit int, Parent_ string, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p3 = ? and p6 = ?", Parent_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP3AndP7 Get MenuTrees via ParentAndP3AndP7
func GetMenuTreesByParentAndP3AndP7(offset int, limit int, Parent_ string, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p3 = ? and p7 = ?", Parent_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP3AndP8 Get MenuTrees via ParentAndP3AndP8
func GetMenuTreesByParentAndP3AndP8(offset int, limit int, Parent_ string, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p3 = ? and p8 = ?", Parent_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP3AndP9 Get MenuTrees via ParentAndP3AndP9
func GetMenuTreesByParentAndP3AndP9(offset int, limit int, Parent_ string, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p3 = ? and p9 = ?", Parent_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP3AndFormClass Get MenuTrees via ParentAndP3AndFormClass
func GetMenuTreesByParentAndP3AndFormClass(offset int, limit int, Parent_ string, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p3 = ? and form_class = ?", Parent_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP4AndP5 Get MenuTrees via ParentAndP4AndP5
func GetMenuTreesByParentAndP4AndP5(offset int, limit int, Parent_ string, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p4 = ? and p5 = ?", Parent_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP4AndP6 Get MenuTrees via ParentAndP4AndP6
func GetMenuTreesByParentAndP4AndP6(offset int, limit int, Parent_ string, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p4 = ? and p6 = ?", Parent_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP4AndP7 Get MenuTrees via ParentAndP4AndP7
func GetMenuTreesByParentAndP4AndP7(offset int, limit int, Parent_ string, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p4 = ? and p7 = ?", Parent_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP4AndP8 Get MenuTrees via ParentAndP4AndP8
func GetMenuTreesByParentAndP4AndP8(offset int, limit int, Parent_ string, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p4 = ? and p8 = ?", Parent_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP4AndP9 Get MenuTrees via ParentAndP4AndP9
func GetMenuTreesByParentAndP4AndP9(offset int, limit int, Parent_ string, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p4 = ? and p9 = ?", Parent_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP4AndFormClass Get MenuTrees via ParentAndP4AndFormClass
func GetMenuTreesByParentAndP4AndFormClass(offset int, limit int, Parent_ string, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p4 = ? and form_class = ?", Parent_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP5AndP6 Get MenuTrees via ParentAndP5AndP6
func GetMenuTreesByParentAndP5AndP6(offset int, limit int, Parent_ string, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p5 = ? and p6 = ?", Parent_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP5AndP7 Get MenuTrees via ParentAndP5AndP7
func GetMenuTreesByParentAndP5AndP7(offset int, limit int, Parent_ string, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p5 = ? and p7 = ?", Parent_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP5AndP8 Get MenuTrees via ParentAndP5AndP8
func GetMenuTreesByParentAndP5AndP8(offset int, limit int, Parent_ string, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p5 = ? and p8 = ?", Parent_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP5AndP9 Get MenuTrees via ParentAndP5AndP9
func GetMenuTreesByParentAndP5AndP9(offset int, limit int, Parent_ string, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p5 = ? and p9 = ?", Parent_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP5AndFormClass Get MenuTrees via ParentAndP5AndFormClass
func GetMenuTreesByParentAndP5AndFormClass(offset int, limit int, Parent_ string, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p5 = ? and form_class = ?", Parent_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP6AndP7 Get MenuTrees via ParentAndP6AndP7
func GetMenuTreesByParentAndP6AndP7(offset int, limit int, Parent_ string, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p6 = ? and p7 = ?", Parent_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP6AndP8 Get MenuTrees via ParentAndP6AndP8
func GetMenuTreesByParentAndP6AndP8(offset int, limit int, Parent_ string, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p6 = ? and p8 = ?", Parent_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP6AndP9 Get MenuTrees via ParentAndP6AndP9
func GetMenuTreesByParentAndP6AndP9(offset int, limit int, Parent_ string, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p6 = ? and p9 = ?", Parent_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP6AndFormClass Get MenuTrees via ParentAndP6AndFormClass
func GetMenuTreesByParentAndP6AndFormClass(offset int, limit int, Parent_ string, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p6 = ? and form_class = ?", Parent_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP7AndP8 Get MenuTrees via ParentAndP7AndP8
func GetMenuTreesByParentAndP7AndP8(offset int, limit int, Parent_ string, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p7 = ? and p8 = ?", Parent_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP7AndP9 Get MenuTrees via ParentAndP7AndP9
func GetMenuTreesByParentAndP7AndP9(offset int, limit int, Parent_ string, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p7 = ? and p9 = ?", Parent_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP7AndFormClass Get MenuTrees via ParentAndP7AndFormClass
func GetMenuTreesByParentAndP7AndFormClass(offset int, limit int, Parent_ string, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p7 = ? and form_class = ?", Parent_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP8AndP9 Get MenuTrees via ParentAndP8AndP9
func GetMenuTreesByParentAndP8AndP9(offset int, limit int, Parent_ string, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p8 = ? and p9 = ?", Parent_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP8AndFormClass Get MenuTrees via ParentAndP8AndFormClass
func GetMenuTreesByParentAndP8AndFormClass(offset int, limit int, Parent_ string, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p8 = ? and form_class = ?", Parent_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP9AndFormClass Get MenuTrees via ParentAndP9AndFormClass
func GetMenuTreesByParentAndP9AndFormClass(offset int, limit int, Parent_ string, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p9 = ? and form_class = ?", Parent_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndRouteParameters Get MenuTrees via RouteNameAndRouteParamKeyAndRouteParameters
func GetMenuTreesByRouteNameAndRouteParamKeyAndRouteParameters(offset int, limit int, RouteName_ string, RouteParamKey_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and route_parameters = ?", RouteName_, RouteParamKey_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndUrl Get MenuTrees via RouteNameAndRouteParamKeyAndUrl
func GetMenuTreesByRouteNameAndRouteParamKeyAndUrl(offset int, limit int, RouteName_ string, RouteParamKey_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and url = ?", RouteName_, RouteParamKey_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndTitle Get MenuTrees via RouteNameAndRouteParamKeyAndTitle
func GetMenuTreesByRouteNameAndRouteParamKeyAndTitle(offset int, limit int, RouteName_ string, RouteParamKey_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and title = ?", RouteName_, RouteParamKey_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndDescription Get MenuTrees via RouteNameAndRouteParamKeyAndDescription
func GetMenuTreesByRouteNameAndRouteParamKeyAndDescription(offset int, limit int, RouteName_ string, RouteParamKey_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and description = ?", RouteName_, RouteParamKey_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndClass Get MenuTrees via RouteNameAndRouteParamKeyAndClass
func GetMenuTreesByRouteNameAndRouteParamKeyAndClass(offset int, limit int, RouteName_ string, RouteParamKey_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and class = ?", RouteName_, RouteParamKey_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndOptions Get MenuTrees via RouteNameAndRouteParamKeyAndOptions
func GetMenuTreesByRouteNameAndRouteParamKeyAndOptions(offset int, limit int, RouteName_ string, RouteParamKey_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and options = ?", RouteName_, RouteParamKey_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndProvider Get MenuTrees via RouteNameAndRouteParamKeyAndProvider
func GetMenuTreesByRouteNameAndRouteParamKeyAndProvider(offset int, limit int, RouteName_ string, RouteParamKey_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and provider = ?", RouteName_, RouteParamKey_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndEnabled Get MenuTrees via RouteNameAndRouteParamKeyAndEnabled
func GetMenuTreesByRouteNameAndRouteParamKeyAndEnabled(offset int, limit int, RouteName_ string, RouteParamKey_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and enabled = ?", RouteName_, RouteParamKey_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndDiscovered Get MenuTrees via RouteNameAndRouteParamKeyAndDiscovered
func GetMenuTreesByRouteNameAndRouteParamKeyAndDiscovered(offset int, limit int, RouteName_ string, RouteParamKey_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and discovered = ?", RouteName_, RouteParamKey_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndExpanded Get MenuTrees via RouteNameAndRouteParamKeyAndExpanded
func GetMenuTreesByRouteNameAndRouteParamKeyAndExpanded(offset int, limit int, RouteName_ string, RouteParamKey_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and expanded = ?", RouteName_, RouteParamKey_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndWeight Get MenuTrees via RouteNameAndRouteParamKeyAndWeight
func GetMenuTreesByRouteNameAndRouteParamKeyAndWeight(offset int, limit int, RouteName_ string, RouteParamKey_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and weight = ?", RouteName_, RouteParamKey_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndMetadata Get MenuTrees via RouteNameAndRouteParamKeyAndMetadata
func GetMenuTreesByRouteNameAndRouteParamKeyAndMetadata(offset int, limit int, RouteName_ string, RouteParamKey_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and metadata = ?", RouteName_, RouteParamKey_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndHasChildren Get MenuTrees via RouteNameAndRouteParamKeyAndHasChildren
func GetMenuTreesByRouteNameAndRouteParamKeyAndHasChildren(offset int, limit int, RouteName_ string, RouteParamKey_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and has_children = ?", RouteName_, RouteParamKey_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndDepth Get MenuTrees via RouteNameAndRouteParamKeyAndDepth
func GetMenuTreesByRouteNameAndRouteParamKeyAndDepth(offset int, limit int, RouteName_ string, RouteParamKey_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and depth = ?", RouteName_, RouteParamKey_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndP1 Get MenuTrees via RouteNameAndRouteParamKeyAndP1
func GetMenuTreesByRouteNameAndRouteParamKeyAndP1(offset int, limit int, RouteName_ string, RouteParamKey_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and p1 = ?", RouteName_, RouteParamKey_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndP2 Get MenuTrees via RouteNameAndRouteParamKeyAndP2
func GetMenuTreesByRouteNameAndRouteParamKeyAndP2(offset int, limit int, RouteName_ string, RouteParamKey_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and p2 = ?", RouteName_, RouteParamKey_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndP3 Get MenuTrees via RouteNameAndRouteParamKeyAndP3
func GetMenuTreesByRouteNameAndRouteParamKeyAndP3(offset int, limit int, RouteName_ string, RouteParamKey_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and p3 = ?", RouteName_, RouteParamKey_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndP4 Get MenuTrees via RouteNameAndRouteParamKeyAndP4
func GetMenuTreesByRouteNameAndRouteParamKeyAndP4(offset int, limit int, RouteName_ string, RouteParamKey_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and p4 = ?", RouteName_, RouteParamKey_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndP5 Get MenuTrees via RouteNameAndRouteParamKeyAndP5
func GetMenuTreesByRouteNameAndRouteParamKeyAndP5(offset int, limit int, RouteName_ string, RouteParamKey_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and p5 = ?", RouteName_, RouteParamKey_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndP6 Get MenuTrees via RouteNameAndRouteParamKeyAndP6
func GetMenuTreesByRouteNameAndRouteParamKeyAndP6(offset int, limit int, RouteName_ string, RouteParamKey_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and p6 = ?", RouteName_, RouteParamKey_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndP7 Get MenuTrees via RouteNameAndRouteParamKeyAndP7
func GetMenuTreesByRouteNameAndRouteParamKeyAndP7(offset int, limit int, RouteName_ string, RouteParamKey_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and p7 = ?", RouteName_, RouteParamKey_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndP8 Get MenuTrees via RouteNameAndRouteParamKeyAndP8
func GetMenuTreesByRouteNameAndRouteParamKeyAndP8(offset int, limit int, RouteName_ string, RouteParamKey_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and p8 = ?", RouteName_, RouteParamKey_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndP9 Get MenuTrees via RouteNameAndRouteParamKeyAndP9
func GetMenuTreesByRouteNameAndRouteParamKeyAndP9(offset int, limit int, RouteName_ string, RouteParamKey_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and p9 = ?", RouteName_, RouteParamKey_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKeyAndFormClass Get MenuTrees via RouteNameAndRouteParamKeyAndFormClass
func GetMenuTreesByRouteNameAndRouteParamKeyAndFormClass(offset int, limit int, RouteName_ string, RouteParamKey_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ? and form_class = ?", RouteName_, RouteParamKey_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndUrl Get MenuTrees via RouteNameAndRouteParametersAndUrl
func GetMenuTreesByRouteNameAndRouteParametersAndUrl(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and url = ?", RouteName_, RouteParameters_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndTitle Get MenuTrees via RouteNameAndRouteParametersAndTitle
func GetMenuTreesByRouteNameAndRouteParametersAndTitle(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and title = ?", RouteName_, RouteParameters_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndDescription Get MenuTrees via RouteNameAndRouteParametersAndDescription
func GetMenuTreesByRouteNameAndRouteParametersAndDescription(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and description = ?", RouteName_, RouteParameters_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndClass Get MenuTrees via RouteNameAndRouteParametersAndClass
func GetMenuTreesByRouteNameAndRouteParametersAndClass(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and class = ?", RouteName_, RouteParameters_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndOptions Get MenuTrees via RouteNameAndRouteParametersAndOptions
func GetMenuTreesByRouteNameAndRouteParametersAndOptions(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and options = ?", RouteName_, RouteParameters_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndProvider Get MenuTrees via RouteNameAndRouteParametersAndProvider
func GetMenuTreesByRouteNameAndRouteParametersAndProvider(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and provider = ?", RouteName_, RouteParameters_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndEnabled Get MenuTrees via RouteNameAndRouteParametersAndEnabled
func GetMenuTreesByRouteNameAndRouteParametersAndEnabled(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and enabled = ?", RouteName_, RouteParameters_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndDiscovered Get MenuTrees via RouteNameAndRouteParametersAndDiscovered
func GetMenuTreesByRouteNameAndRouteParametersAndDiscovered(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and discovered = ?", RouteName_, RouteParameters_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndExpanded Get MenuTrees via RouteNameAndRouteParametersAndExpanded
func GetMenuTreesByRouteNameAndRouteParametersAndExpanded(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and expanded = ?", RouteName_, RouteParameters_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndWeight Get MenuTrees via RouteNameAndRouteParametersAndWeight
func GetMenuTreesByRouteNameAndRouteParametersAndWeight(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and weight = ?", RouteName_, RouteParameters_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndMetadata Get MenuTrees via RouteNameAndRouteParametersAndMetadata
func GetMenuTreesByRouteNameAndRouteParametersAndMetadata(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and metadata = ?", RouteName_, RouteParameters_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndHasChildren Get MenuTrees via RouteNameAndRouteParametersAndHasChildren
func GetMenuTreesByRouteNameAndRouteParametersAndHasChildren(offset int, limit int, RouteName_ string, RouteParameters_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and has_children = ?", RouteName_, RouteParameters_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndDepth Get MenuTrees via RouteNameAndRouteParametersAndDepth
func GetMenuTreesByRouteNameAndRouteParametersAndDepth(offset int, limit int, RouteName_ string, RouteParameters_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and depth = ?", RouteName_, RouteParameters_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndP1 Get MenuTrees via RouteNameAndRouteParametersAndP1
func GetMenuTreesByRouteNameAndRouteParametersAndP1(offset int, limit int, RouteName_ string, RouteParameters_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and p1 = ?", RouteName_, RouteParameters_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndP2 Get MenuTrees via RouteNameAndRouteParametersAndP2
func GetMenuTreesByRouteNameAndRouteParametersAndP2(offset int, limit int, RouteName_ string, RouteParameters_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and p2 = ?", RouteName_, RouteParameters_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndP3 Get MenuTrees via RouteNameAndRouteParametersAndP3
func GetMenuTreesByRouteNameAndRouteParametersAndP3(offset int, limit int, RouteName_ string, RouteParameters_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and p3 = ?", RouteName_, RouteParameters_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndP4 Get MenuTrees via RouteNameAndRouteParametersAndP4
func GetMenuTreesByRouteNameAndRouteParametersAndP4(offset int, limit int, RouteName_ string, RouteParameters_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and p4 = ?", RouteName_, RouteParameters_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndP5 Get MenuTrees via RouteNameAndRouteParametersAndP5
func GetMenuTreesByRouteNameAndRouteParametersAndP5(offset int, limit int, RouteName_ string, RouteParameters_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and p5 = ?", RouteName_, RouteParameters_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndP6 Get MenuTrees via RouteNameAndRouteParametersAndP6
func GetMenuTreesByRouteNameAndRouteParametersAndP6(offset int, limit int, RouteName_ string, RouteParameters_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and p6 = ?", RouteName_, RouteParameters_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndP7 Get MenuTrees via RouteNameAndRouteParametersAndP7
func GetMenuTreesByRouteNameAndRouteParametersAndP7(offset int, limit int, RouteName_ string, RouteParameters_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and p7 = ?", RouteName_, RouteParameters_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndP8 Get MenuTrees via RouteNameAndRouteParametersAndP8
func GetMenuTreesByRouteNameAndRouteParametersAndP8(offset int, limit int, RouteName_ string, RouteParameters_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and p8 = ?", RouteName_, RouteParameters_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndP9 Get MenuTrees via RouteNameAndRouteParametersAndP9
func GetMenuTreesByRouteNameAndRouteParametersAndP9(offset int, limit int, RouteName_ string, RouteParameters_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and p9 = ?", RouteName_, RouteParameters_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParametersAndFormClass Get MenuTrees via RouteNameAndRouteParametersAndFormClass
func GetMenuTreesByRouteNameAndRouteParametersAndFormClass(offset int, limit int, RouteName_ string, RouteParameters_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ? and form_class = ?", RouteName_, RouteParameters_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndTitle Get MenuTrees via RouteNameAndUrlAndTitle
func GetMenuTreesByRouteNameAndUrlAndTitle(offset int, limit int, RouteName_ string, Url_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and title = ?", RouteName_, Url_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndDescription Get MenuTrees via RouteNameAndUrlAndDescription
func GetMenuTreesByRouteNameAndUrlAndDescription(offset int, limit int, RouteName_ string, Url_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and description = ?", RouteName_, Url_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndClass Get MenuTrees via RouteNameAndUrlAndClass
func GetMenuTreesByRouteNameAndUrlAndClass(offset int, limit int, RouteName_ string, Url_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and class = ?", RouteName_, Url_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndOptions Get MenuTrees via RouteNameAndUrlAndOptions
func GetMenuTreesByRouteNameAndUrlAndOptions(offset int, limit int, RouteName_ string, Url_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and options = ?", RouteName_, Url_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndProvider Get MenuTrees via RouteNameAndUrlAndProvider
func GetMenuTreesByRouteNameAndUrlAndProvider(offset int, limit int, RouteName_ string, Url_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and provider = ?", RouteName_, Url_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndEnabled Get MenuTrees via RouteNameAndUrlAndEnabled
func GetMenuTreesByRouteNameAndUrlAndEnabled(offset int, limit int, RouteName_ string, Url_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and enabled = ?", RouteName_, Url_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndDiscovered Get MenuTrees via RouteNameAndUrlAndDiscovered
func GetMenuTreesByRouteNameAndUrlAndDiscovered(offset int, limit int, RouteName_ string, Url_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and discovered = ?", RouteName_, Url_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndExpanded Get MenuTrees via RouteNameAndUrlAndExpanded
func GetMenuTreesByRouteNameAndUrlAndExpanded(offset int, limit int, RouteName_ string, Url_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and expanded = ?", RouteName_, Url_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndWeight Get MenuTrees via RouteNameAndUrlAndWeight
func GetMenuTreesByRouteNameAndUrlAndWeight(offset int, limit int, RouteName_ string, Url_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and weight = ?", RouteName_, Url_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndMetadata Get MenuTrees via RouteNameAndUrlAndMetadata
func GetMenuTreesByRouteNameAndUrlAndMetadata(offset int, limit int, RouteName_ string, Url_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and metadata = ?", RouteName_, Url_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndHasChildren Get MenuTrees via RouteNameAndUrlAndHasChildren
func GetMenuTreesByRouteNameAndUrlAndHasChildren(offset int, limit int, RouteName_ string, Url_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and has_children = ?", RouteName_, Url_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndDepth Get MenuTrees via RouteNameAndUrlAndDepth
func GetMenuTreesByRouteNameAndUrlAndDepth(offset int, limit int, RouteName_ string, Url_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and depth = ?", RouteName_, Url_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndP1 Get MenuTrees via RouteNameAndUrlAndP1
func GetMenuTreesByRouteNameAndUrlAndP1(offset int, limit int, RouteName_ string, Url_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and p1 = ?", RouteName_, Url_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndP2 Get MenuTrees via RouteNameAndUrlAndP2
func GetMenuTreesByRouteNameAndUrlAndP2(offset int, limit int, RouteName_ string, Url_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and p2 = ?", RouteName_, Url_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndP3 Get MenuTrees via RouteNameAndUrlAndP3
func GetMenuTreesByRouteNameAndUrlAndP3(offset int, limit int, RouteName_ string, Url_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and p3 = ?", RouteName_, Url_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndP4 Get MenuTrees via RouteNameAndUrlAndP4
func GetMenuTreesByRouteNameAndUrlAndP4(offset int, limit int, RouteName_ string, Url_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and p4 = ?", RouteName_, Url_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndP5 Get MenuTrees via RouteNameAndUrlAndP5
func GetMenuTreesByRouteNameAndUrlAndP5(offset int, limit int, RouteName_ string, Url_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and p5 = ?", RouteName_, Url_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndP6 Get MenuTrees via RouteNameAndUrlAndP6
func GetMenuTreesByRouteNameAndUrlAndP6(offset int, limit int, RouteName_ string, Url_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and p6 = ?", RouteName_, Url_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndP7 Get MenuTrees via RouteNameAndUrlAndP7
func GetMenuTreesByRouteNameAndUrlAndP7(offset int, limit int, RouteName_ string, Url_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and p7 = ?", RouteName_, Url_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndP8 Get MenuTrees via RouteNameAndUrlAndP8
func GetMenuTreesByRouteNameAndUrlAndP8(offset int, limit int, RouteName_ string, Url_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and p8 = ?", RouteName_, Url_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndP9 Get MenuTrees via RouteNameAndUrlAndP9
func GetMenuTreesByRouteNameAndUrlAndP9(offset int, limit int, RouteName_ string, Url_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and p9 = ?", RouteName_, Url_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrlAndFormClass Get MenuTrees via RouteNameAndUrlAndFormClass
func GetMenuTreesByRouteNameAndUrlAndFormClass(offset int, limit int, RouteName_ string, Url_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ? and form_class = ?", RouteName_, Url_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndDescription Get MenuTrees via RouteNameAndTitleAndDescription
func GetMenuTreesByRouteNameAndTitleAndDescription(offset int, limit int, RouteName_ string, Title_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and description = ?", RouteName_, Title_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndClass Get MenuTrees via RouteNameAndTitleAndClass
func GetMenuTreesByRouteNameAndTitleAndClass(offset int, limit int, RouteName_ string, Title_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and class = ?", RouteName_, Title_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndOptions Get MenuTrees via RouteNameAndTitleAndOptions
func GetMenuTreesByRouteNameAndTitleAndOptions(offset int, limit int, RouteName_ string, Title_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and options = ?", RouteName_, Title_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndProvider Get MenuTrees via RouteNameAndTitleAndProvider
func GetMenuTreesByRouteNameAndTitleAndProvider(offset int, limit int, RouteName_ string, Title_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and provider = ?", RouteName_, Title_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndEnabled Get MenuTrees via RouteNameAndTitleAndEnabled
func GetMenuTreesByRouteNameAndTitleAndEnabled(offset int, limit int, RouteName_ string, Title_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and enabled = ?", RouteName_, Title_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndDiscovered Get MenuTrees via RouteNameAndTitleAndDiscovered
func GetMenuTreesByRouteNameAndTitleAndDiscovered(offset int, limit int, RouteName_ string, Title_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and discovered = ?", RouteName_, Title_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndExpanded Get MenuTrees via RouteNameAndTitleAndExpanded
func GetMenuTreesByRouteNameAndTitleAndExpanded(offset int, limit int, RouteName_ string, Title_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and expanded = ?", RouteName_, Title_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndWeight Get MenuTrees via RouteNameAndTitleAndWeight
func GetMenuTreesByRouteNameAndTitleAndWeight(offset int, limit int, RouteName_ string, Title_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and weight = ?", RouteName_, Title_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndMetadata Get MenuTrees via RouteNameAndTitleAndMetadata
func GetMenuTreesByRouteNameAndTitleAndMetadata(offset int, limit int, RouteName_ string, Title_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and metadata = ?", RouteName_, Title_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndHasChildren Get MenuTrees via RouteNameAndTitleAndHasChildren
func GetMenuTreesByRouteNameAndTitleAndHasChildren(offset int, limit int, RouteName_ string, Title_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and has_children = ?", RouteName_, Title_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndDepth Get MenuTrees via RouteNameAndTitleAndDepth
func GetMenuTreesByRouteNameAndTitleAndDepth(offset int, limit int, RouteName_ string, Title_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and depth = ?", RouteName_, Title_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndP1 Get MenuTrees via RouteNameAndTitleAndP1
func GetMenuTreesByRouteNameAndTitleAndP1(offset int, limit int, RouteName_ string, Title_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and p1 = ?", RouteName_, Title_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndP2 Get MenuTrees via RouteNameAndTitleAndP2
func GetMenuTreesByRouteNameAndTitleAndP2(offset int, limit int, RouteName_ string, Title_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and p2 = ?", RouteName_, Title_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndP3 Get MenuTrees via RouteNameAndTitleAndP3
func GetMenuTreesByRouteNameAndTitleAndP3(offset int, limit int, RouteName_ string, Title_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and p3 = ?", RouteName_, Title_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndP4 Get MenuTrees via RouteNameAndTitleAndP4
func GetMenuTreesByRouteNameAndTitleAndP4(offset int, limit int, RouteName_ string, Title_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and p4 = ?", RouteName_, Title_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndP5 Get MenuTrees via RouteNameAndTitleAndP5
func GetMenuTreesByRouteNameAndTitleAndP5(offset int, limit int, RouteName_ string, Title_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and p5 = ?", RouteName_, Title_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndP6 Get MenuTrees via RouteNameAndTitleAndP6
func GetMenuTreesByRouteNameAndTitleAndP6(offset int, limit int, RouteName_ string, Title_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and p6 = ?", RouteName_, Title_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndP7 Get MenuTrees via RouteNameAndTitleAndP7
func GetMenuTreesByRouteNameAndTitleAndP7(offset int, limit int, RouteName_ string, Title_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and p7 = ?", RouteName_, Title_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndP8 Get MenuTrees via RouteNameAndTitleAndP8
func GetMenuTreesByRouteNameAndTitleAndP8(offset int, limit int, RouteName_ string, Title_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and p8 = ?", RouteName_, Title_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndP9 Get MenuTrees via RouteNameAndTitleAndP9
func GetMenuTreesByRouteNameAndTitleAndP9(offset int, limit int, RouteName_ string, Title_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and p9 = ?", RouteName_, Title_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitleAndFormClass Get MenuTrees via RouteNameAndTitleAndFormClass
func GetMenuTreesByRouteNameAndTitleAndFormClass(offset int, limit int, RouteName_ string, Title_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ? and form_class = ?", RouteName_, Title_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndClass Get MenuTrees via RouteNameAndDescriptionAndClass
func GetMenuTreesByRouteNameAndDescriptionAndClass(offset int, limit int, RouteName_ string, Description_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and class = ?", RouteName_, Description_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndOptions Get MenuTrees via RouteNameAndDescriptionAndOptions
func GetMenuTreesByRouteNameAndDescriptionAndOptions(offset int, limit int, RouteName_ string, Description_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and options = ?", RouteName_, Description_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndProvider Get MenuTrees via RouteNameAndDescriptionAndProvider
func GetMenuTreesByRouteNameAndDescriptionAndProvider(offset int, limit int, RouteName_ string, Description_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and provider = ?", RouteName_, Description_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndEnabled Get MenuTrees via RouteNameAndDescriptionAndEnabled
func GetMenuTreesByRouteNameAndDescriptionAndEnabled(offset int, limit int, RouteName_ string, Description_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and enabled = ?", RouteName_, Description_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndDiscovered Get MenuTrees via RouteNameAndDescriptionAndDiscovered
func GetMenuTreesByRouteNameAndDescriptionAndDiscovered(offset int, limit int, RouteName_ string, Description_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and discovered = ?", RouteName_, Description_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndExpanded Get MenuTrees via RouteNameAndDescriptionAndExpanded
func GetMenuTreesByRouteNameAndDescriptionAndExpanded(offset int, limit int, RouteName_ string, Description_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and expanded = ?", RouteName_, Description_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndWeight Get MenuTrees via RouteNameAndDescriptionAndWeight
func GetMenuTreesByRouteNameAndDescriptionAndWeight(offset int, limit int, RouteName_ string, Description_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and weight = ?", RouteName_, Description_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndMetadata Get MenuTrees via RouteNameAndDescriptionAndMetadata
func GetMenuTreesByRouteNameAndDescriptionAndMetadata(offset int, limit int, RouteName_ string, Description_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and metadata = ?", RouteName_, Description_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndHasChildren Get MenuTrees via RouteNameAndDescriptionAndHasChildren
func GetMenuTreesByRouteNameAndDescriptionAndHasChildren(offset int, limit int, RouteName_ string, Description_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and has_children = ?", RouteName_, Description_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndDepth Get MenuTrees via RouteNameAndDescriptionAndDepth
func GetMenuTreesByRouteNameAndDescriptionAndDepth(offset int, limit int, RouteName_ string, Description_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and depth = ?", RouteName_, Description_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndP1 Get MenuTrees via RouteNameAndDescriptionAndP1
func GetMenuTreesByRouteNameAndDescriptionAndP1(offset int, limit int, RouteName_ string, Description_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and p1 = ?", RouteName_, Description_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndP2 Get MenuTrees via RouteNameAndDescriptionAndP2
func GetMenuTreesByRouteNameAndDescriptionAndP2(offset int, limit int, RouteName_ string, Description_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and p2 = ?", RouteName_, Description_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndP3 Get MenuTrees via RouteNameAndDescriptionAndP3
func GetMenuTreesByRouteNameAndDescriptionAndP3(offset int, limit int, RouteName_ string, Description_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and p3 = ?", RouteName_, Description_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndP4 Get MenuTrees via RouteNameAndDescriptionAndP4
func GetMenuTreesByRouteNameAndDescriptionAndP4(offset int, limit int, RouteName_ string, Description_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and p4 = ?", RouteName_, Description_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndP5 Get MenuTrees via RouteNameAndDescriptionAndP5
func GetMenuTreesByRouteNameAndDescriptionAndP5(offset int, limit int, RouteName_ string, Description_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and p5 = ?", RouteName_, Description_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndP6 Get MenuTrees via RouteNameAndDescriptionAndP6
func GetMenuTreesByRouteNameAndDescriptionAndP6(offset int, limit int, RouteName_ string, Description_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and p6 = ?", RouteName_, Description_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndP7 Get MenuTrees via RouteNameAndDescriptionAndP7
func GetMenuTreesByRouteNameAndDescriptionAndP7(offset int, limit int, RouteName_ string, Description_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and p7 = ?", RouteName_, Description_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndP8 Get MenuTrees via RouteNameAndDescriptionAndP8
func GetMenuTreesByRouteNameAndDescriptionAndP8(offset int, limit int, RouteName_ string, Description_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and p8 = ?", RouteName_, Description_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndP9 Get MenuTrees via RouteNameAndDescriptionAndP9
func GetMenuTreesByRouteNameAndDescriptionAndP9(offset int, limit int, RouteName_ string, Description_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and p9 = ?", RouteName_, Description_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescriptionAndFormClass Get MenuTrees via RouteNameAndDescriptionAndFormClass
func GetMenuTreesByRouteNameAndDescriptionAndFormClass(offset int, limit int, RouteName_ string, Description_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ? and form_class = ?", RouteName_, Description_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndOptions Get MenuTrees via RouteNameAndClassAndOptions
func GetMenuTreesByRouteNameAndClassAndOptions(offset int, limit int, RouteName_ string, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and options = ?", RouteName_, Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndProvider Get MenuTrees via RouteNameAndClassAndProvider
func GetMenuTreesByRouteNameAndClassAndProvider(offset int, limit int, RouteName_ string, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and provider = ?", RouteName_, Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndEnabled Get MenuTrees via RouteNameAndClassAndEnabled
func GetMenuTreesByRouteNameAndClassAndEnabled(offset int, limit int, RouteName_ string, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and enabled = ?", RouteName_, Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndDiscovered Get MenuTrees via RouteNameAndClassAndDiscovered
func GetMenuTreesByRouteNameAndClassAndDiscovered(offset int, limit int, RouteName_ string, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and discovered = ?", RouteName_, Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndExpanded Get MenuTrees via RouteNameAndClassAndExpanded
func GetMenuTreesByRouteNameAndClassAndExpanded(offset int, limit int, RouteName_ string, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and expanded = ?", RouteName_, Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndWeight Get MenuTrees via RouteNameAndClassAndWeight
func GetMenuTreesByRouteNameAndClassAndWeight(offset int, limit int, RouteName_ string, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and weight = ?", RouteName_, Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndMetadata Get MenuTrees via RouteNameAndClassAndMetadata
func GetMenuTreesByRouteNameAndClassAndMetadata(offset int, limit int, RouteName_ string, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and metadata = ?", RouteName_, Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndHasChildren Get MenuTrees via RouteNameAndClassAndHasChildren
func GetMenuTreesByRouteNameAndClassAndHasChildren(offset int, limit int, RouteName_ string, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and has_children = ?", RouteName_, Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndDepth Get MenuTrees via RouteNameAndClassAndDepth
func GetMenuTreesByRouteNameAndClassAndDepth(offset int, limit int, RouteName_ string, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and depth = ?", RouteName_, Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndP1 Get MenuTrees via RouteNameAndClassAndP1
func GetMenuTreesByRouteNameAndClassAndP1(offset int, limit int, RouteName_ string, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and p1 = ?", RouteName_, Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndP2 Get MenuTrees via RouteNameAndClassAndP2
func GetMenuTreesByRouteNameAndClassAndP2(offset int, limit int, RouteName_ string, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and p2 = ?", RouteName_, Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndP3 Get MenuTrees via RouteNameAndClassAndP3
func GetMenuTreesByRouteNameAndClassAndP3(offset int, limit int, RouteName_ string, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and p3 = ?", RouteName_, Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndP4 Get MenuTrees via RouteNameAndClassAndP4
func GetMenuTreesByRouteNameAndClassAndP4(offset int, limit int, RouteName_ string, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and p4 = ?", RouteName_, Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndP5 Get MenuTrees via RouteNameAndClassAndP5
func GetMenuTreesByRouteNameAndClassAndP5(offset int, limit int, RouteName_ string, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and p5 = ?", RouteName_, Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndP6 Get MenuTrees via RouteNameAndClassAndP6
func GetMenuTreesByRouteNameAndClassAndP6(offset int, limit int, RouteName_ string, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and p6 = ?", RouteName_, Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndP7 Get MenuTrees via RouteNameAndClassAndP7
func GetMenuTreesByRouteNameAndClassAndP7(offset int, limit int, RouteName_ string, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and p7 = ?", RouteName_, Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndP8 Get MenuTrees via RouteNameAndClassAndP8
func GetMenuTreesByRouteNameAndClassAndP8(offset int, limit int, RouteName_ string, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and p8 = ?", RouteName_, Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndP9 Get MenuTrees via RouteNameAndClassAndP9
func GetMenuTreesByRouteNameAndClassAndP9(offset int, limit int, RouteName_ string, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and p9 = ?", RouteName_, Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClassAndFormClass Get MenuTrees via RouteNameAndClassAndFormClass
func GetMenuTreesByRouteNameAndClassAndFormClass(offset int, limit int, RouteName_ string, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ? and form_class = ?", RouteName_, Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndProvider Get MenuTrees via RouteNameAndOptionsAndProvider
func GetMenuTreesByRouteNameAndOptionsAndProvider(offset int, limit int, RouteName_ string, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and provider = ?", RouteName_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndEnabled Get MenuTrees via RouteNameAndOptionsAndEnabled
func GetMenuTreesByRouteNameAndOptionsAndEnabled(offset int, limit int, RouteName_ string, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and enabled = ?", RouteName_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndDiscovered Get MenuTrees via RouteNameAndOptionsAndDiscovered
func GetMenuTreesByRouteNameAndOptionsAndDiscovered(offset int, limit int, RouteName_ string, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and discovered = ?", RouteName_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndExpanded Get MenuTrees via RouteNameAndOptionsAndExpanded
func GetMenuTreesByRouteNameAndOptionsAndExpanded(offset int, limit int, RouteName_ string, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and expanded = ?", RouteName_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndWeight Get MenuTrees via RouteNameAndOptionsAndWeight
func GetMenuTreesByRouteNameAndOptionsAndWeight(offset int, limit int, RouteName_ string, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and weight = ?", RouteName_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndMetadata Get MenuTrees via RouteNameAndOptionsAndMetadata
func GetMenuTreesByRouteNameAndOptionsAndMetadata(offset int, limit int, RouteName_ string, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and metadata = ?", RouteName_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndHasChildren Get MenuTrees via RouteNameAndOptionsAndHasChildren
func GetMenuTreesByRouteNameAndOptionsAndHasChildren(offset int, limit int, RouteName_ string, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and has_children = ?", RouteName_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndDepth Get MenuTrees via RouteNameAndOptionsAndDepth
func GetMenuTreesByRouteNameAndOptionsAndDepth(offset int, limit int, RouteName_ string, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and depth = ?", RouteName_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndP1 Get MenuTrees via RouteNameAndOptionsAndP1
func GetMenuTreesByRouteNameAndOptionsAndP1(offset int, limit int, RouteName_ string, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and p1 = ?", RouteName_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndP2 Get MenuTrees via RouteNameAndOptionsAndP2
func GetMenuTreesByRouteNameAndOptionsAndP2(offset int, limit int, RouteName_ string, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and p2 = ?", RouteName_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndP3 Get MenuTrees via RouteNameAndOptionsAndP3
func GetMenuTreesByRouteNameAndOptionsAndP3(offset int, limit int, RouteName_ string, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and p3 = ?", RouteName_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndP4 Get MenuTrees via RouteNameAndOptionsAndP4
func GetMenuTreesByRouteNameAndOptionsAndP4(offset int, limit int, RouteName_ string, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and p4 = ?", RouteName_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndP5 Get MenuTrees via RouteNameAndOptionsAndP5
func GetMenuTreesByRouteNameAndOptionsAndP5(offset int, limit int, RouteName_ string, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and p5 = ?", RouteName_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndP6 Get MenuTrees via RouteNameAndOptionsAndP6
func GetMenuTreesByRouteNameAndOptionsAndP6(offset int, limit int, RouteName_ string, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and p6 = ?", RouteName_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndP7 Get MenuTrees via RouteNameAndOptionsAndP7
func GetMenuTreesByRouteNameAndOptionsAndP7(offset int, limit int, RouteName_ string, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and p7 = ?", RouteName_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndP8 Get MenuTrees via RouteNameAndOptionsAndP8
func GetMenuTreesByRouteNameAndOptionsAndP8(offset int, limit int, RouteName_ string, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and p8 = ?", RouteName_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndP9 Get MenuTrees via RouteNameAndOptionsAndP9
func GetMenuTreesByRouteNameAndOptionsAndP9(offset int, limit int, RouteName_ string, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and p9 = ?", RouteName_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptionsAndFormClass Get MenuTrees via RouteNameAndOptionsAndFormClass
func GetMenuTreesByRouteNameAndOptionsAndFormClass(offset int, limit int, RouteName_ string, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ? and form_class = ?", RouteName_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndEnabled Get MenuTrees via RouteNameAndProviderAndEnabled
func GetMenuTreesByRouteNameAndProviderAndEnabled(offset int, limit int, RouteName_ string, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and enabled = ?", RouteName_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndDiscovered Get MenuTrees via RouteNameAndProviderAndDiscovered
func GetMenuTreesByRouteNameAndProviderAndDiscovered(offset int, limit int, RouteName_ string, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and discovered = ?", RouteName_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndExpanded Get MenuTrees via RouteNameAndProviderAndExpanded
func GetMenuTreesByRouteNameAndProviderAndExpanded(offset int, limit int, RouteName_ string, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and expanded = ?", RouteName_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndWeight Get MenuTrees via RouteNameAndProviderAndWeight
func GetMenuTreesByRouteNameAndProviderAndWeight(offset int, limit int, RouteName_ string, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and weight = ?", RouteName_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndMetadata Get MenuTrees via RouteNameAndProviderAndMetadata
func GetMenuTreesByRouteNameAndProviderAndMetadata(offset int, limit int, RouteName_ string, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and metadata = ?", RouteName_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndHasChildren Get MenuTrees via RouteNameAndProviderAndHasChildren
func GetMenuTreesByRouteNameAndProviderAndHasChildren(offset int, limit int, RouteName_ string, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and has_children = ?", RouteName_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndDepth Get MenuTrees via RouteNameAndProviderAndDepth
func GetMenuTreesByRouteNameAndProviderAndDepth(offset int, limit int, RouteName_ string, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and depth = ?", RouteName_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndP1 Get MenuTrees via RouteNameAndProviderAndP1
func GetMenuTreesByRouteNameAndProviderAndP1(offset int, limit int, RouteName_ string, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and p1 = ?", RouteName_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndP2 Get MenuTrees via RouteNameAndProviderAndP2
func GetMenuTreesByRouteNameAndProviderAndP2(offset int, limit int, RouteName_ string, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and p2 = ?", RouteName_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndP3 Get MenuTrees via RouteNameAndProviderAndP3
func GetMenuTreesByRouteNameAndProviderAndP3(offset int, limit int, RouteName_ string, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and p3 = ?", RouteName_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndP4 Get MenuTrees via RouteNameAndProviderAndP4
func GetMenuTreesByRouteNameAndProviderAndP4(offset int, limit int, RouteName_ string, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and p4 = ?", RouteName_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndP5 Get MenuTrees via RouteNameAndProviderAndP5
func GetMenuTreesByRouteNameAndProviderAndP5(offset int, limit int, RouteName_ string, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and p5 = ?", RouteName_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndP6 Get MenuTrees via RouteNameAndProviderAndP6
func GetMenuTreesByRouteNameAndProviderAndP6(offset int, limit int, RouteName_ string, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and p6 = ?", RouteName_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndP7 Get MenuTrees via RouteNameAndProviderAndP7
func GetMenuTreesByRouteNameAndProviderAndP7(offset int, limit int, RouteName_ string, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and p7 = ?", RouteName_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndP8 Get MenuTrees via RouteNameAndProviderAndP8
func GetMenuTreesByRouteNameAndProviderAndP8(offset int, limit int, RouteName_ string, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and p8 = ?", RouteName_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndP9 Get MenuTrees via RouteNameAndProviderAndP9
func GetMenuTreesByRouteNameAndProviderAndP9(offset int, limit int, RouteName_ string, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and p9 = ?", RouteName_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProviderAndFormClass Get MenuTrees via RouteNameAndProviderAndFormClass
func GetMenuTreesByRouteNameAndProviderAndFormClass(offset int, limit int, RouteName_ string, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ? and form_class = ?", RouteName_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndDiscovered Get MenuTrees via RouteNameAndEnabledAndDiscovered
func GetMenuTreesByRouteNameAndEnabledAndDiscovered(offset int, limit int, RouteName_ string, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and discovered = ?", RouteName_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndExpanded Get MenuTrees via RouteNameAndEnabledAndExpanded
func GetMenuTreesByRouteNameAndEnabledAndExpanded(offset int, limit int, RouteName_ string, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and expanded = ?", RouteName_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndWeight Get MenuTrees via RouteNameAndEnabledAndWeight
func GetMenuTreesByRouteNameAndEnabledAndWeight(offset int, limit int, RouteName_ string, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and weight = ?", RouteName_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndMetadata Get MenuTrees via RouteNameAndEnabledAndMetadata
func GetMenuTreesByRouteNameAndEnabledAndMetadata(offset int, limit int, RouteName_ string, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and metadata = ?", RouteName_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndHasChildren Get MenuTrees via RouteNameAndEnabledAndHasChildren
func GetMenuTreesByRouteNameAndEnabledAndHasChildren(offset int, limit int, RouteName_ string, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and has_children = ?", RouteName_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndDepth Get MenuTrees via RouteNameAndEnabledAndDepth
func GetMenuTreesByRouteNameAndEnabledAndDepth(offset int, limit int, RouteName_ string, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and depth = ?", RouteName_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndP1 Get MenuTrees via RouteNameAndEnabledAndP1
func GetMenuTreesByRouteNameAndEnabledAndP1(offset int, limit int, RouteName_ string, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and p1 = ?", RouteName_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndP2 Get MenuTrees via RouteNameAndEnabledAndP2
func GetMenuTreesByRouteNameAndEnabledAndP2(offset int, limit int, RouteName_ string, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and p2 = ?", RouteName_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndP3 Get MenuTrees via RouteNameAndEnabledAndP3
func GetMenuTreesByRouteNameAndEnabledAndP3(offset int, limit int, RouteName_ string, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and p3 = ?", RouteName_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndP4 Get MenuTrees via RouteNameAndEnabledAndP4
func GetMenuTreesByRouteNameAndEnabledAndP4(offset int, limit int, RouteName_ string, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and p4 = ?", RouteName_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndP5 Get MenuTrees via RouteNameAndEnabledAndP5
func GetMenuTreesByRouteNameAndEnabledAndP5(offset int, limit int, RouteName_ string, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and p5 = ?", RouteName_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndP6 Get MenuTrees via RouteNameAndEnabledAndP6
func GetMenuTreesByRouteNameAndEnabledAndP6(offset int, limit int, RouteName_ string, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and p6 = ?", RouteName_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndP7 Get MenuTrees via RouteNameAndEnabledAndP7
func GetMenuTreesByRouteNameAndEnabledAndP7(offset int, limit int, RouteName_ string, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and p7 = ?", RouteName_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndP8 Get MenuTrees via RouteNameAndEnabledAndP8
func GetMenuTreesByRouteNameAndEnabledAndP8(offset int, limit int, RouteName_ string, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and p8 = ?", RouteName_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndP9 Get MenuTrees via RouteNameAndEnabledAndP9
func GetMenuTreesByRouteNameAndEnabledAndP9(offset int, limit int, RouteName_ string, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and p9 = ?", RouteName_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabledAndFormClass Get MenuTrees via RouteNameAndEnabledAndFormClass
func GetMenuTreesByRouteNameAndEnabledAndFormClass(offset int, limit int, RouteName_ string, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ? and form_class = ?", RouteName_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndExpanded Get MenuTrees via RouteNameAndDiscoveredAndExpanded
func GetMenuTreesByRouteNameAndDiscoveredAndExpanded(offset int, limit int, RouteName_ string, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and expanded = ?", RouteName_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndWeight Get MenuTrees via RouteNameAndDiscoveredAndWeight
func GetMenuTreesByRouteNameAndDiscoveredAndWeight(offset int, limit int, RouteName_ string, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and weight = ?", RouteName_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndMetadata Get MenuTrees via RouteNameAndDiscoveredAndMetadata
func GetMenuTreesByRouteNameAndDiscoveredAndMetadata(offset int, limit int, RouteName_ string, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and metadata = ?", RouteName_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndHasChildren Get MenuTrees via RouteNameAndDiscoveredAndHasChildren
func GetMenuTreesByRouteNameAndDiscoveredAndHasChildren(offset int, limit int, RouteName_ string, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and has_children = ?", RouteName_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndDepth Get MenuTrees via RouteNameAndDiscoveredAndDepth
func GetMenuTreesByRouteNameAndDiscoveredAndDepth(offset int, limit int, RouteName_ string, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and depth = ?", RouteName_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndP1 Get MenuTrees via RouteNameAndDiscoveredAndP1
func GetMenuTreesByRouteNameAndDiscoveredAndP1(offset int, limit int, RouteName_ string, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and p1 = ?", RouteName_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndP2 Get MenuTrees via RouteNameAndDiscoveredAndP2
func GetMenuTreesByRouteNameAndDiscoveredAndP2(offset int, limit int, RouteName_ string, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and p2 = ?", RouteName_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndP3 Get MenuTrees via RouteNameAndDiscoveredAndP3
func GetMenuTreesByRouteNameAndDiscoveredAndP3(offset int, limit int, RouteName_ string, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and p3 = ?", RouteName_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndP4 Get MenuTrees via RouteNameAndDiscoveredAndP4
func GetMenuTreesByRouteNameAndDiscoveredAndP4(offset int, limit int, RouteName_ string, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and p4 = ?", RouteName_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndP5 Get MenuTrees via RouteNameAndDiscoveredAndP5
func GetMenuTreesByRouteNameAndDiscoveredAndP5(offset int, limit int, RouteName_ string, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and p5 = ?", RouteName_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndP6 Get MenuTrees via RouteNameAndDiscoveredAndP6
func GetMenuTreesByRouteNameAndDiscoveredAndP6(offset int, limit int, RouteName_ string, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and p6 = ?", RouteName_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndP7 Get MenuTrees via RouteNameAndDiscoveredAndP7
func GetMenuTreesByRouteNameAndDiscoveredAndP7(offset int, limit int, RouteName_ string, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and p7 = ?", RouteName_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndP8 Get MenuTrees via RouteNameAndDiscoveredAndP8
func GetMenuTreesByRouteNameAndDiscoveredAndP8(offset int, limit int, RouteName_ string, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and p8 = ?", RouteName_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndP9 Get MenuTrees via RouteNameAndDiscoveredAndP9
func GetMenuTreesByRouteNameAndDiscoveredAndP9(offset int, limit int, RouteName_ string, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and p9 = ?", RouteName_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscoveredAndFormClass Get MenuTrees via RouteNameAndDiscoveredAndFormClass
func GetMenuTreesByRouteNameAndDiscoveredAndFormClass(offset int, limit int, RouteName_ string, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ? and form_class = ?", RouteName_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndWeight Get MenuTrees via RouteNameAndExpandedAndWeight
func GetMenuTreesByRouteNameAndExpandedAndWeight(offset int, limit int, RouteName_ string, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and weight = ?", RouteName_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndMetadata Get MenuTrees via RouteNameAndExpandedAndMetadata
func GetMenuTreesByRouteNameAndExpandedAndMetadata(offset int, limit int, RouteName_ string, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and metadata = ?", RouteName_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndHasChildren Get MenuTrees via RouteNameAndExpandedAndHasChildren
func GetMenuTreesByRouteNameAndExpandedAndHasChildren(offset int, limit int, RouteName_ string, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and has_children = ?", RouteName_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndDepth Get MenuTrees via RouteNameAndExpandedAndDepth
func GetMenuTreesByRouteNameAndExpandedAndDepth(offset int, limit int, RouteName_ string, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and depth = ?", RouteName_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndP1 Get MenuTrees via RouteNameAndExpandedAndP1
func GetMenuTreesByRouteNameAndExpandedAndP1(offset int, limit int, RouteName_ string, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and p1 = ?", RouteName_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndP2 Get MenuTrees via RouteNameAndExpandedAndP2
func GetMenuTreesByRouteNameAndExpandedAndP2(offset int, limit int, RouteName_ string, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and p2 = ?", RouteName_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndP3 Get MenuTrees via RouteNameAndExpandedAndP3
func GetMenuTreesByRouteNameAndExpandedAndP3(offset int, limit int, RouteName_ string, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and p3 = ?", RouteName_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndP4 Get MenuTrees via RouteNameAndExpandedAndP4
func GetMenuTreesByRouteNameAndExpandedAndP4(offset int, limit int, RouteName_ string, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and p4 = ?", RouteName_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndP5 Get MenuTrees via RouteNameAndExpandedAndP5
func GetMenuTreesByRouteNameAndExpandedAndP5(offset int, limit int, RouteName_ string, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and p5 = ?", RouteName_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndP6 Get MenuTrees via RouteNameAndExpandedAndP6
func GetMenuTreesByRouteNameAndExpandedAndP6(offset int, limit int, RouteName_ string, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and p6 = ?", RouteName_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndP7 Get MenuTrees via RouteNameAndExpandedAndP7
func GetMenuTreesByRouteNameAndExpandedAndP7(offset int, limit int, RouteName_ string, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and p7 = ?", RouteName_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndP8 Get MenuTrees via RouteNameAndExpandedAndP8
func GetMenuTreesByRouteNameAndExpandedAndP8(offset int, limit int, RouteName_ string, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and p8 = ?", RouteName_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndP9 Get MenuTrees via RouteNameAndExpandedAndP9
func GetMenuTreesByRouteNameAndExpandedAndP9(offset int, limit int, RouteName_ string, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and p9 = ?", RouteName_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpandedAndFormClass Get MenuTrees via RouteNameAndExpandedAndFormClass
func GetMenuTreesByRouteNameAndExpandedAndFormClass(offset int, limit int, RouteName_ string, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ? and form_class = ?", RouteName_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndMetadata Get MenuTrees via RouteNameAndWeightAndMetadata
func GetMenuTreesByRouteNameAndWeightAndMetadata(offset int, limit int, RouteName_ string, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and metadata = ?", RouteName_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndHasChildren Get MenuTrees via RouteNameAndWeightAndHasChildren
func GetMenuTreesByRouteNameAndWeightAndHasChildren(offset int, limit int, RouteName_ string, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and has_children = ?", RouteName_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndDepth Get MenuTrees via RouteNameAndWeightAndDepth
func GetMenuTreesByRouteNameAndWeightAndDepth(offset int, limit int, RouteName_ string, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and depth = ?", RouteName_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndP1 Get MenuTrees via RouteNameAndWeightAndP1
func GetMenuTreesByRouteNameAndWeightAndP1(offset int, limit int, RouteName_ string, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and p1 = ?", RouteName_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndP2 Get MenuTrees via RouteNameAndWeightAndP2
func GetMenuTreesByRouteNameAndWeightAndP2(offset int, limit int, RouteName_ string, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and p2 = ?", RouteName_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndP3 Get MenuTrees via RouteNameAndWeightAndP3
func GetMenuTreesByRouteNameAndWeightAndP3(offset int, limit int, RouteName_ string, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and p3 = ?", RouteName_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndP4 Get MenuTrees via RouteNameAndWeightAndP4
func GetMenuTreesByRouteNameAndWeightAndP4(offset int, limit int, RouteName_ string, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and p4 = ?", RouteName_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndP5 Get MenuTrees via RouteNameAndWeightAndP5
func GetMenuTreesByRouteNameAndWeightAndP5(offset int, limit int, RouteName_ string, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and p5 = ?", RouteName_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndP6 Get MenuTrees via RouteNameAndWeightAndP6
func GetMenuTreesByRouteNameAndWeightAndP6(offset int, limit int, RouteName_ string, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and p6 = ?", RouteName_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndP7 Get MenuTrees via RouteNameAndWeightAndP7
func GetMenuTreesByRouteNameAndWeightAndP7(offset int, limit int, RouteName_ string, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and p7 = ?", RouteName_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndP8 Get MenuTrees via RouteNameAndWeightAndP8
func GetMenuTreesByRouteNameAndWeightAndP8(offset int, limit int, RouteName_ string, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and p8 = ?", RouteName_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndP9 Get MenuTrees via RouteNameAndWeightAndP9
func GetMenuTreesByRouteNameAndWeightAndP9(offset int, limit int, RouteName_ string, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and p9 = ?", RouteName_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeightAndFormClass Get MenuTrees via RouteNameAndWeightAndFormClass
func GetMenuTreesByRouteNameAndWeightAndFormClass(offset int, limit int, RouteName_ string, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ? and form_class = ?", RouteName_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndHasChildren Get MenuTrees via RouteNameAndMetadataAndHasChildren
func GetMenuTreesByRouteNameAndMetadataAndHasChildren(offset int, limit int, RouteName_ string, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and has_children = ?", RouteName_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndDepth Get MenuTrees via RouteNameAndMetadataAndDepth
func GetMenuTreesByRouteNameAndMetadataAndDepth(offset int, limit int, RouteName_ string, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and depth = ?", RouteName_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndP1 Get MenuTrees via RouteNameAndMetadataAndP1
func GetMenuTreesByRouteNameAndMetadataAndP1(offset int, limit int, RouteName_ string, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and p1 = ?", RouteName_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndP2 Get MenuTrees via RouteNameAndMetadataAndP2
func GetMenuTreesByRouteNameAndMetadataAndP2(offset int, limit int, RouteName_ string, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and p2 = ?", RouteName_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndP3 Get MenuTrees via RouteNameAndMetadataAndP3
func GetMenuTreesByRouteNameAndMetadataAndP3(offset int, limit int, RouteName_ string, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and p3 = ?", RouteName_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndP4 Get MenuTrees via RouteNameAndMetadataAndP4
func GetMenuTreesByRouteNameAndMetadataAndP4(offset int, limit int, RouteName_ string, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and p4 = ?", RouteName_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndP5 Get MenuTrees via RouteNameAndMetadataAndP5
func GetMenuTreesByRouteNameAndMetadataAndP5(offset int, limit int, RouteName_ string, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and p5 = ?", RouteName_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndP6 Get MenuTrees via RouteNameAndMetadataAndP6
func GetMenuTreesByRouteNameAndMetadataAndP6(offset int, limit int, RouteName_ string, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and p6 = ?", RouteName_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndP7 Get MenuTrees via RouteNameAndMetadataAndP7
func GetMenuTreesByRouteNameAndMetadataAndP7(offset int, limit int, RouteName_ string, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and p7 = ?", RouteName_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndP8 Get MenuTrees via RouteNameAndMetadataAndP8
func GetMenuTreesByRouteNameAndMetadataAndP8(offset int, limit int, RouteName_ string, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and p8 = ?", RouteName_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndP9 Get MenuTrees via RouteNameAndMetadataAndP9
func GetMenuTreesByRouteNameAndMetadataAndP9(offset int, limit int, RouteName_ string, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and p9 = ?", RouteName_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadataAndFormClass Get MenuTrees via RouteNameAndMetadataAndFormClass
func GetMenuTreesByRouteNameAndMetadataAndFormClass(offset int, limit int, RouteName_ string, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ? and form_class = ?", RouteName_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndDepth Get MenuTrees via RouteNameAndHasChildrenAndDepth
func GetMenuTreesByRouteNameAndHasChildrenAndDepth(offset int, limit int, RouteName_ string, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and depth = ?", RouteName_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndP1 Get MenuTrees via RouteNameAndHasChildrenAndP1
func GetMenuTreesByRouteNameAndHasChildrenAndP1(offset int, limit int, RouteName_ string, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and p1 = ?", RouteName_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndP2 Get MenuTrees via RouteNameAndHasChildrenAndP2
func GetMenuTreesByRouteNameAndHasChildrenAndP2(offset int, limit int, RouteName_ string, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and p2 = ?", RouteName_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndP3 Get MenuTrees via RouteNameAndHasChildrenAndP3
func GetMenuTreesByRouteNameAndHasChildrenAndP3(offset int, limit int, RouteName_ string, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and p3 = ?", RouteName_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndP4 Get MenuTrees via RouteNameAndHasChildrenAndP4
func GetMenuTreesByRouteNameAndHasChildrenAndP4(offset int, limit int, RouteName_ string, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and p4 = ?", RouteName_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndP5 Get MenuTrees via RouteNameAndHasChildrenAndP5
func GetMenuTreesByRouteNameAndHasChildrenAndP5(offset int, limit int, RouteName_ string, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and p5 = ?", RouteName_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndP6 Get MenuTrees via RouteNameAndHasChildrenAndP6
func GetMenuTreesByRouteNameAndHasChildrenAndP6(offset int, limit int, RouteName_ string, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and p6 = ?", RouteName_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndP7 Get MenuTrees via RouteNameAndHasChildrenAndP7
func GetMenuTreesByRouteNameAndHasChildrenAndP7(offset int, limit int, RouteName_ string, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and p7 = ?", RouteName_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndP8 Get MenuTrees via RouteNameAndHasChildrenAndP8
func GetMenuTreesByRouteNameAndHasChildrenAndP8(offset int, limit int, RouteName_ string, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and p8 = ?", RouteName_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndP9 Get MenuTrees via RouteNameAndHasChildrenAndP9
func GetMenuTreesByRouteNameAndHasChildrenAndP9(offset int, limit int, RouteName_ string, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and p9 = ?", RouteName_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildrenAndFormClass Get MenuTrees via RouteNameAndHasChildrenAndFormClass
func GetMenuTreesByRouteNameAndHasChildrenAndFormClass(offset int, limit int, RouteName_ string, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ? and form_class = ?", RouteName_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepthAndP1 Get MenuTrees via RouteNameAndDepthAndP1
func GetMenuTreesByRouteNameAndDepthAndP1(offset int, limit int, RouteName_ string, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ? and p1 = ?", RouteName_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepthAndP2 Get MenuTrees via RouteNameAndDepthAndP2
func GetMenuTreesByRouteNameAndDepthAndP2(offset int, limit int, RouteName_ string, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ? and p2 = ?", RouteName_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepthAndP3 Get MenuTrees via RouteNameAndDepthAndP3
func GetMenuTreesByRouteNameAndDepthAndP3(offset int, limit int, RouteName_ string, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ? and p3 = ?", RouteName_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepthAndP4 Get MenuTrees via RouteNameAndDepthAndP4
func GetMenuTreesByRouteNameAndDepthAndP4(offset int, limit int, RouteName_ string, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ? and p4 = ?", RouteName_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepthAndP5 Get MenuTrees via RouteNameAndDepthAndP5
func GetMenuTreesByRouteNameAndDepthAndP5(offset int, limit int, RouteName_ string, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ? and p5 = ?", RouteName_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepthAndP6 Get MenuTrees via RouteNameAndDepthAndP6
func GetMenuTreesByRouteNameAndDepthAndP6(offset int, limit int, RouteName_ string, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ? and p6 = ?", RouteName_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepthAndP7 Get MenuTrees via RouteNameAndDepthAndP7
func GetMenuTreesByRouteNameAndDepthAndP7(offset int, limit int, RouteName_ string, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ? and p7 = ?", RouteName_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepthAndP8 Get MenuTrees via RouteNameAndDepthAndP8
func GetMenuTreesByRouteNameAndDepthAndP8(offset int, limit int, RouteName_ string, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ? and p8 = ?", RouteName_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepthAndP9 Get MenuTrees via RouteNameAndDepthAndP9
func GetMenuTreesByRouteNameAndDepthAndP9(offset int, limit int, RouteName_ string, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ? and p9 = ?", RouteName_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepthAndFormClass Get MenuTrees via RouteNameAndDepthAndFormClass
func GetMenuTreesByRouteNameAndDepthAndFormClass(offset int, limit int, RouteName_ string, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ? and form_class = ?", RouteName_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP1AndP2 Get MenuTrees via RouteNameAndP1AndP2
func GetMenuTreesByRouteNameAndP1AndP2(offset int, limit int, RouteName_ string, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p1 = ? and p2 = ?", RouteName_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP1AndP3 Get MenuTrees via RouteNameAndP1AndP3
func GetMenuTreesByRouteNameAndP1AndP3(offset int, limit int, RouteName_ string, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p1 = ? and p3 = ?", RouteName_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP1AndP4 Get MenuTrees via RouteNameAndP1AndP4
func GetMenuTreesByRouteNameAndP1AndP4(offset int, limit int, RouteName_ string, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p1 = ? and p4 = ?", RouteName_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP1AndP5 Get MenuTrees via RouteNameAndP1AndP5
func GetMenuTreesByRouteNameAndP1AndP5(offset int, limit int, RouteName_ string, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p1 = ? and p5 = ?", RouteName_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP1AndP6 Get MenuTrees via RouteNameAndP1AndP6
func GetMenuTreesByRouteNameAndP1AndP6(offset int, limit int, RouteName_ string, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p1 = ? and p6 = ?", RouteName_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP1AndP7 Get MenuTrees via RouteNameAndP1AndP7
func GetMenuTreesByRouteNameAndP1AndP7(offset int, limit int, RouteName_ string, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p1 = ? and p7 = ?", RouteName_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP1AndP8 Get MenuTrees via RouteNameAndP1AndP8
func GetMenuTreesByRouteNameAndP1AndP8(offset int, limit int, RouteName_ string, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p1 = ? and p8 = ?", RouteName_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP1AndP9 Get MenuTrees via RouteNameAndP1AndP9
func GetMenuTreesByRouteNameAndP1AndP9(offset int, limit int, RouteName_ string, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p1 = ? and p9 = ?", RouteName_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP1AndFormClass Get MenuTrees via RouteNameAndP1AndFormClass
func GetMenuTreesByRouteNameAndP1AndFormClass(offset int, limit int, RouteName_ string, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p1 = ? and form_class = ?", RouteName_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP2AndP3 Get MenuTrees via RouteNameAndP2AndP3
func GetMenuTreesByRouteNameAndP2AndP3(offset int, limit int, RouteName_ string, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p2 = ? and p3 = ?", RouteName_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP2AndP4 Get MenuTrees via RouteNameAndP2AndP4
func GetMenuTreesByRouteNameAndP2AndP4(offset int, limit int, RouteName_ string, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p2 = ? and p4 = ?", RouteName_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP2AndP5 Get MenuTrees via RouteNameAndP2AndP5
func GetMenuTreesByRouteNameAndP2AndP5(offset int, limit int, RouteName_ string, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p2 = ? and p5 = ?", RouteName_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP2AndP6 Get MenuTrees via RouteNameAndP2AndP6
func GetMenuTreesByRouteNameAndP2AndP6(offset int, limit int, RouteName_ string, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p2 = ? and p6 = ?", RouteName_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP2AndP7 Get MenuTrees via RouteNameAndP2AndP7
func GetMenuTreesByRouteNameAndP2AndP7(offset int, limit int, RouteName_ string, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p2 = ? and p7 = ?", RouteName_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP2AndP8 Get MenuTrees via RouteNameAndP2AndP8
func GetMenuTreesByRouteNameAndP2AndP8(offset int, limit int, RouteName_ string, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p2 = ? and p8 = ?", RouteName_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP2AndP9 Get MenuTrees via RouteNameAndP2AndP9
func GetMenuTreesByRouteNameAndP2AndP9(offset int, limit int, RouteName_ string, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p2 = ? and p9 = ?", RouteName_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP2AndFormClass Get MenuTrees via RouteNameAndP2AndFormClass
func GetMenuTreesByRouteNameAndP2AndFormClass(offset int, limit int, RouteName_ string, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p2 = ? and form_class = ?", RouteName_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP3AndP4 Get MenuTrees via RouteNameAndP3AndP4
func GetMenuTreesByRouteNameAndP3AndP4(offset int, limit int, RouteName_ string, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p3 = ? and p4 = ?", RouteName_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP3AndP5 Get MenuTrees via RouteNameAndP3AndP5
func GetMenuTreesByRouteNameAndP3AndP5(offset int, limit int, RouteName_ string, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p3 = ? and p5 = ?", RouteName_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP3AndP6 Get MenuTrees via RouteNameAndP3AndP6
func GetMenuTreesByRouteNameAndP3AndP6(offset int, limit int, RouteName_ string, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p3 = ? and p6 = ?", RouteName_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP3AndP7 Get MenuTrees via RouteNameAndP3AndP7
func GetMenuTreesByRouteNameAndP3AndP7(offset int, limit int, RouteName_ string, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p3 = ? and p7 = ?", RouteName_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP3AndP8 Get MenuTrees via RouteNameAndP3AndP8
func GetMenuTreesByRouteNameAndP3AndP8(offset int, limit int, RouteName_ string, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p3 = ? and p8 = ?", RouteName_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP3AndP9 Get MenuTrees via RouteNameAndP3AndP9
func GetMenuTreesByRouteNameAndP3AndP9(offset int, limit int, RouteName_ string, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p3 = ? and p9 = ?", RouteName_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP3AndFormClass Get MenuTrees via RouteNameAndP3AndFormClass
func GetMenuTreesByRouteNameAndP3AndFormClass(offset int, limit int, RouteName_ string, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p3 = ? and form_class = ?", RouteName_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP4AndP5 Get MenuTrees via RouteNameAndP4AndP5
func GetMenuTreesByRouteNameAndP4AndP5(offset int, limit int, RouteName_ string, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p4 = ? and p5 = ?", RouteName_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP4AndP6 Get MenuTrees via RouteNameAndP4AndP6
func GetMenuTreesByRouteNameAndP4AndP6(offset int, limit int, RouteName_ string, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p4 = ? and p6 = ?", RouteName_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP4AndP7 Get MenuTrees via RouteNameAndP4AndP7
func GetMenuTreesByRouteNameAndP4AndP7(offset int, limit int, RouteName_ string, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p4 = ? and p7 = ?", RouteName_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP4AndP8 Get MenuTrees via RouteNameAndP4AndP8
func GetMenuTreesByRouteNameAndP4AndP8(offset int, limit int, RouteName_ string, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p4 = ? and p8 = ?", RouteName_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP4AndP9 Get MenuTrees via RouteNameAndP4AndP9
func GetMenuTreesByRouteNameAndP4AndP9(offset int, limit int, RouteName_ string, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p4 = ? and p9 = ?", RouteName_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP4AndFormClass Get MenuTrees via RouteNameAndP4AndFormClass
func GetMenuTreesByRouteNameAndP4AndFormClass(offset int, limit int, RouteName_ string, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p4 = ? and form_class = ?", RouteName_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP5AndP6 Get MenuTrees via RouteNameAndP5AndP6
func GetMenuTreesByRouteNameAndP5AndP6(offset int, limit int, RouteName_ string, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p5 = ? and p6 = ?", RouteName_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP5AndP7 Get MenuTrees via RouteNameAndP5AndP7
func GetMenuTreesByRouteNameAndP5AndP7(offset int, limit int, RouteName_ string, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p5 = ? and p7 = ?", RouteName_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP5AndP8 Get MenuTrees via RouteNameAndP5AndP8
func GetMenuTreesByRouteNameAndP5AndP8(offset int, limit int, RouteName_ string, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p5 = ? and p8 = ?", RouteName_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP5AndP9 Get MenuTrees via RouteNameAndP5AndP9
func GetMenuTreesByRouteNameAndP5AndP9(offset int, limit int, RouteName_ string, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p5 = ? and p9 = ?", RouteName_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP5AndFormClass Get MenuTrees via RouteNameAndP5AndFormClass
func GetMenuTreesByRouteNameAndP5AndFormClass(offset int, limit int, RouteName_ string, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p5 = ? and form_class = ?", RouteName_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP6AndP7 Get MenuTrees via RouteNameAndP6AndP7
func GetMenuTreesByRouteNameAndP6AndP7(offset int, limit int, RouteName_ string, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p6 = ? and p7 = ?", RouteName_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP6AndP8 Get MenuTrees via RouteNameAndP6AndP8
func GetMenuTreesByRouteNameAndP6AndP8(offset int, limit int, RouteName_ string, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p6 = ? and p8 = ?", RouteName_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP6AndP9 Get MenuTrees via RouteNameAndP6AndP9
func GetMenuTreesByRouteNameAndP6AndP9(offset int, limit int, RouteName_ string, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p6 = ? and p9 = ?", RouteName_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP6AndFormClass Get MenuTrees via RouteNameAndP6AndFormClass
func GetMenuTreesByRouteNameAndP6AndFormClass(offset int, limit int, RouteName_ string, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p6 = ? and form_class = ?", RouteName_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP7AndP8 Get MenuTrees via RouteNameAndP7AndP8
func GetMenuTreesByRouteNameAndP7AndP8(offset int, limit int, RouteName_ string, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p7 = ? and p8 = ?", RouteName_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP7AndP9 Get MenuTrees via RouteNameAndP7AndP9
func GetMenuTreesByRouteNameAndP7AndP9(offset int, limit int, RouteName_ string, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p7 = ? and p9 = ?", RouteName_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP7AndFormClass Get MenuTrees via RouteNameAndP7AndFormClass
func GetMenuTreesByRouteNameAndP7AndFormClass(offset int, limit int, RouteName_ string, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p7 = ? and form_class = ?", RouteName_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP8AndP9 Get MenuTrees via RouteNameAndP8AndP9
func GetMenuTreesByRouteNameAndP8AndP9(offset int, limit int, RouteName_ string, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p8 = ? and p9 = ?", RouteName_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP8AndFormClass Get MenuTrees via RouteNameAndP8AndFormClass
func GetMenuTreesByRouteNameAndP8AndFormClass(offset int, limit int, RouteName_ string, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p8 = ? and form_class = ?", RouteName_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP9AndFormClass Get MenuTrees via RouteNameAndP9AndFormClass
func GetMenuTreesByRouteNameAndP9AndFormClass(offset int, limit int, RouteName_ string, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p9 = ? and form_class = ?", RouteName_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndUrl Get MenuTrees via RouteParamKeyAndRouteParametersAndUrl
func GetMenuTreesByRouteParamKeyAndRouteParametersAndUrl(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and url = ?", RouteParamKey_, RouteParameters_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndTitle Get MenuTrees via RouteParamKeyAndRouteParametersAndTitle
func GetMenuTreesByRouteParamKeyAndRouteParametersAndTitle(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and title = ?", RouteParamKey_, RouteParameters_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndDescription Get MenuTrees via RouteParamKeyAndRouteParametersAndDescription
func GetMenuTreesByRouteParamKeyAndRouteParametersAndDescription(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and description = ?", RouteParamKey_, RouteParameters_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndClass Get MenuTrees via RouteParamKeyAndRouteParametersAndClass
func GetMenuTreesByRouteParamKeyAndRouteParametersAndClass(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and class = ?", RouteParamKey_, RouteParameters_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndOptions Get MenuTrees via RouteParamKeyAndRouteParametersAndOptions
func GetMenuTreesByRouteParamKeyAndRouteParametersAndOptions(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and options = ?", RouteParamKey_, RouteParameters_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndProvider Get MenuTrees via RouteParamKeyAndRouteParametersAndProvider
func GetMenuTreesByRouteParamKeyAndRouteParametersAndProvider(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and provider = ?", RouteParamKey_, RouteParameters_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndEnabled Get MenuTrees via RouteParamKeyAndRouteParametersAndEnabled
func GetMenuTreesByRouteParamKeyAndRouteParametersAndEnabled(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and enabled = ?", RouteParamKey_, RouteParameters_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndDiscovered Get MenuTrees via RouteParamKeyAndRouteParametersAndDiscovered
func GetMenuTreesByRouteParamKeyAndRouteParametersAndDiscovered(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and discovered = ?", RouteParamKey_, RouteParameters_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndExpanded Get MenuTrees via RouteParamKeyAndRouteParametersAndExpanded
func GetMenuTreesByRouteParamKeyAndRouteParametersAndExpanded(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and expanded = ?", RouteParamKey_, RouteParameters_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndWeight Get MenuTrees via RouteParamKeyAndRouteParametersAndWeight
func GetMenuTreesByRouteParamKeyAndRouteParametersAndWeight(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and weight = ?", RouteParamKey_, RouteParameters_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndMetadata Get MenuTrees via RouteParamKeyAndRouteParametersAndMetadata
func GetMenuTreesByRouteParamKeyAndRouteParametersAndMetadata(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and metadata = ?", RouteParamKey_, RouteParameters_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndHasChildren Get MenuTrees via RouteParamKeyAndRouteParametersAndHasChildren
func GetMenuTreesByRouteParamKeyAndRouteParametersAndHasChildren(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and has_children = ?", RouteParamKey_, RouteParameters_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndDepth Get MenuTrees via RouteParamKeyAndRouteParametersAndDepth
func GetMenuTreesByRouteParamKeyAndRouteParametersAndDepth(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and depth = ?", RouteParamKey_, RouteParameters_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndP1 Get MenuTrees via RouteParamKeyAndRouteParametersAndP1
func GetMenuTreesByRouteParamKeyAndRouteParametersAndP1(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and p1 = ?", RouteParamKey_, RouteParameters_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndP2 Get MenuTrees via RouteParamKeyAndRouteParametersAndP2
func GetMenuTreesByRouteParamKeyAndRouteParametersAndP2(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and p2 = ?", RouteParamKey_, RouteParameters_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndP3 Get MenuTrees via RouteParamKeyAndRouteParametersAndP3
func GetMenuTreesByRouteParamKeyAndRouteParametersAndP3(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and p3 = ?", RouteParamKey_, RouteParameters_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndP4 Get MenuTrees via RouteParamKeyAndRouteParametersAndP4
func GetMenuTreesByRouteParamKeyAndRouteParametersAndP4(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and p4 = ?", RouteParamKey_, RouteParameters_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndP5 Get MenuTrees via RouteParamKeyAndRouteParametersAndP5
func GetMenuTreesByRouteParamKeyAndRouteParametersAndP5(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and p5 = ?", RouteParamKey_, RouteParameters_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndP6 Get MenuTrees via RouteParamKeyAndRouteParametersAndP6
func GetMenuTreesByRouteParamKeyAndRouteParametersAndP6(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and p6 = ?", RouteParamKey_, RouteParameters_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndP7 Get MenuTrees via RouteParamKeyAndRouteParametersAndP7
func GetMenuTreesByRouteParamKeyAndRouteParametersAndP7(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and p7 = ?", RouteParamKey_, RouteParameters_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndP8 Get MenuTrees via RouteParamKeyAndRouteParametersAndP8
func GetMenuTreesByRouteParamKeyAndRouteParametersAndP8(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and p8 = ?", RouteParamKey_, RouteParameters_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndP9 Get MenuTrees via RouteParamKeyAndRouteParametersAndP9
func GetMenuTreesByRouteParamKeyAndRouteParametersAndP9(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and p9 = ?", RouteParamKey_, RouteParameters_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParametersAndFormClass Get MenuTrees via RouteParamKeyAndRouteParametersAndFormClass
func GetMenuTreesByRouteParamKeyAndRouteParametersAndFormClass(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ? and form_class = ?", RouteParamKey_, RouteParameters_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndTitle Get MenuTrees via RouteParamKeyAndUrlAndTitle
func GetMenuTreesByRouteParamKeyAndUrlAndTitle(offset int, limit int, RouteParamKey_ string, Url_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and title = ?", RouteParamKey_, Url_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndDescription Get MenuTrees via RouteParamKeyAndUrlAndDescription
func GetMenuTreesByRouteParamKeyAndUrlAndDescription(offset int, limit int, RouteParamKey_ string, Url_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and description = ?", RouteParamKey_, Url_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndClass Get MenuTrees via RouteParamKeyAndUrlAndClass
func GetMenuTreesByRouteParamKeyAndUrlAndClass(offset int, limit int, RouteParamKey_ string, Url_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and class = ?", RouteParamKey_, Url_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndOptions Get MenuTrees via RouteParamKeyAndUrlAndOptions
func GetMenuTreesByRouteParamKeyAndUrlAndOptions(offset int, limit int, RouteParamKey_ string, Url_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and options = ?", RouteParamKey_, Url_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndProvider Get MenuTrees via RouteParamKeyAndUrlAndProvider
func GetMenuTreesByRouteParamKeyAndUrlAndProvider(offset int, limit int, RouteParamKey_ string, Url_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and provider = ?", RouteParamKey_, Url_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndEnabled Get MenuTrees via RouteParamKeyAndUrlAndEnabled
func GetMenuTreesByRouteParamKeyAndUrlAndEnabled(offset int, limit int, RouteParamKey_ string, Url_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and enabled = ?", RouteParamKey_, Url_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndDiscovered Get MenuTrees via RouteParamKeyAndUrlAndDiscovered
func GetMenuTreesByRouteParamKeyAndUrlAndDiscovered(offset int, limit int, RouteParamKey_ string, Url_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and discovered = ?", RouteParamKey_, Url_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndExpanded Get MenuTrees via RouteParamKeyAndUrlAndExpanded
func GetMenuTreesByRouteParamKeyAndUrlAndExpanded(offset int, limit int, RouteParamKey_ string, Url_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and expanded = ?", RouteParamKey_, Url_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndWeight Get MenuTrees via RouteParamKeyAndUrlAndWeight
func GetMenuTreesByRouteParamKeyAndUrlAndWeight(offset int, limit int, RouteParamKey_ string, Url_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and weight = ?", RouteParamKey_, Url_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndMetadata Get MenuTrees via RouteParamKeyAndUrlAndMetadata
func GetMenuTreesByRouteParamKeyAndUrlAndMetadata(offset int, limit int, RouteParamKey_ string, Url_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and metadata = ?", RouteParamKey_, Url_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndHasChildren Get MenuTrees via RouteParamKeyAndUrlAndHasChildren
func GetMenuTreesByRouteParamKeyAndUrlAndHasChildren(offset int, limit int, RouteParamKey_ string, Url_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and has_children = ?", RouteParamKey_, Url_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndDepth Get MenuTrees via RouteParamKeyAndUrlAndDepth
func GetMenuTreesByRouteParamKeyAndUrlAndDepth(offset int, limit int, RouteParamKey_ string, Url_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and depth = ?", RouteParamKey_, Url_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndP1 Get MenuTrees via RouteParamKeyAndUrlAndP1
func GetMenuTreesByRouteParamKeyAndUrlAndP1(offset int, limit int, RouteParamKey_ string, Url_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and p1 = ?", RouteParamKey_, Url_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndP2 Get MenuTrees via RouteParamKeyAndUrlAndP2
func GetMenuTreesByRouteParamKeyAndUrlAndP2(offset int, limit int, RouteParamKey_ string, Url_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and p2 = ?", RouteParamKey_, Url_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndP3 Get MenuTrees via RouteParamKeyAndUrlAndP3
func GetMenuTreesByRouteParamKeyAndUrlAndP3(offset int, limit int, RouteParamKey_ string, Url_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and p3 = ?", RouteParamKey_, Url_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndP4 Get MenuTrees via RouteParamKeyAndUrlAndP4
func GetMenuTreesByRouteParamKeyAndUrlAndP4(offset int, limit int, RouteParamKey_ string, Url_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and p4 = ?", RouteParamKey_, Url_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndP5 Get MenuTrees via RouteParamKeyAndUrlAndP5
func GetMenuTreesByRouteParamKeyAndUrlAndP5(offset int, limit int, RouteParamKey_ string, Url_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and p5 = ?", RouteParamKey_, Url_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndP6 Get MenuTrees via RouteParamKeyAndUrlAndP6
func GetMenuTreesByRouteParamKeyAndUrlAndP6(offset int, limit int, RouteParamKey_ string, Url_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and p6 = ?", RouteParamKey_, Url_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndP7 Get MenuTrees via RouteParamKeyAndUrlAndP7
func GetMenuTreesByRouteParamKeyAndUrlAndP7(offset int, limit int, RouteParamKey_ string, Url_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and p7 = ?", RouteParamKey_, Url_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndP8 Get MenuTrees via RouteParamKeyAndUrlAndP8
func GetMenuTreesByRouteParamKeyAndUrlAndP8(offset int, limit int, RouteParamKey_ string, Url_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and p8 = ?", RouteParamKey_, Url_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndP9 Get MenuTrees via RouteParamKeyAndUrlAndP9
func GetMenuTreesByRouteParamKeyAndUrlAndP9(offset int, limit int, RouteParamKey_ string, Url_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and p9 = ?", RouteParamKey_, Url_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrlAndFormClass Get MenuTrees via RouteParamKeyAndUrlAndFormClass
func GetMenuTreesByRouteParamKeyAndUrlAndFormClass(offset int, limit int, RouteParamKey_ string, Url_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ? and form_class = ?", RouteParamKey_, Url_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndDescription Get MenuTrees via RouteParamKeyAndTitleAndDescription
func GetMenuTreesByRouteParamKeyAndTitleAndDescription(offset int, limit int, RouteParamKey_ string, Title_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and description = ?", RouteParamKey_, Title_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndClass Get MenuTrees via RouteParamKeyAndTitleAndClass
func GetMenuTreesByRouteParamKeyAndTitleAndClass(offset int, limit int, RouteParamKey_ string, Title_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and class = ?", RouteParamKey_, Title_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndOptions Get MenuTrees via RouteParamKeyAndTitleAndOptions
func GetMenuTreesByRouteParamKeyAndTitleAndOptions(offset int, limit int, RouteParamKey_ string, Title_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and options = ?", RouteParamKey_, Title_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndProvider Get MenuTrees via RouteParamKeyAndTitleAndProvider
func GetMenuTreesByRouteParamKeyAndTitleAndProvider(offset int, limit int, RouteParamKey_ string, Title_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and provider = ?", RouteParamKey_, Title_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndEnabled Get MenuTrees via RouteParamKeyAndTitleAndEnabled
func GetMenuTreesByRouteParamKeyAndTitleAndEnabled(offset int, limit int, RouteParamKey_ string, Title_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and enabled = ?", RouteParamKey_, Title_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndDiscovered Get MenuTrees via RouteParamKeyAndTitleAndDiscovered
func GetMenuTreesByRouteParamKeyAndTitleAndDiscovered(offset int, limit int, RouteParamKey_ string, Title_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and discovered = ?", RouteParamKey_, Title_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndExpanded Get MenuTrees via RouteParamKeyAndTitleAndExpanded
func GetMenuTreesByRouteParamKeyAndTitleAndExpanded(offset int, limit int, RouteParamKey_ string, Title_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and expanded = ?", RouteParamKey_, Title_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndWeight Get MenuTrees via RouteParamKeyAndTitleAndWeight
func GetMenuTreesByRouteParamKeyAndTitleAndWeight(offset int, limit int, RouteParamKey_ string, Title_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and weight = ?", RouteParamKey_, Title_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndMetadata Get MenuTrees via RouteParamKeyAndTitleAndMetadata
func GetMenuTreesByRouteParamKeyAndTitleAndMetadata(offset int, limit int, RouteParamKey_ string, Title_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and metadata = ?", RouteParamKey_, Title_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndHasChildren Get MenuTrees via RouteParamKeyAndTitleAndHasChildren
func GetMenuTreesByRouteParamKeyAndTitleAndHasChildren(offset int, limit int, RouteParamKey_ string, Title_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and has_children = ?", RouteParamKey_, Title_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndDepth Get MenuTrees via RouteParamKeyAndTitleAndDepth
func GetMenuTreesByRouteParamKeyAndTitleAndDepth(offset int, limit int, RouteParamKey_ string, Title_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and depth = ?", RouteParamKey_, Title_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndP1 Get MenuTrees via RouteParamKeyAndTitleAndP1
func GetMenuTreesByRouteParamKeyAndTitleAndP1(offset int, limit int, RouteParamKey_ string, Title_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and p1 = ?", RouteParamKey_, Title_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndP2 Get MenuTrees via RouteParamKeyAndTitleAndP2
func GetMenuTreesByRouteParamKeyAndTitleAndP2(offset int, limit int, RouteParamKey_ string, Title_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and p2 = ?", RouteParamKey_, Title_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndP3 Get MenuTrees via RouteParamKeyAndTitleAndP3
func GetMenuTreesByRouteParamKeyAndTitleAndP3(offset int, limit int, RouteParamKey_ string, Title_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and p3 = ?", RouteParamKey_, Title_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndP4 Get MenuTrees via RouteParamKeyAndTitleAndP4
func GetMenuTreesByRouteParamKeyAndTitleAndP4(offset int, limit int, RouteParamKey_ string, Title_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and p4 = ?", RouteParamKey_, Title_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndP5 Get MenuTrees via RouteParamKeyAndTitleAndP5
func GetMenuTreesByRouteParamKeyAndTitleAndP5(offset int, limit int, RouteParamKey_ string, Title_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and p5 = ?", RouteParamKey_, Title_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndP6 Get MenuTrees via RouteParamKeyAndTitleAndP6
func GetMenuTreesByRouteParamKeyAndTitleAndP6(offset int, limit int, RouteParamKey_ string, Title_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and p6 = ?", RouteParamKey_, Title_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndP7 Get MenuTrees via RouteParamKeyAndTitleAndP7
func GetMenuTreesByRouteParamKeyAndTitleAndP7(offset int, limit int, RouteParamKey_ string, Title_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and p7 = ?", RouteParamKey_, Title_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndP8 Get MenuTrees via RouteParamKeyAndTitleAndP8
func GetMenuTreesByRouteParamKeyAndTitleAndP8(offset int, limit int, RouteParamKey_ string, Title_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and p8 = ?", RouteParamKey_, Title_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndP9 Get MenuTrees via RouteParamKeyAndTitleAndP9
func GetMenuTreesByRouteParamKeyAndTitleAndP9(offset int, limit int, RouteParamKey_ string, Title_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and p9 = ?", RouteParamKey_, Title_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitleAndFormClass Get MenuTrees via RouteParamKeyAndTitleAndFormClass
func GetMenuTreesByRouteParamKeyAndTitleAndFormClass(offset int, limit int, RouteParamKey_ string, Title_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ? and form_class = ?", RouteParamKey_, Title_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndClass Get MenuTrees via RouteParamKeyAndDescriptionAndClass
func GetMenuTreesByRouteParamKeyAndDescriptionAndClass(offset int, limit int, RouteParamKey_ string, Description_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and class = ?", RouteParamKey_, Description_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndOptions Get MenuTrees via RouteParamKeyAndDescriptionAndOptions
func GetMenuTreesByRouteParamKeyAndDescriptionAndOptions(offset int, limit int, RouteParamKey_ string, Description_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and options = ?", RouteParamKey_, Description_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndProvider Get MenuTrees via RouteParamKeyAndDescriptionAndProvider
func GetMenuTreesByRouteParamKeyAndDescriptionAndProvider(offset int, limit int, RouteParamKey_ string, Description_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and provider = ?", RouteParamKey_, Description_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndEnabled Get MenuTrees via RouteParamKeyAndDescriptionAndEnabled
func GetMenuTreesByRouteParamKeyAndDescriptionAndEnabled(offset int, limit int, RouteParamKey_ string, Description_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and enabled = ?", RouteParamKey_, Description_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndDiscovered Get MenuTrees via RouteParamKeyAndDescriptionAndDiscovered
func GetMenuTreesByRouteParamKeyAndDescriptionAndDiscovered(offset int, limit int, RouteParamKey_ string, Description_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and discovered = ?", RouteParamKey_, Description_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndExpanded Get MenuTrees via RouteParamKeyAndDescriptionAndExpanded
func GetMenuTreesByRouteParamKeyAndDescriptionAndExpanded(offset int, limit int, RouteParamKey_ string, Description_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and expanded = ?", RouteParamKey_, Description_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndWeight Get MenuTrees via RouteParamKeyAndDescriptionAndWeight
func GetMenuTreesByRouteParamKeyAndDescriptionAndWeight(offset int, limit int, RouteParamKey_ string, Description_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and weight = ?", RouteParamKey_, Description_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndMetadata Get MenuTrees via RouteParamKeyAndDescriptionAndMetadata
func GetMenuTreesByRouteParamKeyAndDescriptionAndMetadata(offset int, limit int, RouteParamKey_ string, Description_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and metadata = ?", RouteParamKey_, Description_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndHasChildren Get MenuTrees via RouteParamKeyAndDescriptionAndHasChildren
func GetMenuTreesByRouteParamKeyAndDescriptionAndHasChildren(offset int, limit int, RouteParamKey_ string, Description_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and has_children = ?", RouteParamKey_, Description_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndDepth Get MenuTrees via RouteParamKeyAndDescriptionAndDepth
func GetMenuTreesByRouteParamKeyAndDescriptionAndDepth(offset int, limit int, RouteParamKey_ string, Description_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and depth = ?", RouteParamKey_, Description_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndP1 Get MenuTrees via RouteParamKeyAndDescriptionAndP1
func GetMenuTreesByRouteParamKeyAndDescriptionAndP1(offset int, limit int, RouteParamKey_ string, Description_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and p1 = ?", RouteParamKey_, Description_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndP2 Get MenuTrees via RouteParamKeyAndDescriptionAndP2
func GetMenuTreesByRouteParamKeyAndDescriptionAndP2(offset int, limit int, RouteParamKey_ string, Description_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and p2 = ?", RouteParamKey_, Description_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndP3 Get MenuTrees via RouteParamKeyAndDescriptionAndP3
func GetMenuTreesByRouteParamKeyAndDescriptionAndP3(offset int, limit int, RouteParamKey_ string, Description_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and p3 = ?", RouteParamKey_, Description_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndP4 Get MenuTrees via RouteParamKeyAndDescriptionAndP4
func GetMenuTreesByRouteParamKeyAndDescriptionAndP4(offset int, limit int, RouteParamKey_ string, Description_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and p4 = ?", RouteParamKey_, Description_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndP5 Get MenuTrees via RouteParamKeyAndDescriptionAndP5
func GetMenuTreesByRouteParamKeyAndDescriptionAndP5(offset int, limit int, RouteParamKey_ string, Description_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and p5 = ?", RouteParamKey_, Description_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndP6 Get MenuTrees via RouteParamKeyAndDescriptionAndP6
func GetMenuTreesByRouteParamKeyAndDescriptionAndP6(offset int, limit int, RouteParamKey_ string, Description_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and p6 = ?", RouteParamKey_, Description_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndP7 Get MenuTrees via RouteParamKeyAndDescriptionAndP7
func GetMenuTreesByRouteParamKeyAndDescriptionAndP7(offset int, limit int, RouteParamKey_ string, Description_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and p7 = ?", RouteParamKey_, Description_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndP8 Get MenuTrees via RouteParamKeyAndDescriptionAndP8
func GetMenuTreesByRouteParamKeyAndDescriptionAndP8(offset int, limit int, RouteParamKey_ string, Description_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and p8 = ?", RouteParamKey_, Description_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndP9 Get MenuTrees via RouteParamKeyAndDescriptionAndP9
func GetMenuTreesByRouteParamKeyAndDescriptionAndP9(offset int, limit int, RouteParamKey_ string, Description_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and p9 = ?", RouteParamKey_, Description_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescriptionAndFormClass Get MenuTrees via RouteParamKeyAndDescriptionAndFormClass
func GetMenuTreesByRouteParamKeyAndDescriptionAndFormClass(offset int, limit int, RouteParamKey_ string, Description_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ? and form_class = ?", RouteParamKey_, Description_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndOptions Get MenuTrees via RouteParamKeyAndClassAndOptions
func GetMenuTreesByRouteParamKeyAndClassAndOptions(offset int, limit int, RouteParamKey_ string, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and options = ?", RouteParamKey_, Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndProvider Get MenuTrees via RouteParamKeyAndClassAndProvider
func GetMenuTreesByRouteParamKeyAndClassAndProvider(offset int, limit int, RouteParamKey_ string, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and provider = ?", RouteParamKey_, Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndEnabled Get MenuTrees via RouteParamKeyAndClassAndEnabled
func GetMenuTreesByRouteParamKeyAndClassAndEnabled(offset int, limit int, RouteParamKey_ string, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and enabled = ?", RouteParamKey_, Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndDiscovered Get MenuTrees via RouteParamKeyAndClassAndDiscovered
func GetMenuTreesByRouteParamKeyAndClassAndDiscovered(offset int, limit int, RouteParamKey_ string, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and discovered = ?", RouteParamKey_, Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndExpanded Get MenuTrees via RouteParamKeyAndClassAndExpanded
func GetMenuTreesByRouteParamKeyAndClassAndExpanded(offset int, limit int, RouteParamKey_ string, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and expanded = ?", RouteParamKey_, Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndWeight Get MenuTrees via RouteParamKeyAndClassAndWeight
func GetMenuTreesByRouteParamKeyAndClassAndWeight(offset int, limit int, RouteParamKey_ string, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and weight = ?", RouteParamKey_, Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndMetadata Get MenuTrees via RouteParamKeyAndClassAndMetadata
func GetMenuTreesByRouteParamKeyAndClassAndMetadata(offset int, limit int, RouteParamKey_ string, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and metadata = ?", RouteParamKey_, Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndHasChildren Get MenuTrees via RouteParamKeyAndClassAndHasChildren
func GetMenuTreesByRouteParamKeyAndClassAndHasChildren(offset int, limit int, RouteParamKey_ string, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and has_children = ?", RouteParamKey_, Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndDepth Get MenuTrees via RouteParamKeyAndClassAndDepth
func GetMenuTreesByRouteParamKeyAndClassAndDepth(offset int, limit int, RouteParamKey_ string, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and depth = ?", RouteParamKey_, Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndP1 Get MenuTrees via RouteParamKeyAndClassAndP1
func GetMenuTreesByRouteParamKeyAndClassAndP1(offset int, limit int, RouteParamKey_ string, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and p1 = ?", RouteParamKey_, Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndP2 Get MenuTrees via RouteParamKeyAndClassAndP2
func GetMenuTreesByRouteParamKeyAndClassAndP2(offset int, limit int, RouteParamKey_ string, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and p2 = ?", RouteParamKey_, Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndP3 Get MenuTrees via RouteParamKeyAndClassAndP3
func GetMenuTreesByRouteParamKeyAndClassAndP3(offset int, limit int, RouteParamKey_ string, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and p3 = ?", RouteParamKey_, Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndP4 Get MenuTrees via RouteParamKeyAndClassAndP4
func GetMenuTreesByRouteParamKeyAndClassAndP4(offset int, limit int, RouteParamKey_ string, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and p4 = ?", RouteParamKey_, Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndP5 Get MenuTrees via RouteParamKeyAndClassAndP5
func GetMenuTreesByRouteParamKeyAndClassAndP5(offset int, limit int, RouteParamKey_ string, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and p5 = ?", RouteParamKey_, Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndP6 Get MenuTrees via RouteParamKeyAndClassAndP6
func GetMenuTreesByRouteParamKeyAndClassAndP6(offset int, limit int, RouteParamKey_ string, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and p6 = ?", RouteParamKey_, Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndP7 Get MenuTrees via RouteParamKeyAndClassAndP7
func GetMenuTreesByRouteParamKeyAndClassAndP7(offset int, limit int, RouteParamKey_ string, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and p7 = ?", RouteParamKey_, Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndP8 Get MenuTrees via RouteParamKeyAndClassAndP8
func GetMenuTreesByRouteParamKeyAndClassAndP8(offset int, limit int, RouteParamKey_ string, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and p8 = ?", RouteParamKey_, Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndP9 Get MenuTrees via RouteParamKeyAndClassAndP9
func GetMenuTreesByRouteParamKeyAndClassAndP9(offset int, limit int, RouteParamKey_ string, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and p9 = ?", RouteParamKey_, Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClassAndFormClass Get MenuTrees via RouteParamKeyAndClassAndFormClass
func GetMenuTreesByRouteParamKeyAndClassAndFormClass(offset int, limit int, RouteParamKey_ string, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ? and form_class = ?", RouteParamKey_, Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndProvider Get MenuTrees via RouteParamKeyAndOptionsAndProvider
func GetMenuTreesByRouteParamKeyAndOptionsAndProvider(offset int, limit int, RouteParamKey_ string, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and provider = ?", RouteParamKey_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndEnabled Get MenuTrees via RouteParamKeyAndOptionsAndEnabled
func GetMenuTreesByRouteParamKeyAndOptionsAndEnabled(offset int, limit int, RouteParamKey_ string, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and enabled = ?", RouteParamKey_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndDiscovered Get MenuTrees via RouteParamKeyAndOptionsAndDiscovered
func GetMenuTreesByRouteParamKeyAndOptionsAndDiscovered(offset int, limit int, RouteParamKey_ string, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and discovered = ?", RouteParamKey_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndExpanded Get MenuTrees via RouteParamKeyAndOptionsAndExpanded
func GetMenuTreesByRouteParamKeyAndOptionsAndExpanded(offset int, limit int, RouteParamKey_ string, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and expanded = ?", RouteParamKey_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndWeight Get MenuTrees via RouteParamKeyAndOptionsAndWeight
func GetMenuTreesByRouteParamKeyAndOptionsAndWeight(offset int, limit int, RouteParamKey_ string, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and weight = ?", RouteParamKey_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndMetadata Get MenuTrees via RouteParamKeyAndOptionsAndMetadata
func GetMenuTreesByRouteParamKeyAndOptionsAndMetadata(offset int, limit int, RouteParamKey_ string, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and metadata = ?", RouteParamKey_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndHasChildren Get MenuTrees via RouteParamKeyAndOptionsAndHasChildren
func GetMenuTreesByRouteParamKeyAndOptionsAndHasChildren(offset int, limit int, RouteParamKey_ string, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and has_children = ?", RouteParamKey_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndDepth Get MenuTrees via RouteParamKeyAndOptionsAndDepth
func GetMenuTreesByRouteParamKeyAndOptionsAndDepth(offset int, limit int, RouteParamKey_ string, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and depth = ?", RouteParamKey_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndP1 Get MenuTrees via RouteParamKeyAndOptionsAndP1
func GetMenuTreesByRouteParamKeyAndOptionsAndP1(offset int, limit int, RouteParamKey_ string, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and p1 = ?", RouteParamKey_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndP2 Get MenuTrees via RouteParamKeyAndOptionsAndP2
func GetMenuTreesByRouteParamKeyAndOptionsAndP2(offset int, limit int, RouteParamKey_ string, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and p2 = ?", RouteParamKey_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndP3 Get MenuTrees via RouteParamKeyAndOptionsAndP3
func GetMenuTreesByRouteParamKeyAndOptionsAndP3(offset int, limit int, RouteParamKey_ string, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and p3 = ?", RouteParamKey_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndP4 Get MenuTrees via RouteParamKeyAndOptionsAndP4
func GetMenuTreesByRouteParamKeyAndOptionsAndP4(offset int, limit int, RouteParamKey_ string, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and p4 = ?", RouteParamKey_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndP5 Get MenuTrees via RouteParamKeyAndOptionsAndP5
func GetMenuTreesByRouteParamKeyAndOptionsAndP5(offset int, limit int, RouteParamKey_ string, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and p5 = ?", RouteParamKey_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndP6 Get MenuTrees via RouteParamKeyAndOptionsAndP6
func GetMenuTreesByRouteParamKeyAndOptionsAndP6(offset int, limit int, RouteParamKey_ string, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and p6 = ?", RouteParamKey_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndP7 Get MenuTrees via RouteParamKeyAndOptionsAndP7
func GetMenuTreesByRouteParamKeyAndOptionsAndP7(offset int, limit int, RouteParamKey_ string, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and p7 = ?", RouteParamKey_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndP8 Get MenuTrees via RouteParamKeyAndOptionsAndP8
func GetMenuTreesByRouteParamKeyAndOptionsAndP8(offset int, limit int, RouteParamKey_ string, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and p8 = ?", RouteParamKey_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndP9 Get MenuTrees via RouteParamKeyAndOptionsAndP9
func GetMenuTreesByRouteParamKeyAndOptionsAndP9(offset int, limit int, RouteParamKey_ string, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and p9 = ?", RouteParamKey_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptionsAndFormClass Get MenuTrees via RouteParamKeyAndOptionsAndFormClass
func GetMenuTreesByRouteParamKeyAndOptionsAndFormClass(offset int, limit int, RouteParamKey_ string, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ? and form_class = ?", RouteParamKey_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndEnabled Get MenuTrees via RouteParamKeyAndProviderAndEnabled
func GetMenuTreesByRouteParamKeyAndProviderAndEnabled(offset int, limit int, RouteParamKey_ string, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and enabled = ?", RouteParamKey_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndDiscovered Get MenuTrees via RouteParamKeyAndProviderAndDiscovered
func GetMenuTreesByRouteParamKeyAndProviderAndDiscovered(offset int, limit int, RouteParamKey_ string, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and discovered = ?", RouteParamKey_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndExpanded Get MenuTrees via RouteParamKeyAndProviderAndExpanded
func GetMenuTreesByRouteParamKeyAndProviderAndExpanded(offset int, limit int, RouteParamKey_ string, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and expanded = ?", RouteParamKey_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndWeight Get MenuTrees via RouteParamKeyAndProviderAndWeight
func GetMenuTreesByRouteParamKeyAndProviderAndWeight(offset int, limit int, RouteParamKey_ string, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and weight = ?", RouteParamKey_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndMetadata Get MenuTrees via RouteParamKeyAndProviderAndMetadata
func GetMenuTreesByRouteParamKeyAndProviderAndMetadata(offset int, limit int, RouteParamKey_ string, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and metadata = ?", RouteParamKey_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndHasChildren Get MenuTrees via RouteParamKeyAndProviderAndHasChildren
func GetMenuTreesByRouteParamKeyAndProviderAndHasChildren(offset int, limit int, RouteParamKey_ string, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and has_children = ?", RouteParamKey_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndDepth Get MenuTrees via RouteParamKeyAndProviderAndDepth
func GetMenuTreesByRouteParamKeyAndProviderAndDepth(offset int, limit int, RouteParamKey_ string, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and depth = ?", RouteParamKey_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndP1 Get MenuTrees via RouteParamKeyAndProviderAndP1
func GetMenuTreesByRouteParamKeyAndProviderAndP1(offset int, limit int, RouteParamKey_ string, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and p1 = ?", RouteParamKey_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndP2 Get MenuTrees via RouteParamKeyAndProviderAndP2
func GetMenuTreesByRouteParamKeyAndProviderAndP2(offset int, limit int, RouteParamKey_ string, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and p2 = ?", RouteParamKey_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndP3 Get MenuTrees via RouteParamKeyAndProviderAndP3
func GetMenuTreesByRouteParamKeyAndProviderAndP3(offset int, limit int, RouteParamKey_ string, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and p3 = ?", RouteParamKey_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndP4 Get MenuTrees via RouteParamKeyAndProviderAndP4
func GetMenuTreesByRouteParamKeyAndProviderAndP4(offset int, limit int, RouteParamKey_ string, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and p4 = ?", RouteParamKey_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndP5 Get MenuTrees via RouteParamKeyAndProviderAndP5
func GetMenuTreesByRouteParamKeyAndProviderAndP5(offset int, limit int, RouteParamKey_ string, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and p5 = ?", RouteParamKey_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndP6 Get MenuTrees via RouteParamKeyAndProviderAndP6
func GetMenuTreesByRouteParamKeyAndProviderAndP6(offset int, limit int, RouteParamKey_ string, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and p6 = ?", RouteParamKey_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndP7 Get MenuTrees via RouteParamKeyAndProviderAndP7
func GetMenuTreesByRouteParamKeyAndProviderAndP7(offset int, limit int, RouteParamKey_ string, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and p7 = ?", RouteParamKey_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndP8 Get MenuTrees via RouteParamKeyAndProviderAndP8
func GetMenuTreesByRouteParamKeyAndProviderAndP8(offset int, limit int, RouteParamKey_ string, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and p8 = ?", RouteParamKey_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndP9 Get MenuTrees via RouteParamKeyAndProviderAndP9
func GetMenuTreesByRouteParamKeyAndProviderAndP9(offset int, limit int, RouteParamKey_ string, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and p9 = ?", RouteParamKey_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProviderAndFormClass Get MenuTrees via RouteParamKeyAndProviderAndFormClass
func GetMenuTreesByRouteParamKeyAndProviderAndFormClass(offset int, limit int, RouteParamKey_ string, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ? and form_class = ?", RouteParamKey_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndDiscovered Get MenuTrees via RouteParamKeyAndEnabledAndDiscovered
func GetMenuTreesByRouteParamKeyAndEnabledAndDiscovered(offset int, limit int, RouteParamKey_ string, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and discovered = ?", RouteParamKey_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndExpanded Get MenuTrees via RouteParamKeyAndEnabledAndExpanded
func GetMenuTreesByRouteParamKeyAndEnabledAndExpanded(offset int, limit int, RouteParamKey_ string, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and expanded = ?", RouteParamKey_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndWeight Get MenuTrees via RouteParamKeyAndEnabledAndWeight
func GetMenuTreesByRouteParamKeyAndEnabledAndWeight(offset int, limit int, RouteParamKey_ string, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and weight = ?", RouteParamKey_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndMetadata Get MenuTrees via RouteParamKeyAndEnabledAndMetadata
func GetMenuTreesByRouteParamKeyAndEnabledAndMetadata(offset int, limit int, RouteParamKey_ string, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and metadata = ?", RouteParamKey_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndHasChildren Get MenuTrees via RouteParamKeyAndEnabledAndHasChildren
func GetMenuTreesByRouteParamKeyAndEnabledAndHasChildren(offset int, limit int, RouteParamKey_ string, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and has_children = ?", RouteParamKey_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndDepth Get MenuTrees via RouteParamKeyAndEnabledAndDepth
func GetMenuTreesByRouteParamKeyAndEnabledAndDepth(offset int, limit int, RouteParamKey_ string, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and depth = ?", RouteParamKey_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndP1 Get MenuTrees via RouteParamKeyAndEnabledAndP1
func GetMenuTreesByRouteParamKeyAndEnabledAndP1(offset int, limit int, RouteParamKey_ string, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and p1 = ?", RouteParamKey_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndP2 Get MenuTrees via RouteParamKeyAndEnabledAndP2
func GetMenuTreesByRouteParamKeyAndEnabledAndP2(offset int, limit int, RouteParamKey_ string, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and p2 = ?", RouteParamKey_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndP3 Get MenuTrees via RouteParamKeyAndEnabledAndP3
func GetMenuTreesByRouteParamKeyAndEnabledAndP3(offset int, limit int, RouteParamKey_ string, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and p3 = ?", RouteParamKey_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndP4 Get MenuTrees via RouteParamKeyAndEnabledAndP4
func GetMenuTreesByRouteParamKeyAndEnabledAndP4(offset int, limit int, RouteParamKey_ string, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and p4 = ?", RouteParamKey_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndP5 Get MenuTrees via RouteParamKeyAndEnabledAndP5
func GetMenuTreesByRouteParamKeyAndEnabledAndP5(offset int, limit int, RouteParamKey_ string, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and p5 = ?", RouteParamKey_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndP6 Get MenuTrees via RouteParamKeyAndEnabledAndP6
func GetMenuTreesByRouteParamKeyAndEnabledAndP6(offset int, limit int, RouteParamKey_ string, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and p6 = ?", RouteParamKey_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndP7 Get MenuTrees via RouteParamKeyAndEnabledAndP7
func GetMenuTreesByRouteParamKeyAndEnabledAndP7(offset int, limit int, RouteParamKey_ string, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and p7 = ?", RouteParamKey_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndP8 Get MenuTrees via RouteParamKeyAndEnabledAndP8
func GetMenuTreesByRouteParamKeyAndEnabledAndP8(offset int, limit int, RouteParamKey_ string, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and p8 = ?", RouteParamKey_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndP9 Get MenuTrees via RouteParamKeyAndEnabledAndP9
func GetMenuTreesByRouteParamKeyAndEnabledAndP9(offset int, limit int, RouteParamKey_ string, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and p9 = ?", RouteParamKey_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabledAndFormClass Get MenuTrees via RouteParamKeyAndEnabledAndFormClass
func GetMenuTreesByRouteParamKeyAndEnabledAndFormClass(offset int, limit int, RouteParamKey_ string, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ? and form_class = ?", RouteParamKey_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndExpanded Get MenuTrees via RouteParamKeyAndDiscoveredAndExpanded
func GetMenuTreesByRouteParamKeyAndDiscoveredAndExpanded(offset int, limit int, RouteParamKey_ string, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and expanded = ?", RouteParamKey_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndWeight Get MenuTrees via RouteParamKeyAndDiscoveredAndWeight
func GetMenuTreesByRouteParamKeyAndDiscoveredAndWeight(offset int, limit int, RouteParamKey_ string, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and weight = ?", RouteParamKey_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndMetadata Get MenuTrees via RouteParamKeyAndDiscoveredAndMetadata
func GetMenuTreesByRouteParamKeyAndDiscoveredAndMetadata(offset int, limit int, RouteParamKey_ string, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and metadata = ?", RouteParamKey_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndHasChildren Get MenuTrees via RouteParamKeyAndDiscoveredAndHasChildren
func GetMenuTreesByRouteParamKeyAndDiscoveredAndHasChildren(offset int, limit int, RouteParamKey_ string, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and has_children = ?", RouteParamKey_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndDepth Get MenuTrees via RouteParamKeyAndDiscoveredAndDepth
func GetMenuTreesByRouteParamKeyAndDiscoveredAndDepth(offset int, limit int, RouteParamKey_ string, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and depth = ?", RouteParamKey_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndP1 Get MenuTrees via RouteParamKeyAndDiscoveredAndP1
func GetMenuTreesByRouteParamKeyAndDiscoveredAndP1(offset int, limit int, RouteParamKey_ string, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and p1 = ?", RouteParamKey_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndP2 Get MenuTrees via RouteParamKeyAndDiscoveredAndP2
func GetMenuTreesByRouteParamKeyAndDiscoveredAndP2(offset int, limit int, RouteParamKey_ string, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and p2 = ?", RouteParamKey_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndP3 Get MenuTrees via RouteParamKeyAndDiscoveredAndP3
func GetMenuTreesByRouteParamKeyAndDiscoveredAndP3(offset int, limit int, RouteParamKey_ string, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and p3 = ?", RouteParamKey_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndP4 Get MenuTrees via RouteParamKeyAndDiscoveredAndP4
func GetMenuTreesByRouteParamKeyAndDiscoveredAndP4(offset int, limit int, RouteParamKey_ string, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and p4 = ?", RouteParamKey_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndP5 Get MenuTrees via RouteParamKeyAndDiscoveredAndP5
func GetMenuTreesByRouteParamKeyAndDiscoveredAndP5(offset int, limit int, RouteParamKey_ string, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and p5 = ?", RouteParamKey_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndP6 Get MenuTrees via RouteParamKeyAndDiscoveredAndP6
func GetMenuTreesByRouteParamKeyAndDiscoveredAndP6(offset int, limit int, RouteParamKey_ string, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and p6 = ?", RouteParamKey_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndP7 Get MenuTrees via RouteParamKeyAndDiscoveredAndP7
func GetMenuTreesByRouteParamKeyAndDiscoveredAndP7(offset int, limit int, RouteParamKey_ string, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and p7 = ?", RouteParamKey_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndP8 Get MenuTrees via RouteParamKeyAndDiscoveredAndP8
func GetMenuTreesByRouteParamKeyAndDiscoveredAndP8(offset int, limit int, RouteParamKey_ string, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and p8 = ?", RouteParamKey_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndP9 Get MenuTrees via RouteParamKeyAndDiscoveredAndP9
func GetMenuTreesByRouteParamKeyAndDiscoveredAndP9(offset int, limit int, RouteParamKey_ string, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and p9 = ?", RouteParamKey_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscoveredAndFormClass Get MenuTrees via RouteParamKeyAndDiscoveredAndFormClass
func GetMenuTreesByRouteParamKeyAndDiscoveredAndFormClass(offset int, limit int, RouteParamKey_ string, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ? and form_class = ?", RouteParamKey_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndWeight Get MenuTrees via RouteParamKeyAndExpandedAndWeight
func GetMenuTreesByRouteParamKeyAndExpandedAndWeight(offset int, limit int, RouteParamKey_ string, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and weight = ?", RouteParamKey_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndMetadata Get MenuTrees via RouteParamKeyAndExpandedAndMetadata
func GetMenuTreesByRouteParamKeyAndExpandedAndMetadata(offset int, limit int, RouteParamKey_ string, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and metadata = ?", RouteParamKey_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndHasChildren Get MenuTrees via RouteParamKeyAndExpandedAndHasChildren
func GetMenuTreesByRouteParamKeyAndExpandedAndHasChildren(offset int, limit int, RouteParamKey_ string, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and has_children = ?", RouteParamKey_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndDepth Get MenuTrees via RouteParamKeyAndExpandedAndDepth
func GetMenuTreesByRouteParamKeyAndExpandedAndDepth(offset int, limit int, RouteParamKey_ string, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and depth = ?", RouteParamKey_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndP1 Get MenuTrees via RouteParamKeyAndExpandedAndP1
func GetMenuTreesByRouteParamKeyAndExpandedAndP1(offset int, limit int, RouteParamKey_ string, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and p1 = ?", RouteParamKey_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndP2 Get MenuTrees via RouteParamKeyAndExpandedAndP2
func GetMenuTreesByRouteParamKeyAndExpandedAndP2(offset int, limit int, RouteParamKey_ string, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and p2 = ?", RouteParamKey_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndP3 Get MenuTrees via RouteParamKeyAndExpandedAndP3
func GetMenuTreesByRouteParamKeyAndExpandedAndP3(offset int, limit int, RouteParamKey_ string, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and p3 = ?", RouteParamKey_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndP4 Get MenuTrees via RouteParamKeyAndExpandedAndP4
func GetMenuTreesByRouteParamKeyAndExpandedAndP4(offset int, limit int, RouteParamKey_ string, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and p4 = ?", RouteParamKey_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndP5 Get MenuTrees via RouteParamKeyAndExpandedAndP5
func GetMenuTreesByRouteParamKeyAndExpandedAndP5(offset int, limit int, RouteParamKey_ string, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and p5 = ?", RouteParamKey_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndP6 Get MenuTrees via RouteParamKeyAndExpandedAndP6
func GetMenuTreesByRouteParamKeyAndExpandedAndP6(offset int, limit int, RouteParamKey_ string, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and p6 = ?", RouteParamKey_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndP7 Get MenuTrees via RouteParamKeyAndExpandedAndP7
func GetMenuTreesByRouteParamKeyAndExpandedAndP7(offset int, limit int, RouteParamKey_ string, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and p7 = ?", RouteParamKey_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndP8 Get MenuTrees via RouteParamKeyAndExpandedAndP8
func GetMenuTreesByRouteParamKeyAndExpandedAndP8(offset int, limit int, RouteParamKey_ string, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and p8 = ?", RouteParamKey_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndP9 Get MenuTrees via RouteParamKeyAndExpandedAndP9
func GetMenuTreesByRouteParamKeyAndExpandedAndP9(offset int, limit int, RouteParamKey_ string, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and p9 = ?", RouteParamKey_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpandedAndFormClass Get MenuTrees via RouteParamKeyAndExpandedAndFormClass
func GetMenuTreesByRouteParamKeyAndExpandedAndFormClass(offset int, limit int, RouteParamKey_ string, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ? and form_class = ?", RouteParamKey_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndMetadata Get MenuTrees via RouteParamKeyAndWeightAndMetadata
func GetMenuTreesByRouteParamKeyAndWeightAndMetadata(offset int, limit int, RouteParamKey_ string, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and metadata = ?", RouteParamKey_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndHasChildren Get MenuTrees via RouteParamKeyAndWeightAndHasChildren
func GetMenuTreesByRouteParamKeyAndWeightAndHasChildren(offset int, limit int, RouteParamKey_ string, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and has_children = ?", RouteParamKey_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndDepth Get MenuTrees via RouteParamKeyAndWeightAndDepth
func GetMenuTreesByRouteParamKeyAndWeightAndDepth(offset int, limit int, RouteParamKey_ string, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and depth = ?", RouteParamKey_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndP1 Get MenuTrees via RouteParamKeyAndWeightAndP1
func GetMenuTreesByRouteParamKeyAndWeightAndP1(offset int, limit int, RouteParamKey_ string, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and p1 = ?", RouteParamKey_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndP2 Get MenuTrees via RouteParamKeyAndWeightAndP2
func GetMenuTreesByRouteParamKeyAndWeightAndP2(offset int, limit int, RouteParamKey_ string, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and p2 = ?", RouteParamKey_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndP3 Get MenuTrees via RouteParamKeyAndWeightAndP3
func GetMenuTreesByRouteParamKeyAndWeightAndP3(offset int, limit int, RouteParamKey_ string, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and p3 = ?", RouteParamKey_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndP4 Get MenuTrees via RouteParamKeyAndWeightAndP4
func GetMenuTreesByRouteParamKeyAndWeightAndP4(offset int, limit int, RouteParamKey_ string, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and p4 = ?", RouteParamKey_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndP5 Get MenuTrees via RouteParamKeyAndWeightAndP5
func GetMenuTreesByRouteParamKeyAndWeightAndP5(offset int, limit int, RouteParamKey_ string, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and p5 = ?", RouteParamKey_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndP6 Get MenuTrees via RouteParamKeyAndWeightAndP6
func GetMenuTreesByRouteParamKeyAndWeightAndP6(offset int, limit int, RouteParamKey_ string, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and p6 = ?", RouteParamKey_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndP7 Get MenuTrees via RouteParamKeyAndWeightAndP7
func GetMenuTreesByRouteParamKeyAndWeightAndP7(offset int, limit int, RouteParamKey_ string, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and p7 = ?", RouteParamKey_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndP8 Get MenuTrees via RouteParamKeyAndWeightAndP8
func GetMenuTreesByRouteParamKeyAndWeightAndP8(offset int, limit int, RouteParamKey_ string, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and p8 = ?", RouteParamKey_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndP9 Get MenuTrees via RouteParamKeyAndWeightAndP9
func GetMenuTreesByRouteParamKeyAndWeightAndP9(offset int, limit int, RouteParamKey_ string, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and p9 = ?", RouteParamKey_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeightAndFormClass Get MenuTrees via RouteParamKeyAndWeightAndFormClass
func GetMenuTreesByRouteParamKeyAndWeightAndFormClass(offset int, limit int, RouteParamKey_ string, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ? and form_class = ?", RouteParamKey_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndHasChildren Get MenuTrees via RouteParamKeyAndMetadataAndHasChildren
func GetMenuTreesByRouteParamKeyAndMetadataAndHasChildren(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and has_children = ?", RouteParamKey_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndDepth Get MenuTrees via RouteParamKeyAndMetadataAndDepth
func GetMenuTreesByRouteParamKeyAndMetadataAndDepth(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and depth = ?", RouteParamKey_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndP1 Get MenuTrees via RouteParamKeyAndMetadataAndP1
func GetMenuTreesByRouteParamKeyAndMetadataAndP1(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and p1 = ?", RouteParamKey_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndP2 Get MenuTrees via RouteParamKeyAndMetadataAndP2
func GetMenuTreesByRouteParamKeyAndMetadataAndP2(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and p2 = ?", RouteParamKey_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndP3 Get MenuTrees via RouteParamKeyAndMetadataAndP3
func GetMenuTreesByRouteParamKeyAndMetadataAndP3(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and p3 = ?", RouteParamKey_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndP4 Get MenuTrees via RouteParamKeyAndMetadataAndP4
func GetMenuTreesByRouteParamKeyAndMetadataAndP4(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and p4 = ?", RouteParamKey_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndP5 Get MenuTrees via RouteParamKeyAndMetadataAndP5
func GetMenuTreesByRouteParamKeyAndMetadataAndP5(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and p5 = ?", RouteParamKey_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndP6 Get MenuTrees via RouteParamKeyAndMetadataAndP6
func GetMenuTreesByRouteParamKeyAndMetadataAndP6(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and p6 = ?", RouteParamKey_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndP7 Get MenuTrees via RouteParamKeyAndMetadataAndP7
func GetMenuTreesByRouteParamKeyAndMetadataAndP7(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and p7 = ?", RouteParamKey_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndP8 Get MenuTrees via RouteParamKeyAndMetadataAndP8
func GetMenuTreesByRouteParamKeyAndMetadataAndP8(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and p8 = ?", RouteParamKey_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndP9 Get MenuTrees via RouteParamKeyAndMetadataAndP9
func GetMenuTreesByRouteParamKeyAndMetadataAndP9(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and p9 = ?", RouteParamKey_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadataAndFormClass Get MenuTrees via RouteParamKeyAndMetadataAndFormClass
func GetMenuTreesByRouteParamKeyAndMetadataAndFormClass(offset int, limit int, RouteParamKey_ string, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ? and form_class = ?", RouteParamKey_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndDepth Get MenuTrees via RouteParamKeyAndHasChildrenAndDepth
func GetMenuTreesByRouteParamKeyAndHasChildrenAndDepth(offset int, limit int, RouteParamKey_ string, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and depth = ?", RouteParamKey_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndP1 Get MenuTrees via RouteParamKeyAndHasChildrenAndP1
func GetMenuTreesByRouteParamKeyAndHasChildrenAndP1(offset int, limit int, RouteParamKey_ string, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and p1 = ?", RouteParamKey_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndP2 Get MenuTrees via RouteParamKeyAndHasChildrenAndP2
func GetMenuTreesByRouteParamKeyAndHasChildrenAndP2(offset int, limit int, RouteParamKey_ string, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and p2 = ?", RouteParamKey_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndP3 Get MenuTrees via RouteParamKeyAndHasChildrenAndP3
func GetMenuTreesByRouteParamKeyAndHasChildrenAndP3(offset int, limit int, RouteParamKey_ string, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and p3 = ?", RouteParamKey_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndP4 Get MenuTrees via RouteParamKeyAndHasChildrenAndP4
func GetMenuTreesByRouteParamKeyAndHasChildrenAndP4(offset int, limit int, RouteParamKey_ string, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and p4 = ?", RouteParamKey_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndP5 Get MenuTrees via RouteParamKeyAndHasChildrenAndP5
func GetMenuTreesByRouteParamKeyAndHasChildrenAndP5(offset int, limit int, RouteParamKey_ string, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and p5 = ?", RouteParamKey_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndP6 Get MenuTrees via RouteParamKeyAndHasChildrenAndP6
func GetMenuTreesByRouteParamKeyAndHasChildrenAndP6(offset int, limit int, RouteParamKey_ string, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and p6 = ?", RouteParamKey_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndP7 Get MenuTrees via RouteParamKeyAndHasChildrenAndP7
func GetMenuTreesByRouteParamKeyAndHasChildrenAndP7(offset int, limit int, RouteParamKey_ string, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and p7 = ?", RouteParamKey_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndP8 Get MenuTrees via RouteParamKeyAndHasChildrenAndP8
func GetMenuTreesByRouteParamKeyAndHasChildrenAndP8(offset int, limit int, RouteParamKey_ string, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and p8 = ?", RouteParamKey_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndP9 Get MenuTrees via RouteParamKeyAndHasChildrenAndP9
func GetMenuTreesByRouteParamKeyAndHasChildrenAndP9(offset int, limit int, RouteParamKey_ string, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and p9 = ?", RouteParamKey_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildrenAndFormClass Get MenuTrees via RouteParamKeyAndHasChildrenAndFormClass
func GetMenuTreesByRouteParamKeyAndHasChildrenAndFormClass(offset int, limit int, RouteParamKey_ string, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ? and form_class = ?", RouteParamKey_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepthAndP1 Get MenuTrees via RouteParamKeyAndDepthAndP1
func GetMenuTreesByRouteParamKeyAndDepthAndP1(offset int, limit int, RouteParamKey_ string, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ? and p1 = ?", RouteParamKey_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepthAndP2 Get MenuTrees via RouteParamKeyAndDepthAndP2
func GetMenuTreesByRouteParamKeyAndDepthAndP2(offset int, limit int, RouteParamKey_ string, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ? and p2 = ?", RouteParamKey_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepthAndP3 Get MenuTrees via RouteParamKeyAndDepthAndP3
func GetMenuTreesByRouteParamKeyAndDepthAndP3(offset int, limit int, RouteParamKey_ string, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ? and p3 = ?", RouteParamKey_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepthAndP4 Get MenuTrees via RouteParamKeyAndDepthAndP4
func GetMenuTreesByRouteParamKeyAndDepthAndP4(offset int, limit int, RouteParamKey_ string, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ? and p4 = ?", RouteParamKey_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepthAndP5 Get MenuTrees via RouteParamKeyAndDepthAndP5
func GetMenuTreesByRouteParamKeyAndDepthAndP5(offset int, limit int, RouteParamKey_ string, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ? and p5 = ?", RouteParamKey_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepthAndP6 Get MenuTrees via RouteParamKeyAndDepthAndP6
func GetMenuTreesByRouteParamKeyAndDepthAndP6(offset int, limit int, RouteParamKey_ string, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ? and p6 = ?", RouteParamKey_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepthAndP7 Get MenuTrees via RouteParamKeyAndDepthAndP7
func GetMenuTreesByRouteParamKeyAndDepthAndP7(offset int, limit int, RouteParamKey_ string, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ? and p7 = ?", RouteParamKey_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepthAndP8 Get MenuTrees via RouteParamKeyAndDepthAndP8
func GetMenuTreesByRouteParamKeyAndDepthAndP8(offset int, limit int, RouteParamKey_ string, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ? and p8 = ?", RouteParamKey_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepthAndP9 Get MenuTrees via RouteParamKeyAndDepthAndP9
func GetMenuTreesByRouteParamKeyAndDepthAndP9(offset int, limit int, RouteParamKey_ string, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ? and p9 = ?", RouteParamKey_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepthAndFormClass Get MenuTrees via RouteParamKeyAndDepthAndFormClass
func GetMenuTreesByRouteParamKeyAndDepthAndFormClass(offset int, limit int, RouteParamKey_ string, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ? and form_class = ?", RouteParamKey_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP1AndP2 Get MenuTrees via RouteParamKeyAndP1AndP2
func GetMenuTreesByRouteParamKeyAndP1AndP2(offset int, limit int, RouteParamKey_ string, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p1 = ? and p2 = ?", RouteParamKey_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP1AndP3 Get MenuTrees via RouteParamKeyAndP1AndP3
func GetMenuTreesByRouteParamKeyAndP1AndP3(offset int, limit int, RouteParamKey_ string, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p1 = ? and p3 = ?", RouteParamKey_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP1AndP4 Get MenuTrees via RouteParamKeyAndP1AndP4
func GetMenuTreesByRouteParamKeyAndP1AndP4(offset int, limit int, RouteParamKey_ string, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p1 = ? and p4 = ?", RouteParamKey_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP1AndP5 Get MenuTrees via RouteParamKeyAndP1AndP5
func GetMenuTreesByRouteParamKeyAndP1AndP5(offset int, limit int, RouteParamKey_ string, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p1 = ? and p5 = ?", RouteParamKey_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP1AndP6 Get MenuTrees via RouteParamKeyAndP1AndP6
func GetMenuTreesByRouteParamKeyAndP1AndP6(offset int, limit int, RouteParamKey_ string, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p1 = ? and p6 = ?", RouteParamKey_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP1AndP7 Get MenuTrees via RouteParamKeyAndP1AndP7
func GetMenuTreesByRouteParamKeyAndP1AndP7(offset int, limit int, RouteParamKey_ string, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p1 = ? and p7 = ?", RouteParamKey_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP1AndP8 Get MenuTrees via RouteParamKeyAndP1AndP8
func GetMenuTreesByRouteParamKeyAndP1AndP8(offset int, limit int, RouteParamKey_ string, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p1 = ? and p8 = ?", RouteParamKey_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP1AndP9 Get MenuTrees via RouteParamKeyAndP1AndP9
func GetMenuTreesByRouteParamKeyAndP1AndP9(offset int, limit int, RouteParamKey_ string, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p1 = ? and p9 = ?", RouteParamKey_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP1AndFormClass Get MenuTrees via RouteParamKeyAndP1AndFormClass
func GetMenuTreesByRouteParamKeyAndP1AndFormClass(offset int, limit int, RouteParamKey_ string, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p1 = ? and form_class = ?", RouteParamKey_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP2AndP3 Get MenuTrees via RouteParamKeyAndP2AndP3
func GetMenuTreesByRouteParamKeyAndP2AndP3(offset int, limit int, RouteParamKey_ string, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p2 = ? and p3 = ?", RouteParamKey_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP2AndP4 Get MenuTrees via RouteParamKeyAndP2AndP4
func GetMenuTreesByRouteParamKeyAndP2AndP4(offset int, limit int, RouteParamKey_ string, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p2 = ? and p4 = ?", RouteParamKey_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP2AndP5 Get MenuTrees via RouteParamKeyAndP2AndP5
func GetMenuTreesByRouteParamKeyAndP2AndP5(offset int, limit int, RouteParamKey_ string, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p2 = ? and p5 = ?", RouteParamKey_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP2AndP6 Get MenuTrees via RouteParamKeyAndP2AndP6
func GetMenuTreesByRouteParamKeyAndP2AndP6(offset int, limit int, RouteParamKey_ string, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p2 = ? and p6 = ?", RouteParamKey_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP2AndP7 Get MenuTrees via RouteParamKeyAndP2AndP7
func GetMenuTreesByRouteParamKeyAndP2AndP7(offset int, limit int, RouteParamKey_ string, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p2 = ? and p7 = ?", RouteParamKey_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP2AndP8 Get MenuTrees via RouteParamKeyAndP2AndP8
func GetMenuTreesByRouteParamKeyAndP2AndP8(offset int, limit int, RouteParamKey_ string, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p2 = ? and p8 = ?", RouteParamKey_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP2AndP9 Get MenuTrees via RouteParamKeyAndP2AndP9
func GetMenuTreesByRouteParamKeyAndP2AndP9(offset int, limit int, RouteParamKey_ string, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p2 = ? and p9 = ?", RouteParamKey_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP2AndFormClass Get MenuTrees via RouteParamKeyAndP2AndFormClass
func GetMenuTreesByRouteParamKeyAndP2AndFormClass(offset int, limit int, RouteParamKey_ string, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p2 = ? and form_class = ?", RouteParamKey_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP3AndP4 Get MenuTrees via RouteParamKeyAndP3AndP4
func GetMenuTreesByRouteParamKeyAndP3AndP4(offset int, limit int, RouteParamKey_ string, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p3 = ? and p4 = ?", RouteParamKey_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP3AndP5 Get MenuTrees via RouteParamKeyAndP3AndP5
func GetMenuTreesByRouteParamKeyAndP3AndP5(offset int, limit int, RouteParamKey_ string, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p3 = ? and p5 = ?", RouteParamKey_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP3AndP6 Get MenuTrees via RouteParamKeyAndP3AndP6
func GetMenuTreesByRouteParamKeyAndP3AndP6(offset int, limit int, RouteParamKey_ string, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p3 = ? and p6 = ?", RouteParamKey_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP3AndP7 Get MenuTrees via RouteParamKeyAndP3AndP7
func GetMenuTreesByRouteParamKeyAndP3AndP7(offset int, limit int, RouteParamKey_ string, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p3 = ? and p7 = ?", RouteParamKey_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP3AndP8 Get MenuTrees via RouteParamKeyAndP3AndP8
func GetMenuTreesByRouteParamKeyAndP3AndP8(offset int, limit int, RouteParamKey_ string, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p3 = ? and p8 = ?", RouteParamKey_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP3AndP9 Get MenuTrees via RouteParamKeyAndP3AndP9
func GetMenuTreesByRouteParamKeyAndP3AndP9(offset int, limit int, RouteParamKey_ string, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p3 = ? and p9 = ?", RouteParamKey_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP3AndFormClass Get MenuTrees via RouteParamKeyAndP3AndFormClass
func GetMenuTreesByRouteParamKeyAndP3AndFormClass(offset int, limit int, RouteParamKey_ string, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p3 = ? and form_class = ?", RouteParamKey_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP4AndP5 Get MenuTrees via RouteParamKeyAndP4AndP5
func GetMenuTreesByRouteParamKeyAndP4AndP5(offset int, limit int, RouteParamKey_ string, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p4 = ? and p5 = ?", RouteParamKey_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP4AndP6 Get MenuTrees via RouteParamKeyAndP4AndP6
func GetMenuTreesByRouteParamKeyAndP4AndP6(offset int, limit int, RouteParamKey_ string, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p4 = ? and p6 = ?", RouteParamKey_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP4AndP7 Get MenuTrees via RouteParamKeyAndP4AndP7
func GetMenuTreesByRouteParamKeyAndP4AndP7(offset int, limit int, RouteParamKey_ string, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p4 = ? and p7 = ?", RouteParamKey_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP4AndP8 Get MenuTrees via RouteParamKeyAndP4AndP8
func GetMenuTreesByRouteParamKeyAndP4AndP8(offset int, limit int, RouteParamKey_ string, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p4 = ? and p8 = ?", RouteParamKey_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP4AndP9 Get MenuTrees via RouteParamKeyAndP4AndP9
func GetMenuTreesByRouteParamKeyAndP4AndP9(offset int, limit int, RouteParamKey_ string, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p4 = ? and p9 = ?", RouteParamKey_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP4AndFormClass Get MenuTrees via RouteParamKeyAndP4AndFormClass
func GetMenuTreesByRouteParamKeyAndP4AndFormClass(offset int, limit int, RouteParamKey_ string, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p4 = ? and form_class = ?", RouteParamKey_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP5AndP6 Get MenuTrees via RouteParamKeyAndP5AndP6
func GetMenuTreesByRouteParamKeyAndP5AndP6(offset int, limit int, RouteParamKey_ string, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p5 = ? and p6 = ?", RouteParamKey_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP5AndP7 Get MenuTrees via RouteParamKeyAndP5AndP7
func GetMenuTreesByRouteParamKeyAndP5AndP7(offset int, limit int, RouteParamKey_ string, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p5 = ? and p7 = ?", RouteParamKey_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP5AndP8 Get MenuTrees via RouteParamKeyAndP5AndP8
func GetMenuTreesByRouteParamKeyAndP5AndP8(offset int, limit int, RouteParamKey_ string, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p5 = ? and p8 = ?", RouteParamKey_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP5AndP9 Get MenuTrees via RouteParamKeyAndP5AndP9
func GetMenuTreesByRouteParamKeyAndP5AndP9(offset int, limit int, RouteParamKey_ string, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p5 = ? and p9 = ?", RouteParamKey_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP5AndFormClass Get MenuTrees via RouteParamKeyAndP5AndFormClass
func GetMenuTreesByRouteParamKeyAndP5AndFormClass(offset int, limit int, RouteParamKey_ string, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p5 = ? and form_class = ?", RouteParamKey_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP6AndP7 Get MenuTrees via RouteParamKeyAndP6AndP7
func GetMenuTreesByRouteParamKeyAndP6AndP7(offset int, limit int, RouteParamKey_ string, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p6 = ? and p7 = ?", RouteParamKey_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP6AndP8 Get MenuTrees via RouteParamKeyAndP6AndP8
func GetMenuTreesByRouteParamKeyAndP6AndP8(offset int, limit int, RouteParamKey_ string, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p6 = ? and p8 = ?", RouteParamKey_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP6AndP9 Get MenuTrees via RouteParamKeyAndP6AndP9
func GetMenuTreesByRouteParamKeyAndP6AndP9(offset int, limit int, RouteParamKey_ string, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p6 = ? and p9 = ?", RouteParamKey_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP6AndFormClass Get MenuTrees via RouteParamKeyAndP6AndFormClass
func GetMenuTreesByRouteParamKeyAndP6AndFormClass(offset int, limit int, RouteParamKey_ string, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p6 = ? and form_class = ?", RouteParamKey_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP7AndP8 Get MenuTrees via RouteParamKeyAndP7AndP8
func GetMenuTreesByRouteParamKeyAndP7AndP8(offset int, limit int, RouteParamKey_ string, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p7 = ? and p8 = ?", RouteParamKey_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP7AndP9 Get MenuTrees via RouteParamKeyAndP7AndP9
func GetMenuTreesByRouteParamKeyAndP7AndP9(offset int, limit int, RouteParamKey_ string, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p7 = ? and p9 = ?", RouteParamKey_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP7AndFormClass Get MenuTrees via RouteParamKeyAndP7AndFormClass
func GetMenuTreesByRouteParamKeyAndP7AndFormClass(offset int, limit int, RouteParamKey_ string, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p7 = ? and form_class = ?", RouteParamKey_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP8AndP9 Get MenuTrees via RouteParamKeyAndP8AndP9
func GetMenuTreesByRouteParamKeyAndP8AndP9(offset int, limit int, RouteParamKey_ string, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p8 = ? and p9 = ?", RouteParamKey_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP8AndFormClass Get MenuTrees via RouteParamKeyAndP8AndFormClass
func GetMenuTreesByRouteParamKeyAndP8AndFormClass(offset int, limit int, RouteParamKey_ string, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p8 = ? and form_class = ?", RouteParamKey_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP9AndFormClass Get MenuTrees via RouteParamKeyAndP9AndFormClass
func GetMenuTreesByRouteParamKeyAndP9AndFormClass(offset int, limit int, RouteParamKey_ string, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p9 = ? and form_class = ?", RouteParamKey_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndTitle Get MenuTrees via RouteParametersAndUrlAndTitle
func GetMenuTreesByRouteParametersAndUrlAndTitle(offset int, limit int, RouteParameters_ []byte, Url_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and title = ?", RouteParameters_, Url_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndDescription Get MenuTrees via RouteParametersAndUrlAndDescription
func GetMenuTreesByRouteParametersAndUrlAndDescription(offset int, limit int, RouteParameters_ []byte, Url_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and description = ?", RouteParameters_, Url_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndClass Get MenuTrees via RouteParametersAndUrlAndClass
func GetMenuTreesByRouteParametersAndUrlAndClass(offset int, limit int, RouteParameters_ []byte, Url_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and class = ?", RouteParameters_, Url_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndOptions Get MenuTrees via RouteParametersAndUrlAndOptions
func GetMenuTreesByRouteParametersAndUrlAndOptions(offset int, limit int, RouteParameters_ []byte, Url_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and options = ?", RouteParameters_, Url_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndProvider Get MenuTrees via RouteParametersAndUrlAndProvider
func GetMenuTreesByRouteParametersAndUrlAndProvider(offset int, limit int, RouteParameters_ []byte, Url_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and provider = ?", RouteParameters_, Url_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndEnabled Get MenuTrees via RouteParametersAndUrlAndEnabled
func GetMenuTreesByRouteParametersAndUrlAndEnabled(offset int, limit int, RouteParameters_ []byte, Url_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and enabled = ?", RouteParameters_, Url_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndDiscovered Get MenuTrees via RouteParametersAndUrlAndDiscovered
func GetMenuTreesByRouteParametersAndUrlAndDiscovered(offset int, limit int, RouteParameters_ []byte, Url_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and discovered = ?", RouteParameters_, Url_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndExpanded Get MenuTrees via RouteParametersAndUrlAndExpanded
func GetMenuTreesByRouteParametersAndUrlAndExpanded(offset int, limit int, RouteParameters_ []byte, Url_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and expanded = ?", RouteParameters_, Url_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndWeight Get MenuTrees via RouteParametersAndUrlAndWeight
func GetMenuTreesByRouteParametersAndUrlAndWeight(offset int, limit int, RouteParameters_ []byte, Url_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and weight = ?", RouteParameters_, Url_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndMetadata Get MenuTrees via RouteParametersAndUrlAndMetadata
func GetMenuTreesByRouteParametersAndUrlAndMetadata(offset int, limit int, RouteParameters_ []byte, Url_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and metadata = ?", RouteParameters_, Url_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndHasChildren Get MenuTrees via RouteParametersAndUrlAndHasChildren
func GetMenuTreesByRouteParametersAndUrlAndHasChildren(offset int, limit int, RouteParameters_ []byte, Url_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and has_children = ?", RouteParameters_, Url_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndDepth Get MenuTrees via RouteParametersAndUrlAndDepth
func GetMenuTreesByRouteParametersAndUrlAndDepth(offset int, limit int, RouteParameters_ []byte, Url_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and depth = ?", RouteParameters_, Url_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndP1 Get MenuTrees via RouteParametersAndUrlAndP1
func GetMenuTreesByRouteParametersAndUrlAndP1(offset int, limit int, RouteParameters_ []byte, Url_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and p1 = ?", RouteParameters_, Url_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndP2 Get MenuTrees via RouteParametersAndUrlAndP2
func GetMenuTreesByRouteParametersAndUrlAndP2(offset int, limit int, RouteParameters_ []byte, Url_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and p2 = ?", RouteParameters_, Url_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndP3 Get MenuTrees via RouteParametersAndUrlAndP3
func GetMenuTreesByRouteParametersAndUrlAndP3(offset int, limit int, RouteParameters_ []byte, Url_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and p3 = ?", RouteParameters_, Url_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndP4 Get MenuTrees via RouteParametersAndUrlAndP4
func GetMenuTreesByRouteParametersAndUrlAndP4(offset int, limit int, RouteParameters_ []byte, Url_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and p4 = ?", RouteParameters_, Url_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndP5 Get MenuTrees via RouteParametersAndUrlAndP5
func GetMenuTreesByRouteParametersAndUrlAndP5(offset int, limit int, RouteParameters_ []byte, Url_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and p5 = ?", RouteParameters_, Url_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndP6 Get MenuTrees via RouteParametersAndUrlAndP6
func GetMenuTreesByRouteParametersAndUrlAndP6(offset int, limit int, RouteParameters_ []byte, Url_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and p6 = ?", RouteParameters_, Url_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndP7 Get MenuTrees via RouteParametersAndUrlAndP7
func GetMenuTreesByRouteParametersAndUrlAndP7(offset int, limit int, RouteParameters_ []byte, Url_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and p7 = ?", RouteParameters_, Url_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndP8 Get MenuTrees via RouteParametersAndUrlAndP8
func GetMenuTreesByRouteParametersAndUrlAndP8(offset int, limit int, RouteParameters_ []byte, Url_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and p8 = ?", RouteParameters_, Url_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndP9 Get MenuTrees via RouteParametersAndUrlAndP9
func GetMenuTreesByRouteParametersAndUrlAndP9(offset int, limit int, RouteParameters_ []byte, Url_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and p9 = ?", RouteParameters_, Url_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrlAndFormClass Get MenuTrees via RouteParametersAndUrlAndFormClass
func GetMenuTreesByRouteParametersAndUrlAndFormClass(offset int, limit int, RouteParameters_ []byte, Url_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ? and form_class = ?", RouteParameters_, Url_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndDescription Get MenuTrees via RouteParametersAndTitleAndDescription
func GetMenuTreesByRouteParametersAndTitleAndDescription(offset int, limit int, RouteParameters_ []byte, Title_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and description = ?", RouteParameters_, Title_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndClass Get MenuTrees via RouteParametersAndTitleAndClass
func GetMenuTreesByRouteParametersAndTitleAndClass(offset int, limit int, RouteParameters_ []byte, Title_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and class = ?", RouteParameters_, Title_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndOptions Get MenuTrees via RouteParametersAndTitleAndOptions
func GetMenuTreesByRouteParametersAndTitleAndOptions(offset int, limit int, RouteParameters_ []byte, Title_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and options = ?", RouteParameters_, Title_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndProvider Get MenuTrees via RouteParametersAndTitleAndProvider
func GetMenuTreesByRouteParametersAndTitleAndProvider(offset int, limit int, RouteParameters_ []byte, Title_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and provider = ?", RouteParameters_, Title_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndEnabled Get MenuTrees via RouteParametersAndTitleAndEnabled
func GetMenuTreesByRouteParametersAndTitleAndEnabled(offset int, limit int, RouteParameters_ []byte, Title_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and enabled = ?", RouteParameters_, Title_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndDiscovered Get MenuTrees via RouteParametersAndTitleAndDiscovered
func GetMenuTreesByRouteParametersAndTitleAndDiscovered(offset int, limit int, RouteParameters_ []byte, Title_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and discovered = ?", RouteParameters_, Title_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndExpanded Get MenuTrees via RouteParametersAndTitleAndExpanded
func GetMenuTreesByRouteParametersAndTitleAndExpanded(offset int, limit int, RouteParameters_ []byte, Title_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and expanded = ?", RouteParameters_, Title_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndWeight Get MenuTrees via RouteParametersAndTitleAndWeight
func GetMenuTreesByRouteParametersAndTitleAndWeight(offset int, limit int, RouteParameters_ []byte, Title_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and weight = ?", RouteParameters_, Title_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndMetadata Get MenuTrees via RouteParametersAndTitleAndMetadata
func GetMenuTreesByRouteParametersAndTitleAndMetadata(offset int, limit int, RouteParameters_ []byte, Title_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and metadata = ?", RouteParameters_, Title_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndHasChildren Get MenuTrees via RouteParametersAndTitleAndHasChildren
func GetMenuTreesByRouteParametersAndTitleAndHasChildren(offset int, limit int, RouteParameters_ []byte, Title_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and has_children = ?", RouteParameters_, Title_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndDepth Get MenuTrees via RouteParametersAndTitleAndDepth
func GetMenuTreesByRouteParametersAndTitleAndDepth(offset int, limit int, RouteParameters_ []byte, Title_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and depth = ?", RouteParameters_, Title_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndP1 Get MenuTrees via RouteParametersAndTitleAndP1
func GetMenuTreesByRouteParametersAndTitleAndP1(offset int, limit int, RouteParameters_ []byte, Title_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and p1 = ?", RouteParameters_, Title_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndP2 Get MenuTrees via RouteParametersAndTitleAndP2
func GetMenuTreesByRouteParametersAndTitleAndP2(offset int, limit int, RouteParameters_ []byte, Title_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and p2 = ?", RouteParameters_, Title_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndP3 Get MenuTrees via RouteParametersAndTitleAndP3
func GetMenuTreesByRouteParametersAndTitleAndP3(offset int, limit int, RouteParameters_ []byte, Title_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and p3 = ?", RouteParameters_, Title_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndP4 Get MenuTrees via RouteParametersAndTitleAndP4
func GetMenuTreesByRouteParametersAndTitleAndP4(offset int, limit int, RouteParameters_ []byte, Title_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and p4 = ?", RouteParameters_, Title_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndP5 Get MenuTrees via RouteParametersAndTitleAndP5
func GetMenuTreesByRouteParametersAndTitleAndP5(offset int, limit int, RouteParameters_ []byte, Title_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and p5 = ?", RouteParameters_, Title_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndP6 Get MenuTrees via RouteParametersAndTitleAndP6
func GetMenuTreesByRouteParametersAndTitleAndP6(offset int, limit int, RouteParameters_ []byte, Title_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and p6 = ?", RouteParameters_, Title_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndP7 Get MenuTrees via RouteParametersAndTitleAndP7
func GetMenuTreesByRouteParametersAndTitleAndP7(offset int, limit int, RouteParameters_ []byte, Title_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and p7 = ?", RouteParameters_, Title_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndP8 Get MenuTrees via RouteParametersAndTitleAndP8
func GetMenuTreesByRouteParametersAndTitleAndP8(offset int, limit int, RouteParameters_ []byte, Title_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and p8 = ?", RouteParameters_, Title_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndP9 Get MenuTrees via RouteParametersAndTitleAndP9
func GetMenuTreesByRouteParametersAndTitleAndP9(offset int, limit int, RouteParameters_ []byte, Title_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and p9 = ?", RouteParameters_, Title_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitleAndFormClass Get MenuTrees via RouteParametersAndTitleAndFormClass
func GetMenuTreesByRouteParametersAndTitleAndFormClass(offset int, limit int, RouteParameters_ []byte, Title_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ? and form_class = ?", RouteParameters_, Title_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndClass Get MenuTrees via RouteParametersAndDescriptionAndClass
func GetMenuTreesByRouteParametersAndDescriptionAndClass(offset int, limit int, RouteParameters_ []byte, Description_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and class = ?", RouteParameters_, Description_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndOptions Get MenuTrees via RouteParametersAndDescriptionAndOptions
func GetMenuTreesByRouteParametersAndDescriptionAndOptions(offset int, limit int, RouteParameters_ []byte, Description_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and options = ?", RouteParameters_, Description_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndProvider Get MenuTrees via RouteParametersAndDescriptionAndProvider
func GetMenuTreesByRouteParametersAndDescriptionAndProvider(offset int, limit int, RouteParameters_ []byte, Description_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and provider = ?", RouteParameters_, Description_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndEnabled Get MenuTrees via RouteParametersAndDescriptionAndEnabled
func GetMenuTreesByRouteParametersAndDescriptionAndEnabled(offset int, limit int, RouteParameters_ []byte, Description_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and enabled = ?", RouteParameters_, Description_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndDiscovered Get MenuTrees via RouteParametersAndDescriptionAndDiscovered
func GetMenuTreesByRouteParametersAndDescriptionAndDiscovered(offset int, limit int, RouteParameters_ []byte, Description_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and discovered = ?", RouteParameters_, Description_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndExpanded Get MenuTrees via RouteParametersAndDescriptionAndExpanded
func GetMenuTreesByRouteParametersAndDescriptionAndExpanded(offset int, limit int, RouteParameters_ []byte, Description_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and expanded = ?", RouteParameters_, Description_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndWeight Get MenuTrees via RouteParametersAndDescriptionAndWeight
func GetMenuTreesByRouteParametersAndDescriptionAndWeight(offset int, limit int, RouteParameters_ []byte, Description_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and weight = ?", RouteParameters_, Description_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndMetadata Get MenuTrees via RouteParametersAndDescriptionAndMetadata
func GetMenuTreesByRouteParametersAndDescriptionAndMetadata(offset int, limit int, RouteParameters_ []byte, Description_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and metadata = ?", RouteParameters_, Description_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndHasChildren Get MenuTrees via RouteParametersAndDescriptionAndHasChildren
func GetMenuTreesByRouteParametersAndDescriptionAndHasChildren(offset int, limit int, RouteParameters_ []byte, Description_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and has_children = ?", RouteParameters_, Description_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndDepth Get MenuTrees via RouteParametersAndDescriptionAndDepth
func GetMenuTreesByRouteParametersAndDescriptionAndDepth(offset int, limit int, RouteParameters_ []byte, Description_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and depth = ?", RouteParameters_, Description_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndP1 Get MenuTrees via RouteParametersAndDescriptionAndP1
func GetMenuTreesByRouteParametersAndDescriptionAndP1(offset int, limit int, RouteParameters_ []byte, Description_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and p1 = ?", RouteParameters_, Description_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndP2 Get MenuTrees via RouteParametersAndDescriptionAndP2
func GetMenuTreesByRouteParametersAndDescriptionAndP2(offset int, limit int, RouteParameters_ []byte, Description_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and p2 = ?", RouteParameters_, Description_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndP3 Get MenuTrees via RouteParametersAndDescriptionAndP3
func GetMenuTreesByRouteParametersAndDescriptionAndP3(offset int, limit int, RouteParameters_ []byte, Description_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and p3 = ?", RouteParameters_, Description_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndP4 Get MenuTrees via RouteParametersAndDescriptionAndP4
func GetMenuTreesByRouteParametersAndDescriptionAndP4(offset int, limit int, RouteParameters_ []byte, Description_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and p4 = ?", RouteParameters_, Description_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndP5 Get MenuTrees via RouteParametersAndDescriptionAndP5
func GetMenuTreesByRouteParametersAndDescriptionAndP5(offset int, limit int, RouteParameters_ []byte, Description_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and p5 = ?", RouteParameters_, Description_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndP6 Get MenuTrees via RouteParametersAndDescriptionAndP6
func GetMenuTreesByRouteParametersAndDescriptionAndP6(offset int, limit int, RouteParameters_ []byte, Description_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and p6 = ?", RouteParameters_, Description_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndP7 Get MenuTrees via RouteParametersAndDescriptionAndP7
func GetMenuTreesByRouteParametersAndDescriptionAndP7(offset int, limit int, RouteParameters_ []byte, Description_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and p7 = ?", RouteParameters_, Description_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndP8 Get MenuTrees via RouteParametersAndDescriptionAndP8
func GetMenuTreesByRouteParametersAndDescriptionAndP8(offset int, limit int, RouteParameters_ []byte, Description_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and p8 = ?", RouteParameters_, Description_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndP9 Get MenuTrees via RouteParametersAndDescriptionAndP9
func GetMenuTreesByRouteParametersAndDescriptionAndP9(offset int, limit int, RouteParameters_ []byte, Description_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and p9 = ?", RouteParameters_, Description_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescriptionAndFormClass Get MenuTrees via RouteParametersAndDescriptionAndFormClass
func GetMenuTreesByRouteParametersAndDescriptionAndFormClass(offset int, limit int, RouteParameters_ []byte, Description_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ? and form_class = ?", RouteParameters_, Description_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndOptions Get MenuTrees via RouteParametersAndClassAndOptions
func GetMenuTreesByRouteParametersAndClassAndOptions(offset int, limit int, RouteParameters_ []byte, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and options = ?", RouteParameters_, Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndProvider Get MenuTrees via RouteParametersAndClassAndProvider
func GetMenuTreesByRouteParametersAndClassAndProvider(offset int, limit int, RouteParameters_ []byte, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and provider = ?", RouteParameters_, Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndEnabled Get MenuTrees via RouteParametersAndClassAndEnabled
func GetMenuTreesByRouteParametersAndClassAndEnabled(offset int, limit int, RouteParameters_ []byte, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and enabled = ?", RouteParameters_, Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndDiscovered Get MenuTrees via RouteParametersAndClassAndDiscovered
func GetMenuTreesByRouteParametersAndClassAndDiscovered(offset int, limit int, RouteParameters_ []byte, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and discovered = ?", RouteParameters_, Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndExpanded Get MenuTrees via RouteParametersAndClassAndExpanded
func GetMenuTreesByRouteParametersAndClassAndExpanded(offset int, limit int, RouteParameters_ []byte, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and expanded = ?", RouteParameters_, Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndWeight Get MenuTrees via RouteParametersAndClassAndWeight
func GetMenuTreesByRouteParametersAndClassAndWeight(offset int, limit int, RouteParameters_ []byte, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and weight = ?", RouteParameters_, Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndMetadata Get MenuTrees via RouteParametersAndClassAndMetadata
func GetMenuTreesByRouteParametersAndClassAndMetadata(offset int, limit int, RouteParameters_ []byte, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and metadata = ?", RouteParameters_, Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndHasChildren Get MenuTrees via RouteParametersAndClassAndHasChildren
func GetMenuTreesByRouteParametersAndClassAndHasChildren(offset int, limit int, RouteParameters_ []byte, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and has_children = ?", RouteParameters_, Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndDepth Get MenuTrees via RouteParametersAndClassAndDepth
func GetMenuTreesByRouteParametersAndClassAndDepth(offset int, limit int, RouteParameters_ []byte, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and depth = ?", RouteParameters_, Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndP1 Get MenuTrees via RouteParametersAndClassAndP1
func GetMenuTreesByRouteParametersAndClassAndP1(offset int, limit int, RouteParameters_ []byte, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and p1 = ?", RouteParameters_, Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndP2 Get MenuTrees via RouteParametersAndClassAndP2
func GetMenuTreesByRouteParametersAndClassAndP2(offset int, limit int, RouteParameters_ []byte, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and p2 = ?", RouteParameters_, Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndP3 Get MenuTrees via RouteParametersAndClassAndP3
func GetMenuTreesByRouteParametersAndClassAndP3(offset int, limit int, RouteParameters_ []byte, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and p3 = ?", RouteParameters_, Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndP4 Get MenuTrees via RouteParametersAndClassAndP4
func GetMenuTreesByRouteParametersAndClassAndP4(offset int, limit int, RouteParameters_ []byte, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and p4 = ?", RouteParameters_, Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndP5 Get MenuTrees via RouteParametersAndClassAndP5
func GetMenuTreesByRouteParametersAndClassAndP5(offset int, limit int, RouteParameters_ []byte, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and p5 = ?", RouteParameters_, Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndP6 Get MenuTrees via RouteParametersAndClassAndP6
func GetMenuTreesByRouteParametersAndClassAndP6(offset int, limit int, RouteParameters_ []byte, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and p6 = ?", RouteParameters_, Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndP7 Get MenuTrees via RouteParametersAndClassAndP7
func GetMenuTreesByRouteParametersAndClassAndP7(offset int, limit int, RouteParameters_ []byte, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and p7 = ?", RouteParameters_, Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndP8 Get MenuTrees via RouteParametersAndClassAndP8
func GetMenuTreesByRouteParametersAndClassAndP8(offset int, limit int, RouteParameters_ []byte, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and p8 = ?", RouteParameters_, Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndP9 Get MenuTrees via RouteParametersAndClassAndP9
func GetMenuTreesByRouteParametersAndClassAndP9(offset int, limit int, RouteParameters_ []byte, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and p9 = ?", RouteParameters_, Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClassAndFormClass Get MenuTrees via RouteParametersAndClassAndFormClass
func GetMenuTreesByRouteParametersAndClassAndFormClass(offset int, limit int, RouteParameters_ []byte, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ? and form_class = ?", RouteParameters_, Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndProvider Get MenuTrees via RouteParametersAndOptionsAndProvider
func GetMenuTreesByRouteParametersAndOptionsAndProvider(offset int, limit int, RouteParameters_ []byte, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and provider = ?", RouteParameters_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndEnabled Get MenuTrees via RouteParametersAndOptionsAndEnabled
func GetMenuTreesByRouteParametersAndOptionsAndEnabled(offset int, limit int, RouteParameters_ []byte, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and enabled = ?", RouteParameters_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndDiscovered Get MenuTrees via RouteParametersAndOptionsAndDiscovered
func GetMenuTreesByRouteParametersAndOptionsAndDiscovered(offset int, limit int, RouteParameters_ []byte, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and discovered = ?", RouteParameters_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndExpanded Get MenuTrees via RouteParametersAndOptionsAndExpanded
func GetMenuTreesByRouteParametersAndOptionsAndExpanded(offset int, limit int, RouteParameters_ []byte, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and expanded = ?", RouteParameters_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndWeight Get MenuTrees via RouteParametersAndOptionsAndWeight
func GetMenuTreesByRouteParametersAndOptionsAndWeight(offset int, limit int, RouteParameters_ []byte, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and weight = ?", RouteParameters_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndMetadata Get MenuTrees via RouteParametersAndOptionsAndMetadata
func GetMenuTreesByRouteParametersAndOptionsAndMetadata(offset int, limit int, RouteParameters_ []byte, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and metadata = ?", RouteParameters_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndHasChildren Get MenuTrees via RouteParametersAndOptionsAndHasChildren
func GetMenuTreesByRouteParametersAndOptionsAndHasChildren(offset int, limit int, RouteParameters_ []byte, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and has_children = ?", RouteParameters_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndDepth Get MenuTrees via RouteParametersAndOptionsAndDepth
func GetMenuTreesByRouteParametersAndOptionsAndDepth(offset int, limit int, RouteParameters_ []byte, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and depth = ?", RouteParameters_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndP1 Get MenuTrees via RouteParametersAndOptionsAndP1
func GetMenuTreesByRouteParametersAndOptionsAndP1(offset int, limit int, RouteParameters_ []byte, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and p1 = ?", RouteParameters_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndP2 Get MenuTrees via RouteParametersAndOptionsAndP2
func GetMenuTreesByRouteParametersAndOptionsAndP2(offset int, limit int, RouteParameters_ []byte, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and p2 = ?", RouteParameters_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndP3 Get MenuTrees via RouteParametersAndOptionsAndP3
func GetMenuTreesByRouteParametersAndOptionsAndP3(offset int, limit int, RouteParameters_ []byte, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and p3 = ?", RouteParameters_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndP4 Get MenuTrees via RouteParametersAndOptionsAndP4
func GetMenuTreesByRouteParametersAndOptionsAndP4(offset int, limit int, RouteParameters_ []byte, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and p4 = ?", RouteParameters_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndP5 Get MenuTrees via RouteParametersAndOptionsAndP5
func GetMenuTreesByRouteParametersAndOptionsAndP5(offset int, limit int, RouteParameters_ []byte, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and p5 = ?", RouteParameters_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndP6 Get MenuTrees via RouteParametersAndOptionsAndP6
func GetMenuTreesByRouteParametersAndOptionsAndP6(offset int, limit int, RouteParameters_ []byte, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and p6 = ?", RouteParameters_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndP7 Get MenuTrees via RouteParametersAndOptionsAndP7
func GetMenuTreesByRouteParametersAndOptionsAndP7(offset int, limit int, RouteParameters_ []byte, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and p7 = ?", RouteParameters_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndP8 Get MenuTrees via RouteParametersAndOptionsAndP8
func GetMenuTreesByRouteParametersAndOptionsAndP8(offset int, limit int, RouteParameters_ []byte, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and p8 = ?", RouteParameters_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndP9 Get MenuTrees via RouteParametersAndOptionsAndP9
func GetMenuTreesByRouteParametersAndOptionsAndP9(offset int, limit int, RouteParameters_ []byte, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and p9 = ?", RouteParameters_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptionsAndFormClass Get MenuTrees via RouteParametersAndOptionsAndFormClass
func GetMenuTreesByRouteParametersAndOptionsAndFormClass(offset int, limit int, RouteParameters_ []byte, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ? and form_class = ?", RouteParameters_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndEnabled Get MenuTrees via RouteParametersAndProviderAndEnabled
func GetMenuTreesByRouteParametersAndProviderAndEnabled(offset int, limit int, RouteParameters_ []byte, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and enabled = ?", RouteParameters_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndDiscovered Get MenuTrees via RouteParametersAndProviderAndDiscovered
func GetMenuTreesByRouteParametersAndProviderAndDiscovered(offset int, limit int, RouteParameters_ []byte, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and discovered = ?", RouteParameters_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndExpanded Get MenuTrees via RouteParametersAndProviderAndExpanded
func GetMenuTreesByRouteParametersAndProviderAndExpanded(offset int, limit int, RouteParameters_ []byte, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and expanded = ?", RouteParameters_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndWeight Get MenuTrees via RouteParametersAndProviderAndWeight
func GetMenuTreesByRouteParametersAndProviderAndWeight(offset int, limit int, RouteParameters_ []byte, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and weight = ?", RouteParameters_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndMetadata Get MenuTrees via RouteParametersAndProviderAndMetadata
func GetMenuTreesByRouteParametersAndProviderAndMetadata(offset int, limit int, RouteParameters_ []byte, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and metadata = ?", RouteParameters_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndHasChildren Get MenuTrees via RouteParametersAndProviderAndHasChildren
func GetMenuTreesByRouteParametersAndProviderAndHasChildren(offset int, limit int, RouteParameters_ []byte, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and has_children = ?", RouteParameters_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndDepth Get MenuTrees via RouteParametersAndProviderAndDepth
func GetMenuTreesByRouteParametersAndProviderAndDepth(offset int, limit int, RouteParameters_ []byte, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and depth = ?", RouteParameters_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndP1 Get MenuTrees via RouteParametersAndProviderAndP1
func GetMenuTreesByRouteParametersAndProviderAndP1(offset int, limit int, RouteParameters_ []byte, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and p1 = ?", RouteParameters_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndP2 Get MenuTrees via RouteParametersAndProviderAndP2
func GetMenuTreesByRouteParametersAndProviderAndP2(offset int, limit int, RouteParameters_ []byte, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and p2 = ?", RouteParameters_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndP3 Get MenuTrees via RouteParametersAndProviderAndP3
func GetMenuTreesByRouteParametersAndProviderAndP3(offset int, limit int, RouteParameters_ []byte, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and p3 = ?", RouteParameters_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndP4 Get MenuTrees via RouteParametersAndProviderAndP4
func GetMenuTreesByRouteParametersAndProviderAndP4(offset int, limit int, RouteParameters_ []byte, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and p4 = ?", RouteParameters_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndP5 Get MenuTrees via RouteParametersAndProviderAndP5
func GetMenuTreesByRouteParametersAndProviderAndP5(offset int, limit int, RouteParameters_ []byte, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and p5 = ?", RouteParameters_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndP6 Get MenuTrees via RouteParametersAndProviderAndP6
func GetMenuTreesByRouteParametersAndProviderAndP6(offset int, limit int, RouteParameters_ []byte, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and p6 = ?", RouteParameters_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndP7 Get MenuTrees via RouteParametersAndProviderAndP7
func GetMenuTreesByRouteParametersAndProviderAndP7(offset int, limit int, RouteParameters_ []byte, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and p7 = ?", RouteParameters_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndP8 Get MenuTrees via RouteParametersAndProviderAndP8
func GetMenuTreesByRouteParametersAndProviderAndP8(offset int, limit int, RouteParameters_ []byte, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and p8 = ?", RouteParameters_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndP9 Get MenuTrees via RouteParametersAndProviderAndP9
func GetMenuTreesByRouteParametersAndProviderAndP9(offset int, limit int, RouteParameters_ []byte, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and p9 = ?", RouteParameters_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProviderAndFormClass Get MenuTrees via RouteParametersAndProviderAndFormClass
func GetMenuTreesByRouteParametersAndProviderAndFormClass(offset int, limit int, RouteParameters_ []byte, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ? and form_class = ?", RouteParameters_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndDiscovered Get MenuTrees via RouteParametersAndEnabledAndDiscovered
func GetMenuTreesByRouteParametersAndEnabledAndDiscovered(offset int, limit int, RouteParameters_ []byte, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and discovered = ?", RouteParameters_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndExpanded Get MenuTrees via RouteParametersAndEnabledAndExpanded
func GetMenuTreesByRouteParametersAndEnabledAndExpanded(offset int, limit int, RouteParameters_ []byte, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and expanded = ?", RouteParameters_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndWeight Get MenuTrees via RouteParametersAndEnabledAndWeight
func GetMenuTreesByRouteParametersAndEnabledAndWeight(offset int, limit int, RouteParameters_ []byte, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and weight = ?", RouteParameters_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndMetadata Get MenuTrees via RouteParametersAndEnabledAndMetadata
func GetMenuTreesByRouteParametersAndEnabledAndMetadata(offset int, limit int, RouteParameters_ []byte, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and metadata = ?", RouteParameters_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndHasChildren Get MenuTrees via RouteParametersAndEnabledAndHasChildren
func GetMenuTreesByRouteParametersAndEnabledAndHasChildren(offset int, limit int, RouteParameters_ []byte, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and has_children = ?", RouteParameters_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndDepth Get MenuTrees via RouteParametersAndEnabledAndDepth
func GetMenuTreesByRouteParametersAndEnabledAndDepth(offset int, limit int, RouteParameters_ []byte, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and depth = ?", RouteParameters_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndP1 Get MenuTrees via RouteParametersAndEnabledAndP1
func GetMenuTreesByRouteParametersAndEnabledAndP1(offset int, limit int, RouteParameters_ []byte, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and p1 = ?", RouteParameters_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndP2 Get MenuTrees via RouteParametersAndEnabledAndP2
func GetMenuTreesByRouteParametersAndEnabledAndP2(offset int, limit int, RouteParameters_ []byte, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and p2 = ?", RouteParameters_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndP3 Get MenuTrees via RouteParametersAndEnabledAndP3
func GetMenuTreesByRouteParametersAndEnabledAndP3(offset int, limit int, RouteParameters_ []byte, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and p3 = ?", RouteParameters_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndP4 Get MenuTrees via RouteParametersAndEnabledAndP4
func GetMenuTreesByRouteParametersAndEnabledAndP4(offset int, limit int, RouteParameters_ []byte, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and p4 = ?", RouteParameters_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndP5 Get MenuTrees via RouteParametersAndEnabledAndP5
func GetMenuTreesByRouteParametersAndEnabledAndP5(offset int, limit int, RouteParameters_ []byte, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and p5 = ?", RouteParameters_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndP6 Get MenuTrees via RouteParametersAndEnabledAndP6
func GetMenuTreesByRouteParametersAndEnabledAndP6(offset int, limit int, RouteParameters_ []byte, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and p6 = ?", RouteParameters_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndP7 Get MenuTrees via RouteParametersAndEnabledAndP7
func GetMenuTreesByRouteParametersAndEnabledAndP7(offset int, limit int, RouteParameters_ []byte, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and p7 = ?", RouteParameters_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndP8 Get MenuTrees via RouteParametersAndEnabledAndP8
func GetMenuTreesByRouteParametersAndEnabledAndP8(offset int, limit int, RouteParameters_ []byte, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and p8 = ?", RouteParameters_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndP9 Get MenuTrees via RouteParametersAndEnabledAndP9
func GetMenuTreesByRouteParametersAndEnabledAndP9(offset int, limit int, RouteParameters_ []byte, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and p9 = ?", RouteParameters_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabledAndFormClass Get MenuTrees via RouteParametersAndEnabledAndFormClass
func GetMenuTreesByRouteParametersAndEnabledAndFormClass(offset int, limit int, RouteParameters_ []byte, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ? and form_class = ?", RouteParameters_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndExpanded Get MenuTrees via RouteParametersAndDiscoveredAndExpanded
func GetMenuTreesByRouteParametersAndDiscoveredAndExpanded(offset int, limit int, RouteParameters_ []byte, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and expanded = ?", RouteParameters_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndWeight Get MenuTrees via RouteParametersAndDiscoveredAndWeight
func GetMenuTreesByRouteParametersAndDiscoveredAndWeight(offset int, limit int, RouteParameters_ []byte, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and weight = ?", RouteParameters_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndMetadata Get MenuTrees via RouteParametersAndDiscoveredAndMetadata
func GetMenuTreesByRouteParametersAndDiscoveredAndMetadata(offset int, limit int, RouteParameters_ []byte, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and metadata = ?", RouteParameters_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndHasChildren Get MenuTrees via RouteParametersAndDiscoveredAndHasChildren
func GetMenuTreesByRouteParametersAndDiscoveredAndHasChildren(offset int, limit int, RouteParameters_ []byte, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and has_children = ?", RouteParameters_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndDepth Get MenuTrees via RouteParametersAndDiscoveredAndDepth
func GetMenuTreesByRouteParametersAndDiscoveredAndDepth(offset int, limit int, RouteParameters_ []byte, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and depth = ?", RouteParameters_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndP1 Get MenuTrees via RouteParametersAndDiscoveredAndP1
func GetMenuTreesByRouteParametersAndDiscoveredAndP1(offset int, limit int, RouteParameters_ []byte, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and p1 = ?", RouteParameters_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndP2 Get MenuTrees via RouteParametersAndDiscoveredAndP2
func GetMenuTreesByRouteParametersAndDiscoveredAndP2(offset int, limit int, RouteParameters_ []byte, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and p2 = ?", RouteParameters_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndP3 Get MenuTrees via RouteParametersAndDiscoveredAndP3
func GetMenuTreesByRouteParametersAndDiscoveredAndP3(offset int, limit int, RouteParameters_ []byte, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and p3 = ?", RouteParameters_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndP4 Get MenuTrees via RouteParametersAndDiscoveredAndP4
func GetMenuTreesByRouteParametersAndDiscoveredAndP4(offset int, limit int, RouteParameters_ []byte, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and p4 = ?", RouteParameters_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndP5 Get MenuTrees via RouteParametersAndDiscoveredAndP5
func GetMenuTreesByRouteParametersAndDiscoveredAndP5(offset int, limit int, RouteParameters_ []byte, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and p5 = ?", RouteParameters_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndP6 Get MenuTrees via RouteParametersAndDiscoveredAndP6
func GetMenuTreesByRouteParametersAndDiscoveredAndP6(offset int, limit int, RouteParameters_ []byte, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and p6 = ?", RouteParameters_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndP7 Get MenuTrees via RouteParametersAndDiscoveredAndP7
func GetMenuTreesByRouteParametersAndDiscoveredAndP7(offset int, limit int, RouteParameters_ []byte, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and p7 = ?", RouteParameters_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndP8 Get MenuTrees via RouteParametersAndDiscoveredAndP8
func GetMenuTreesByRouteParametersAndDiscoveredAndP8(offset int, limit int, RouteParameters_ []byte, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and p8 = ?", RouteParameters_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndP9 Get MenuTrees via RouteParametersAndDiscoveredAndP9
func GetMenuTreesByRouteParametersAndDiscoveredAndP9(offset int, limit int, RouteParameters_ []byte, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and p9 = ?", RouteParameters_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscoveredAndFormClass Get MenuTrees via RouteParametersAndDiscoveredAndFormClass
func GetMenuTreesByRouteParametersAndDiscoveredAndFormClass(offset int, limit int, RouteParameters_ []byte, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ? and form_class = ?", RouteParameters_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndWeight Get MenuTrees via RouteParametersAndExpandedAndWeight
func GetMenuTreesByRouteParametersAndExpandedAndWeight(offset int, limit int, RouteParameters_ []byte, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and weight = ?", RouteParameters_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndMetadata Get MenuTrees via RouteParametersAndExpandedAndMetadata
func GetMenuTreesByRouteParametersAndExpandedAndMetadata(offset int, limit int, RouteParameters_ []byte, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and metadata = ?", RouteParameters_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndHasChildren Get MenuTrees via RouteParametersAndExpandedAndHasChildren
func GetMenuTreesByRouteParametersAndExpandedAndHasChildren(offset int, limit int, RouteParameters_ []byte, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and has_children = ?", RouteParameters_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndDepth Get MenuTrees via RouteParametersAndExpandedAndDepth
func GetMenuTreesByRouteParametersAndExpandedAndDepth(offset int, limit int, RouteParameters_ []byte, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and depth = ?", RouteParameters_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndP1 Get MenuTrees via RouteParametersAndExpandedAndP1
func GetMenuTreesByRouteParametersAndExpandedAndP1(offset int, limit int, RouteParameters_ []byte, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and p1 = ?", RouteParameters_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndP2 Get MenuTrees via RouteParametersAndExpandedAndP2
func GetMenuTreesByRouteParametersAndExpandedAndP2(offset int, limit int, RouteParameters_ []byte, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and p2 = ?", RouteParameters_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndP3 Get MenuTrees via RouteParametersAndExpandedAndP3
func GetMenuTreesByRouteParametersAndExpandedAndP3(offset int, limit int, RouteParameters_ []byte, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and p3 = ?", RouteParameters_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndP4 Get MenuTrees via RouteParametersAndExpandedAndP4
func GetMenuTreesByRouteParametersAndExpandedAndP4(offset int, limit int, RouteParameters_ []byte, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and p4 = ?", RouteParameters_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndP5 Get MenuTrees via RouteParametersAndExpandedAndP5
func GetMenuTreesByRouteParametersAndExpandedAndP5(offset int, limit int, RouteParameters_ []byte, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and p5 = ?", RouteParameters_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndP6 Get MenuTrees via RouteParametersAndExpandedAndP6
func GetMenuTreesByRouteParametersAndExpandedAndP6(offset int, limit int, RouteParameters_ []byte, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and p6 = ?", RouteParameters_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndP7 Get MenuTrees via RouteParametersAndExpandedAndP7
func GetMenuTreesByRouteParametersAndExpandedAndP7(offset int, limit int, RouteParameters_ []byte, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and p7 = ?", RouteParameters_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndP8 Get MenuTrees via RouteParametersAndExpandedAndP8
func GetMenuTreesByRouteParametersAndExpandedAndP8(offset int, limit int, RouteParameters_ []byte, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and p8 = ?", RouteParameters_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndP9 Get MenuTrees via RouteParametersAndExpandedAndP9
func GetMenuTreesByRouteParametersAndExpandedAndP9(offset int, limit int, RouteParameters_ []byte, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and p9 = ?", RouteParameters_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpandedAndFormClass Get MenuTrees via RouteParametersAndExpandedAndFormClass
func GetMenuTreesByRouteParametersAndExpandedAndFormClass(offset int, limit int, RouteParameters_ []byte, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ? and form_class = ?", RouteParameters_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndMetadata Get MenuTrees via RouteParametersAndWeightAndMetadata
func GetMenuTreesByRouteParametersAndWeightAndMetadata(offset int, limit int, RouteParameters_ []byte, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and metadata = ?", RouteParameters_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndHasChildren Get MenuTrees via RouteParametersAndWeightAndHasChildren
func GetMenuTreesByRouteParametersAndWeightAndHasChildren(offset int, limit int, RouteParameters_ []byte, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and has_children = ?", RouteParameters_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndDepth Get MenuTrees via RouteParametersAndWeightAndDepth
func GetMenuTreesByRouteParametersAndWeightAndDepth(offset int, limit int, RouteParameters_ []byte, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and depth = ?", RouteParameters_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndP1 Get MenuTrees via RouteParametersAndWeightAndP1
func GetMenuTreesByRouteParametersAndWeightAndP1(offset int, limit int, RouteParameters_ []byte, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and p1 = ?", RouteParameters_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndP2 Get MenuTrees via RouteParametersAndWeightAndP2
func GetMenuTreesByRouteParametersAndWeightAndP2(offset int, limit int, RouteParameters_ []byte, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and p2 = ?", RouteParameters_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndP3 Get MenuTrees via RouteParametersAndWeightAndP3
func GetMenuTreesByRouteParametersAndWeightAndP3(offset int, limit int, RouteParameters_ []byte, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and p3 = ?", RouteParameters_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndP4 Get MenuTrees via RouteParametersAndWeightAndP4
func GetMenuTreesByRouteParametersAndWeightAndP4(offset int, limit int, RouteParameters_ []byte, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and p4 = ?", RouteParameters_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndP5 Get MenuTrees via RouteParametersAndWeightAndP5
func GetMenuTreesByRouteParametersAndWeightAndP5(offset int, limit int, RouteParameters_ []byte, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and p5 = ?", RouteParameters_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndP6 Get MenuTrees via RouteParametersAndWeightAndP6
func GetMenuTreesByRouteParametersAndWeightAndP6(offset int, limit int, RouteParameters_ []byte, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and p6 = ?", RouteParameters_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndP7 Get MenuTrees via RouteParametersAndWeightAndP7
func GetMenuTreesByRouteParametersAndWeightAndP7(offset int, limit int, RouteParameters_ []byte, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and p7 = ?", RouteParameters_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndP8 Get MenuTrees via RouteParametersAndWeightAndP8
func GetMenuTreesByRouteParametersAndWeightAndP8(offset int, limit int, RouteParameters_ []byte, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and p8 = ?", RouteParameters_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndP9 Get MenuTrees via RouteParametersAndWeightAndP9
func GetMenuTreesByRouteParametersAndWeightAndP9(offset int, limit int, RouteParameters_ []byte, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and p9 = ?", RouteParameters_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeightAndFormClass Get MenuTrees via RouteParametersAndWeightAndFormClass
func GetMenuTreesByRouteParametersAndWeightAndFormClass(offset int, limit int, RouteParameters_ []byte, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ? and form_class = ?", RouteParameters_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndHasChildren Get MenuTrees via RouteParametersAndMetadataAndHasChildren
func GetMenuTreesByRouteParametersAndMetadataAndHasChildren(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and has_children = ?", RouteParameters_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndDepth Get MenuTrees via RouteParametersAndMetadataAndDepth
func GetMenuTreesByRouteParametersAndMetadataAndDepth(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and depth = ?", RouteParameters_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndP1 Get MenuTrees via RouteParametersAndMetadataAndP1
func GetMenuTreesByRouteParametersAndMetadataAndP1(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and p1 = ?", RouteParameters_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndP2 Get MenuTrees via RouteParametersAndMetadataAndP2
func GetMenuTreesByRouteParametersAndMetadataAndP2(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and p2 = ?", RouteParameters_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndP3 Get MenuTrees via RouteParametersAndMetadataAndP3
func GetMenuTreesByRouteParametersAndMetadataAndP3(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and p3 = ?", RouteParameters_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndP4 Get MenuTrees via RouteParametersAndMetadataAndP4
func GetMenuTreesByRouteParametersAndMetadataAndP4(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and p4 = ?", RouteParameters_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndP5 Get MenuTrees via RouteParametersAndMetadataAndP5
func GetMenuTreesByRouteParametersAndMetadataAndP5(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and p5 = ?", RouteParameters_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndP6 Get MenuTrees via RouteParametersAndMetadataAndP6
func GetMenuTreesByRouteParametersAndMetadataAndP6(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and p6 = ?", RouteParameters_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndP7 Get MenuTrees via RouteParametersAndMetadataAndP7
func GetMenuTreesByRouteParametersAndMetadataAndP7(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and p7 = ?", RouteParameters_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndP8 Get MenuTrees via RouteParametersAndMetadataAndP8
func GetMenuTreesByRouteParametersAndMetadataAndP8(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and p8 = ?", RouteParameters_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndP9 Get MenuTrees via RouteParametersAndMetadataAndP9
func GetMenuTreesByRouteParametersAndMetadataAndP9(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and p9 = ?", RouteParameters_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadataAndFormClass Get MenuTrees via RouteParametersAndMetadataAndFormClass
func GetMenuTreesByRouteParametersAndMetadataAndFormClass(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ? and form_class = ?", RouteParameters_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndDepth Get MenuTrees via RouteParametersAndHasChildrenAndDepth
func GetMenuTreesByRouteParametersAndHasChildrenAndDepth(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and depth = ?", RouteParameters_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndP1 Get MenuTrees via RouteParametersAndHasChildrenAndP1
func GetMenuTreesByRouteParametersAndHasChildrenAndP1(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and p1 = ?", RouteParameters_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndP2 Get MenuTrees via RouteParametersAndHasChildrenAndP2
func GetMenuTreesByRouteParametersAndHasChildrenAndP2(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and p2 = ?", RouteParameters_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndP3 Get MenuTrees via RouteParametersAndHasChildrenAndP3
func GetMenuTreesByRouteParametersAndHasChildrenAndP3(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and p3 = ?", RouteParameters_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndP4 Get MenuTrees via RouteParametersAndHasChildrenAndP4
func GetMenuTreesByRouteParametersAndHasChildrenAndP4(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and p4 = ?", RouteParameters_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndP5 Get MenuTrees via RouteParametersAndHasChildrenAndP5
func GetMenuTreesByRouteParametersAndHasChildrenAndP5(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and p5 = ?", RouteParameters_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndP6 Get MenuTrees via RouteParametersAndHasChildrenAndP6
func GetMenuTreesByRouteParametersAndHasChildrenAndP6(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and p6 = ?", RouteParameters_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndP7 Get MenuTrees via RouteParametersAndHasChildrenAndP7
func GetMenuTreesByRouteParametersAndHasChildrenAndP7(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and p7 = ?", RouteParameters_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndP8 Get MenuTrees via RouteParametersAndHasChildrenAndP8
func GetMenuTreesByRouteParametersAndHasChildrenAndP8(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and p8 = ?", RouteParameters_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndP9 Get MenuTrees via RouteParametersAndHasChildrenAndP9
func GetMenuTreesByRouteParametersAndHasChildrenAndP9(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and p9 = ?", RouteParameters_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildrenAndFormClass Get MenuTrees via RouteParametersAndHasChildrenAndFormClass
func GetMenuTreesByRouteParametersAndHasChildrenAndFormClass(offset int, limit int, RouteParameters_ []byte, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ? and form_class = ?", RouteParameters_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepthAndP1 Get MenuTrees via RouteParametersAndDepthAndP1
func GetMenuTreesByRouteParametersAndDepthAndP1(offset int, limit int, RouteParameters_ []byte, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ? and p1 = ?", RouteParameters_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepthAndP2 Get MenuTrees via RouteParametersAndDepthAndP2
func GetMenuTreesByRouteParametersAndDepthAndP2(offset int, limit int, RouteParameters_ []byte, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ? and p2 = ?", RouteParameters_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepthAndP3 Get MenuTrees via RouteParametersAndDepthAndP3
func GetMenuTreesByRouteParametersAndDepthAndP3(offset int, limit int, RouteParameters_ []byte, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ? and p3 = ?", RouteParameters_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepthAndP4 Get MenuTrees via RouteParametersAndDepthAndP4
func GetMenuTreesByRouteParametersAndDepthAndP4(offset int, limit int, RouteParameters_ []byte, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ? and p4 = ?", RouteParameters_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepthAndP5 Get MenuTrees via RouteParametersAndDepthAndP5
func GetMenuTreesByRouteParametersAndDepthAndP5(offset int, limit int, RouteParameters_ []byte, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ? and p5 = ?", RouteParameters_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepthAndP6 Get MenuTrees via RouteParametersAndDepthAndP6
func GetMenuTreesByRouteParametersAndDepthAndP6(offset int, limit int, RouteParameters_ []byte, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ? and p6 = ?", RouteParameters_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepthAndP7 Get MenuTrees via RouteParametersAndDepthAndP7
func GetMenuTreesByRouteParametersAndDepthAndP7(offset int, limit int, RouteParameters_ []byte, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ? and p7 = ?", RouteParameters_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepthAndP8 Get MenuTrees via RouteParametersAndDepthAndP8
func GetMenuTreesByRouteParametersAndDepthAndP8(offset int, limit int, RouteParameters_ []byte, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ? and p8 = ?", RouteParameters_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepthAndP9 Get MenuTrees via RouteParametersAndDepthAndP9
func GetMenuTreesByRouteParametersAndDepthAndP9(offset int, limit int, RouteParameters_ []byte, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ? and p9 = ?", RouteParameters_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepthAndFormClass Get MenuTrees via RouteParametersAndDepthAndFormClass
func GetMenuTreesByRouteParametersAndDepthAndFormClass(offset int, limit int, RouteParameters_ []byte, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ? and form_class = ?", RouteParameters_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP1AndP2 Get MenuTrees via RouteParametersAndP1AndP2
func GetMenuTreesByRouteParametersAndP1AndP2(offset int, limit int, RouteParameters_ []byte, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p1 = ? and p2 = ?", RouteParameters_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP1AndP3 Get MenuTrees via RouteParametersAndP1AndP3
func GetMenuTreesByRouteParametersAndP1AndP3(offset int, limit int, RouteParameters_ []byte, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p1 = ? and p3 = ?", RouteParameters_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP1AndP4 Get MenuTrees via RouteParametersAndP1AndP4
func GetMenuTreesByRouteParametersAndP1AndP4(offset int, limit int, RouteParameters_ []byte, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p1 = ? and p4 = ?", RouteParameters_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP1AndP5 Get MenuTrees via RouteParametersAndP1AndP5
func GetMenuTreesByRouteParametersAndP1AndP5(offset int, limit int, RouteParameters_ []byte, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p1 = ? and p5 = ?", RouteParameters_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP1AndP6 Get MenuTrees via RouteParametersAndP1AndP6
func GetMenuTreesByRouteParametersAndP1AndP6(offset int, limit int, RouteParameters_ []byte, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p1 = ? and p6 = ?", RouteParameters_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP1AndP7 Get MenuTrees via RouteParametersAndP1AndP7
func GetMenuTreesByRouteParametersAndP1AndP7(offset int, limit int, RouteParameters_ []byte, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p1 = ? and p7 = ?", RouteParameters_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP1AndP8 Get MenuTrees via RouteParametersAndP1AndP8
func GetMenuTreesByRouteParametersAndP1AndP8(offset int, limit int, RouteParameters_ []byte, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p1 = ? and p8 = ?", RouteParameters_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP1AndP9 Get MenuTrees via RouteParametersAndP1AndP9
func GetMenuTreesByRouteParametersAndP1AndP9(offset int, limit int, RouteParameters_ []byte, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p1 = ? and p9 = ?", RouteParameters_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP1AndFormClass Get MenuTrees via RouteParametersAndP1AndFormClass
func GetMenuTreesByRouteParametersAndP1AndFormClass(offset int, limit int, RouteParameters_ []byte, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p1 = ? and form_class = ?", RouteParameters_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP2AndP3 Get MenuTrees via RouteParametersAndP2AndP3
func GetMenuTreesByRouteParametersAndP2AndP3(offset int, limit int, RouteParameters_ []byte, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p2 = ? and p3 = ?", RouteParameters_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP2AndP4 Get MenuTrees via RouteParametersAndP2AndP4
func GetMenuTreesByRouteParametersAndP2AndP4(offset int, limit int, RouteParameters_ []byte, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p2 = ? and p4 = ?", RouteParameters_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP2AndP5 Get MenuTrees via RouteParametersAndP2AndP5
func GetMenuTreesByRouteParametersAndP2AndP5(offset int, limit int, RouteParameters_ []byte, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p2 = ? and p5 = ?", RouteParameters_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP2AndP6 Get MenuTrees via RouteParametersAndP2AndP6
func GetMenuTreesByRouteParametersAndP2AndP6(offset int, limit int, RouteParameters_ []byte, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p2 = ? and p6 = ?", RouteParameters_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP2AndP7 Get MenuTrees via RouteParametersAndP2AndP7
func GetMenuTreesByRouteParametersAndP2AndP7(offset int, limit int, RouteParameters_ []byte, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p2 = ? and p7 = ?", RouteParameters_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP2AndP8 Get MenuTrees via RouteParametersAndP2AndP8
func GetMenuTreesByRouteParametersAndP2AndP8(offset int, limit int, RouteParameters_ []byte, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p2 = ? and p8 = ?", RouteParameters_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP2AndP9 Get MenuTrees via RouteParametersAndP2AndP9
func GetMenuTreesByRouteParametersAndP2AndP9(offset int, limit int, RouteParameters_ []byte, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p2 = ? and p9 = ?", RouteParameters_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP2AndFormClass Get MenuTrees via RouteParametersAndP2AndFormClass
func GetMenuTreesByRouteParametersAndP2AndFormClass(offset int, limit int, RouteParameters_ []byte, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p2 = ? and form_class = ?", RouteParameters_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP3AndP4 Get MenuTrees via RouteParametersAndP3AndP4
func GetMenuTreesByRouteParametersAndP3AndP4(offset int, limit int, RouteParameters_ []byte, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p3 = ? and p4 = ?", RouteParameters_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP3AndP5 Get MenuTrees via RouteParametersAndP3AndP5
func GetMenuTreesByRouteParametersAndP3AndP5(offset int, limit int, RouteParameters_ []byte, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p3 = ? and p5 = ?", RouteParameters_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP3AndP6 Get MenuTrees via RouteParametersAndP3AndP6
func GetMenuTreesByRouteParametersAndP3AndP6(offset int, limit int, RouteParameters_ []byte, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p3 = ? and p6 = ?", RouteParameters_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP3AndP7 Get MenuTrees via RouteParametersAndP3AndP7
func GetMenuTreesByRouteParametersAndP3AndP7(offset int, limit int, RouteParameters_ []byte, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p3 = ? and p7 = ?", RouteParameters_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP3AndP8 Get MenuTrees via RouteParametersAndP3AndP8
func GetMenuTreesByRouteParametersAndP3AndP8(offset int, limit int, RouteParameters_ []byte, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p3 = ? and p8 = ?", RouteParameters_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP3AndP9 Get MenuTrees via RouteParametersAndP3AndP9
func GetMenuTreesByRouteParametersAndP3AndP9(offset int, limit int, RouteParameters_ []byte, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p3 = ? and p9 = ?", RouteParameters_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP3AndFormClass Get MenuTrees via RouteParametersAndP3AndFormClass
func GetMenuTreesByRouteParametersAndP3AndFormClass(offset int, limit int, RouteParameters_ []byte, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p3 = ? and form_class = ?", RouteParameters_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP4AndP5 Get MenuTrees via RouteParametersAndP4AndP5
func GetMenuTreesByRouteParametersAndP4AndP5(offset int, limit int, RouteParameters_ []byte, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p4 = ? and p5 = ?", RouteParameters_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP4AndP6 Get MenuTrees via RouteParametersAndP4AndP6
func GetMenuTreesByRouteParametersAndP4AndP6(offset int, limit int, RouteParameters_ []byte, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p4 = ? and p6 = ?", RouteParameters_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP4AndP7 Get MenuTrees via RouteParametersAndP4AndP7
func GetMenuTreesByRouteParametersAndP4AndP7(offset int, limit int, RouteParameters_ []byte, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p4 = ? and p7 = ?", RouteParameters_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP4AndP8 Get MenuTrees via RouteParametersAndP4AndP8
func GetMenuTreesByRouteParametersAndP4AndP8(offset int, limit int, RouteParameters_ []byte, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p4 = ? and p8 = ?", RouteParameters_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP4AndP9 Get MenuTrees via RouteParametersAndP4AndP9
func GetMenuTreesByRouteParametersAndP4AndP9(offset int, limit int, RouteParameters_ []byte, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p4 = ? and p9 = ?", RouteParameters_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP4AndFormClass Get MenuTrees via RouteParametersAndP4AndFormClass
func GetMenuTreesByRouteParametersAndP4AndFormClass(offset int, limit int, RouteParameters_ []byte, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p4 = ? and form_class = ?", RouteParameters_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP5AndP6 Get MenuTrees via RouteParametersAndP5AndP6
func GetMenuTreesByRouteParametersAndP5AndP6(offset int, limit int, RouteParameters_ []byte, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p5 = ? and p6 = ?", RouteParameters_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP5AndP7 Get MenuTrees via RouteParametersAndP5AndP7
func GetMenuTreesByRouteParametersAndP5AndP7(offset int, limit int, RouteParameters_ []byte, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p5 = ? and p7 = ?", RouteParameters_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP5AndP8 Get MenuTrees via RouteParametersAndP5AndP8
func GetMenuTreesByRouteParametersAndP5AndP8(offset int, limit int, RouteParameters_ []byte, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p5 = ? and p8 = ?", RouteParameters_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP5AndP9 Get MenuTrees via RouteParametersAndP5AndP9
func GetMenuTreesByRouteParametersAndP5AndP9(offset int, limit int, RouteParameters_ []byte, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p5 = ? and p9 = ?", RouteParameters_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP5AndFormClass Get MenuTrees via RouteParametersAndP5AndFormClass
func GetMenuTreesByRouteParametersAndP5AndFormClass(offset int, limit int, RouteParameters_ []byte, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p5 = ? and form_class = ?", RouteParameters_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP6AndP7 Get MenuTrees via RouteParametersAndP6AndP7
func GetMenuTreesByRouteParametersAndP6AndP7(offset int, limit int, RouteParameters_ []byte, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p6 = ? and p7 = ?", RouteParameters_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP6AndP8 Get MenuTrees via RouteParametersAndP6AndP8
func GetMenuTreesByRouteParametersAndP6AndP8(offset int, limit int, RouteParameters_ []byte, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p6 = ? and p8 = ?", RouteParameters_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP6AndP9 Get MenuTrees via RouteParametersAndP6AndP9
func GetMenuTreesByRouteParametersAndP6AndP9(offset int, limit int, RouteParameters_ []byte, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p6 = ? and p9 = ?", RouteParameters_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP6AndFormClass Get MenuTrees via RouteParametersAndP6AndFormClass
func GetMenuTreesByRouteParametersAndP6AndFormClass(offset int, limit int, RouteParameters_ []byte, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p6 = ? and form_class = ?", RouteParameters_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP7AndP8 Get MenuTrees via RouteParametersAndP7AndP8
func GetMenuTreesByRouteParametersAndP7AndP8(offset int, limit int, RouteParameters_ []byte, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p7 = ? and p8 = ?", RouteParameters_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP7AndP9 Get MenuTrees via RouteParametersAndP7AndP9
func GetMenuTreesByRouteParametersAndP7AndP9(offset int, limit int, RouteParameters_ []byte, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p7 = ? and p9 = ?", RouteParameters_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP7AndFormClass Get MenuTrees via RouteParametersAndP7AndFormClass
func GetMenuTreesByRouteParametersAndP7AndFormClass(offset int, limit int, RouteParameters_ []byte, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p7 = ? and form_class = ?", RouteParameters_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP8AndP9 Get MenuTrees via RouteParametersAndP8AndP9
func GetMenuTreesByRouteParametersAndP8AndP9(offset int, limit int, RouteParameters_ []byte, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p8 = ? and p9 = ?", RouteParameters_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP8AndFormClass Get MenuTrees via RouteParametersAndP8AndFormClass
func GetMenuTreesByRouteParametersAndP8AndFormClass(offset int, limit int, RouteParameters_ []byte, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p8 = ? and form_class = ?", RouteParameters_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP9AndFormClass Get MenuTrees via RouteParametersAndP9AndFormClass
func GetMenuTreesByRouteParametersAndP9AndFormClass(offset int, limit int, RouteParameters_ []byte, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p9 = ? and form_class = ?", RouteParameters_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndDescription Get MenuTrees via UrlAndTitleAndDescription
func GetMenuTreesByUrlAndTitleAndDescription(offset int, limit int, Url_ string, Title_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and description = ?", Url_, Title_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndClass Get MenuTrees via UrlAndTitleAndClass
func GetMenuTreesByUrlAndTitleAndClass(offset int, limit int, Url_ string, Title_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and class = ?", Url_, Title_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndOptions Get MenuTrees via UrlAndTitleAndOptions
func GetMenuTreesByUrlAndTitleAndOptions(offset int, limit int, Url_ string, Title_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and options = ?", Url_, Title_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndProvider Get MenuTrees via UrlAndTitleAndProvider
func GetMenuTreesByUrlAndTitleAndProvider(offset int, limit int, Url_ string, Title_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and provider = ?", Url_, Title_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndEnabled Get MenuTrees via UrlAndTitleAndEnabled
func GetMenuTreesByUrlAndTitleAndEnabled(offset int, limit int, Url_ string, Title_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and enabled = ?", Url_, Title_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndDiscovered Get MenuTrees via UrlAndTitleAndDiscovered
func GetMenuTreesByUrlAndTitleAndDiscovered(offset int, limit int, Url_ string, Title_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and discovered = ?", Url_, Title_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndExpanded Get MenuTrees via UrlAndTitleAndExpanded
func GetMenuTreesByUrlAndTitleAndExpanded(offset int, limit int, Url_ string, Title_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and expanded = ?", Url_, Title_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndWeight Get MenuTrees via UrlAndTitleAndWeight
func GetMenuTreesByUrlAndTitleAndWeight(offset int, limit int, Url_ string, Title_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and weight = ?", Url_, Title_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndMetadata Get MenuTrees via UrlAndTitleAndMetadata
func GetMenuTreesByUrlAndTitleAndMetadata(offset int, limit int, Url_ string, Title_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and metadata = ?", Url_, Title_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndHasChildren Get MenuTrees via UrlAndTitleAndHasChildren
func GetMenuTreesByUrlAndTitleAndHasChildren(offset int, limit int, Url_ string, Title_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and has_children = ?", Url_, Title_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndDepth Get MenuTrees via UrlAndTitleAndDepth
func GetMenuTreesByUrlAndTitleAndDepth(offset int, limit int, Url_ string, Title_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and depth = ?", Url_, Title_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndP1 Get MenuTrees via UrlAndTitleAndP1
func GetMenuTreesByUrlAndTitleAndP1(offset int, limit int, Url_ string, Title_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and p1 = ?", Url_, Title_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndP2 Get MenuTrees via UrlAndTitleAndP2
func GetMenuTreesByUrlAndTitleAndP2(offset int, limit int, Url_ string, Title_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and p2 = ?", Url_, Title_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndP3 Get MenuTrees via UrlAndTitleAndP3
func GetMenuTreesByUrlAndTitleAndP3(offset int, limit int, Url_ string, Title_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and p3 = ?", Url_, Title_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndP4 Get MenuTrees via UrlAndTitleAndP4
func GetMenuTreesByUrlAndTitleAndP4(offset int, limit int, Url_ string, Title_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and p4 = ?", Url_, Title_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndP5 Get MenuTrees via UrlAndTitleAndP5
func GetMenuTreesByUrlAndTitleAndP5(offset int, limit int, Url_ string, Title_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and p5 = ?", Url_, Title_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndP6 Get MenuTrees via UrlAndTitleAndP6
func GetMenuTreesByUrlAndTitleAndP6(offset int, limit int, Url_ string, Title_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and p6 = ?", Url_, Title_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndP7 Get MenuTrees via UrlAndTitleAndP7
func GetMenuTreesByUrlAndTitleAndP7(offset int, limit int, Url_ string, Title_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and p7 = ?", Url_, Title_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndP8 Get MenuTrees via UrlAndTitleAndP8
func GetMenuTreesByUrlAndTitleAndP8(offset int, limit int, Url_ string, Title_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and p8 = ?", Url_, Title_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndP9 Get MenuTrees via UrlAndTitleAndP9
func GetMenuTreesByUrlAndTitleAndP9(offset int, limit int, Url_ string, Title_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and p9 = ?", Url_, Title_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitleAndFormClass Get MenuTrees via UrlAndTitleAndFormClass
func GetMenuTreesByUrlAndTitleAndFormClass(offset int, limit int, Url_ string, Title_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ? and form_class = ?", Url_, Title_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndClass Get MenuTrees via UrlAndDescriptionAndClass
func GetMenuTreesByUrlAndDescriptionAndClass(offset int, limit int, Url_ string, Description_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and class = ?", Url_, Description_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndOptions Get MenuTrees via UrlAndDescriptionAndOptions
func GetMenuTreesByUrlAndDescriptionAndOptions(offset int, limit int, Url_ string, Description_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and options = ?", Url_, Description_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndProvider Get MenuTrees via UrlAndDescriptionAndProvider
func GetMenuTreesByUrlAndDescriptionAndProvider(offset int, limit int, Url_ string, Description_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and provider = ?", Url_, Description_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndEnabled Get MenuTrees via UrlAndDescriptionAndEnabled
func GetMenuTreesByUrlAndDescriptionAndEnabled(offset int, limit int, Url_ string, Description_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and enabled = ?", Url_, Description_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndDiscovered Get MenuTrees via UrlAndDescriptionAndDiscovered
func GetMenuTreesByUrlAndDescriptionAndDiscovered(offset int, limit int, Url_ string, Description_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and discovered = ?", Url_, Description_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndExpanded Get MenuTrees via UrlAndDescriptionAndExpanded
func GetMenuTreesByUrlAndDescriptionAndExpanded(offset int, limit int, Url_ string, Description_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and expanded = ?", Url_, Description_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndWeight Get MenuTrees via UrlAndDescriptionAndWeight
func GetMenuTreesByUrlAndDescriptionAndWeight(offset int, limit int, Url_ string, Description_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and weight = ?", Url_, Description_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndMetadata Get MenuTrees via UrlAndDescriptionAndMetadata
func GetMenuTreesByUrlAndDescriptionAndMetadata(offset int, limit int, Url_ string, Description_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and metadata = ?", Url_, Description_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndHasChildren Get MenuTrees via UrlAndDescriptionAndHasChildren
func GetMenuTreesByUrlAndDescriptionAndHasChildren(offset int, limit int, Url_ string, Description_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and has_children = ?", Url_, Description_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndDepth Get MenuTrees via UrlAndDescriptionAndDepth
func GetMenuTreesByUrlAndDescriptionAndDepth(offset int, limit int, Url_ string, Description_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and depth = ?", Url_, Description_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndP1 Get MenuTrees via UrlAndDescriptionAndP1
func GetMenuTreesByUrlAndDescriptionAndP1(offset int, limit int, Url_ string, Description_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and p1 = ?", Url_, Description_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndP2 Get MenuTrees via UrlAndDescriptionAndP2
func GetMenuTreesByUrlAndDescriptionAndP2(offset int, limit int, Url_ string, Description_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and p2 = ?", Url_, Description_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndP3 Get MenuTrees via UrlAndDescriptionAndP3
func GetMenuTreesByUrlAndDescriptionAndP3(offset int, limit int, Url_ string, Description_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and p3 = ?", Url_, Description_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndP4 Get MenuTrees via UrlAndDescriptionAndP4
func GetMenuTreesByUrlAndDescriptionAndP4(offset int, limit int, Url_ string, Description_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and p4 = ?", Url_, Description_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndP5 Get MenuTrees via UrlAndDescriptionAndP5
func GetMenuTreesByUrlAndDescriptionAndP5(offset int, limit int, Url_ string, Description_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and p5 = ?", Url_, Description_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndP6 Get MenuTrees via UrlAndDescriptionAndP6
func GetMenuTreesByUrlAndDescriptionAndP6(offset int, limit int, Url_ string, Description_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and p6 = ?", Url_, Description_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndP7 Get MenuTrees via UrlAndDescriptionAndP7
func GetMenuTreesByUrlAndDescriptionAndP7(offset int, limit int, Url_ string, Description_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and p7 = ?", Url_, Description_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndP8 Get MenuTrees via UrlAndDescriptionAndP8
func GetMenuTreesByUrlAndDescriptionAndP8(offset int, limit int, Url_ string, Description_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and p8 = ?", Url_, Description_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndP9 Get MenuTrees via UrlAndDescriptionAndP9
func GetMenuTreesByUrlAndDescriptionAndP9(offset int, limit int, Url_ string, Description_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and p9 = ?", Url_, Description_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescriptionAndFormClass Get MenuTrees via UrlAndDescriptionAndFormClass
func GetMenuTreesByUrlAndDescriptionAndFormClass(offset int, limit int, Url_ string, Description_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ? and form_class = ?", Url_, Description_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndOptions Get MenuTrees via UrlAndClassAndOptions
func GetMenuTreesByUrlAndClassAndOptions(offset int, limit int, Url_ string, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and options = ?", Url_, Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndProvider Get MenuTrees via UrlAndClassAndProvider
func GetMenuTreesByUrlAndClassAndProvider(offset int, limit int, Url_ string, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and provider = ?", Url_, Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndEnabled Get MenuTrees via UrlAndClassAndEnabled
func GetMenuTreesByUrlAndClassAndEnabled(offset int, limit int, Url_ string, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and enabled = ?", Url_, Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndDiscovered Get MenuTrees via UrlAndClassAndDiscovered
func GetMenuTreesByUrlAndClassAndDiscovered(offset int, limit int, Url_ string, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and discovered = ?", Url_, Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndExpanded Get MenuTrees via UrlAndClassAndExpanded
func GetMenuTreesByUrlAndClassAndExpanded(offset int, limit int, Url_ string, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and expanded = ?", Url_, Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndWeight Get MenuTrees via UrlAndClassAndWeight
func GetMenuTreesByUrlAndClassAndWeight(offset int, limit int, Url_ string, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and weight = ?", Url_, Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndMetadata Get MenuTrees via UrlAndClassAndMetadata
func GetMenuTreesByUrlAndClassAndMetadata(offset int, limit int, Url_ string, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and metadata = ?", Url_, Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndHasChildren Get MenuTrees via UrlAndClassAndHasChildren
func GetMenuTreesByUrlAndClassAndHasChildren(offset int, limit int, Url_ string, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and has_children = ?", Url_, Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndDepth Get MenuTrees via UrlAndClassAndDepth
func GetMenuTreesByUrlAndClassAndDepth(offset int, limit int, Url_ string, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and depth = ?", Url_, Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndP1 Get MenuTrees via UrlAndClassAndP1
func GetMenuTreesByUrlAndClassAndP1(offset int, limit int, Url_ string, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and p1 = ?", Url_, Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndP2 Get MenuTrees via UrlAndClassAndP2
func GetMenuTreesByUrlAndClassAndP2(offset int, limit int, Url_ string, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and p2 = ?", Url_, Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndP3 Get MenuTrees via UrlAndClassAndP3
func GetMenuTreesByUrlAndClassAndP3(offset int, limit int, Url_ string, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and p3 = ?", Url_, Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndP4 Get MenuTrees via UrlAndClassAndP4
func GetMenuTreesByUrlAndClassAndP4(offset int, limit int, Url_ string, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and p4 = ?", Url_, Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndP5 Get MenuTrees via UrlAndClassAndP5
func GetMenuTreesByUrlAndClassAndP5(offset int, limit int, Url_ string, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and p5 = ?", Url_, Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndP6 Get MenuTrees via UrlAndClassAndP6
func GetMenuTreesByUrlAndClassAndP6(offset int, limit int, Url_ string, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and p6 = ?", Url_, Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndP7 Get MenuTrees via UrlAndClassAndP7
func GetMenuTreesByUrlAndClassAndP7(offset int, limit int, Url_ string, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and p7 = ?", Url_, Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndP8 Get MenuTrees via UrlAndClassAndP8
func GetMenuTreesByUrlAndClassAndP8(offset int, limit int, Url_ string, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and p8 = ?", Url_, Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndP9 Get MenuTrees via UrlAndClassAndP9
func GetMenuTreesByUrlAndClassAndP9(offset int, limit int, Url_ string, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and p9 = ?", Url_, Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClassAndFormClass Get MenuTrees via UrlAndClassAndFormClass
func GetMenuTreesByUrlAndClassAndFormClass(offset int, limit int, Url_ string, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ? and form_class = ?", Url_, Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndProvider Get MenuTrees via UrlAndOptionsAndProvider
func GetMenuTreesByUrlAndOptionsAndProvider(offset int, limit int, Url_ string, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and provider = ?", Url_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndEnabled Get MenuTrees via UrlAndOptionsAndEnabled
func GetMenuTreesByUrlAndOptionsAndEnabled(offset int, limit int, Url_ string, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and enabled = ?", Url_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndDiscovered Get MenuTrees via UrlAndOptionsAndDiscovered
func GetMenuTreesByUrlAndOptionsAndDiscovered(offset int, limit int, Url_ string, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and discovered = ?", Url_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndExpanded Get MenuTrees via UrlAndOptionsAndExpanded
func GetMenuTreesByUrlAndOptionsAndExpanded(offset int, limit int, Url_ string, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and expanded = ?", Url_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndWeight Get MenuTrees via UrlAndOptionsAndWeight
func GetMenuTreesByUrlAndOptionsAndWeight(offset int, limit int, Url_ string, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and weight = ?", Url_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndMetadata Get MenuTrees via UrlAndOptionsAndMetadata
func GetMenuTreesByUrlAndOptionsAndMetadata(offset int, limit int, Url_ string, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and metadata = ?", Url_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndHasChildren Get MenuTrees via UrlAndOptionsAndHasChildren
func GetMenuTreesByUrlAndOptionsAndHasChildren(offset int, limit int, Url_ string, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and has_children = ?", Url_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndDepth Get MenuTrees via UrlAndOptionsAndDepth
func GetMenuTreesByUrlAndOptionsAndDepth(offset int, limit int, Url_ string, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and depth = ?", Url_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndP1 Get MenuTrees via UrlAndOptionsAndP1
func GetMenuTreesByUrlAndOptionsAndP1(offset int, limit int, Url_ string, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and p1 = ?", Url_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndP2 Get MenuTrees via UrlAndOptionsAndP2
func GetMenuTreesByUrlAndOptionsAndP2(offset int, limit int, Url_ string, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and p2 = ?", Url_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndP3 Get MenuTrees via UrlAndOptionsAndP3
func GetMenuTreesByUrlAndOptionsAndP3(offset int, limit int, Url_ string, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and p3 = ?", Url_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndP4 Get MenuTrees via UrlAndOptionsAndP4
func GetMenuTreesByUrlAndOptionsAndP4(offset int, limit int, Url_ string, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and p4 = ?", Url_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndP5 Get MenuTrees via UrlAndOptionsAndP5
func GetMenuTreesByUrlAndOptionsAndP5(offset int, limit int, Url_ string, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and p5 = ?", Url_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndP6 Get MenuTrees via UrlAndOptionsAndP6
func GetMenuTreesByUrlAndOptionsAndP6(offset int, limit int, Url_ string, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and p6 = ?", Url_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndP7 Get MenuTrees via UrlAndOptionsAndP7
func GetMenuTreesByUrlAndOptionsAndP7(offset int, limit int, Url_ string, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and p7 = ?", Url_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndP8 Get MenuTrees via UrlAndOptionsAndP8
func GetMenuTreesByUrlAndOptionsAndP8(offset int, limit int, Url_ string, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and p8 = ?", Url_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndP9 Get MenuTrees via UrlAndOptionsAndP9
func GetMenuTreesByUrlAndOptionsAndP9(offset int, limit int, Url_ string, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and p9 = ?", Url_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptionsAndFormClass Get MenuTrees via UrlAndOptionsAndFormClass
func GetMenuTreesByUrlAndOptionsAndFormClass(offset int, limit int, Url_ string, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ? and form_class = ?", Url_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndEnabled Get MenuTrees via UrlAndProviderAndEnabled
func GetMenuTreesByUrlAndProviderAndEnabled(offset int, limit int, Url_ string, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and enabled = ?", Url_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndDiscovered Get MenuTrees via UrlAndProviderAndDiscovered
func GetMenuTreesByUrlAndProviderAndDiscovered(offset int, limit int, Url_ string, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and discovered = ?", Url_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndExpanded Get MenuTrees via UrlAndProviderAndExpanded
func GetMenuTreesByUrlAndProviderAndExpanded(offset int, limit int, Url_ string, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and expanded = ?", Url_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndWeight Get MenuTrees via UrlAndProviderAndWeight
func GetMenuTreesByUrlAndProviderAndWeight(offset int, limit int, Url_ string, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and weight = ?", Url_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndMetadata Get MenuTrees via UrlAndProviderAndMetadata
func GetMenuTreesByUrlAndProviderAndMetadata(offset int, limit int, Url_ string, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and metadata = ?", Url_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndHasChildren Get MenuTrees via UrlAndProviderAndHasChildren
func GetMenuTreesByUrlAndProviderAndHasChildren(offset int, limit int, Url_ string, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and has_children = ?", Url_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndDepth Get MenuTrees via UrlAndProviderAndDepth
func GetMenuTreesByUrlAndProviderAndDepth(offset int, limit int, Url_ string, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and depth = ?", Url_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndP1 Get MenuTrees via UrlAndProviderAndP1
func GetMenuTreesByUrlAndProviderAndP1(offset int, limit int, Url_ string, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and p1 = ?", Url_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndP2 Get MenuTrees via UrlAndProviderAndP2
func GetMenuTreesByUrlAndProviderAndP2(offset int, limit int, Url_ string, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and p2 = ?", Url_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndP3 Get MenuTrees via UrlAndProviderAndP3
func GetMenuTreesByUrlAndProviderAndP3(offset int, limit int, Url_ string, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and p3 = ?", Url_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndP4 Get MenuTrees via UrlAndProviderAndP4
func GetMenuTreesByUrlAndProviderAndP4(offset int, limit int, Url_ string, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and p4 = ?", Url_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndP5 Get MenuTrees via UrlAndProviderAndP5
func GetMenuTreesByUrlAndProviderAndP5(offset int, limit int, Url_ string, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and p5 = ?", Url_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndP6 Get MenuTrees via UrlAndProviderAndP6
func GetMenuTreesByUrlAndProviderAndP6(offset int, limit int, Url_ string, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and p6 = ?", Url_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndP7 Get MenuTrees via UrlAndProviderAndP7
func GetMenuTreesByUrlAndProviderAndP7(offset int, limit int, Url_ string, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and p7 = ?", Url_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndP8 Get MenuTrees via UrlAndProviderAndP8
func GetMenuTreesByUrlAndProviderAndP8(offset int, limit int, Url_ string, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and p8 = ?", Url_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndP9 Get MenuTrees via UrlAndProviderAndP9
func GetMenuTreesByUrlAndProviderAndP9(offset int, limit int, Url_ string, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and p9 = ?", Url_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProviderAndFormClass Get MenuTrees via UrlAndProviderAndFormClass
func GetMenuTreesByUrlAndProviderAndFormClass(offset int, limit int, Url_ string, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ? and form_class = ?", Url_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndDiscovered Get MenuTrees via UrlAndEnabledAndDiscovered
func GetMenuTreesByUrlAndEnabledAndDiscovered(offset int, limit int, Url_ string, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and discovered = ?", Url_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndExpanded Get MenuTrees via UrlAndEnabledAndExpanded
func GetMenuTreesByUrlAndEnabledAndExpanded(offset int, limit int, Url_ string, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and expanded = ?", Url_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndWeight Get MenuTrees via UrlAndEnabledAndWeight
func GetMenuTreesByUrlAndEnabledAndWeight(offset int, limit int, Url_ string, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and weight = ?", Url_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndMetadata Get MenuTrees via UrlAndEnabledAndMetadata
func GetMenuTreesByUrlAndEnabledAndMetadata(offset int, limit int, Url_ string, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and metadata = ?", Url_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndHasChildren Get MenuTrees via UrlAndEnabledAndHasChildren
func GetMenuTreesByUrlAndEnabledAndHasChildren(offset int, limit int, Url_ string, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and has_children = ?", Url_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndDepth Get MenuTrees via UrlAndEnabledAndDepth
func GetMenuTreesByUrlAndEnabledAndDepth(offset int, limit int, Url_ string, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and depth = ?", Url_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndP1 Get MenuTrees via UrlAndEnabledAndP1
func GetMenuTreesByUrlAndEnabledAndP1(offset int, limit int, Url_ string, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and p1 = ?", Url_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndP2 Get MenuTrees via UrlAndEnabledAndP2
func GetMenuTreesByUrlAndEnabledAndP2(offset int, limit int, Url_ string, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and p2 = ?", Url_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndP3 Get MenuTrees via UrlAndEnabledAndP3
func GetMenuTreesByUrlAndEnabledAndP3(offset int, limit int, Url_ string, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and p3 = ?", Url_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndP4 Get MenuTrees via UrlAndEnabledAndP4
func GetMenuTreesByUrlAndEnabledAndP4(offset int, limit int, Url_ string, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and p4 = ?", Url_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndP5 Get MenuTrees via UrlAndEnabledAndP5
func GetMenuTreesByUrlAndEnabledAndP5(offset int, limit int, Url_ string, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and p5 = ?", Url_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndP6 Get MenuTrees via UrlAndEnabledAndP6
func GetMenuTreesByUrlAndEnabledAndP6(offset int, limit int, Url_ string, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and p6 = ?", Url_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndP7 Get MenuTrees via UrlAndEnabledAndP7
func GetMenuTreesByUrlAndEnabledAndP7(offset int, limit int, Url_ string, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and p7 = ?", Url_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndP8 Get MenuTrees via UrlAndEnabledAndP8
func GetMenuTreesByUrlAndEnabledAndP8(offset int, limit int, Url_ string, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and p8 = ?", Url_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndP9 Get MenuTrees via UrlAndEnabledAndP9
func GetMenuTreesByUrlAndEnabledAndP9(offset int, limit int, Url_ string, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and p9 = ?", Url_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabledAndFormClass Get MenuTrees via UrlAndEnabledAndFormClass
func GetMenuTreesByUrlAndEnabledAndFormClass(offset int, limit int, Url_ string, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ? and form_class = ?", Url_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndExpanded Get MenuTrees via UrlAndDiscoveredAndExpanded
func GetMenuTreesByUrlAndDiscoveredAndExpanded(offset int, limit int, Url_ string, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and expanded = ?", Url_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndWeight Get MenuTrees via UrlAndDiscoveredAndWeight
func GetMenuTreesByUrlAndDiscoveredAndWeight(offset int, limit int, Url_ string, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and weight = ?", Url_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndMetadata Get MenuTrees via UrlAndDiscoveredAndMetadata
func GetMenuTreesByUrlAndDiscoveredAndMetadata(offset int, limit int, Url_ string, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and metadata = ?", Url_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndHasChildren Get MenuTrees via UrlAndDiscoveredAndHasChildren
func GetMenuTreesByUrlAndDiscoveredAndHasChildren(offset int, limit int, Url_ string, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and has_children = ?", Url_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndDepth Get MenuTrees via UrlAndDiscoveredAndDepth
func GetMenuTreesByUrlAndDiscoveredAndDepth(offset int, limit int, Url_ string, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and depth = ?", Url_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndP1 Get MenuTrees via UrlAndDiscoveredAndP1
func GetMenuTreesByUrlAndDiscoveredAndP1(offset int, limit int, Url_ string, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and p1 = ?", Url_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndP2 Get MenuTrees via UrlAndDiscoveredAndP2
func GetMenuTreesByUrlAndDiscoveredAndP2(offset int, limit int, Url_ string, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and p2 = ?", Url_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndP3 Get MenuTrees via UrlAndDiscoveredAndP3
func GetMenuTreesByUrlAndDiscoveredAndP3(offset int, limit int, Url_ string, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and p3 = ?", Url_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndP4 Get MenuTrees via UrlAndDiscoveredAndP4
func GetMenuTreesByUrlAndDiscoveredAndP4(offset int, limit int, Url_ string, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and p4 = ?", Url_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndP5 Get MenuTrees via UrlAndDiscoveredAndP5
func GetMenuTreesByUrlAndDiscoveredAndP5(offset int, limit int, Url_ string, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and p5 = ?", Url_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndP6 Get MenuTrees via UrlAndDiscoveredAndP6
func GetMenuTreesByUrlAndDiscoveredAndP6(offset int, limit int, Url_ string, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and p6 = ?", Url_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndP7 Get MenuTrees via UrlAndDiscoveredAndP7
func GetMenuTreesByUrlAndDiscoveredAndP7(offset int, limit int, Url_ string, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and p7 = ?", Url_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndP8 Get MenuTrees via UrlAndDiscoveredAndP8
func GetMenuTreesByUrlAndDiscoveredAndP8(offset int, limit int, Url_ string, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and p8 = ?", Url_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndP9 Get MenuTrees via UrlAndDiscoveredAndP9
func GetMenuTreesByUrlAndDiscoveredAndP9(offset int, limit int, Url_ string, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and p9 = ?", Url_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscoveredAndFormClass Get MenuTrees via UrlAndDiscoveredAndFormClass
func GetMenuTreesByUrlAndDiscoveredAndFormClass(offset int, limit int, Url_ string, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ? and form_class = ?", Url_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndWeight Get MenuTrees via UrlAndExpandedAndWeight
func GetMenuTreesByUrlAndExpandedAndWeight(offset int, limit int, Url_ string, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and weight = ?", Url_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndMetadata Get MenuTrees via UrlAndExpandedAndMetadata
func GetMenuTreesByUrlAndExpandedAndMetadata(offset int, limit int, Url_ string, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and metadata = ?", Url_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndHasChildren Get MenuTrees via UrlAndExpandedAndHasChildren
func GetMenuTreesByUrlAndExpandedAndHasChildren(offset int, limit int, Url_ string, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and has_children = ?", Url_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndDepth Get MenuTrees via UrlAndExpandedAndDepth
func GetMenuTreesByUrlAndExpandedAndDepth(offset int, limit int, Url_ string, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and depth = ?", Url_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndP1 Get MenuTrees via UrlAndExpandedAndP1
func GetMenuTreesByUrlAndExpandedAndP1(offset int, limit int, Url_ string, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and p1 = ?", Url_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndP2 Get MenuTrees via UrlAndExpandedAndP2
func GetMenuTreesByUrlAndExpandedAndP2(offset int, limit int, Url_ string, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and p2 = ?", Url_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndP3 Get MenuTrees via UrlAndExpandedAndP3
func GetMenuTreesByUrlAndExpandedAndP3(offset int, limit int, Url_ string, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and p3 = ?", Url_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndP4 Get MenuTrees via UrlAndExpandedAndP4
func GetMenuTreesByUrlAndExpandedAndP4(offset int, limit int, Url_ string, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and p4 = ?", Url_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndP5 Get MenuTrees via UrlAndExpandedAndP5
func GetMenuTreesByUrlAndExpandedAndP5(offset int, limit int, Url_ string, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and p5 = ?", Url_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndP6 Get MenuTrees via UrlAndExpandedAndP6
func GetMenuTreesByUrlAndExpandedAndP6(offset int, limit int, Url_ string, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and p6 = ?", Url_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndP7 Get MenuTrees via UrlAndExpandedAndP7
func GetMenuTreesByUrlAndExpandedAndP7(offset int, limit int, Url_ string, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and p7 = ?", Url_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndP8 Get MenuTrees via UrlAndExpandedAndP8
func GetMenuTreesByUrlAndExpandedAndP8(offset int, limit int, Url_ string, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and p8 = ?", Url_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndP9 Get MenuTrees via UrlAndExpandedAndP9
func GetMenuTreesByUrlAndExpandedAndP9(offset int, limit int, Url_ string, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and p9 = ?", Url_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpandedAndFormClass Get MenuTrees via UrlAndExpandedAndFormClass
func GetMenuTreesByUrlAndExpandedAndFormClass(offset int, limit int, Url_ string, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ? and form_class = ?", Url_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndMetadata Get MenuTrees via UrlAndWeightAndMetadata
func GetMenuTreesByUrlAndWeightAndMetadata(offset int, limit int, Url_ string, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and metadata = ?", Url_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndHasChildren Get MenuTrees via UrlAndWeightAndHasChildren
func GetMenuTreesByUrlAndWeightAndHasChildren(offset int, limit int, Url_ string, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and has_children = ?", Url_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndDepth Get MenuTrees via UrlAndWeightAndDepth
func GetMenuTreesByUrlAndWeightAndDepth(offset int, limit int, Url_ string, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and depth = ?", Url_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndP1 Get MenuTrees via UrlAndWeightAndP1
func GetMenuTreesByUrlAndWeightAndP1(offset int, limit int, Url_ string, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and p1 = ?", Url_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndP2 Get MenuTrees via UrlAndWeightAndP2
func GetMenuTreesByUrlAndWeightAndP2(offset int, limit int, Url_ string, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and p2 = ?", Url_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndP3 Get MenuTrees via UrlAndWeightAndP3
func GetMenuTreesByUrlAndWeightAndP3(offset int, limit int, Url_ string, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and p3 = ?", Url_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndP4 Get MenuTrees via UrlAndWeightAndP4
func GetMenuTreesByUrlAndWeightAndP4(offset int, limit int, Url_ string, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and p4 = ?", Url_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndP5 Get MenuTrees via UrlAndWeightAndP5
func GetMenuTreesByUrlAndWeightAndP5(offset int, limit int, Url_ string, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and p5 = ?", Url_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndP6 Get MenuTrees via UrlAndWeightAndP6
func GetMenuTreesByUrlAndWeightAndP6(offset int, limit int, Url_ string, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and p6 = ?", Url_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndP7 Get MenuTrees via UrlAndWeightAndP7
func GetMenuTreesByUrlAndWeightAndP7(offset int, limit int, Url_ string, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and p7 = ?", Url_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndP8 Get MenuTrees via UrlAndWeightAndP8
func GetMenuTreesByUrlAndWeightAndP8(offset int, limit int, Url_ string, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and p8 = ?", Url_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndP9 Get MenuTrees via UrlAndWeightAndP9
func GetMenuTreesByUrlAndWeightAndP9(offset int, limit int, Url_ string, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and p9 = ?", Url_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeightAndFormClass Get MenuTrees via UrlAndWeightAndFormClass
func GetMenuTreesByUrlAndWeightAndFormClass(offset int, limit int, Url_ string, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ? and form_class = ?", Url_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndHasChildren Get MenuTrees via UrlAndMetadataAndHasChildren
func GetMenuTreesByUrlAndMetadataAndHasChildren(offset int, limit int, Url_ string, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and has_children = ?", Url_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndDepth Get MenuTrees via UrlAndMetadataAndDepth
func GetMenuTreesByUrlAndMetadataAndDepth(offset int, limit int, Url_ string, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and depth = ?", Url_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndP1 Get MenuTrees via UrlAndMetadataAndP1
func GetMenuTreesByUrlAndMetadataAndP1(offset int, limit int, Url_ string, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and p1 = ?", Url_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndP2 Get MenuTrees via UrlAndMetadataAndP2
func GetMenuTreesByUrlAndMetadataAndP2(offset int, limit int, Url_ string, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and p2 = ?", Url_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndP3 Get MenuTrees via UrlAndMetadataAndP3
func GetMenuTreesByUrlAndMetadataAndP3(offset int, limit int, Url_ string, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and p3 = ?", Url_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndP4 Get MenuTrees via UrlAndMetadataAndP4
func GetMenuTreesByUrlAndMetadataAndP4(offset int, limit int, Url_ string, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and p4 = ?", Url_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndP5 Get MenuTrees via UrlAndMetadataAndP5
func GetMenuTreesByUrlAndMetadataAndP5(offset int, limit int, Url_ string, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and p5 = ?", Url_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndP6 Get MenuTrees via UrlAndMetadataAndP6
func GetMenuTreesByUrlAndMetadataAndP6(offset int, limit int, Url_ string, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and p6 = ?", Url_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndP7 Get MenuTrees via UrlAndMetadataAndP7
func GetMenuTreesByUrlAndMetadataAndP7(offset int, limit int, Url_ string, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and p7 = ?", Url_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndP8 Get MenuTrees via UrlAndMetadataAndP8
func GetMenuTreesByUrlAndMetadataAndP8(offset int, limit int, Url_ string, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and p8 = ?", Url_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndP9 Get MenuTrees via UrlAndMetadataAndP9
func GetMenuTreesByUrlAndMetadataAndP9(offset int, limit int, Url_ string, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and p9 = ?", Url_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadataAndFormClass Get MenuTrees via UrlAndMetadataAndFormClass
func GetMenuTreesByUrlAndMetadataAndFormClass(offset int, limit int, Url_ string, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ? and form_class = ?", Url_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndDepth Get MenuTrees via UrlAndHasChildrenAndDepth
func GetMenuTreesByUrlAndHasChildrenAndDepth(offset int, limit int, Url_ string, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and depth = ?", Url_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndP1 Get MenuTrees via UrlAndHasChildrenAndP1
func GetMenuTreesByUrlAndHasChildrenAndP1(offset int, limit int, Url_ string, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and p1 = ?", Url_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndP2 Get MenuTrees via UrlAndHasChildrenAndP2
func GetMenuTreesByUrlAndHasChildrenAndP2(offset int, limit int, Url_ string, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and p2 = ?", Url_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndP3 Get MenuTrees via UrlAndHasChildrenAndP3
func GetMenuTreesByUrlAndHasChildrenAndP3(offset int, limit int, Url_ string, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and p3 = ?", Url_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndP4 Get MenuTrees via UrlAndHasChildrenAndP4
func GetMenuTreesByUrlAndHasChildrenAndP4(offset int, limit int, Url_ string, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and p4 = ?", Url_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndP5 Get MenuTrees via UrlAndHasChildrenAndP5
func GetMenuTreesByUrlAndHasChildrenAndP5(offset int, limit int, Url_ string, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and p5 = ?", Url_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndP6 Get MenuTrees via UrlAndHasChildrenAndP6
func GetMenuTreesByUrlAndHasChildrenAndP6(offset int, limit int, Url_ string, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and p6 = ?", Url_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndP7 Get MenuTrees via UrlAndHasChildrenAndP7
func GetMenuTreesByUrlAndHasChildrenAndP7(offset int, limit int, Url_ string, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and p7 = ?", Url_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndP8 Get MenuTrees via UrlAndHasChildrenAndP8
func GetMenuTreesByUrlAndHasChildrenAndP8(offset int, limit int, Url_ string, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and p8 = ?", Url_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndP9 Get MenuTrees via UrlAndHasChildrenAndP9
func GetMenuTreesByUrlAndHasChildrenAndP9(offset int, limit int, Url_ string, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and p9 = ?", Url_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildrenAndFormClass Get MenuTrees via UrlAndHasChildrenAndFormClass
func GetMenuTreesByUrlAndHasChildrenAndFormClass(offset int, limit int, Url_ string, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ? and form_class = ?", Url_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepthAndP1 Get MenuTrees via UrlAndDepthAndP1
func GetMenuTreesByUrlAndDepthAndP1(offset int, limit int, Url_ string, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ? and p1 = ?", Url_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepthAndP2 Get MenuTrees via UrlAndDepthAndP2
func GetMenuTreesByUrlAndDepthAndP2(offset int, limit int, Url_ string, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ? and p2 = ?", Url_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepthAndP3 Get MenuTrees via UrlAndDepthAndP3
func GetMenuTreesByUrlAndDepthAndP3(offset int, limit int, Url_ string, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ? and p3 = ?", Url_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepthAndP4 Get MenuTrees via UrlAndDepthAndP4
func GetMenuTreesByUrlAndDepthAndP4(offset int, limit int, Url_ string, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ? and p4 = ?", Url_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepthAndP5 Get MenuTrees via UrlAndDepthAndP5
func GetMenuTreesByUrlAndDepthAndP5(offset int, limit int, Url_ string, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ? and p5 = ?", Url_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepthAndP6 Get MenuTrees via UrlAndDepthAndP6
func GetMenuTreesByUrlAndDepthAndP6(offset int, limit int, Url_ string, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ? and p6 = ?", Url_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepthAndP7 Get MenuTrees via UrlAndDepthAndP7
func GetMenuTreesByUrlAndDepthAndP7(offset int, limit int, Url_ string, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ? and p7 = ?", Url_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepthAndP8 Get MenuTrees via UrlAndDepthAndP8
func GetMenuTreesByUrlAndDepthAndP8(offset int, limit int, Url_ string, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ? and p8 = ?", Url_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepthAndP9 Get MenuTrees via UrlAndDepthAndP9
func GetMenuTreesByUrlAndDepthAndP9(offset int, limit int, Url_ string, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ? and p9 = ?", Url_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepthAndFormClass Get MenuTrees via UrlAndDepthAndFormClass
func GetMenuTreesByUrlAndDepthAndFormClass(offset int, limit int, Url_ string, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ? and form_class = ?", Url_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP1AndP2 Get MenuTrees via UrlAndP1AndP2
func GetMenuTreesByUrlAndP1AndP2(offset int, limit int, Url_ string, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p1 = ? and p2 = ?", Url_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP1AndP3 Get MenuTrees via UrlAndP1AndP3
func GetMenuTreesByUrlAndP1AndP3(offset int, limit int, Url_ string, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p1 = ? and p3 = ?", Url_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP1AndP4 Get MenuTrees via UrlAndP1AndP4
func GetMenuTreesByUrlAndP1AndP4(offset int, limit int, Url_ string, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p1 = ? and p4 = ?", Url_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP1AndP5 Get MenuTrees via UrlAndP1AndP5
func GetMenuTreesByUrlAndP1AndP5(offset int, limit int, Url_ string, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p1 = ? and p5 = ?", Url_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP1AndP6 Get MenuTrees via UrlAndP1AndP6
func GetMenuTreesByUrlAndP1AndP6(offset int, limit int, Url_ string, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p1 = ? and p6 = ?", Url_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP1AndP7 Get MenuTrees via UrlAndP1AndP7
func GetMenuTreesByUrlAndP1AndP7(offset int, limit int, Url_ string, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p1 = ? and p7 = ?", Url_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP1AndP8 Get MenuTrees via UrlAndP1AndP8
func GetMenuTreesByUrlAndP1AndP8(offset int, limit int, Url_ string, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p1 = ? and p8 = ?", Url_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP1AndP9 Get MenuTrees via UrlAndP1AndP9
func GetMenuTreesByUrlAndP1AndP9(offset int, limit int, Url_ string, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p1 = ? and p9 = ?", Url_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP1AndFormClass Get MenuTrees via UrlAndP1AndFormClass
func GetMenuTreesByUrlAndP1AndFormClass(offset int, limit int, Url_ string, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p1 = ? and form_class = ?", Url_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP2AndP3 Get MenuTrees via UrlAndP2AndP3
func GetMenuTreesByUrlAndP2AndP3(offset int, limit int, Url_ string, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p2 = ? and p3 = ?", Url_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP2AndP4 Get MenuTrees via UrlAndP2AndP4
func GetMenuTreesByUrlAndP2AndP4(offset int, limit int, Url_ string, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p2 = ? and p4 = ?", Url_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP2AndP5 Get MenuTrees via UrlAndP2AndP5
func GetMenuTreesByUrlAndP2AndP5(offset int, limit int, Url_ string, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p2 = ? and p5 = ?", Url_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP2AndP6 Get MenuTrees via UrlAndP2AndP6
func GetMenuTreesByUrlAndP2AndP6(offset int, limit int, Url_ string, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p2 = ? and p6 = ?", Url_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP2AndP7 Get MenuTrees via UrlAndP2AndP7
func GetMenuTreesByUrlAndP2AndP7(offset int, limit int, Url_ string, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p2 = ? and p7 = ?", Url_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP2AndP8 Get MenuTrees via UrlAndP2AndP8
func GetMenuTreesByUrlAndP2AndP8(offset int, limit int, Url_ string, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p2 = ? and p8 = ?", Url_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP2AndP9 Get MenuTrees via UrlAndP2AndP9
func GetMenuTreesByUrlAndP2AndP9(offset int, limit int, Url_ string, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p2 = ? and p9 = ?", Url_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP2AndFormClass Get MenuTrees via UrlAndP2AndFormClass
func GetMenuTreesByUrlAndP2AndFormClass(offset int, limit int, Url_ string, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p2 = ? and form_class = ?", Url_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP3AndP4 Get MenuTrees via UrlAndP3AndP4
func GetMenuTreesByUrlAndP3AndP4(offset int, limit int, Url_ string, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p3 = ? and p4 = ?", Url_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP3AndP5 Get MenuTrees via UrlAndP3AndP5
func GetMenuTreesByUrlAndP3AndP5(offset int, limit int, Url_ string, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p3 = ? and p5 = ?", Url_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP3AndP6 Get MenuTrees via UrlAndP3AndP6
func GetMenuTreesByUrlAndP3AndP6(offset int, limit int, Url_ string, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p3 = ? and p6 = ?", Url_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP3AndP7 Get MenuTrees via UrlAndP3AndP7
func GetMenuTreesByUrlAndP3AndP7(offset int, limit int, Url_ string, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p3 = ? and p7 = ?", Url_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP3AndP8 Get MenuTrees via UrlAndP3AndP8
func GetMenuTreesByUrlAndP3AndP8(offset int, limit int, Url_ string, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p3 = ? and p8 = ?", Url_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP3AndP9 Get MenuTrees via UrlAndP3AndP9
func GetMenuTreesByUrlAndP3AndP9(offset int, limit int, Url_ string, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p3 = ? and p9 = ?", Url_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP3AndFormClass Get MenuTrees via UrlAndP3AndFormClass
func GetMenuTreesByUrlAndP3AndFormClass(offset int, limit int, Url_ string, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p3 = ? and form_class = ?", Url_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP4AndP5 Get MenuTrees via UrlAndP4AndP5
func GetMenuTreesByUrlAndP4AndP5(offset int, limit int, Url_ string, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p4 = ? and p5 = ?", Url_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP4AndP6 Get MenuTrees via UrlAndP4AndP6
func GetMenuTreesByUrlAndP4AndP6(offset int, limit int, Url_ string, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p4 = ? and p6 = ?", Url_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP4AndP7 Get MenuTrees via UrlAndP4AndP7
func GetMenuTreesByUrlAndP4AndP7(offset int, limit int, Url_ string, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p4 = ? and p7 = ?", Url_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP4AndP8 Get MenuTrees via UrlAndP4AndP8
func GetMenuTreesByUrlAndP4AndP8(offset int, limit int, Url_ string, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p4 = ? and p8 = ?", Url_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP4AndP9 Get MenuTrees via UrlAndP4AndP9
func GetMenuTreesByUrlAndP4AndP9(offset int, limit int, Url_ string, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p4 = ? and p9 = ?", Url_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP4AndFormClass Get MenuTrees via UrlAndP4AndFormClass
func GetMenuTreesByUrlAndP4AndFormClass(offset int, limit int, Url_ string, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p4 = ? and form_class = ?", Url_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP5AndP6 Get MenuTrees via UrlAndP5AndP6
func GetMenuTreesByUrlAndP5AndP6(offset int, limit int, Url_ string, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p5 = ? and p6 = ?", Url_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP5AndP7 Get MenuTrees via UrlAndP5AndP7
func GetMenuTreesByUrlAndP5AndP7(offset int, limit int, Url_ string, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p5 = ? and p7 = ?", Url_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP5AndP8 Get MenuTrees via UrlAndP5AndP8
func GetMenuTreesByUrlAndP5AndP8(offset int, limit int, Url_ string, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p5 = ? and p8 = ?", Url_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP5AndP9 Get MenuTrees via UrlAndP5AndP9
func GetMenuTreesByUrlAndP5AndP9(offset int, limit int, Url_ string, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p5 = ? and p9 = ?", Url_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP5AndFormClass Get MenuTrees via UrlAndP5AndFormClass
func GetMenuTreesByUrlAndP5AndFormClass(offset int, limit int, Url_ string, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p5 = ? and form_class = ?", Url_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP6AndP7 Get MenuTrees via UrlAndP6AndP7
func GetMenuTreesByUrlAndP6AndP7(offset int, limit int, Url_ string, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p6 = ? and p7 = ?", Url_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP6AndP8 Get MenuTrees via UrlAndP6AndP8
func GetMenuTreesByUrlAndP6AndP8(offset int, limit int, Url_ string, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p6 = ? and p8 = ?", Url_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP6AndP9 Get MenuTrees via UrlAndP6AndP9
func GetMenuTreesByUrlAndP6AndP9(offset int, limit int, Url_ string, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p6 = ? and p9 = ?", Url_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP6AndFormClass Get MenuTrees via UrlAndP6AndFormClass
func GetMenuTreesByUrlAndP6AndFormClass(offset int, limit int, Url_ string, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p6 = ? and form_class = ?", Url_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP7AndP8 Get MenuTrees via UrlAndP7AndP8
func GetMenuTreesByUrlAndP7AndP8(offset int, limit int, Url_ string, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p7 = ? and p8 = ?", Url_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP7AndP9 Get MenuTrees via UrlAndP7AndP9
func GetMenuTreesByUrlAndP7AndP9(offset int, limit int, Url_ string, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p7 = ? and p9 = ?", Url_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP7AndFormClass Get MenuTrees via UrlAndP7AndFormClass
func GetMenuTreesByUrlAndP7AndFormClass(offset int, limit int, Url_ string, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p7 = ? and form_class = ?", Url_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP8AndP9 Get MenuTrees via UrlAndP8AndP9
func GetMenuTreesByUrlAndP8AndP9(offset int, limit int, Url_ string, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p8 = ? and p9 = ?", Url_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP8AndFormClass Get MenuTrees via UrlAndP8AndFormClass
func GetMenuTreesByUrlAndP8AndFormClass(offset int, limit int, Url_ string, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p8 = ? and form_class = ?", Url_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP9AndFormClass Get MenuTrees via UrlAndP9AndFormClass
func GetMenuTreesByUrlAndP9AndFormClass(offset int, limit int, Url_ string, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p9 = ? and form_class = ?", Url_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndClass Get MenuTrees via TitleAndDescriptionAndClass
func GetMenuTreesByTitleAndDescriptionAndClass(offset int, limit int, Title_ []byte, Description_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and class = ?", Title_, Description_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndOptions Get MenuTrees via TitleAndDescriptionAndOptions
func GetMenuTreesByTitleAndDescriptionAndOptions(offset int, limit int, Title_ []byte, Description_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and options = ?", Title_, Description_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndProvider Get MenuTrees via TitleAndDescriptionAndProvider
func GetMenuTreesByTitleAndDescriptionAndProvider(offset int, limit int, Title_ []byte, Description_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and provider = ?", Title_, Description_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndEnabled Get MenuTrees via TitleAndDescriptionAndEnabled
func GetMenuTreesByTitleAndDescriptionAndEnabled(offset int, limit int, Title_ []byte, Description_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and enabled = ?", Title_, Description_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndDiscovered Get MenuTrees via TitleAndDescriptionAndDiscovered
func GetMenuTreesByTitleAndDescriptionAndDiscovered(offset int, limit int, Title_ []byte, Description_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and discovered = ?", Title_, Description_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndExpanded Get MenuTrees via TitleAndDescriptionAndExpanded
func GetMenuTreesByTitleAndDescriptionAndExpanded(offset int, limit int, Title_ []byte, Description_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and expanded = ?", Title_, Description_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndWeight Get MenuTrees via TitleAndDescriptionAndWeight
func GetMenuTreesByTitleAndDescriptionAndWeight(offset int, limit int, Title_ []byte, Description_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and weight = ?", Title_, Description_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndMetadata Get MenuTrees via TitleAndDescriptionAndMetadata
func GetMenuTreesByTitleAndDescriptionAndMetadata(offset int, limit int, Title_ []byte, Description_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and metadata = ?", Title_, Description_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndHasChildren Get MenuTrees via TitleAndDescriptionAndHasChildren
func GetMenuTreesByTitleAndDescriptionAndHasChildren(offset int, limit int, Title_ []byte, Description_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and has_children = ?", Title_, Description_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndDepth Get MenuTrees via TitleAndDescriptionAndDepth
func GetMenuTreesByTitleAndDescriptionAndDepth(offset int, limit int, Title_ []byte, Description_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and depth = ?", Title_, Description_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndP1 Get MenuTrees via TitleAndDescriptionAndP1
func GetMenuTreesByTitleAndDescriptionAndP1(offset int, limit int, Title_ []byte, Description_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and p1 = ?", Title_, Description_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndP2 Get MenuTrees via TitleAndDescriptionAndP2
func GetMenuTreesByTitleAndDescriptionAndP2(offset int, limit int, Title_ []byte, Description_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and p2 = ?", Title_, Description_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndP3 Get MenuTrees via TitleAndDescriptionAndP3
func GetMenuTreesByTitleAndDescriptionAndP3(offset int, limit int, Title_ []byte, Description_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and p3 = ?", Title_, Description_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndP4 Get MenuTrees via TitleAndDescriptionAndP4
func GetMenuTreesByTitleAndDescriptionAndP4(offset int, limit int, Title_ []byte, Description_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and p4 = ?", Title_, Description_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndP5 Get MenuTrees via TitleAndDescriptionAndP5
func GetMenuTreesByTitleAndDescriptionAndP5(offset int, limit int, Title_ []byte, Description_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and p5 = ?", Title_, Description_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndP6 Get MenuTrees via TitleAndDescriptionAndP6
func GetMenuTreesByTitleAndDescriptionAndP6(offset int, limit int, Title_ []byte, Description_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and p6 = ?", Title_, Description_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndP7 Get MenuTrees via TitleAndDescriptionAndP7
func GetMenuTreesByTitleAndDescriptionAndP7(offset int, limit int, Title_ []byte, Description_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and p7 = ?", Title_, Description_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndP8 Get MenuTrees via TitleAndDescriptionAndP8
func GetMenuTreesByTitleAndDescriptionAndP8(offset int, limit int, Title_ []byte, Description_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and p8 = ?", Title_, Description_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndP9 Get MenuTrees via TitleAndDescriptionAndP9
func GetMenuTreesByTitleAndDescriptionAndP9(offset int, limit int, Title_ []byte, Description_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and p9 = ?", Title_, Description_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescriptionAndFormClass Get MenuTrees via TitleAndDescriptionAndFormClass
func GetMenuTreesByTitleAndDescriptionAndFormClass(offset int, limit int, Title_ []byte, Description_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ? and form_class = ?", Title_, Description_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndOptions Get MenuTrees via TitleAndClassAndOptions
func GetMenuTreesByTitleAndClassAndOptions(offset int, limit int, Title_ []byte, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and options = ?", Title_, Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndProvider Get MenuTrees via TitleAndClassAndProvider
func GetMenuTreesByTitleAndClassAndProvider(offset int, limit int, Title_ []byte, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and provider = ?", Title_, Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndEnabled Get MenuTrees via TitleAndClassAndEnabled
func GetMenuTreesByTitleAndClassAndEnabled(offset int, limit int, Title_ []byte, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and enabled = ?", Title_, Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndDiscovered Get MenuTrees via TitleAndClassAndDiscovered
func GetMenuTreesByTitleAndClassAndDiscovered(offset int, limit int, Title_ []byte, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and discovered = ?", Title_, Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndExpanded Get MenuTrees via TitleAndClassAndExpanded
func GetMenuTreesByTitleAndClassAndExpanded(offset int, limit int, Title_ []byte, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and expanded = ?", Title_, Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndWeight Get MenuTrees via TitleAndClassAndWeight
func GetMenuTreesByTitleAndClassAndWeight(offset int, limit int, Title_ []byte, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and weight = ?", Title_, Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndMetadata Get MenuTrees via TitleAndClassAndMetadata
func GetMenuTreesByTitleAndClassAndMetadata(offset int, limit int, Title_ []byte, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and metadata = ?", Title_, Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndHasChildren Get MenuTrees via TitleAndClassAndHasChildren
func GetMenuTreesByTitleAndClassAndHasChildren(offset int, limit int, Title_ []byte, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and has_children = ?", Title_, Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndDepth Get MenuTrees via TitleAndClassAndDepth
func GetMenuTreesByTitleAndClassAndDepth(offset int, limit int, Title_ []byte, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and depth = ?", Title_, Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndP1 Get MenuTrees via TitleAndClassAndP1
func GetMenuTreesByTitleAndClassAndP1(offset int, limit int, Title_ []byte, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and p1 = ?", Title_, Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndP2 Get MenuTrees via TitleAndClassAndP2
func GetMenuTreesByTitleAndClassAndP2(offset int, limit int, Title_ []byte, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and p2 = ?", Title_, Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndP3 Get MenuTrees via TitleAndClassAndP3
func GetMenuTreesByTitleAndClassAndP3(offset int, limit int, Title_ []byte, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and p3 = ?", Title_, Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndP4 Get MenuTrees via TitleAndClassAndP4
func GetMenuTreesByTitleAndClassAndP4(offset int, limit int, Title_ []byte, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and p4 = ?", Title_, Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndP5 Get MenuTrees via TitleAndClassAndP5
func GetMenuTreesByTitleAndClassAndP5(offset int, limit int, Title_ []byte, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and p5 = ?", Title_, Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndP6 Get MenuTrees via TitleAndClassAndP6
func GetMenuTreesByTitleAndClassAndP6(offset int, limit int, Title_ []byte, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and p6 = ?", Title_, Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndP7 Get MenuTrees via TitleAndClassAndP7
func GetMenuTreesByTitleAndClassAndP7(offset int, limit int, Title_ []byte, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and p7 = ?", Title_, Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndP8 Get MenuTrees via TitleAndClassAndP8
func GetMenuTreesByTitleAndClassAndP8(offset int, limit int, Title_ []byte, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and p8 = ?", Title_, Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndP9 Get MenuTrees via TitleAndClassAndP9
func GetMenuTreesByTitleAndClassAndP9(offset int, limit int, Title_ []byte, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and p9 = ?", Title_, Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClassAndFormClass Get MenuTrees via TitleAndClassAndFormClass
func GetMenuTreesByTitleAndClassAndFormClass(offset int, limit int, Title_ []byte, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ? and form_class = ?", Title_, Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndProvider Get MenuTrees via TitleAndOptionsAndProvider
func GetMenuTreesByTitleAndOptionsAndProvider(offset int, limit int, Title_ []byte, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and provider = ?", Title_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndEnabled Get MenuTrees via TitleAndOptionsAndEnabled
func GetMenuTreesByTitleAndOptionsAndEnabled(offset int, limit int, Title_ []byte, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and enabled = ?", Title_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndDiscovered Get MenuTrees via TitleAndOptionsAndDiscovered
func GetMenuTreesByTitleAndOptionsAndDiscovered(offset int, limit int, Title_ []byte, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and discovered = ?", Title_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndExpanded Get MenuTrees via TitleAndOptionsAndExpanded
func GetMenuTreesByTitleAndOptionsAndExpanded(offset int, limit int, Title_ []byte, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and expanded = ?", Title_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndWeight Get MenuTrees via TitleAndOptionsAndWeight
func GetMenuTreesByTitleAndOptionsAndWeight(offset int, limit int, Title_ []byte, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and weight = ?", Title_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndMetadata Get MenuTrees via TitleAndOptionsAndMetadata
func GetMenuTreesByTitleAndOptionsAndMetadata(offset int, limit int, Title_ []byte, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and metadata = ?", Title_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndHasChildren Get MenuTrees via TitleAndOptionsAndHasChildren
func GetMenuTreesByTitleAndOptionsAndHasChildren(offset int, limit int, Title_ []byte, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and has_children = ?", Title_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndDepth Get MenuTrees via TitleAndOptionsAndDepth
func GetMenuTreesByTitleAndOptionsAndDepth(offset int, limit int, Title_ []byte, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and depth = ?", Title_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndP1 Get MenuTrees via TitleAndOptionsAndP1
func GetMenuTreesByTitleAndOptionsAndP1(offset int, limit int, Title_ []byte, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and p1 = ?", Title_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndP2 Get MenuTrees via TitleAndOptionsAndP2
func GetMenuTreesByTitleAndOptionsAndP2(offset int, limit int, Title_ []byte, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and p2 = ?", Title_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndP3 Get MenuTrees via TitleAndOptionsAndP3
func GetMenuTreesByTitleAndOptionsAndP3(offset int, limit int, Title_ []byte, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and p3 = ?", Title_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndP4 Get MenuTrees via TitleAndOptionsAndP4
func GetMenuTreesByTitleAndOptionsAndP4(offset int, limit int, Title_ []byte, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and p4 = ?", Title_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndP5 Get MenuTrees via TitleAndOptionsAndP5
func GetMenuTreesByTitleAndOptionsAndP5(offset int, limit int, Title_ []byte, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and p5 = ?", Title_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndP6 Get MenuTrees via TitleAndOptionsAndP6
func GetMenuTreesByTitleAndOptionsAndP6(offset int, limit int, Title_ []byte, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and p6 = ?", Title_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndP7 Get MenuTrees via TitleAndOptionsAndP7
func GetMenuTreesByTitleAndOptionsAndP7(offset int, limit int, Title_ []byte, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and p7 = ?", Title_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndP8 Get MenuTrees via TitleAndOptionsAndP8
func GetMenuTreesByTitleAndOptionsAndP8(offset int, limit int, Title_ []byte, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and p8 = ?", Title_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndP9 Get MenuTrees via TitleAndOptionsAndP9
func GetMenuTreesByTitleAndOptionsAndP9(offset int, limit int, Title_ []byte, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and p9 = ?", Title_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptionsAndFormClass Get MenuTrees via TitleAndOptionsAndFormClass
func GetMenuTreesByTitleAndOptionsAndFormClass(offset int, limit int, Title_ []byte, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ? and form_class = ?", Title_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndEnabled Get MenuTrees via TitleAndProviderAndEnabled
func GetMenuTreesByTitleAndProviderAndEnabled(offset int, limit int, Title_ []byte, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and enabled = ?", Title_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndDiscovered Get MenuTrees via TitleAndProviderAndDiscovered
func GetMenuTreesByTitleAndProviderAndDiscovered(offset int, limit int, Title_ []byte, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and discovered = ?", Title_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndExpanded Get MenuTrees via TitleAndProviderAndExpanded
func GetMenuTreesByTitleAndProviderAndExpanded(offset int, limit int, Title_ []byte, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and expanded = ?", Title_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndWeight Get MenuTrees via TitleAndProviderAndWeight
func GetMenuTreesByTitleAndProviderAndWeight(offset int, limit int, Title_ []byte, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and weight = ?", Title_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndMetadata Get MenuTrees via TitleAndProviderAndMetadata
func GetMenuTreesByTitleAndProviderAndMetadata(offset int, limit int, Title_ []byte, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and metadata = ?", Title_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndHasChildren Get MenuTrees via TitleAndProviderAndHasChildren
func GetMenuTreesByTitleAndProviderAndHasChildren(offset int, limit int, Title_ []byte, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and has_children = ?", Title_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndDepth Get MenuTrees via TitleAndProviderAndDepth
func GetMenuTreesByTitleAndProviderAndDepth(offset int, limit int, Title_ []byte, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and depth = ?", Title_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndP1 Get MenuTrees via TitleAndProviderAndP1
func GetMenuTreesByTitleAndProviderAndP1(offset int, limit int, Title_ []byte, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and p1 = ?", Title_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndP2 Get MenuTrees via TitleAndProviderAndP2
func GetMenuTreesByTitleAndProviderAndP2(offset int, limit int, Title_ []byte, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and p2 = ?", Title_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndP3 Get MenuTrees via TitleAndProviderAndP3
func GetMenuTreesByTitleAndProviderAndP3(offset int, limit int, Title_ []byte, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and p3 = ?", Title_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndP4 Get MenuTrees via TitleAndProviderAndP4
func GetMenuTreesByTitleAndProviderAndP4(offset int, limit int, Title_ []byte, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and p4 = ?", Title_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndP5 Get MenuTrees via TitleAndProviderAndP5
func GetMenuTreesByTitleAndProviderAndP5(offset int, limit int, Title_ []byte, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and p5 = ?", Title_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndP6 Get MenuTrees via TitleAndProviderAndP6
func GetMenuTreesByTitleAndProviderAndP6(offset int, limit int, Title_ []byte, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and p6 = ?", Title_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndP7 Get MenuTrees via TitleAndProviderAndP7
func GetMenuTreesByTitleAndProviderAndP7(offset int, limit int, Title_ []byte, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and p7 = ?", Title_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndP8 Get MenuTrees via TitleAndProviderAndP8
func GetMenuTreesByTitleAndProviderAndP8(offset int, limit int, Title_ []byte, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and p8 = ?", Title_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndP9 Get MenuTrees via TitleAndProviderAndP9
func GetMenuTreesByTitleAndProviderAndP9(offset int, limit int, Title_ []byte, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and p9 = ?", Title_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProviderAndFormClass Get MenuTrees via TitleAndProviderAndFormClass
func GetMenuTreesByTitleAndProviderAndFormClass(offset int, limit int, Title_ []byte, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ? and form_class = ?", Title_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndDiscovered Get MenuTrees via TitleAndEnabledAndDiscovered
func GetMenuTreesByTitleAndEnabledAndDiscovered(offset int, limit int, Title_ []byte, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and discovered = ?", Title_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndExpanded Get MenuTrees via TitleAndEnabledAndExpanded
func GetMenuTreesByTitleAndEnabledAndExpanded(offset int, limit int, Title_ []byte, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and expanded = ?", Title_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndWeight Get MenuTrees via TitleAndEnabledAndWeight
func GetMenuTreesByTitleAndEnabledAndWeight(offset int, limit int, Title_ []byte, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and weight = ?", Title_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndMetadata Get MenuTrees via TitleAndEnabledAndMetadata
func GetMenuTreesByTitleAndEnabledAndMetadata(offset int, limit int, Title_ []byte, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and metadata = ?", Title_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndHasChildren Get MenuTrees via TitleAndEnabledAndHasChildren
func GetMenuTreesByTitleAndEnabledAndHasChildren(offset int, limit int, Title_ []byte, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and has_children = ?", Title_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndDepth Get MenuTrees via TitleAndEnabledAndDepth
func GetMenuTreesByTitleAndEnabledAndDepth(offset int, limit int, Title_ []byte, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and depth = ?", Title_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndP1 Get MenuTrees via TitleAndEnabledAndP1
func GetMenuTreesByTitleAndEnabledAndP1(offset int, limit int, Title_ []byte, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and p1 = ?", Title_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndP2 Get MenuTrees via TitleAndEnabledAndP2
func GetMenuTreesByTitleAndEnabledAndP2(offset int, limit int, Title_ []byte, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and p2 = ?", Title_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndP3 Get MenuTrees via TitleAndEnabledAndP3
func GetMenuTreesByTitleAndEnabledAndP3(offset int, limit int, Title_ []byte, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and p3 = ?", Title_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndP4 Get MenuTrees via TitleAndEnabledAndP4
func GetMenuTreesByTitleAndEnabledAndP4(offset int, limit int, Title_ []byte, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and p4 = ?", Title_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndP5 Get MenuTrees via TitleAndEnabledAndP5
func GetMenuTreesByTitleAndEnabledAndP5(offset int, limit int, Title_ []byte, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and p5 = ?", Title_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndP6 Get MenuTrees via TitleAndEnabledAndP6
func GetMenuTreesByTitleAndEnabledAndP6(offset int, limit int, Title_ []byte, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and p6 = ?", Title_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndP7 Get MenuTrees via TitleAndEnabledAndP7
func GetMenuTreesByTitleAndEnabledAndP7(offset int, limit int, Title_ []byte, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and p7 = ?", Title_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndP8 Get MenuTrees via TitleAndEnabledAndP8
func GetMenuTreesByTitleAndEnabledAndP8(offset int, limit int, Title_ []byte, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and p8 = ?", Title_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndP9 Get MenuTrees via TitleAndEnabledAndP9
func GetMenuTreesByTitleAndEnabledAndP9(offset int, limit int, Title_ []byte, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and p9 = ?", Title_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabledAndFormClass Get MenuTrees via TitleAndEnabledAndFormClass
func GetMenuTreesByTitleAndEnabledAndFormClass(offset int, limit int, Title_ []byte, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ? and form_class = ?", Title_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndExpanded Get MenuTrees via TitleAndDiscoveredAndExpanded
func GetMenuTreesByTitleAndDiscoveredAndExpanded(offset int, limit int, Title_ []byte, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and expanded = ?", Title_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndWeight Get MenuTrees via TitleAndDiscoveredAndWeight
func GetMenuTreesByTitleAndDiscoveredAndWeight(offset int, limit int, Title_ []byte, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and weight = ?", Title_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndMetadata Get MenuTrees via TitleAndDiscoveredAndMetadata
func GetMenuTreesByTitleAndDiscoveredAndMetadata(offset int, limit int, Title_ []byte, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and metadata = ?", Title_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndHasChildren Get MenuTrees via TitleAndDiscoveredAndHasChildren
func GetMenuTreesByTitleAndDiscoveredAndHasChildren(offset int, limit int, Title_ []byte, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and has_children = ?", Title_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndDepth Get MenuTrees via TitleAndDiscoveredAndDepth
func GetMenuTreesByTitleAndDiscoveredAndDepth(offset int, limit int, Title_ []byte, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and depth = ?", Title_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndP1 Get MenuTrees via TitleAndDiscoveredAndP1
func GetMenuTreesByTitleAndDiscoveredAndP1(offset int, limit int, Title_ []byte, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and p1 = ?", Title_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndP2 Get MenuTrees via TitleAndDiscoveredAndP2
func GetMenuTreesByTitleAndDiscoveredAndP2(offset int, limit int, Title_ []byte, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and p2 = ?", Title_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndP3 Get MenuTrees via TitleAndDiscoveredAndP3
func GetMenuTreesByTitleAndDiscoveredAndP3(offset int, limit int, Title_ []byte, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and p3 = ?", Title_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndP4 Get MenuTrees via TitleAndDiscoveredAndP4
func GetMenuTreesByTitleAndDiscoveredAndP4(offset int, limit int, Title_ []byte, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and p4 = ?", Title_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndP5 Get MenuTrees via TitleAndDiscoveredAndP5
func GetMenuTreesByTitleAndDiscoveredAndP5(offset int, limit int, Title_ []byte, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and p5 = ?", Title_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndP6 Get MenuTrees via TitleAndDiscoveredAndP6
func GetMenuTreesByTitleAndDiscoveredAndP6(offset int, limit int, Title_ []byte, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and p6 = ?", Title_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndP7 Get MenuTrees via TitleAndDiscoveredAndP7
func GetMenuTreesByTitleAndDiscoveredAndP7(offset int, limit int, Title_ []byte, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and p7 = ?", Title_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndP8 Get MenuTrees via TitleAndDiscoveredAndP8
func GetMenuTreesByTitleAndDiscoveredAndP8(offset int, limit int, Title_ []byte, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and p8 = ?", Title_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndP9 Get MenuTrees via TitleAndDiscoveredAndP9
func GetMenuTreesByTitleAndDiscoveredAndP9(offset int, limit int, Title_ []byte, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and p9 = ?", Title_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscoveredAndFormClass Get MenuTrees via TitleAndDiscoveredAndFormClass
func GetMenuTreesByTitleAndDiscoveredAndFormClass(offset int, limit int, Title_ []byte, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ? and form_class = ?", Title_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndWeight Get MenuTrees via TitleAndExpandedAndWeight
func GetMenuTreesByTitleAndExpandedAndWeight(offset int, limit int, Title_ []byte, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and weight = ?", Title_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndMetadata Get MenuTrees via TitleAndExpandedAndMetadata
func GetMenuTreesByTitleAndExpandedAndMetadata(offset int, limit int, Title_ []byte, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and metadata = ?", Title_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndHasChildren Get MenuTrees via TitleAndExpandedAndHasChildren
func GetMenuTreesByTitleAndExpandedAndHasChildren(offset int, limit int, Title_ []byte, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and has_children = ?", Title_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndDepth Get MenuTrees via TitleAndExpandedAndDepth
func GetMenuTreesByTitleAndExpandedAndDepth(offset int, limit int, Title_ []byte, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and depth = ?", Title_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndP1 Get MenuTrees via TitleAndExpandedAndP1
func GetMenuTreesByTitleAndExpandedAndP1(offset int, limit int, Title_ []byte, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and p1 = ?", Title_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndP2 Get MenuTrees via TitleAndExpandedAndP2
func GetMenuTreesByTitleAndExpandedAndP2(offset int, limit int, Title_ []byte, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and p2 = ?", Title_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndP3 Get MenuTrees via TitleAndExpandedAndP3
func GetMenuTreesByTitleAndExpandedAndP3(offset int, limit int, Title_ []byte, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and p3 = ?", Title_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndP4 Get MenuTrees via TitleAndExpandedAndP4
func GetMenuTreesByTitleAndExpandedAndP4(offset int, limit int, Title_ []byte, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and p4 = ?", Title_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndP5 Get MenuTrees via TitleAndExpandedAndP5
func GetMenuTreesByTitleAndExpandedAndP5(offset int, limit int, Title_ []byte, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and p5 = ?", Title_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndP6 Get MenuTrees via TitleAndExpandedAndP6
func GetMenuTreesByTitleAndExpandedAndP6(offset int, limit int, Title_ []byte, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and p6 = ?", Title_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndP7 Get MenuTrees via TitleAndExpandedAndP7
func GetMenuTreesByTitleAndExpandedAndP7(offset int, limit int, Title_ []byte, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and p7 = ?", Title_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndP8 Get MenuTrees via TitleAndExpandedAndP8
func GetMenuTreesByTitleAndExpandedAndP8(offset int, limit int, Title_ []byte, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and p8 = ?", Title_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndP9 Get MenuTrees via TitleAndExpandedAndP9
func GetMenuTreesByTitleAndExpandedAndP9(offset int, limit int, Title_ []byte, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and p9 = ?", Title_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpandedAndFormClass Get MenuTrees via TitleAndExpandedAndFormClass
func GetMenuTreesByTitleAndExpandedAndFormClass(offset int, limit int, Title_ []byte, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ? and form_class = ?", Title_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndMetadata Get MenuTrees via TitleAndWeightAndMetadata
func GetMenuTreesByTitleAndWeightAndMetadata(offset int, limit int, Title_ []byte, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and metadata = ?", Title_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndHasChildren Get MenuTrees via TitleAndWeightAndHasChildren
func GetMenuTreesByTitleAndWeightAndHasChildren(offset int, limit int, Title_ []byte, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and has_children = ?", Title_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndDepth Get MenuTrees via TitleAndWeightAndDepth
func GetMenuTreesByTitleAndWeightAndDepth(offset int, limit int, Title_ []byte, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and depth = ?", Title_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndP1 Get MenuTrees via TitleAndWeightAndP1
func GetMenuTreesByTitleAndWeightAndP1(offset int, limit int, Title_ []byte, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and p1 = ?", Title_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndP2 Get MenuTrees via TitleAndWeightAndP2
func GetMenuTreesByTitleAndWeightAndP2(offset int, limit int, Title_ []byte, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and p2 = ?", Title_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndP3 Get MenuTrees via TitleAndWeightAndP3
func GetMenuTreesByTitleAndWeightAndP3(offset int, limit int, Title_ []byte, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and p3 = ?", Title_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndP4 Get MenuTrees via TitleAndWeightAndP4
func GetMenuTreesByTitleAndWeightAndP4(offset int, limit int, Title_ []byte, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and p4 = ?", Title_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndP5 Get MenuTrees via TitleAndWeightAndP5
func GetMenuTreesByTitleAndWeightAndP5(offset int, limit int, Title_ []byte, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and p5 = ?", Title_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndP6 Get MenuTrees via TitleAndWeightAndP6
func GetMenuTreesByTitleAndWeightAndP6(offset int, limit int, Title_ []byte, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and p6 = ?", Title_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndP7 Get MenuTrees via TitleAndWeightAndP7
func GetMenuTreesByTitleAndWeightAndP7(offset int, limit int, Title_ []byte, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and p7 = ?", Title_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndP8 Get MenuTrees via TitleAndWeightAndP8
func GetMenuTreesByTitleAndWeightAndP8(offset int, limit int, Title_ []byte, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and p8 = ?", Title_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndP9 Get MenuTrees via TitleAndWeightAndP9
func GetMenuTreesByTitleAndWeightAndP9(offset int, limit int, Title_ []byte, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and p9 = ?", Title_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeightAndFormClass Get MenuTrees via TitleAndWeightAndFormClass
func GetMenuTreesByTitleAndWeightAndFormClass(offset int, limit int, Title_ []byte, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ? and form_class = ?", Title_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndHasChildren Get MenuTrees via TitleAndMetadataAndHasChildren
func GetMenuTreesByTitleAndMetadataAndHasChildren(offset int, limit int, Title_ []byte, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and has_children = ?", Title_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndDepth Get MenuTrees via TitleAndMetadataAndDepth
func GetMenuTreesByTitleAndMetadataAndDepth(offset int, limit int, Title_ []byte, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and depth = ?", Title_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndP1 Get MenuTrees via TitleAndMetadataAndP1
func GetMenuTreesByTitleAndMetadataAndP1(offset int, limit int, Title_ []byte, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and p1 = ?", Title_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndP2 Get MenuTrees via TitleAndMetadataAndP2
func GetMenuTreesByTitleAndMetadataAndP2(offset int, limit int, Title_ []byte, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and p2 = ?", Title_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndP3 Get MenuTrees via TitleAndMetadataAndP3
func GetMenuTreesByTitleAndMetadataAndP3(offset int, limit int, Title_ []byte, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and p3 = ?", Title_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndP4 Get MenuTrees via TitleAndMetadataAndP4
func GetMenuTreesByTitleAndMetadataAndP4(offset int, limit int, Title_ []byte, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and p4 = ?", Title_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndP5 Get MenuTrees via TitleAndMetadataAndP5
func GetMenuTreesByTitleAndMetadataAndP5(offset int, limit int, Title_ []byte, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and p5 = ?", Title_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndP6 Get MenuTrees via TitleAndMetadataAndP6
func GetMenuTreesByTitleAndMetadataAndP6(offset int, limit int, Title_ []byte, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and p6 = ?", Title_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndP7 Get MenuTrees via TitleAndMetadataAndP7
func GetMenuTreesByTitleAndMetadataAndP7(offset int, limit int, Title_ []byte, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and p7 = ?", Title_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndP8 Get MenuTrees via TitleAndMetadataAndP8
func GetMenuTreesByTitleAndMetadataAndP8(offset int, limit int, Title_ []byte, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and p8 = ?", Title_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndP9 Get MenuTrees via TitleAndMetadataAndP9
func GetMenuTreesByTitleAndMetadataAndP9(offset int, limit int, Title_ []byte, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and p9 = ?", Title_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadataAndFormClass Get MenuTrees via TitleAndMetadataAndFormClass
func GetMenuTreesByTitleAndMetadataAndFormClass(offset int, limit int, Title_ []byte, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ? and form_class = ?", Title_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndDepth Get MenuTrees via TitleAndHasChildrenAndDepth
func GetMenuTreesByTitleAndHasChildrenAndDepth(offset int, limit int, Title_ []byte, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and depth = ?", Title_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndP1 Get MenuTrees via TitleAndHasChildrenAndP1
func GetMenuTreesByTitleAndHasChildrenAndP1(offset int, limit int, Title_ []byte, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and p1 = ?", Title_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndP2 Get MenuTrees via TitleAndHasChildrenAndP2
func GetMenuTreesByTitleAndHasChildrenAndP2(offset int, limit int, Title_ []byte, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and p2 = ?", Title_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndP3 Get MenuTrees via TitleAndHasChildrenAndP3
func GetMenuTreesByTitleAndHasChildrenAndP3(offset int, limit int, Title_ []byte, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and p3 = ?", Title_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndP4 Get MenuTrees via TitleAndHasChildrenAndP4
func GetMenuTreesByTitleAndHasChildrenAndP4(offset int, limit int, Title_ []byte, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and p4 = ?", Title_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndP5 Get MenuTrees via TitleAndHasChildrenAndP5
func GetMenuTreesByTitleAndHasChildrenAndP5(offset int, limit int, Title_ []byte, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and p5 = ?", Title_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndP6 Get MenuTrees via TitleAndHasChildrenAndP6
func GetMenuTreesByTitleAndHasChildrenAndP6(offset int, limit int, Title_ []byte, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and p6 = ?", Title_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndP7 Get MenuTrees via TitleAndHasChildrenAndP7
func GetMenuTreesByTitleAndHasChildrenAndP7(offset int, limit int, Title_ []byte, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and p7 = ?", Title_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndP8 Get MenuTrees via TitleAndHasChildrenAndP8
func GetMenuTreesByTitleAndHasChildrenAndP8(offset int, limit int, Title_ []byte, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and p8 = ?", Title_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndP9 Get MenuTrees via TitleAndHasChildrenAndP9
func GetMenuTreesByTitleAndHasChildrenAndP9(offset int, limit int, Title_ []byte, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and p9 = ?", Title_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildrenAndFormClass Get MenuTrees via TitleAndHasChildrenAndFormClass
func GetMenuTreesByTitleAndHasChildrenAndFormClass(offset int, limit int, Title_ []byte, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ? and form_class = ?", Title_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepthAndP1 Get MenuTrees via TitleAndDepthAndP1
func GetMenuTreesByTitleAndDepthAndP1(offset int, limit int, Title_ []byte, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ? and p1 = ?", Title_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepthAndP2 Get MenuTrees via TitleAndDepthAndP2
func GetMenuTreesByTitleAndDepthAndP2(offset int, limit int, Title_ []byte, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ? and p2 = ?", Title_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepthAndP3 Get MenuTrees via TitleAndDepthAndP3
func GetMenuTreesByTitleAndDepthAndP3(offset int, limit int, Title_ []byte, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ? and p3 = ?", Title_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepthAndP4 Get MenuTrees via TitleAndDepthAndP4
func GetMenuTreesByTitleAndDepthAndP4(offset int, limit int, Title_ []byte, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ? and p4 = ?", Title_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepthAndP5 Get MenuTrees via TitleAndDepthAndP5
func GetMenuTreesByTitleAndDepthAndP5(offset int, limit int, Title_ []byte, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ? and p5 = ?", Title_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepthAndP6 Get MenuTrees via TitleAndDepthAndP6
func GetMenuTreesByTitleAndDepthAndP6(offset int, limit int, Title_ []byte, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ? and p6 = ?", Title_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepthAndP7 Get MenuTrees via TitleAndDepthAndP7
func GetMenuTreesByTitleAndDepthAndP7(offset int, limit int, Title_ []byte, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ? and p7 = ?", Title_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepthAndP8 Get MenuTrees via TitleAndDepthAndP8
func GetMenuTreesByTitleAndDepthAndP8(offset int, limit int, Title_ []byte, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ? and p8 = ?", Title_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepthAndP9 Get MenuTrees via TitleAndDepthAndP9
func GetMenuTreesByTitleAndDepthAndP9(offset int, limit int, Title_ []byte, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ? and p9 = ?", Title_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepthAndFormClass Get MenuTrees via TitleAndDepthAndFormClass
func GetMenuTreesByTitleAndDepthAndFormClass(offset int, limit int, Title_ []byte, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ? and form_class = ?", Title_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP1AndP2 Get MenuTrees via TitleAndP1AndP2
func GetMenuTreesByTitleAndP1AndP2(offset int, limit int, Title_ []byte, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p1 = ? and p2 = ?", Title_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP1AndP3 Get MenuTrees via TitleAndP1AndP3
func GetMenuTreesByTitleAndP1AndP3(offset int, limit int, Title_ []byte, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p1 = ? and p3 = ?", Title_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP1AndP4 Get MenuTrees via TitleAndP1AndP4
func GetMenuTreesByTitleAndP1AndP4(offset int, limit int, Title_ []byte, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p1 = ? and p4 = ?", Title_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP1AndP5 Get MenuTrees via TitleAndP1AndP5
func GetMenuTreesByTitleAndP1AndP5(offset int, limit int, Title_ []byte, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p1 = ? and p5 = ?", Title_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP1AndP6 Get MenuTrees via TitleAndP1AndP6
func GetMenuTreesByTitleAndP1AndP6(offset int, limit int, Title_ []byte, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p1 = ? and p6 = ?", Title_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP1AndP7 Get MenuTrees via TitleAndP1AndP7
func GetMenuTreesByTitleAndP1AndP7(offset int, limit int, Title_ []byte, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p1 = ? and p7 = ?", Title_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP1AndP8 Get MenuTrees via TitleAndP1AndP8
func GetMenuTreesByTitleAndP1AndP8(offset int, limit int, Title_ []byte, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p1 = ? and p8 = ?", Title_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP1AndP9 Get MenuTrees via TitleAndP1AndP9
func GetMenuTreesByTitleAndP1AndP9(offset int, limit int, Title_ []byte, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p1 = ? and p9 = ?", Title_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP1AndFormClass Get MenuTrees via TitleAndP1AndFormClass
func GetMenuTreesByTitleAndP1AndFormClass(offset int, limit int, Title_ []byte, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p1 = ? and form_class = ?", Title_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP2AndP3 Get MenuTrees via TitleAndP2AndP3
func GetMenuTreesByTitleAndP2AndP3(offset int, limit int, Title_ []byte, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p2 = ? and p3 = ?", Title_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP2AndP4 Get MenuTrees via TitleAndP2AndP4
func GetMenuTreesByTitleAndP2AndP4(offset int, limit int, Title_ []byte, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p2 = ? and p4 = ?", Title_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP2AndP5 Get MenuTrees via TitleAndP2AndP5
func GetMenuTreesByTitleAndP2AndP5(offset int, limit int, Title_ []byte, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p2 = ? and p5 = ?", Title_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP2AndP6 Get MenuTrees via TitleAndP2AndP6
func GetMenuTreesByTitleAndP2AndP6(offset int, limit int, Title_ []byte, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p2 = ? and p6 = ?", Title_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP2AndP7 Get MenuTrees via TitleAndP2AndP7
func GetMenuTreesByTitleAndP2AndP7(offset int, limit int, Title_ []byte, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p2 = ? and p7 = ?", Title_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP2AndP8 Get MenuTrees via TitleAndP2AndP8
func GetMenuTreesByTitleAndP2AndP8(offset int, limit int, Title_ []byte, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p2 = ? and p8 = ?", Title_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP2AndP9 Get MenuTrees via TitleAndP2AndP9
func GetMenuTreesByTitleAndP2AndP9(offset int, limit int, Title_ []byte, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p2 = ? and p9 = ?", Title_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP2AndFormClass Get MenuTrees via TitleAndP2AndFormClass
func GetMenuTreesByTitleAndP2AndFormClass(offset int, limit int, Title_ []byte, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p2 = ? and form_class = ?", Title_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP3AndP4 Get MenuTrees via TitleAndP3AndP4
func GetMenuTreesByTitleAndP3AndP4(offset int, limit int, Title_ []byte, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p3 = ? and p4 = ?", Title_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP3AndP5 Get MenuTrees via TitleAndP3AndP5
func GetMenuTreesByTitleAndP3AndP5(offset int, limit int, Title_ []byte, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p3 = ? and p5 = ?", Title_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP3AndP6 Get MenuTrees via TitleAndP3AndP6
func GetMenuTreesByTitleAndP3AndP6(offset int, limit int, Title_ []byte, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p3 = ? and p6 = ?", Title_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP3AndP7 Get MenuTrees via TitleAndP3AndP7
func GetMenuTreesByTitleAndP3AndP7(offset int, limit int, Title_ []byte, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p3 = ? and p7 = ?", Title_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP3AndP8 Get MenuTrees via TitleAndP3AndP8
func GetMenuTreesByTitleAndP3AndP8(offset int, limit int, Title_ []byte, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p3 = ? and p8 = ?", Title_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP3AndP9 Get MenuTrees via TitleAndP3AndP9
func GetMenuTreesByTitleAndP3AndP9(offset int, limit int, Title_ []byte, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p3 = ? and p9 = ?", Title_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP3AndFormClass Get MenuTrees via TitleAndP3AndFormClass
func GetMenuTreesByTitleAndP3AndFormClass(offset int, limit int, Title_ []byte, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p3 = ? and form_class = ?", Title_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP4AndP5 Get MenuTrees via TitleAndP4AndP5
func GetMenuTreesByTitleAndP4AndP5(offset int, limit int, Title_ []byte, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p4 = ? and p5 = ?", Title_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP4AndP6 Get MenuTrees via TitleAndP4AndP6
func GetMenuTreesByTitleAndP4AndP6(offset int, limit int, Title_ []byte, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p4 = ? and p6 = ?", Title_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP4AndP7 Get MenuTrees via TitleAndP4AndP7
func GetMenuTreesByTitleAndP4AndP7(offset int, limit int, Title_ []byte, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p4 = ? and p7 = ?", Title_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP4AndP8 Get MenuTrees via TitleAndP4AndP8
func GetMenuTreesByTitleAndP4AndP8(offset int, limit int, Title_ []byte, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p4 = ? and p8 = ?", Title_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP4AndP9 Get MenuTrees via TitleAndP4AndP9
func GetMenuTreesByTitleAndP4AndP9(offset int, limit int, Title_ []byte, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p4 = ? and p9 = ?", Title_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP4AndFormClass Get MenuTrees via TitleAndP4AndFormClass
func GetMenuTreesByTitleAndP4AndFormClass(offset int, limit int, Title_ []byte, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p4 = ? and form_class = ?", Title_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP5AndP6 Get MenuTrees via TitleAndP5AndP6
func GetMenuTreesByTitleAndP5AndP6(offset int, limit int, Title_ []byte, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p5 = ? and p6 = ?", Title_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP5AndP7 Get MenuTrees via TitleAndP5AndP7
func GetMenuTreesByTitleAndP5AndP7(offset int, limit int, Title_ []byte, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p5 = ? and p7 = ?", Title_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP5AndP8 Get MenuTrees via TitleAndP5AndP8
func GetMenuTreesByTitleAndP5AndP8(offset int, limit int, Title_ []byte, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p5 = ? and p8 = ?", Title_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP5AndP9 Get MenuTrees via TitleAndP5AndP9
func GetMenuTreesByTitleAndP5AndP9(offset int, limit int, Title_ []byte, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p5 = ? and p9 = ?", Title_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP5AndFormClass Get MenuTrees via TitleAndP5AndFormClass
func GetMenuTreesByTitleAndP5AndFormClass(offset int, limit int, Title_ []byte, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p5 = ? and form_class = ?", Title_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP6AndP7 Get MenuTrees via TitleAndP6AndP7
func GetMenuTreesByTitleAndP6AndP7(offset int, limit int, Title_ []byte, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p6 = ? and p7 = ?", Title_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP6AndP8 Get MenuTrees via TitleAndP6AndP8
func GetMenuTreesByTitleAndP6AndP8(offset int, limit int, Title_ []byte, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p6 = ? and p8 = ?", Title_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP6AndP9 Get MenuTrees via TitleAndP6AndP9
func GetMenuTreesByTitleAndP6AndP9(offset int, limit int, Title_ []byte, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p6 = ? and p9 = ?", Title_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP6AndFormClass Get MenuTrees via TitleAndP6AndFormClass
func GetMenuTreesByTitleAndP6AndFormClass(offset int, limit int, Title_ []byte, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p6 = ? and form_class = ?", Title_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP7AndP8 Get MenuTrees via TitleAndP7AndP8
func GetMenuTreesByTitleAndP7AndP8(offset int, limit int, Title_ []byte, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p7 = ? and p8 = ?", Title_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP7AndP9 Get MenuTrees via TitleAndP7AndP9
func GetMenuTreesByTitleAndP7AndP9(offset int, limit int, Title_ []byte, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p7 = ? and p9 = ?", Title_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP7AndFormClass Get MenuTrees via TitleAndP7AndFormClass
func GetMenuTreesByTitleAndP7AndFormClass(offset int, limit int, Title_ []byte, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p7 = ? and form_class = ?", Title_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP8AndP9 Get MenuTrees via TitleAndP8AndP9
func GetMenuTreesByTitleAndP8AndP9(offset int, limit int, Title_ []byte, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p8 = ? and p9 = ?", Title_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP8AndFormClass Get MenuTrees via TitleAndP8AndFormClass
func GetMenuTreesByTitleAndP8AndFormClass(offset int, limit int, Title_ []byte, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p8 = ? and form_class = ?", Title_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP9AndFormClass Get MenuTrees via TitleAndP9AndFormClass
func GetMenuTreesByTitleAndP9AndFormClass(offset int, limit int, Title_ []byte, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p9 = ? and form_class = ?", Title_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndOptions Get MenuTrees via DescriptionAndClassAndOptions
func GetMenuTreesByDescriptionAndClassAndOptions(offset int, limit int, Description_ []byte, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and options = ?", Description_, Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndProvider Get MenuTrees via DescriptionAndClassAndProvider
func GetMenuTreesByDescriptionAndClassAndProvider(offset int, limit int, Description_ []byte, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and provider = ?", Description_, Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndEnabled Get MenuTrees via DescriptionAndClassAndEnabled
func GetMenuTreesByDescriptionAndClassAndEnabled(offset int, limit int, Description_ []byte, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and enabled = ?", Description_, Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndDiscovered Get MenuTrees via DescriptionAndClassAndDiscovered
func GetMenuTreesByDescriptionAndClassAndDiscovered(offset int, limit int, Description_ []byte, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and discovered = ?", Description_, Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndExpanded Get MenuTrees via DescriptionAndClassAndExpanded
func GetMenuTreesByDescriptionAndClassAndExpanded(offset int, limit int, Description_ []byte, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and expanded = ?", Description_, Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndWeight Get MenuTrees via DescriptionAndClassAndWeight
func GetMenuTreesByDescriptionAndClassAndWeight(offset int, limit int, Description_ []byte, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and weight = ?", Description_, Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndMetadata Get MenuTrees via DescriptionAndClassAndMetadata
func GetMenuTreesByDescriptionAndClassAndMetadata(offset int, limit int, Description_ []byte, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and metadata = ?", Description_, Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndHasChildren Get MenuTrees via DescriptionAndClassAndHasChildren
func GetMenuTreesByDescriptionAndClassAndHasChildren(offset int, limit int, Description_ []byte, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and has_children = ?", Description_, Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndDepth Get MenuTrees via DescriptionAndClassAndDepth
func GetMenuTreesByDescriptionAndClassAndDepth(offset int, limit int, Description_ []byte, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and depth = ?", Description_, Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndP1 Get MenuTrees via DescriptionAndClassAndP1
func GetMenuTreesByDescriptionAndClassAndP1(offset int, limit int, Description_ []byte, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and p1 = ?", Description_, Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndP2 Get MenuTrees via DescriptionAndClassAndP2
func GetMenuTreesByDescriptionAndClassAndP2(offset int, limit int, Description_ []byte, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and p2 = ?", Description_, Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndP3 Get MenuTrees via DescriptionAndClassAndP3
func GetMenuTreesByDescriptionAndClassAndP3(offset int, limit int, Description_ []byte, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and p3 = ?", Description_, Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndP4 Get MenuTrees via DescriptionAndClassAndP4
func GetMenuTreesByDescriptionAndClassAndP4(offset int, limit int, Description_ []byte, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and p4 = ?", Description_, Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndP5 Get MenuTrees via DescriptionAndClassAndP5
func GetMenuTreesByDescriptionAndClassAndP5(offset int, limit int, Description_ []byte, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and p5 = ?", Description_, Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndP6 Get MenuTrees via DescriptionAndClassAndP6
func GetMenuTreesByDescriptionAndClassAndP6(offset int, limit int, Description_ []byte, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and p6 = ?", Description_, Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndP7 Get MenuTrees via DescriptionAndClassAndP7
func GetMenuTreesByDescriptionAndClassAndP7(offset int, limit int, Description_ []byte, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and p7 = ?", Description_, Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndP8 Get MenuTrees via DescriptionAndClassAndP8
func GetMenuTreesByDescriptionAndClassAndP8(offset int, limit int, Description_ []byte, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and p8 = ?", Description_, Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndP9 Get MenuTrees via DescriptionAndClassAndP9
func GetMenuTreesByDescriptionAndClassAndP9(offset int, limit int, Description_ []byte, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and p9 = ?", Description_, Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClassAndFormClass Get MenuTrees via DescriptionAndClassAndFormClass
func GetMenuTreesByDescriptionAndClassAndFormClass(offset int, limit int, Description_ []byte, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ? and form_class = ?", Description_, Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndProvider Get MenuTrees via DescriptionAndOptionsAndProvider
func GetMenuTreesByDescriptionAndOptionsAndProvider(offset int, limit int, Description_ []byte, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and provider = ?", Description_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndEnabled Get MenuTrees via DescriptionAndOptionsAndEnabled
func GetMenuTreesByDescriptionAndOptionsAndEnabled(offset int, limit int, Description_ []byte, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and enabled = ?", Description_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndDiscovered Get MenuTrees via DescriptionAndOptionsAndDiscovered
func GetMenuTreesByDescriptionAndOptionsAndDiscovered(offset int, limit int, Description_ []byte, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and discovered = ?", Description_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndExpanded Get MenuTrees via DescriptionAndOptionsAndExpanded
func GetMenuTreesByDescriptionAndOptionsAndExpanded(offset int, limit int, Description_ []byte, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and expanded = ?", Description_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndWeight Get MenuTrees via DescriptionAndOptionsAndWeight
func GetMenuTreesByDescriptionAndOptionsAndWeight(offset int, limit int, Description_ []byte, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and weight = ?", Description_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndMetadata Get MenuTrees via DescriptionAndOptionsAndMetadata
func GetMenuTreesByDescriptionAndOptionsAndMetadata(offset int, limit int, Description_ []byte, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and metadata = ?", Description_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndHasChildren Get MenuTrees via DescriptionAndOptionsAndHasChildren
func GetMenuTreesByDescriptionAndOptionsAndHasChildren(offset int, limit int, Description_ []byte, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and has_children = ?", Description_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndDepth Get MenuTrees via DescriptionAndOptionsAndDepth
func GetMenuTreesByDescriptionAndOptionsAndDepth(offset int, limit int, Description_ []byte, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and depth = ?", Description_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndP1 Get MenuTrees via DescriptionAndOptionsAndP1
func GetMenuTreesByDescriptionAndOptionsAndP1(offset int, limit int, Description_ []byte, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and p1 = ?", Description_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndP2 Get MenuTrees via DescriptionAndOptionsAndP2
func GetMenuTreesByDescriptionAndOptionsAndP2(offset int, limit int, Description_ []byte, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and p2 = ?", Description_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndP3 Get MenuTrees via DescriptionAndOptionsAndP3
func GetMenuTreesByDescriptionAndOptionsAndP3(offset int, limit int, Description_ []byte, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and p3 = ?", Description_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndP4 Get MenuTrees via DescriptionAndOptionsAndP4
func GetMenuTreesByDescriptionAndOptionsAndP4(offset int, limit int, Description_ []byte, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and p4 = ?", Description_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndP5 Get MenuTrees via DescriptionAndOptionsAndP5
func GetMenuTreesByDescriptionAndOptionsAndP5(offset int, limit int, Description_ []byte, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and p5 = ?", Description_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndP6 Get MenuTrees via DescriptionAndOptionsAndP6
func GetMenuTreesByDescriptionAndOptionsAndP6(offset int, limit int, Description_ []byte, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and p6 = ?", Description_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndP7 Get MenuTrees via DescriptionAndOptionsAndP7
func GetMenuTreesByDescriptionAndOptionsAndP7(offset int, limit int, Description_ []byte, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and p7 = ?", Description_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndP8 Get MenuTrees via DescriptionAndOptionsAndP8
func GetMenuTreesByDescriptionAndOptionsAndP8(offset int, limit int, Description_ []byte, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and p8 = ?", Description_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndP9 Get MenuTrees via DescriptionAndOptionsAndP9
func GetMenuTreesByDescriptionAndOptionsAndP9(offset int, limit int, Description_ []byte, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and p9 = ?", Description_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptionsAndFormClass Get MenuTrees via DescriptionAndOptionsAndFormClass
func GetMenuTreesByDescriptionAndOptionsAndFormClass(offset int, limit int, Description_ []byte, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ? and form_class = ?", Description_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndEnabled Get MenuTrees via DescriptionAndProviderAndEnabled
func GetMenuTreesByDescriptionAndProviderAndEnabled(offset int, limit int, Description_ []byte, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and enabled = ?", Description_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndDiscovered Get MenuTrees via DescriptionAndProviderAndDiscovered
func GetMenuTreesByDescriptionAndProviderAndDiscovered(offset int, limit int, Description_ []byte, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and discovered = ?", Description_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndExpanded Get MenuTrees via DescriptionAndProviderAndExpanded
func GetMenuTreesByDescriptionAndProviderAndExpanded(offset int, limit int, Description_ []byte, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and expanded = ?", Description_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndWeight Get MenuTrees via DescriptionAndProviderAndWeight
func GetMenuTreesByDescriptionAndProviderAndWeight(offset int, limit int, Description_ []byte, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and weight = ?", Description_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndMetadata Get MenuTrees via DescriptionAndProviderAndMetadata
func GetMenuTreesByDescriptionAndProviderAndMetadata(offset int, limit int, Description_ []byte, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and metadata = ?", Description_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndHasChildren Get MenuTrees via DescriptionAndProviderAndHasChildren
func GetMenuTreesByDescriptionAndProviderAndHasChildren(offset int, limit int, Description_ []byte, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and has_children = ?", Description_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndDepth Get MenuTrees via DescriptionAndProviderAndDepth
func GetMenuTreesByDescriptionAndProviderAndDepth(offset int, limit int, Description_ []byte, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and depth = ?", Description_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndP1 Get MenuTrees via DescriptionAndProviderAndP1
func GetMenuTreesByDescriptionAndProviderAndP1(offset int, limit int, Description_ []byte, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and p1 = ?", Description_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndP2 Get MenuTrees via DescriptionAndProviderAndP2
func GetMenuTreesByDescriptionAndProviderAndP2(offset int, limit int, Description_ []byte, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and p2 = ?", Description_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndP3 Get MenuTrees via DescriptionAndProviderAndP3
func GetMenuTreesByDescriptionAndProviderAndP3(offset int, limit int, Description_ []byte, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and p3 = ?", Description_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndP4 Get MenuTrees via DescriptionAndProviderAndP4
func GetMenuTreesByDescriptionAndProviderAndP4(offset int, limit int, Description_ []byte, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and p4 = ?", Description_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndP5 Get MenuTrees via DescriptionAndProviderAndP5
func GetMenuTreesByDescriptionAndProviderAndP5(offset int, limit int, Description_ []byte, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and p5 = ?", Description_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndP6 Get MenuTrees via DescriptionAndProviderAndP6
func GetMenuTreesByDescriptionAndProviderAndP6(offset int, limit int, Description_ []byte, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and p6 = ?", Description_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndP7 Get MenuTrees via DescriptionAndProviderAndP7
func GetMenuTreesByDescriptionAndProviderAndP7(offset int, limit int, Description_ []byte, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and p7 = ?", Description_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndP8 Get MenuTrees via DescriptionAndProviderAndP8
func GetMenuTreesByDescriptionAndProviderAndP8(offset int, limit int, Description_ []byte, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and p8 = ?", Description_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndP9 Get MenuTrees via DescriptionAndProviderAndP9
func GetMenuTreesByDescriptionAndProviderAndP9(offset int, limit int, Description_ []byte, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and p9 = ?", Description_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProviderAndFormClass Get MenuTrees via DescriptionAndProviderAndFormClass
func GetMenuTreesByDescriptionAndProviderAndFormClass(offset int, limit int, Description_ []byte, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ? and form_class = ?", Description_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndDiscovered Get MenuTrees via DescriptionAndEnabledAndDiscovered
func GetMenuTreesByDescriptionAndEnabledAndDiscovered(offset int, limit int, Description_ []byte, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and discovered = ?", Description_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndExpanded Get MenuTrees via DescriptionAndEnabledAndExpanded
func GetMenuTreesByDescriptionAndEnabledAndExpanded(offset int, limit int, Description_ []byte, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and expanded = ?", Description_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndWeight Get MenuTrees via DescriptionAndEnabledAndWeight
func GetMenuTreesByDescriptionAndEnabledAndWeight(offset int, limit int, Description_ []byte, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and weight = ?", Description_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndMetadata Get MenuTrees via DescriptionAndEnabledAndMetadata
func GetMenuTreesByDescriptionAndEnabledAndMetadata(offset int, limit int, Description_ []byte, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and metadata = ?", Description_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndHasChildren Get MenuTrees via DescriptionAndEnabledAndHasChildren
func GetMenuTreesByDescriptionAndEnabledAndHasChildren(offset int, limit int, Description_ []byte, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and has_children = ?", Description_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndDepth Get MenuTrees via DescriptionAndEnabledAndDepth
func GetMenuTreesByDescriptionAndEnabledAndDepth(offset int, limit int, Description_ []byte, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and depth = ?", Description_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndP1 Get MenuTrees via DescriptionAndEnabledAndP1
func GetMenuTreesByDescriptionAndEnabledAndP1(offset int, limit int, Description_ []byte, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and p1 = ?", Description_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndP2 Get MenuTrees via DescriptionAndEnabledAndP2
func GetMenuTreesByDescriptionAndEnabledAndP2(offset int, limit int, Description_ []byte, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and p2 = ?", Description_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndP3 Get MenuTrees via DescriptionAndEnabledAndP3
func GetMenuTreesByDescriptionAndEnabledAndP3(offset int, limit int, Description_ []byte, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and p3 = ?", Description_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndP4 Get MenuTrees via DescriptionAndEnabledAndP4
func GetMenuTreesByDescriptionAndEnabledAndP4(offset int, limit int, Description_ []byte, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and p4 = ?", Description_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndP5 Get MenuTrees via DescriptionAndEnabledAndP5
func GetMenuTreesByDescriptionAndEnabledAndP5(offset int, limit int, Description_ []byte, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and p5 = ?", Description_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndP6 Get MenuTrees via DescriptionAndEnabledAndP6
func GetMenuTreesByDescriptionAndEnabledAndP6(offset int, limit int, Description_ []byte, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and p6 = ?", Description_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndP7 Get MenuTrees via DescriptionAndEnabledAndP7
func GetMenuTreesByDescriptionAndEnabledAndP7(offset int, limit int, Description_ []byte, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and p7 = ?", Description_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndP8 Get MenuTrees via DescriptionAndEnabledAndP8
func GetMenuTreesByDescriptionAndEnabledAndP8(offset int, limit int, Description_ []byte, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and p8 = ?", Description_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndP9 Get MenuTrees via DescriptionAndEnabledAndP9
func GetMenuTreesByDescriptionAndEnabledAndP9(offset int, limit int, Description_ []byte, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and p9 = ?", Description_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabledAndFormClass Get MenuTrees via DescriptionAndEnabledAndFormClass
func GetMenuTreesByDescriptionAndEnabledAndFormClass(offset int, limit int, Description_ []byte, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ? and form_class = ?", Description_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndExpanded Get MenuTrees via DescriptionAndDiscoveredAndExpanded
func GetMenuTreesByDescriptionAndDiscoveredAndExpanded(offset int, limit int, Description_ []byte, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and expanded = ?", Description_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndWeight Get MenuTrees via DescriptionAndDiscoveredAndWeight
func GetMenuTreesByDescriptionAndDiscoveredAndWeight(offset int, limit int, Description_ []byte, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and weight = ?", Description_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndMetadata Get MenuTrees via DescriptionAndDiscoveredAndMetadata
func GetMenuTreesByDescriptionAndDiscoveredAndMetadata(offset int, limit int, Description_ []byte, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and metadata = ?", Description_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndHasChildren Get MenuTrees via DescriptionAndDiscoveredAndHasChildren
func GetMenuTreesByDescriptionAndDiscoveredAndHasChildren(offset int, limit int, Description_ []byte, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and has_children = ?", Description_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndDepth Get MenuTrees via DescriptionAndDiscoveredAndDepth
func GetMenuTreesByDescriptionAndDiscoveredAndDepth(offset int, limit int, Description_ []byte, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and depth = ?", Description_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndP1 Get MenuTrees via DescriptionAndDiscoveredAndP1
func GetMenuTreesByDescriptionAndDiscoveredAndP1(offset int, limit int, Description_ []byte, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and p1 = ?", Description_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndP2 Get MenuTrees via DescriptionAndDiscoveredAndP2
func GetMenuTreesByDescriptionAndDiscoveredAndP2(offset int, limit int, Description_ []byte, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and p2 = ?", Description_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndP3 Get MenuTrees via DescriptionAndDiscoveredAndP3
func GetMenuTreesByDescriptionAndDiscoveredAndP3(offset int, limit int, Description_ []byte, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and p3 = ?", Description_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndP4 Get MenuTrees via DescriptionAndDiscoveredAndP4
func GetMenuTreesByDescriptionAndDiscoveredAndP4(offset int, limit int, Description_ []byte, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and p4 = ?", Description_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndP5 Get MenuTrees via DescriptionAndDiscoveredAndP5
func GetMenuTreesByDescriptionAndDiscoveredAndP5(offset int, limit int, Description_ []byte, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and p5 = ?", Description_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndP6 Get MenuTrees via DescriptionAndDiscoveredAndP6
func GetMenuTreesByDescriptionAndDiscoveredAndP6(offset int, limit int, Description_ []byte, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and p6 = ?", Description_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndP7 Get MenuTrees via DescriptionAndDiscoveredAndP7
func GetMenuTreesByDescriptionAndDiscoveredAndP7(offset int, limit int, Description_ []byte, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and p7 = ?", Description_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndP8 Get MenuTrees via DescriptionAndDiscoveredAndP8
func GetMenuTreesByDescriptionAndDiscoveredAndP8(offset int, limit int, Description_ []byte, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and p8 = ?", Description_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndP9 Get MenuTrees via DescriptionAndDiscoveredAndP9
func GetMenuTreesByDescriptionAndDiscoveredAndP9(offset int, limit int, Description_ []byte, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and p9 = ?", Description_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscoveredAndFormClass Get MenuTrees via DescriptionAndDiscoveredAndFormClass
func GetMenuTreesByDescriptionAndDiscoveredAndFormClass(offset int, limit int, Description_ []byte, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ? and form_class = ?", Description_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndWeight Get MenuTrees via DescriptionAndExpandedAndWeight
func GetMenuTreesByDescriptionAndExpandedAndWeight(offset int, limit int, Description_ []byte, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and weight = ?", Description_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndMetadata Get MenuTrees via DescriptionAndExpandedAndMetadata
func GetMenuTreesByDescriptionAndExpandedAndMetadata(offset int, limit int, Description_ []byte, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and metadata = ?", Description_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndHasChildren Get MenuTrees via DescriptionAndExpandedAndHasChildren
func GetMenuTreesByDescriptionAndExpandedAndHasChildren(offset int, limit int, Description_ []byte, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and has_children = ?", Description_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndDepth Get MenuTrees via DescriptionAndExpandedAndDepth
func GetMenuTreesByDescriptionAndExpandedAndDepth(offset int, limit int, Description_ []byte, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and depth = ?", Description_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndP1 Get MenuTrees via DescriptionAndExpandedAndP1
func GetMenuTreesByDescriptionAndExpandedAndP1(offset int, limit int, Description_ []byte, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and p1 = ?", Description_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndP2 Get MenuTrees via DescriptionAndExpandedAndP2
func GetMenuTreesByDescriptionAndExpandedAndP2(offset int, limit int, Description_ []byte, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and p2 = ?", Description_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndP3 Get MenuTrees via DescriptionAndExpandedAndP3
func GetMenuTreesByDescriptionAndExpandedAndP3(offset int, limit int, Description_ []byte, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and p3 = ?", Description_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndP4 Get MenuTrees via DescriptionAndExpandedAndP4
func GetMenuTreesByDescriptionAndExpandedAndP4(offset int, limit int, Description_ []byte, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and p4 = ?", Description_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndP5 Get MenuTrees via DescriptionAndExpandedAndP5
func GetMenuTreesByDescriptionAndExpandedAndP5(offset int, limit int, Description_ []byte, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and p5 = ?", Description_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndP6 Get MenuTrees via DescriptionAndExpandedAndP6
func GetMenuTreesByDescriptionAndExpandedAndP6(offset int, limit int, Description_ []byte, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and p6 = ?", Description_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndP7 Get MenuTrees via DescriptionAndExpandedAndP7
func GetMenuTreesByDescriptionAndExpandedAndP7(offset int, limit int, Description_ []byte, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and p7 = ?", Description_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndP8 Get MenuTrees via DescriptionAndExpandedAndP8
func GetMenuTreesByDescriptionAndExpandedAndP8(offset int, limit int, Description_ []byte, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and p8 = ?", Description_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndP9 Get MenuTrees via DescriptionAndExpandedAndP9
func GetMenuTreesByDescriptionAndExpandedAndP9(offset int, limit int, Description_ []byte, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and p9 = ?", Description_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpandedAndFormClass Get MenuTrees via DescriptionAndExpandedAndFormClass
func GetMenuTreesByDescriptionAndExpandedAndFormClass(offset int, limit int, Description_ []byte, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ? and form_class = ?", Description_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndMetadata Get MenuTrees via DescriptionAndWeightAndMetadata
func GetMenuTreesByDescriptionAndWeightAndMetadata(offset int, limit int, Description_ []byte, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and metadata = ?", Description_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndHasChildren Get MenuTrees via DescriptionAndWeightAndHasChildren
func GetMenuTreesByDescriptionAndWeightAndHasChildren(offset int, limit int, Description_ []byte, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and has_children = ?", Description_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndDepth Get MenuTrees via DescriptionAndWeightAndDepth
func GetMenuTreesByDescriptionAndWeightAndDepth(offset int, limit int, Description_ []byte, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and depth = ?", Description_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndP1 Get MenuTrees via DescriptionAndWeightAndP1
func GetMenuTreesByDescriptionAndWeightAndP1(offset int, limit int, Description_ []byte, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and p1 = ?", Description_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndP2 Get MenuTrees via DescriptionAndWeightAndP2
func GetMenuTreesByDescriptionAndWeightAndP2(offset int, limit int, Description_ []byte, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and p2 = ?", Description_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndP3 Get MenuTrees via DescriptionAndWeightAndP3
func GetMenuTreesByDescriptionAndWeightAndP3(offset int, limit int, Description_ []byte, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and p3 = ?", Description_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndP4 Get MenuTrees via DescriptionAndWeightAndP4
func GetMenuTreesByDescriptionAndWeightAndP4(offset int, limit int, Description_ []byte, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and p4 = ?", Description_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndP5 Get MenuTrees via DescriptionAndWeightAndP5
func GetMenuTreesByDescriptionAndWeightAndP5(offset int, limit int, Description_ []byte, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and p5 = ?", Description_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndP6 Get MenuTrees via DescriptionAndWeightAndP6
func GetMenuTreesByDescriptionAndWeightAndP6(offset int, limit int, Description_ []byte, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and p6 = ?", Description_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndP7 Get MenuTrees via DescriptionAndWeightAndP7
func GetMenuTreesByDescriptionAndWeightAndP7(offset int, limit int, Description_ []byte, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and p7 = ?", Description_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndP8 Get MenuTrees via DescriptionAndWeightAndP8
func GetMenuTreesByDescriptionAndWeightAndP8(offset int, limit int, Description_ []byte, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and p8 = ?", Description_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndP9 Get MenuTrees via DescriptionAndWeightAndP9
func GetMenuTreesByDescriptionAndWeightAndP9(offset int, limit int, Description_ []byte, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and p9 = ?", Description_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeightAndFormClass Get MenuTrees via DescriptionAndWeightAndFormClass
func GetMenuTreesByDescriptionAndWeightAndFormClass(offset int, limit int, Description_ []byte, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ? and form_class = ?", Description_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndHasChildren Get MenuTrees via DescriptionAndMetadataAndHasChildren
func GetMenuTreesByDescriptionAndMetadataAndHasChildren(offset int, limit int, Description_ []byte, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and has_children = ?", Description_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndDepth Get MenuTrees via DescriptionAndMetadataAndDepth
func GetMenuTreesByDescriptionAndMetadataAndDepth(offset int, limit int, Description_ []byte, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and depth = ?", Description_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndP1 Get MenuTrees via DescriptionAndMetadataAndP1
func GetMenuTreesByDescriptionAndMetadataAndP1(offset int, limit int, Description_ []byte, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and p1 = ?", Description_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndP2 Get MenuTrees via DescriptionAndMetadataAndP2
func GetMenuTreesByDescriptionAndMetadataAndP2(offset int, limit int, Description_ []byte, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and p2 = ?", Description_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndP3 Get MenuTrees via DescriptionAndMetadataAndP3
func GetMenuTreesByDescriptionAndMetadataAndP3(offset int, limit int, Description_ []byte, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and p3 = ?", Description_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndP4 Get MenuTrees via DescriptionAndMetadataAndP4
func GetMenuTreesByDescriptionAndMetadataAndP4(offset int, limit int, Description_ []byte, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and p4 = ?", Description_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndP5 Get MenuTrees via DescriptionAndMetadataAndP5
func GetMenuTreesByDescriptionAndMetadataAndP5(offset int, limit int, Description_ []byte, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and p5 = ?", Description_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndP6 Get MenuTrees via DescriptionAndMetadataAndP6
func GetMenuTreesByDescriptionAndMetadataAndP6(offset int, limit int, Description_ []byte, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and p6 = ?", Description_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndP7 Get MenuTrees via DescriptionAndMetadataAndP7
func GetMenuTreesByDescriptionAndMetadataAndP7(offset int, limit int, Description_ []byte, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and p7 = ?", Description_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndP8 Get MenuTrees via DescriptionAndMetadataAndP8
func GetMenuTreesByDescriptionAndMetadataAndP8(offset int, limit int, Description_ []byte, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and p8 = ?", Description_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndP9 Get MenuTrees via DescriptionAndMetadataAndP9
func GetMenuTreesByDescriptionAndMetadataAndP9(offset int, limit int, Description_ []byte, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and p9 = ?", Description_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadataAndFormClass Get MenuTrees via DescriptionAndMetadataAndFormClass
func GetMenuTreesByDescriptionAndMetadataAndFormClass(offset int, limit int, Description_ []byte, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ? and form_class = ?", Description_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndDepth Get MenuTrees via DescriptionAndHasChildrenAndDepth
func GetMenuTreesByDescriptionAndHasChildrenAndDepth(offset int, limit int, Description_ []byte, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and depth = ?", Description_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndP1 Get MenuTrees via DescriptionAndHasChildrenAndP1
func GetMenuTreesByDescriptionAndHasChildrenAndP1(offset int, limit int, Description_ []byte, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and p1 = ?", Description_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndP2 Get MenuTrees via DescriptionAndHasChildrenAndP2
func GetMenuTreesByDescriptionAndHasChildrenAndP2(offset int, limit int, Description_ []byte, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and p2 = ?", Description_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndP3 Get MenuTrees via DescriptionAndHasChildrenAndP3
func GetMenuTreesByDescriptionAndHasChildrenAndP3(offset int, limit int, Description_ []byte, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and p3 = ?", Description_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndP4 Get MenuTrees via DescriptionAndHasChildrenAndP4
func GetMenuTreesByDescriptionAndHasChildrenAndP4(offset int, limit int, Description_ []byte, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and p4 = ?", Description_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndP5 Get MenuTrees via DescriptionAndHasChildrenAndP5
func GetMenuTreesByDescriptionAndHasChildrenAndP5(offset int, limit int, Description_ []byte, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and p5 = ?", Description_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndP6 Get MenuTrees via DescriptionAndHasChildrenAndP6
func GetMenuTreesByDescriptionAndHasChildrenAndP6(offset int, limit int, Description_ []byte, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and p6 = ?", Description_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndP7 Get MenuTrees via DescriptionAndHasChildrenAndP7
func GetMenuTreesByDescriptionAndHasChildrenAndP7(offset int, limit int, Description_ []byte, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and p7 = ?", Description_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndP8 Get MenuTrees via DescriptionAndHasChildrenAndP8
func GetMenuTreesByDescriptionAndHasChildrenAndP8(offset int, limit int, Description_ []byte, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and p8 = ?", Description_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndP9 Get MenuTrees via DescriptionAndHasChildrenAndP9
func GetMenuTreesByDescriptionAndHasChildrenAndP9(offset int, limit int, Description_ []byte, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and p9 = ?", Description_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildrenAndFormClass Get MenuTrees via DescriptionAndHasChildrenAndFormClass
func GetMenuTreesByDescriptionAndHasChildrenAndFormClass(offset int, limit int, Description_ []byte, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ? and form_class = ?", Description_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepthAndP1 Get MenuTrees via DescriptionAndDepthAndP1
func GetMenuTreesByDescriptionAndDepthAndP1(offset int, limit int, Description_ []byte, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ? and p1 = ?", Description_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepthAndP2 Get MenuTrees via DescriptionAndDepthAndP2
func GetMenuTreesByDescriptionAndDepthAndP2(offset int, limit int, Description_ []byte, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ? and p2 = ?", Description_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepthAndP3 Get MenuTrees via DescriptionAndDepthAndP3
func GetMenuTreesByDescriptionAndDepthAndP3(offset int, limit int, Description_ []byte, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ? and p3 = ?", Description_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepthAndP4 Get MenuTrees via DescriptionAndDepthAndP4
func GetMenuTreesByDescriptionAndDepthAndP4(offset int, limit int, Description_ []byte, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ? and p4 = ?", Description_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepthAndP5 Get MenuTrees via DescriptionAndDepthAndP5
func GetMenuTreesByDescriptionAndDepthAndP5(offset int, limit int, Description_ []byte, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ? and p5 = ?", Description_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepthAndP6 Get MenuTrees via DescriptionAndDepthAndP6
func GetMenuTreesByDescriptionAndDepthAndP6(offset int, limit int, Description_ []byte, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ? and p6 = ?", Description_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepthAndP7 Get MenuTrees via DescriptionAndDepthAndP7
func GetMenuTreesByDescriptionAndDepthAndP7(offset int, limit int, Description_ []byte, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ? and p7 = ?", Description_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepthAndP8 Get MenuTrees via DescriptionAndDepthAndP8
func GetMenuTreesByDescriptionAndDepthAndP8(offset int, limit int, Description_ []byte, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ? and p8 = ?", Description_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepthAndP9 Get MenuTrees via DescriptionAndDepthAndP9
func GetMenuTreesByDescriptionAndDepthAndP9(offset int, limit int, Description_ []byte, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ? and p9 = ?", Description_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepthAndFormClass Get MenuTrees via DescriptionAndDepthAndFormClass
func GetMenuTreesByDescriptionAndDepthAndFormClass(offset int, limit int, Description_ []byte, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ? and form_class = ?", Description_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP1AndP2 Get MenuTrees via DescriptionAndP1AndP2
func GetMenuTreesByDescriptionAndP1AndP2(offset int, limit int, Description_ []byte, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p1 = ? and p2 = ?", Description_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP1AndP3 Get MenuTrees via DescriptionAndP1AndP3
func GetMenuTreesByDescriptionAndP1AndP3(offset int, limit int, Description_ []byte, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p1 = ? and p3 = ?", Description_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP1AndP4 Get MenuTrees via DescriptionAndP1AndP4
func GetMenuTreesByDescriptionAndP1AndP4(offset int, limit int, Description_ []byte, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p1 = ? and p4 = ?", Description_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP1AndP5 Get MenuTrees via DescriptionAndP1AndP5
func GetMenuTreesByDescriptionAndP1AndP5(offset int, limit int, Description_ []byte, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p1 = ? and p5 = ?", Description_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP1AndP6 Get MenuTrees via DescriptionAndP1AndP6
func GetMenuTreesByDescriptionAndP1AndP6(offset int, limit int, Description_ []byte, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p1 = ? and p6 = ?", Description_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP1AndP7 Get MenuTrees via DescriptionAndP1AndP7
func GetMenuTreesByDescriptionAndP1AndP7(offset int, limit int, Description_ []byte, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p1 = ? and p7 = ?", Description_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP1AndP8 Get MenuTrees via DescriptionAndP1AndP8
func GetMenuTreesByDescriptionAndP1AndP8(offset int, limit int, Description_ []byte, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p1 = ? and p8 = ?", Description_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP1AndP9 Get MenuTrees via DescriptionAndP1AndP9
func GetMenuTreesByDescriptionAndP1AndP9(offset int, limit int, Description_ []byte, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p1 = ? and p9 = ?", Description_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP1AndFormClass Get MenuTrees via DescriptionAndP1AndFormClass
func GetMenuTreesByDescriptionAndP1AndFormClass(offset int, limit int, Description_ []byte, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p1 = ? and form_class = ?", Description_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP2AndP3 Get MenuTrees via DescriptionAndP2AndP3
func GetMenuTreesByDescriptionAndP2AndP3(offset int, limit int, Description_ []byte, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p2 = ? and p3 = ?", Description_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP2AndP4 Get MenuTrees via DescriptionAndP2AndP4
func GetMenuTreesByDescriptionAndP2AndP4(offset int, limit int, Description_ []byte, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p2 = ? and p4 = ?", Description_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP2AndP5 Get MenuTrees via DescriptionAndP2AndP5
func GetMenuTreesByDescriptionAndP2AndP5(offset int, limit int, Description_ []byte, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p2 = ? and p5 = ?", Description_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP2AndP6 Get MenuTrees via DescriptionAndP2AndP6
func GetMenuTreesByDescriptionAndP2AndP6(offset int, limit int, Description_ []byte, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p2 = ? and p6 = ?", Description_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP2AndP7 Get MenuTrees via DescriptionAndP2AndP7
func GetMenuTreesByDescriptionAndP2AndP7(offset int, limit int, Description_ []byte, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p2 = ? and p7 = ?", Description_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP2AndP8 Get MenuTrees via DescriptionAndP2AndP8
func GetMenuTreesByDescriptionAndP2AndP8(offset int, limit int, Description_ []byte, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p2 = ? and p8 = ?", Description_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP2AndP9 Get MenuTrees via DescriptionAndP2AndP9
func GetMenuTreesByDescriptionAndP2AndP9(offset int, limit int, Description_ []byte, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p2 = ? and p9 = ?", Description_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP2AndFormClass Get MenuTrees via DescriptionAndP2AndFormClass
func GetMenuTreesByDescriptionAndP2AndFormClass(offset int, limit int, Description_ []byte, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p2 = ? and form_class = ?", Description_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP3AndP4 Get MenuTrees via DescriptionAndP3AndP4
func GetMenuTreesByDescriptionAndP3AndP4(offset int, limit int, Description_ []byte, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p3 = ? and p4 = ?", Description_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP3AndP5 Get MenuTrees via DescriptionAndP3AndP5
func GetMenuTreesByDescriptionAndP3AndP5(offset int, limit int, Description_ []byte, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p3 = ? and p5 = ?", Description_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP3AndP6 Get MenuTrees via DescriptionAndP3AndP6
func GetMenuTreesByDescriptionAndP3AndP6(offset int, limit int, Description_ []byte, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p3 = ? and p6 = ?", Description_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP3AndP7 Get MenuTrees via DescriptionAndP3AndP7
func GetMenuTreesByDescriptionAndP3AndP7(offset int, limit int, Description_ []byte, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p3 = ? and p7 = ?", Description_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP3AndP8 Get MenuTrees via DescriptionAndP3AndP8
func GetMenuTreesByDescriptionAndP3AndP8(offset int, limit int, Description_ []byte, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p3 = ? and p8 = ?", Description_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP3AndP9 Get MenuTrees via DescriptionAndP3AndP9
func GetMenuTreesByDescriptionAndP3AndP9(offset int, limit int, Description_ []byte, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p3 = ? and p9 = ?", Description_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP3AndFormClass Get MenuTrees via DescriptionAndP3AndFormClass
func GetMenuTreesByDescriptionAndP3AndFormClass(offset int, limit int, Description_ []byte, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p3 = ? and form_class = ?", Description_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP4AndP5 Get MenuTrees via DescriptionAndP4AndP5
func GetMenuTreesByDescriptionAndP4AndP5(offset int, limit int, Description_ []byte, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p4 = ? and p5 = ?", Description_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP4AndP6 Get MenuTrees via DescriptionAndP4AndP6
func GetMenuTreesByDescriptionAndP4AndP6(offset int, limit int, Description_ []byte, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p4 = ? and p6 = ?", Description_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP4AndP7 Get MenuTrees via DescriptionAndP4AndP7
func GetMenuTreesByDescriptionAndP4AndP7(offset int, limit int, Description_ []byte, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p4 = ? and p7 = ?", Description_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP4AndP8 Get MenuTrees via DescriptionAndP4AndP8
func GetMenuTreesByDescriptionAndP4AndP8(offset int, limit int, Description_ []byte, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p4 = ? and p8 = ?", Description_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP4AndP9 Get MenuTrees via DescriptionAndP4AndP9
func GetMenuTreesByDescriptionAndP4AndP9(offset int, limit int, Description_ []byte, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p4 = ? and p9 = ?", Description_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP4AndFormClass Get MenuTrees via DescriptionAndP4AndFormClass
func GetMenuTreesByDescriptionAndP4AndFormClass(offset int, limit int, Description_ []byte, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p4 = ? and form_class = ?", Description_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP5AndP6 Get MenuTrees via DescriptionAndP5AndP6
func GetMenuTreesByDescriptionAndP5AndP6(offset int, limit int, Description_ []byte, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p5 = ? and p6 = ?", Description_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP5AndP7 Get MenuTrees via DescriptionAndP5AndP7
func GetMenuTreesByDescriptionAndP5AndP7(offset int, limit int, Description_ []byte, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p5 = ? and p7 = ?", Description_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP5AndP8 Get MenuTrees via DescriptionAndP5AndP8
func GetMenuTreesByDescriptionAndP5AndP8(offset int, limit int, Description_ []byte, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p5 = ? and p8 = ?", Description_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP5AndP9 Get MenuTrees via DescriptionAndP5AndP9
func GetMenuTreesByDescriptionAndP5AndP9(offset int, limit int, Description_ []byte, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p5 = ? and p9 = ?", Description_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP5AndFormClass Get MenuTrees via DescriptionAndP5AndFormClass
func GetMenuTreesByDescriptionAndP5AndFormClass(offset int, limit int, Description_ []byte, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p5 = ? and form_class = ?", Description_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP6AndP7 Get MenuTrees via DescriptionAndP6AndP7
func GetMenuTreesByDescriptionAndP6AndP7(offset int, limit int, Description_ []byte, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p6 = ? and p7 = ?", Description_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP6AndP8 Get MenuTrees via DescriptionAndP6AndP8
func GetMenuTreesByDescriptionAndP6AndP8(offset int, limit int, Description_ []byte, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p6 = ? and p8 = ?", Description_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP6AndP9 Get MenuTrees via DescriptionAndP6AndP9
func GetMenuTreesByDescriptionAndP6AndP9(offset int, limit int, Description_ []byte, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p6 = ? and p9 = ?", Description_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP6AndFormClass Get MenuTrees via DescriptionAndP6AndFormClass
func GetMenuTreesByDescriptionAndP6AndFormClass(offset int, limit int, Description_ []byte, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p6 = ? and form_class = ?", Description_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP7AndP8 Get MenuTrees via DescriptionAndP7AndP8
func GetMenuTreesByDescriptionAndP7AndP8(offset int, limit int, Description_ []byte, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p7 = ? and p8 = ?", Description_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP7AndP9 Get MenuTrees via DescriptionAndP7AndP9
func GetMenuTreesByDescriptionAndP7AndP9(offset int, limit int, Description_ []byte, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p7 = ? and p9 = ?", Description_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP7AndFormClass Get MenuTrees via DescriptionAndP7AndFormClass
func GetMenuTreesByDescriptionAndP7AndFormClass(offset int, limit int, Description_ []byte, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p7 = ? and form_class = ?", Description_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP8AndP9 Get MenuTrees via DescriptionAndP8AndP9
func GetMenuTreesByDescriptionAndP8AndP9(offset int, limit int, Description_ []byte, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p8 = ? and p9 = ?", Description_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP8AndFormClass Get MenuTrees via DescriptionAndP8AndFormClass
func GetMenuTreesByDescriptionAndP8AndFormClass(offset int, limit int, Description_ []byte, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p8 = ? and form_class = ?", Description_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP9AndFormClass Get MenuTrees via DescriptionAndP9AndFormClass
func GetMenuTreesByDescriptionAndP9AndFormClass(offset int, limit int, Description_ []byte, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p9 = ? and form_class = ?", Description_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndProvider Get MenuTrees via ClassAndOptionsAndProvider
func GetMenuTreesByClassAndOptionsAndProvider(offset int, limit int, Class_ string, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and provider = ?", Class_, Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndEnabled Get MenuTrees via ClassAndOptionsAndEnabled
func GetMenuTreesByClassAndOptionsAndEnabled(offset int, limit int, Class_ string, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and enabled = ?", Class_, Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndDiscovered Get MenuTrees via ClassAndOptionsAndDiscovered
func GetMenuTreesByClassAndOptionsAndDiscovered(offset int, limit int, Class_ string, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and discovered = ?", Class_, Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndExpanded Get MenuTrees via ClassAndOptionsAndExpanded
func GetMenuTreesByClassAndOptionsAndExpanded(offset int, limit int, Class_ string, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and expanded = ?", Class_, Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndWeight Get MenuTrees via ClassAndOptionsAndWeight
func GetMenuTreesByClassAndOptionsAndWeight(offset int, limit int, Class_ string, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and weight = ?", Class_, Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndMetadata Get MenuTrees via ClassAndOptionsAndMetadata
func GetMenuTreesByClassAndOptionsAndMetadata(offset int, limit int, Class_ string, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and metadata = ?", Class_, Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndHasChildren Get MenuTrees via ClassAndOptionsAndHasChildren
func GetMenuTreesByClassAndOptionsAndHasChildren(offset int, limit int, Class_ string, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and has_children = ?", Class_, Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndDepth Get MenuTrees via ClassAndOptionsAndDepth
func GetMenuTreesByClassAndOptionsAndDepth(offset int, limit int, Class_ string, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and depth = ?", Class_, Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndP1 Get MenuTrees via ClassAndOptionsAndP1
func GetMenuTreesByClassAndOptionsAndP1(offset int, limit int, Class_ string, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and p1 = ?", Class_, Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndP2 Get MenuTrees via ClassAndOptionsAndP2
func GetMenuTreesByClassAndOptionsAndP2(offset int, limit int, Class_ string, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and p2 = ?", Class_, Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndP3 Get MenuTrees via ClassAndOptionsAndP3
func GetMenuTreesByClassAndOptionsAndP3(offset int, limit int, Class_ string, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and p3 = ?", Class_, Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndP4 Get MenuTrees via ClassAndOptionsAndP4
func GetMenuTreesByClassAndOptionsAndP4(offset int, limit int, Class_ string, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and p4 = ?", Class_, Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndP5 Get MenuTrees via ClassAndOptionsAndP5
func GetMenuTreesByClassAndOptionsAndP5(offset int, limit int, Class_ string, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and p5 = ?", Class_, Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndP6 Get MenuTrees via ClassAndOptionsAndP6
func GetMenuTreesByClassAndOptionsAndP6(offset int, limit int, Class_ string, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and p6 = ?", Class_, Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndP7 Get MenuTrees via ClassAndOptionsAndP7
func GetMenuTreesByClassAndOptionsAndP7(offset int, limit int, Class_ string, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and p7 = ?", Class_, Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndP8 Get MenuTrees via ClassAndOptionsAndP8
func GetMenuTreesByClassAndOptionsAndP8(offset int, limit int, Class_ string, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and p8 = ?", Class_, Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndP9 Get MenuTrees via ClassAndOptionsAndP9
func GetMenuTreesByClassAndOptionsAndP9(offset int, limit int, Class_ string, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and p9 = ?", Class_, Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptionsAndFormClass Get MenuTrees via ClassAndOptionsAndFormClass
func GetMenuTreesByClassAndOptionsAndFormClass(offset int, limit int, Class_ string, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ? and form_class = ?", Class_, Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndEnabled Get MenuTrees via ClassAndProviderAndEnabled
func GetMenuTreesByClassAndProviderAndEnabled(offset int, limit int, Class_ string, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and enabled = ?", Class_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndDiscovered Get MenuTrees via ClassAndProviderAndDiscovered
func GetMenuTreesByClassAndProviderAndDiscovered(offset int, limit int, Class_ string, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and discovered = ?", Class_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndExpanded Get MenuTrees via ClassAndProviderAndExpanded
func GetMenuTreesByClassAndProviderAndExpanded(offset int, limit int, Class_ string, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and expanded = ?", Class_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndWeight Get MenuTrees via ClassAndProviderAndWeight
func GetMenuTreesByClassAndProviderAndWeight(offset int, limit int, Class_ string, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and weight = ?", Class_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndMetadata Get MenuTrees via ClassAndProviderAndMetadata
func GetMenuTreesByClassAndProviderAndMetadata(offset int, limit int, Class_ string, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and metadata = ?", Class_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndHasChildren Get MenuTrees via ClassAndProviderAndHasChildren
func GetMenuTreesByClassAndProviderAndHasChildren(offset int, limit int, Class_ string, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and has_children = ?", Class_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndDepth Get MenuTrees via ClassAndProviderAndDepth
func GetMenuTreesByClassAndProviderAndDepth(offset int, limit int, Class_ string, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and depth = ?", Class_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndP1 Get MenuTrees via ClassAndProviderAndP1
func GetMenuTreesByClassAndProviderAndP1(offset int, limit int, Class_ string, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and p1 = ?", Class_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndP2 Get MenuTrees via ClassAndProviderAndP2
func GetMenuTreesByClassAndProviderAndP2(offset int, limit int, Class_ string, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and p2 = ?", Class_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndP3 Get MenuTrees via ClassAndProviderAndP3
func GetMenuTreesByClassAndProviderAndP3(offset int, limit int, Class_ string, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and p3 = ?", Class_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndP4 Get MenuTrees via ClassAndProviderAndP4
func GetMenuTreesByClassAndProviderAndP4(offset int, limit int, Class_ string, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and p4 = ?", Class_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndP5 Get MenuTrees via ClassAndProviderAndP5
func GetMenuTreesByClassAndProviderAndP5(offset int, limit int, Class_ string, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and p5 = ?", Class_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndP6 Get MenuTrees via ClassAndProviderAndP6
func GetMenuTreesByClassAndProviderAndP6(offset int, limit int, Class_ string, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and p6 = ?", Class_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndP7 Get MenuTrees via ClassAndProviderAndP7
func GetMenuTreesByClassAndProviderAndP7(offset int, limit int, Class_ string, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and p7 = ?", Class_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndP8 Get MenuTrees via ClassAndProviderAndP8
func GetMenuTreesByClassAndProviderAndP8(offset int, limit int, Class_ string, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and p8 = ?", Class_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndP9 Get MenuTrees via ClassAndProviderAndP9
func GetMenuTreesByClassAndProviderAndP9(offset int, limit int, Class_ string, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and p9 = ?", Class_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProviderAndFormClass Get MenuTrees via ClassAndProviderAndFormClass
func GetMenuTreesByClassAndProviderAndFormClass(offset int, limit int, Class_ string, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ? and form_class = ?", Class_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndDiscovered Get MenuTrees via ClassAndEnabledAndDiscovered
func GetMenuTreesByClassAndEnabledAndDiscovered(offset int, limit int, Class_ string, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and discovered = ?", Class_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndExpanded Get MenuTrees via ClassAndEnabledAndExpanded
func GetMenuTreesByClassAndEnabledAndExpanded(offset int, limit int, Class_ string, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and expanded = ?", Class_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndWeight Get MenuTrees via ClassAndEnabledAndWeight
func GetMenuTreesByClassAndEnabledAndWeight(offset int, limit int, Class_ string, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and weight = ?", Class_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndMetadata Get MenuTrees via ClassAndEnabledAndMetadata
func GetMenuTreesByClassAndEnabledAndMetadata(offset int, limit int, Class_ string, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and metadata = ?", Class_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndHasChildren Get MenuTrees via ClassAndEnabledAndHasChildren
func GetMenuTreesByClassAndEnabledAndHasChildren(offset int, limit int, Class_ string, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and has_children = ?", Class_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndDepth Get MenuTrees via ClassAndEnabledAndDepth
func GetMenuTreesByClassAndEnabledAndDepth(offset int, limit int, Class_ string, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and depth = ?", Class_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndP1 Get MenuTrees via ClassAndEnabledAndP1
func GetMenuTreesByClassAndEnabledAndP1(offset int, limit int, Class_ string, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and p1 = ?", Class_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndP2 Get MenuTrees via ClassAndEnabledAndP2
func GetMenuTreesByClassAndEnabledAndP2(offset int, limit int, Class_ string, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and p2 = ?", Class_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndP3 Get MenuTrees via ClassAndEnabledAndP3
func GetMenuTreesByClassAndEnabledAndP3(offset int, limit int, Class_ string, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and p3 = ?", Class_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndP4 Get MenuTrees via ClassAndEnabledAndP4
func GetMenuTreesByClassAndEnabledAndP4(offset int, limit int, Class_ string, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and p4 = ?", Class_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndP5 Get MenuTrees via ClassAndEnabledAndP5
func GetMenuTreesByClassAndEnabledAndP5(offset int, limit int, Class_ string, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and p5 = ?", Class_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndP6 Get MenuTrees via ClassAndEnabledAndP6
func GetMenuTreesByClassAndEnabledAndP6(offset int, limit int, Class_ string, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and p6 = ?", Class_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndP7 Get MenuTrees via ClassAndEnabledAndP7
func GetMenuTreesByClassAndEnabledAndP7(offset int, limit int, Class_ string, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and p7 = ?", Class_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndP8 Get MenuTrees via ClassAndEnabledAndP8
func GetMenuTreesByClassAndEnabledAndP8(offset int, limit int, Class_ string, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and p8 = ?", Class_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndP9 Get MenuTrees via ClassAndEnabledAndP9
func GetMenuTreesByClassAndEnabledAndP9(offset int, limit int, Class_ string, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and p9 = ?", Class_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabledAndFormClass Get MenuTrees via ClassAndEnabledAndFormClass
func GetMenuTreesByClassAndEnabledAndFormClass(offset int, limit int, Class_ string, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ? and form_class = ?", Class_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndExpanded Get MenuTrees via ClassAndDiscoveredAndExpanded
func GetMenuTreesByClassAndDiscoveredAndExpanded(offset int, limit int, Class_ string, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and expanded = ?", Class_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndWeight Get MenuTrees via ClassAndDiscoveredAndWeight
func GetMenuTreesByClassAndDiscoveredAndWeight(offset int, limit int, Class_ string, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and weight = ?", Class_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndMetadata Get MenuTrees via ClassAndDiscoveredAndMetadata
func GetMenuTreesByClassAndDiscoveredAndMetadata(offset int, limit int, Class_ string, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and metadata = ?", Class_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndHasChildren Get MenuTrees via ClassAndDiscoveredAndHasChildren
func GetMenuTreesByClassAndDiscoveredAndHasChildren(offset int, limit int, Class_ string, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and has_children = ?", Class_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndDepth Get MenuTrees via ClassAndDiscoveredAndDepth
func GetMenuTreesByClassAndDiscoveredAndDepth(offset int, limit int, Class_ string, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and depth = ?", Class_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndP1 Get MenuTrees via ClassAndDiscoveredAndP1
func GetMenuTreesByClassAndDiscoveredAndP1(offset int, limit int, Class_ string, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and p1 = ?", Class_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndP2 Get MenuTrees via ClassAndDiscoveredAndP2
func GetMenuTreesByClassAndDiscoveredAndP2(offset int, limit int, Class_ string, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and p2 = ?", Class_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndP3 Get MenuTrees via ClassAndDiscoveredAndP3
func GetMenuTreesByClassAndDiscoveredAndP3(offset int, limit int, Class_ string, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and p3 = ?", Class_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndP4 Get MenuTrees via ClassAndDiscoveredAndP4
func GetMenuTreesByClassAndDiscoveredAndP4(offset int, limit int, Class_ string, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and p4 = ?", Class_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndP5 Get MenuTrees via ClassAndDiscoveredAndP5
func GetMenuTreesByClassAndDiscoveredAndP5(offset int, limit int, Class_ string, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and p5 = ?", Class_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndP6 Get MenuTrees via ClassAndDiscoveredAndP6
func GetMenuTreesByClassAndDiscoveredAndP6(offset int, limit int, Class_ string, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and p6 = ?", Class_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndP7 Get MenuTrees via ClassAndDiscoveredAndP7
func GetMenuTreesByClassAndDiscoveredAndP7(offset int, limit int, Class_ string, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and p7 = ?", Class_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndP8 Get MenuTrees via ClassAndDiscoveredAndP8
func GetMenuTreesByClassAndDiscoveredAndP8(offset int, limit int, Class_ string, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and p8 = ?", Class_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndP9 Get MenuTrees via ClassAndDiscoveredAndP9
func GetMenuTreesByClassAndDiscoveredAndP9(offset int, limit int, Class_ string, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and p9 = ?", Class_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscoveredAndFormClass Get MenuTrees via ClassAndDiscoveredAndFormClass
func GetMenuTreesByClassAndDiscoveredAndFormClass(offset int, limit int, Class_ string, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ? and form_class = ?", Class_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndWeight Get MenuTrees via ClassAndExpandedAndWeight
func GetMenuTreesByClassAndExpandedAndWeight(offset int, limit int, Class_ string, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and weight = ?", Class_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndMetadata Get MenuTrees via ClassAndExpandedAndMetadata
func GetMenuTreesByClassAndExpandedAndMetadata(offset int, limit int, Class_ string, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and metadata = ?", Class_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndHasChildren Get MenuTrees via ClassAndExpandedAndHasChildren
func GetMenuTreesByClassAndExpandedAndHasChildren(offset int, limit int, Class_ string, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and has_children = ?", Class_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndDepth Get MenuTrees via ClassAndExpandedAndDepth
func GetMenuTreesByClassAndExpandedAndDepth(offset int, limit int, Class_ string, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and depth = ?", Class_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndP1 Get MenuTrees via ClassAndExpandedAndP1
func GetMenuTreesByClassAndExpandedAndP1(offset int, limit int, Class_ string, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and p1 = ?", Class_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndP2 Get MenuTrees via ClassAndExpandedAndP2
func GetMenuTreesByClassAndExpandedAndP2(offset int, limit int, Class_ string, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and p2 = ?", Class_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndP3 Get MenuTrees via ClassAndExpandedAndP3
func GetMenuTreesByClassAndExpandedAndP3(offset int, limit int, Class_ string, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and p3 = ?", Class_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndP4 Get MenuTrees via ClassAndExpandedAndP4
func GetMenuTreesByClassAndExpandedAndP4(offset int, limit int, Class_ string, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and p4 = ?", Class_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndP5 Get MenuTrees via ClassAndExpandedAndP5
func GetMenuTreesByClassAndExpandedAndP5(offset int, limit int, Class_ string, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and p5 = ?", Class_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndP6 Get MenuTrees via ClassAndExpandedAndP6
func GetMenuTreesByClassAndExpandedAndP6(offset int, limit int, Class_ string, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and p6 = ?", Class_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndP7 Get MenuTrees via ClassAndExpandedAndP7
func GetMenuTreesByClassAndExpandedAndP7(offset int, limit int, Class_ string, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and p7 = ?", Class_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndP8 Get MenuTrees via ClassAndExpandedAndP8
func GetMenuTreesByClassAndExpandedAndP8(offset int, limit int, Class_ string, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and p8 = ?", Class_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndP9 Get MenuTrees via ClassAndExpandedAndP9
func GetMenuTreesByClassAndExpandedAndP9(offset int, limit int, Class_ string, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and p9 = ?", Class_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpandedAndFormClass Get MenuTrees via ClassAndExpandedAndFormClass
func GetMenuTreesByClassAndExpandedAndFormClass(offset int, limit int, Class_ string, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ? and form_class = ?", Class_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndMetadata Get MenuTrees via ClassAndWeightAndMetadata
func GetMenuTreesByClassAndWeightAndMetadata(offset int, limit int, Class_ string, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and metadata = ?", Class_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndHasChildren Get MenuTrees via ClassAndWeightAndHasChildren
func GetMenuTreesByClassAndWeightAndHasChildren(offset int, limit int, Class_ string, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and has_children = ?", Class_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndDepth Get MenuTrees via ClassAndWeightAndDepth
func GetMenuTreesByClassAndWeightAndDepth(offset int, limit int, Class_ string, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and depth = ?", Class_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndP1 Get MenuTrees via ClassAndWeightAndP1
func GetMenuTreesByClassAndWeightAndP1(offset int, limit int, Class_ string, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and p1 = ?", Class_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndP2 Get MenuTrees via ClassAndWeightAndP2
func GetMenuTreesByClassAndWeightAndP2(offset int, limit int, Class_ string, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and p2 = ?", Class_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndP3 Get MenuTrees via ClassAndWeightAndP3
func GetMenuTreesByClassAndWeightAndP3(offset int, limit int, Class_ string, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and p3 = ?", Class_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndP4 Get MenuTrees via ClassAndWeightAndP4
func GetMenuTreesByClassAndWeightAndP4(offset int, limit int, Class_ string, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and p4 = ?", Class_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndP5 Get MenuTrees via ClassAndWeightAndP5
func GetMenuTreesByClassAndWeightAndP5(offset int, limit int, Class_ string, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and p5 = ?", Class_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndP6 Get MenuTrees via ClassAndWeightAndP6
func GetMenuTreesByClassAndWeightAndP6(offset int, limit int, Class_ string, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and p6 = ?", Class_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndP7 Get MenuTrees via ClassAndWeightAndP7
func GetMenuTreesByClassAndWeightAndP7(offset int, limit int, Class_ string, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and p7 = ?", Class_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndP8 Get MenuTrees via ClassAndWeightAndP8
func GetMenuTreesByClassAndWeightAndP8(offset int, limit int, Class_ string, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and p8 = ?", Class_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndP9 Get MenuTrees via ClassAndWeightAndP9
func GetMenuTreesByClassAndWeightAndP9(offset int, limit int, Class_ string, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and p9 = ?", Class_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeightAndFormClass Get MenuTrees via ClassAndWeightAndFormClass
func GetMenuTreesByClassAndWeightAndFormClass(offset int, limit int, Class_ string, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ? and form_class = ?", Class_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndHasChildren Get MenuTrees via ClassAndMetadataAndHasChildren
func GetMenuTreesByClassAndMetadataAndHasChildren(offset int, limit int, Class_ string, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and has_children = ?", Class_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndDepth Get MenuTrees via ClassAndMetadataAndDepth
func GetMenuTreesByClassAndMetadataAndDepth(offset int, limit int, Class_ string, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and depth = ?", Class_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndP1 Get MenuTrees via ClassAndMetadataAndP1
func GetMenuTreesByClassAndMetadataAndP1(offset int, limit int, Class_ string, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and p1 = ?", Class_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndP2 Get MenuTrees via ClassAndMetadataAndP2
func GetMenuTreesByClassAndMetadataAndP2(offset int, limit int, Class_ string, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and p2 = ?", Class_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndP3 Get MenuTrees via ClassAndMetadataAndP3
func GetMenuTreesByClassAndMetadataAndP3(offset int, limit int, Class_ string, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and p3 = ?", Class_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndP4 Get MenuTrees via ClassAndMetadataAndP4
func GetMenuTreesByClassAndMetadataAndP4(offset int, limit int, Class_ string, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and p4 = ?", Class_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndP5 Get MenuTrees via ClassAndMetadataAndP5
func GetMenuTreesByClassAndMetadataAndP5(offset int, limit int, Class_ string, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and p5 = ?", Class_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndP6 Get MenuTrees via ClassAndMetadataAndP6
func GetMenuTreesByClassAndMetadataAndP6(offset int, limit int, Class_ string, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and p6 = ?", Class_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndP7 Get MenuTrees via ClassAndMetadataAndP7
func GetMenuTreesByClassAndMetadataAndP7(offset int, limit int, Class_ string, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and p7 = ?", Class_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndP8 Get MenuTrees via ClassAndMetadataAndP8
func GetMenuTreesByClassAndMetadataAndP8(offset int, limit int, Class_ string, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and p8 = ?", Class_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndP9 Get MenuTrees via ClassAndMetadataAndP9
func GetMenuTreesByClassAndMetadataAndP9(offset int, limit int, Class_ string, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and p9 = ?", Class_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadataAndFormClass Get MenuTrees via ClassAndMetadataAndFormClass
func GetMenuTreesByClassAndMetadataAndFormClass(offset int, limit int, Class_ string, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ? and form_class = ?", Class_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndDepth Get MenuTrees via ClassAndHasChildrenAndDepth
func GetMenuTreesByClassAndHasChildrenAndDepth(offset int, limit int, Class_ string, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and depth = ?", Class_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndP1 Get MenuTrees via ClassAndHasChildrenAndP1
func GetMenuTreesByClassAndHasChildrenAndP1(offset int, limit int, Class_ string, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and p1 = ?", Class_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndP2 Get MenuTrees via ClassAndHasChildrenAndP2
func GetMenuTreesByClassAndHasChildrenAndP2(offset int, limit int, Class_ string, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and p2 = ?", Class_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndP3 Get MenuTrees via ClassAndHasChildrenAndP3
func GetMenuTreesByClassAndHasChildrenAndP3(offset int, limit int, Class_ string, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and p3 = ?", Class_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndP4 Get MenuTrees via ClassAndHasChildrenAndP4
func GetMenuTreesByClassAndHasChildrenAndP4(offset int, limit int, Class_ string, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and p4 = ?", Class_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndP5 Get MenuTrees via ClassAndHasChildrenAndP5
func GetMenuTreesByClassAndHasChildrenAndP5(offset int, limit int, Class_ string, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and p5 = ?", Class_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndP6 Get MenuTrees via ClassAndHasChildrenAndP6
func GetMenuTreesByClassAndHasChildrenAndP6(offset int, limit int, Class_ string, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and p6 = ?", Class_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndP7 Get MenuTrees via ClassAndHasChildrenAndP7
func GetMenuTreesByClassAndHasChildrenAndP7(offset int, limit int, Class_ string, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and p7 = ?", Class_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndP8 Get MenuTrees via ClassAndHasChildrenAndP8
func GetMenuTreesByClassAndHasChildrenAndP8(offset int, limit int, Class_ string, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and p8 = ?", Class_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndP9 Get MenuTrees via ClassAndHasChildrenAndP9
func GetMenuTreesByClassAndHasChildrenAndP9(offset int, limit int, Class_ string, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and p9 = ?", Class_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildrenAndFormClass Get MenuTrees via ClassAndHasChildrenAndFormClass
func GetMenuTreesByClassAndHasChildrenAndFormClass(offset int, limit int, Class_ string, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ? and form_class = ?", Class_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepthAndP1 Get MenuTrees via ClassAndDepthAndP1
func GetMenuTreesByClassAndDepthAndP1(offset int, limit int, Class_ string, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ? and p1 = ?", Class_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepthAndP2 Get MenuTrees via ClassAndDepthAndP2
func GetMenuTreesByClassAndDepthAndP2(offset int, limit int, Class_ string, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ? and p2 = ?", Class_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepthAndP3 Get MenuTrees via ClassAndDepthAndP3
func GetMenuTreesByClassAndDepthAndP3(offset int, limit int, Class_ string, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ? and p3 = ?", Class_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepthAndP4 Get MenuTrees via ClassAndDepthAndP4
func GetMenuTreesByClassAndDepthAndP4(offset int, limit int, Class_ string, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ? and p4 = ?", Class_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepthAndP5 Get MenuTrees via ClassAndDepthAndP5
func GetMenuTreesByClassAndDepthAndP5(offset int, limit int, Class_ string, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ? and p5 = ?", Class_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepthAndP6 Get MenuTrees via ClassAndDepthAndP6
func GetMenuTreesByClassAndDepthAndP6(offset int, limit int, Class_ string, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ? and p6 = ?", Class_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepthAndP7 Get MenuTrees via ClassAndDepthAndP7
func GetMenuTreesByClassAndDepthAndP7(offset int, limit int, Class_ string, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ? and p7 = ?", Class_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepthAndP8 Get MenuTrees via ClassAndDepthAndP8
func GetMenuTreesByClassAndDepthAndP8(offset int, limit int, Class_ string, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ? and p8 = ?", Class_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepthAndP9 Get MenuTrees via ClassAndDepthAndP9
func GetMenuTreesByClassAndDepthAndP9(offset int, limit int, Class_ string, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ? and p9 = ?", Class_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepthAndFormClass Get MenuTrees via ClassAndDepthAndFormClass
func GetMenuTreesByClassAndDepthAndFormClass(offset int, limit int, Class_ string, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ? and form_class = ?", Class_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP1AndP2 Get MenuTrees via ClassAndP1AndP2
func GetMenuTreesByClassAndP1AndP2(offset int, limit int, Class_ string, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p1 = ? and p2 = ?", Class_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP1AndP3 Get MenuTrees via ClassAndP1AndP3
func GetMenuTreesByClassAndP1AndP3(offset int, limit int, Class_ string, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p1 = ? and p3 = ?", Class_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP1AndP4 Get MenuTrees via ClassAndP1AndP4
func GetMenuTreesByClassAndP1AndP4(offset int, limit int, Class_ string, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p1 = ? and p4 = ?", Class_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP1AndP5 Get MenuTrees via ClassAndP1AndP5
func GetMenuTreesByClassAndP1AndP5(offset int, limit int, Class_ string, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p1 = ? and p5 = ?", Class_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP1AndP6 Get MenuTrees via ClassAndP1AndP6
func GetMenuTreesByClassAndP1AndP6(offset int, limit int, Class_ string, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p1 = ? and p6 = ?", Class_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP1AndP7 Get MenuTrees via ClassAndP1AndP7
func GetMenuTreesByClassAndP1AndP7(offset int, limit int, Class_ string, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p1 = ? and p7 = ?", Class_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP1AndP8 Get MenuTrees via ClassAndP1AndP8
func GetMenuTreesByClassAndP1AndP8(offset int, limit int, Class_ string, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p1 = ? and p8 = ?", Class_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP1AndP9 Get MenuTrees via ClassAndP1AndP9
func GetMenuTreesByClassAndP1AndP9(offset int, limit int, Class_ string, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p1 = ? and p9 = ?", Class_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP1AndFormClass Get MenuTrees via ClassAndP1AndFormClass
func GetMenuTreesByClassAndP1AndFormClass(offset int, limit int, Class_ string, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p1 = ? and form_class = ?", Class_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP2AndP3 Get MenuTrees via ClassAndP2AndP3
func GetMenuTreesByClassAndP2AndP3(offset int, limit int, Class_ string, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p2 = ? and p3 = ?", Class_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP2AndP4 Get MenuTrees via ClassAndP2AndP4
func GetMenuTreesByClassAndP2AndP4(offset int, limit int, Class_ string, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p2 = ? and p4 = ?", Class_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP2AndP5 Get MenuTrees via ClassAndP2AndP5
func GetMenuTreesByClassAndP2AndP5(offset int, limit int, Class_ string, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p2 = ? and p5 = ?", Class_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP2AndP6 Get MenuTrees via ClassAndP2AndP6
func GetMenuTreesByClassAndP2AndP6(offset int, limit int, Class_ string, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p2 = ? and p6 = ?", Class_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP2AndP7 Get MenuTrees via ClassAndP2AndP7
func GetMenuTreesByClassAndP2AndP7(offset int, limit int, Class_ string, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p2 = ? and p7 = ?", Class_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP2AndP8 Get MenuTrees via ClassAndP2AndP8
func GetMenuTreesByClassAndP2AndP8(offset int, limit int, Class_ string, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p2 = ? and p8 = ?", Class_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP2AndP9 Get MenuTrees via ClassAndP2AndP9
func GetMenuTreesByClassAndP2AndP9(offset int, limit int, Class_ string, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p2 = ? and p9 = ?", Class_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP2AndFormClass Get MenuTrees via ClassAndP2AndFormClass
func GetMenuTreesByClassAndP2AndFormClass(offset int, limit int, Class_ string, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p2 = ? and form_class = ?", Class_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP3AndP4 Get MenuTrees via ClassAndP3AndP4
func GetMenuTreesByClassAndP3AndP4(offset int, limit int, Class_ string, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p3 = ? and p4 = ?", Class_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP3AndP5 Get MenuTrees via ClassAndP3AndP5
func GetMenuTreesByClassAndP3AndP5(offset int, limit int, Class_ string, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p3 = ? and p5 = ?", Class_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP3AndP6 Get MenuTrees via ClassAndP3AndP6
func GetMenuTreesByClassAndP3AndP6(offset int, limit int, Class_ string, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p3 = ? and p6 = ?", Class_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP3AndP7 Get MenuTrees via ClassAndP3AndP7
func GetMenuTreesByClassAndP3AndP7(offset int, limit int, Class_ string, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p3 = ? and p7 = ?", Class_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP3AndP8 Get MenuTrees via ClassAndP3AndP8
func GetMenuTreesByClassAndP3AndP8(offset int, limit int, Class_ string, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p3 = ? and p8 = ?", Class_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP3AndP9 Get MenuTrees via ClassAndP3AndP9
func GetMenuTreesByClassAndP3AndP9(offset int, limit int, Class_ string, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p3 = ? and p9 = ?", Class_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP3AndFormClass Get MenuTrees via ClassAndP3AndFormClass
func GetMenuTreesByClassAndP3AndFormClass(offset int, limit int, Class_ string, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p3 = ? and form_class = ?", Class_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP4AndP5 Get MenuTrees via ClassAndP4AndP5
func GetMenuTreesByClassAndP4AndP5(offset int, limit int, Class_ string, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p4 = ? and p5 = ?", Class_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP4AndP6 Get MenuTrees via ClassAndP4AndP6
func GetMenuTreesByClassAndP4AndP6(offset int, limit int, Class_ string, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p4 = ? and p6 = ?", Class_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP4AndP7 Get MenuTrees via ClassAndP4AndP7
func GetMenuTreesByClassAndP4AndP7(offset int, limit int, Class_ string, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p4 = ? and p7 = ?", Class_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP4AndP8 Get MenuTrees via ClassAndP4AndP8
func GetMenuTreesByClassAndP4AndP8(offset int, limit int, Class_ string, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p4 = ? and p8 = ?", Class_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP4AndP9 Get MenuTrees via ClassAndP4AndP9
func GetMenuTreesByClassAndP4AndP9(offset int, limit int, Class_ string, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p4 = ? and p9 = ?", Class_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP4AndFormClass Get MenuTrees via ClassAndP4AndFormClass
func GetMenuTreesByClassAndP4AndFormClass(offset int, limit int, Class_ string, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p4 = ? and form_class = ?", Class_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP5AndP6 Get MenuTrees via ClassAndP5AndP6
func GetMenuTreesByClassAndP5AndP6(offset int, limit int, Class_ string, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p5 = ? and p6 = ?", Class_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP5AndP7 Get MenuTrees via ClassAndP5AndP7
func GetMenuTreesByClassAndP5AndP7(offset int, limit int, Class_ string, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p5 = ? and p7 = ?", Class_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP5AndP8 Get MenuTrees via ClassAndP5AndP8
func GetMenuTreesByClassAndP5AndP8(offset int, limit int, Class_ string, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p5 = ? and p8 = ?", Class_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP5AndP9 Get MenuTrees via ClassAndP5AndP9
func GetMenuTreesByClassAndP5AndP9(offset int, limit int, Class_ string, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p5 = ? and p9 = ?", Class_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP5AndFormClass Get MenuTrees via ClassAndP5AndFormClass
func GetMenuTreesByClassAndP5AndFormClass(offset int, limit int, Class_ string, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p5 = ? and form_class = ?", Class_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP6AndP7 Get MenuTrees via ClassAndP6AndP7
func GetMenuTreesByClassAndP6AndP7(offset int, limit int, Class_ string, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p6 = ? and p7 = ?", Class_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP6AndP8 Get MenuTrees via ClassAndP6AndP8
func GetMenuTreesByClassAndP6AndP8(offset int, limit int, Class_ string, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p6 = ? and p8 = ?", Class_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP6AndP9 Get MenuTrees via ClassAndP6AndP9
func GetMenuTreesByClassAndP6AndP9(offset int, limit int, Class_ string, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p6 = ? and p9 = ?", Class_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP6AndFormClass Get MenuTrees via ClassAndP6AndFormClass
func GetMenuTreesByClassAndP6AndFormClass(offset int, limit int, Class_ string, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p6 = ? and form_class = ?", Class_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP7AndP8 Get MenuTrees via ClassAndP7AndP8
func GetMenuTreesByClassAndP7AndP8(offset int, limit int, Class_ string, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p7 = ? and p8 = ?", Class_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP7AndP9 Get MenuTrees via ClassAndP7AndP9
func GetMenuTreesByClassAndP7AndP9(offset int, limit int, Class_ string, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p7 = ? and p9 = ?", Class_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP7AndFormClass Get MenuTrees via ClassAndP7AndFormClass
func GetMenuTreesByClassAndP7AndFormClass(offset int, limit int, Class_ string, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p7 = ? and form_class = ?", Class_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP8AndP9 Get MenuTrees via ClassAndP8AndP9
func GetMenuTreesByClassAndP8AndP9(offset int, limit int, Class_ string, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p8 = ? and p9 = ?", Class_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP8AndFormClass Get MenuTrees via ClassAndP8AndFormClass
func GetMenuTreesByClassAndP8AndFormClass(offset int, limit int, Class_ string, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p8 = ? and form_class = ?", Class_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP9AndFormClass Get MenuTrees via ClassAndP9AndFormClass
func GetMenuTreesByClassAndP9AndFormClass(offset int, limit int, Class_ string, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p9 = ? and form_class = ?", Class_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndEnabled Get MenuTrees via OptionsAndProviderAndEnabled
func GetMenuTreesByOptionsAndProviderAndEnabled(offset int, limit int, Options_ []byte, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and enabled = ?", Options_, Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndDiscovered Get MenuTrees via OptionsAndProviderAndDiscovered
func GetMenuTreesByOptionsAndProviderAndDiscovered(offset int, limit int, Options_ []byte, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and discovered = ?", Options_, Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndExpanded Get MenuTrees via OptionsAndProviderAndExpanded
func GetMenuTreesByOptionsAndProviderAndExpanded(offset int, limit int, Options_ []byte, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and expanded = ?", Options_, Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndWeight Get MenuTrees via OptionsAndProviderAndWeight
func GetMenuTreesByOptionsAndProviderAndWeight(offset int, limit int, Options_ []byte, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and weight = ?", Options_, Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndMetadata Get MenuTrees via OptionsAndProviderAndMetadata
func GetMenuTreesByOptionsAndProviderAndMetadata(offset int, limit int, Options_ []byte, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and metadata = ?", Options_, Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndHasChildren Get MenuTrees via OptionsAndProviderAndHasChildren
func GetMenuTreesByOptionsAndProviderAndHasChildren(offset int, limit int, Options_ []byte, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and has_children = ?", Options_, Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndDepth Get MenuTrees via OptionsAndProviderAndDepth
func GetMenuTreesByOptionsAndProviderAndDepth(offset int, limit int, Options_ []byte, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and depth = ?", Options_, Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndP1 Get MenuTrees via OptionsAndProviderAndP1
func GetMenuTreesByOptionsAndProviderAndP1(offset int, limit int, Options_ []byte, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and p1 = ?", Options_, Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndP2 Get MenuTrees via OptionsAndProviderAndP2
func GetMenuTreesByOptionsAndProviderAndP2(offset int, limit int, Options_ []byte, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and p2 = ?", Options_, Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndP3 Get MenuTrees via OptionsAndProviderAndP3
func GetMenuTreesByOptionsAndProviderAndP3(offset int, limit int, Options_ []byte, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and p3 = ?", Options_, Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndP4 Get MenuTrees via OptionsAndProviderAndP4
func GetMenuTreesByOptionsAndProviderAndP4(offset int, limit int, Options_ []byte, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and p4 = ?", Options_, Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndP5 Get MenuTrees via OptionsAndProviderAndP5
func GetMenuTreesByOptionsAndProviderAndP5(offset int, limit int, Options_ []byte, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and p5 = ?", Options_, Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndP6 Get MenuTrees via OptionsAndProviderAndP6
func GetMenuTreesByOptionsAndProviderAndP6(offset int, limit int, Options_ []byte, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and p6 = ?", Options_, Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndP7 Get MenuTrees via OptionsAndProviderAndP7
func GetMenuTreesByOptionsAndProviderAndP7(offset int, limit int, Options_ []byte, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and p7 = ?", Options_, Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndP8 Get MenuTrees via OptionsAndProviderAndP8
func GetMenuTreesByOptionsAndProviderAndP8(offset int, limit int, Options_ []byte, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and p8 = ?", Options_, Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndP9 Get MenuTrees via OptionsAndProviderAndP9
func GetMenuTreesByOptionsAndProviderAndP9(offset int, limit int, Options_ []byte, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and p9 = ?", Options_, Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProviderAndFormClass Get MenuTrees via OptionsAndProviderAndFormClass
func GetMenuTreesByOptionsAndProviderAndFormClass(offset int, limit int, Options_ []byte, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ? and form_class = ?", Options_, Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndDiscovered Get MenuTrees via OptionsAndEnabledAndDiscovered
func GetMenuTreesByOptionsAndEnabledAndDiscovered(offset int, limit int, Options_ []byte, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and discovered = ?", Options_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndExpanded Get MenuTrees via OptionsAndEnabledAndExpanded
func GetMenuTreesByOptionsAndEnabledAndExpanded(offset int, limit int, Options_ []byte, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and expanded = ?", Options_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndWeight Get MenuTrees via OptionsAndEnabledAndWeight
func GetMenuTreesByOptionsAndEnabledAndWeight(offset int, limit int, Options_ []byte, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and weight = ?", Options_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndMetadata Get MenuTrees via OptionsAndEnabledAndMetadata
func GetMenuTreesByOptionsAndEnabledAndMetadata(offset int, limit int, Options_ []byte, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and metadata = ?", Options_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndHasChildren Get MenuTrees via OptionsAndEnabledAndHasChildren
func GetMenuTreesByOptionsAndEnabledAndHasChildren(offset int, limit int, Options_ []byte, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and has_children = ?", Options_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndDepth Get MenuTrees via OptionsAndEnabledAndDepth
func GetMenuTreesByOptionsAndEnabledAndDepth(offset int, limit int, Options_ []byte, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and depth = ?", Options_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndP1 Get MenuTrees via OptionsAndEnabledAndP1
func GetMenuTreesByOptionsAndEnabledAndP1(offset int, limit int, Options_ []byte, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and p1 = ?", Options_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndP2 Get MenuTrees via OptionsAndEnabledAndP2
func GetMenuTreesByOptionsAndEnabledAndP2(offset int, limit int, Options_ []byte, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and p2 = ?", Options_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndP3 Get MenuTrees via OptionsAndEnabledAndP3
func GetMenuTreesByOptionsAndEnabledAndP3(offset int, limit int, Options_ []byte, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and p3 = ?", Options_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndP4 Get MenuTrees via OptionsAndEnabledAndP4
func GetMenuTreesByOptionsAndEnabledAndP4(offset int, limit int, Options_ []byte, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and p4 = ?", Options_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndP5 Get MenuTrees via OptionsAndEnabledAndP5
func GetMenuTreesByOptionsAndEnabledAndP5(offset int, limit int, Options_ []byte, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and p5 = ?", Options_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndP6 Get MenuTrees via OptionsAndEnabledAndP6
func GetMenuTreesByOptionsAndEnabledAndP6(offset int, limit int, Options_ []byte, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and p6 = ?", Options_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndP7 Get MenuTrees via OptionsAndEnabledAndP7
func GetMenuTreesByOptionsAndEnabledAndP7(offset int, limit int, Options_ []byte, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and p7 = ?", Options_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndP8 Get MenuTrees via OptionsAndEnabledAndP8
func GetMenuTreesByOptionsAndEnabledAndP8(offset int, limit int, Options_ []byte, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and p8 = ?", Options_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndP9 Get MenuTrees via OptionsAndEnabledAndP9
func GetMenuTreesByOptionsAndEnabledAndP9(offset int, limit int, Options_ []byte, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and p9 = ?", Options_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabledAndFormClass Get MenuTrees via OptionsAndEnabledAndFormClass
func GetMenuTreesByOptionsAndEnabledAndFormClass(offset int, limit int, Options_ []byte, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ? and form_class = ?", Options_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndExpanded Get MenuTrees via OptionsAndDiscoveredAndExpanded
func GetMenuTreesByOptionsAndDiscoveredAndExpanded(offset int, limit int, Options_ []byte, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and expanded = ?", Options_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndWeight Get MenuTrees via OptionsAndDiscoveredAndWeight
func GetMenuTreesByOptionsAndDiscoveredAndWeight(offset int, limit int, Options_ []byte, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and weight = ?", Options_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndMetadata Get MenuTrees via OptionsAndDiscoveredAndMetadata
func GetMenuTreesByOptionsAndDiscoveredAndMetadata(offset int, limit int, Options_ []byte, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and metadata = ?", Options_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndHasChildren Get MenuTrees via OptionsAndDiscoveredAndHasChildren
func GetMenuTreesByOptionsAndDiscoveredAndHasChildren(offset int, limit int, Options_ []byte, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and has_children = ?", Options_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndDepth Get MenuTrees via OptionsAndDiscoveredAndDepth
func GetMenuTreesByOptionsAndDiscoveredAndDepth(offset int, limit int, Options_ []byte, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and depth = ?", Options_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndP1 Get MenuTrees via OptionsAndDiscoveredAndP1
func GetMenuTreesByOptionsAndDiscoveredAndP1(offset int, limit int, Options_ []byte, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and p1 = ?", Options_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndP2 Get MenuTrees via OptionsAndDiscoveredAndP2
func GetMenuTreesByOptionsAndDiscoveredAndP2(offset int, limit int, Options_ []byte, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and p2 = ?", Options_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndP3 Get MenuTrees via OptionsAndDiscoveredAndP3
func GetMenuTreesByOptionsAndDiscoveredAndP3(offset int, limit int, Options_ []byte, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and p3 = ?", Options_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndP4 Get MenuTrees via OptionsAndDiscoveredAndP4
func GetMenuTreesByOptionsAndDiscoveredAndP4(offset int, limit int, Options_ []byte, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and p4 = ?", Options_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndP5 Get MenuTrees via OptionsAndDiscoveredAndP5
func GetMenuTreesByOptionsAndDiscoveredAndP5(offset int, limit int, Options_ []byte, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and p5 = ?", Options_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndP6 Get MenuTrees via OptionsAndDiscoveredAndP6
func GetMenuTreesByOptionsAndDiscoveredAndP6(offset int, limit int, Options_ []byte, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and p6 = ?", Options_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndP7 Get MenuTrees via OptionsAndDiscoveredAndP7
func GetMenuTreesByOptionsAndDiscoveredAndP7(offset int, limit int, Options_ []byte, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and p7 = ?", Options_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndP8 Get MenuTrees via OptionsAndDiscoveredAndP8
func GetMenuTreesByOptionsAndDiscoveredAndP8(offset int, limit int, Options_ []byte, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and p8 = ?", Options_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndP9 Get MenuTrees via OptionsAndDiscoveredAndP9
func GetMenuTreesByOptionsAndDiscoveredAndP9(offset int, limit int, Options_ []byte, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and p9 = ?", Options_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscoveredAndFormClass Get MenuTrees via OptionsAndDiscoveredAndFormClass
func GetMenuTreesByOptionsAndDiscoveredAndFormClass(offset int, limit int, Options_ []byte, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ? and form_class = ?", Options_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndWeight Get MenuTrees via OptionsAndExpandedAndWeight
func GetMenuTreesByOptionsAndExpandedAndWeight(offset int, limit int, Options_ []byte, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and weight = ?", Options_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndMetadata Get MenuTrees via OptionsAndExpandedAndMetadata
func GetMenuTreesByOptionsAndExpandedAndMetadata(offset int, limit int, Options_ []byte, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and metadata = ?", Options_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndHasChildren Get MenuTrees via OptionsAndExpandedAndHasChildren
func GetMenuTreesByOptionsAndExpandedAndHasChildren(offset int, limit int, Options_ []byte, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and has_children = ?", Options_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndDepth Get MenuTrees via OptionsAndExpandedAndDepth
func GetMenuTreesByOptionsAndExpandedAndDepth(offset int, limit int, Options_ []byte, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and depth = ?", Options_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndP1 Get MenuTrees via OptionsAndExpandedAndP1
func GetMenuTreesByOptionsAndExpandedAndP1(offset int, limit int, Options_ []byte, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and p1 = ?", Options_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndP2 Get MenuTrees via OptionsAndExpandedAndP2
func GetMenuTreesByOptionsAndExpandedAndP2(offset int, limit int, Options_ []byte, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and p2 = ?", Options_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndP3 Get MenuTrees via OptionsAndExpandedAndP3
func GetMenuTreesByOptionsAndExpandedAndP3(offset int, limit int, Options_ []byte, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and p3 = ?", Options_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndP4 Get MenuTrees via OptionsAndExpandedAndP4
func GetMenuTreesByOptionsAndExpandedAndP4(offset int, limit int, Options_ []byte, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and p4 = ?", Options_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndP5 Get MenuTrees via OptionsAndExpandedAndP5
func GetMenuTreesByOptionsAndExpandedAndP5(offset int, limit int, Options_ []byte, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and p5 = ?", Options_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndP6 Get MenuTrees via OptionsAndExpandedAndP6
func GetMenuTreesByOptionsAndExpandedAndP6(offset int, limit int, Options_ []byte, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and p6 = ?", Options_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndP7 Get MenuTrees via OptionsAndExpandedAndP7
func GetMenuTreesByOptionsAndExpandedAndP7(offset int, limit int, Options_ []byte, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and p7 = ?", Options_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndP8 Get MenuTrees via OptionsAndExpandedAndP8
func GetMenuTreesByOptionsAndExpandedAndP8(offset int, limit int, Options_ []byte, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and p8 = ?", Options_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndP9 Get MenuTrees via OptionsAndExpandedAndP9
func GetMenuTreesByOptionsAndExpandedAndP9(offset int, limit int, Options_ []byte, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and p9 = ?", Options_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpandedAndFormClass Get MenuTrees via OptionsAndExpandedAndFormClass
func GetMenuTreesByOptionsAndExpandedAndFormClass(offset int, limit int, Options_ []byte, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ? and form_class = ?", Options_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndMetadata Get MenuTrees via OptionsAndWeightAndMetadata
func GetMenuTreesByOptionsAndWeightAndMetadata(offset int, limit int, Options_ []byte, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and metadata = ?", Options_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndHasChildren Get MenuTrees via OptionsAndWeightAndHasChildren
func GetMenuTreesByOptionsAndWeightAndHasChildren(offset int, limit int, Options_ []byte, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and has_children = ?", Options_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndDepth Get MenuTrees via OptionsAndWeightAndDepth
func GetMenuTreesByOptionsAndWeightAndDepth(offset int, limit int, Options_ []byte, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and depth = ?", Options_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndP1 Get MenuTrees via OptionsAndWeightAndP1
func GetMenuTreesByOptionsAndWeightAndP1(offset int, limit int, Options_ []byte, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and p1 = ?", Options_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndP2 Get MenuTrees via OptionsAndWeightAndP2
func GetMenuTreesByOptionsAndWeightAndP2(offset int, limit int, Options_ []byte, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and p2 = ?", Options_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndP3 Get MenuTrees via OptionsAndWeightAndP3
func GetMenuTreesByOptionsAndWeightAndP3(offset int, limit int, Options_ []byte, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and p3 = ?", Options_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndP4 Get MenuTrees via OptionsAndWeightAndP4
func GetMenuTreesByOptionsAndWeightAndP4(offset int, limit int, Options_ []byte, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and p4 = ?", Options_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndP5 Get MenuTrees via OptionsAndWeightAndP5
func GetMenuTreesByOptionsAndWeightAndP5(offset int, limit int, Options_ []byte, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and p5 = ?", Options_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndP6 Get MenuTrees via OptionsAndWeightAndP6
func GetMenuTreesByOptionsAndWeightAndP6(offset int, limit int, Options_ []byte, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and p6 = ?", Options_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndP7 Get MenuTrees via OptionsAndWeightAndP7
func GetMenuTreesByOptionsAndWeightAndP7(offset int, limit int, Options_ []byte, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and p7 = ?", Options_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndP8 Get MenuTrees via OptionsAndWeightAndP8
func GetMenuTreesByOptionsAndWeightAndP8(offset int, limit int, Options_ []byte, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and p8 = ?", Options_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndP9 Get MenuTrees via OptionsAndWeightAndP9
func GetMenuTreesByOptionsAndWeightAndP9(offset int, limit int, Options_ []byte, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and p9 = ?", Options_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeightAndFormClass Get MenuTrees via OptionsAndWeightAndFormClass
func GetMenuTreesByOptionsAndWeightAndFormClass(offset int, limit int, Options_ []byte, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ? and form_class = ?", Options_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndHasChildren Get MenuTrees via OptionsAndMetadataAndHasChildren
func GetMenuTreesByOptionsAndMetadataAndHasChildren(offset int, limit int, Options_ []byte, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and has_children = ?", Options_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndDepth Get MenuTrees via OptionsAndMetadataAndDepth
func GetMenuTreesByOptionsAndMetadataAndDepth(offset int, limit int, Options_ []byte, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and depth = ?", Options_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndP1 Get MenuTrees via OptionsAndMetadataAndP1
func GetMenuTreesByOptionsAndMetadataAndP1(offset int, limit int, Options_ []byte, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and p1 = ?", Options_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndP2 Get MenuTrees via OptionsAndMetadataAndP2
func GetMenuTreesByOptionsAndMetadataAndP2(offset int, limit int, Options_ []byte, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and p2 = ?", Options_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndP3 Get MenuTrees via OptionsAndMetadataAndP3
func GetMenuTreesByOptionsAndMetadataAndP3(offset int, limit int, Options_ []byte, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and p3 = ?", Options_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndP4 Get MenuTrees via OptionsAndMetadataAndP4
func GetMenuTreesByOptionsAndMetadataAndP4(offset int, limit int, Options_ []byte, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and p4 = ?", Options_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndP5 Get MenuTrees via OptionsAndMetadataAndP5
func GetMenuTreesByOptionsAndMetadataAndP5(offset int, limit int, Options_ []byte, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and p5 = ?", Options_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndP6 Get MenuTrees via OptionsAndMetadataAndP6
func GetMenuTreesByOptionsAndMetadataAndP6(offset int, limit int, Options_ []byte, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and p6 = ?", Options_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndP7 Get MenuTrees via OptionsAndMetadataAndP7
func GetMenuTreesByOptionsAndMetadataAndP7(offset int, limit int, Options_ []byte, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and p7 = ?", Options_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndP8 Get MenuTrees via OptionsAndMetadataAndP8
func GetMenuTreesByOptionsAndMetadataAndP8(offset int, limit int, Options_ []byte, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and p8 = ?", Options_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndP9 Get MenuTrees via OptionsAndMetadataAndP9
func GetMenuTreesByOptionsAndMetadataAndP9(offset int, limit int, Options_ []byte, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and p9 = ?", Options_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadataAndFormClass Get MenuTrees via OptionsAndMetadataAndFormClass
func GetMenuTreesByOptionsAndMetadataAndFormClass(offset int, limit int, Options_ []byte, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ? and form_class = ?", Options_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndDepth Get MenuTrees via OptionsAndHasChildrenAndDepth
func GetMenuTreesByOptionsAndHasChildrenAndDepth(offset int, limit int, Options_ []byte, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and depth = ?", Options_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndP1 Get MenuTrees via OptionsAndHasChildrenAndP1
func GetMenuTreesByOptionsAndHasChildrenAndP1(offset int, limit int, Options_ []byte, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and p1 = ?", Options_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndP2 Get MenuTrees via OptionsAndHasChildrenAndP2
func GetMenuTreesByOptionsAndHasChildrenAndP2(offset int, limit int, Options_ []byte, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and p2 = ?", Options_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndP3 Get MenuTrees via OptionsAndHasChildrenAndP3
func GetMenuTreesByOptionsAndHasChildrenAndP3(offset int, limit int, Options_ []byte, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and p3 = ?", Options_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndP4 Get MenuTrees via OptionsAndHasChildrenAndP4
func GetMenuTreesByOptionsAndHasChildrenAndP4(offset int, limit int, Options_ []byte, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and p4 = ?", Options_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndP5 Get MenuTrees via OptionsAndHasChildrenAndP5
func GetMenuTreesByOptionsAndHasChildrenAndP5(offset int, limit int, Options_ []byte, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and p5 = ?", Options_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndP6 Get MenuTrees via OptionsAndHasChildrenAndP6
func GetMenuTreesByOptionsAndHasChildrenAndP6(offset int, limit int, Options_ []byte, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and p6 = ?", Options_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndP7 Get MenuTrees via OptionsAndHasChildrenAndP7
func GetMenuTreesByOptionsAndHasChildrenAndP7(offset int, limit int, Options_ []byte, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and p7 = ?", Options_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndP8 Get MenuTrees via OptionsAndHasChildrenAndP8
func GetMenuTreesByOptionsAndHasChildrenAndP8(offset int, limit int, Options_ []byte, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and p8 = ?", Options_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndP9 Get MenuTrees via OptionsAndHasChildrenAndP9
func GetMenuTreesByOptionsAndHasChildrenAndP9(offset int, limit int, Options_ []byte, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and p9 = ?", Options_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildrenAndFormClass Get MenuTrees via OptionsAndHasChildrenAndFormClass
func GetMenuTreesByOptionsAndHasChildrenAndFormClass(offset int, limit int, Options_ []byte, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ? and form_class = ?", Options_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepthAndP1 Get MenuTrees via OptionsAndDepthAndP1
func GetMenuTreesByOptionsAndDepthAndP1(offset int, limit int, Options_ []byte, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ? and p1 = ?", Options_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepthAndP2 Get MenuTrees via OptionsAndDepthAndP2
func GetMenuTreesByOptionsAndDepthAndP2(offset int, limit int, Options_ []byte, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ? and p2 = ?", Options_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepthAndP3 Get MenuTrees via OptionsAndDepthAndP3
func GetMenuTreesByOptionsAndDepthAndP3(offset int, limit int, Options_ []byte, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ? and p3 = ?", Options_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepthAndP4 Get MenuTrees via OptionsAndDepthAndP4
func GetMenuTreesByOptionsAndDepthAndP4(offset int, limit int, Options_ []byte, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ? and p4 = ?", Options_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepthAndP5 Get MenuTrees via OptionsAndDepthAndP5
func GetMenuTreesByOptionsAndDepthAndP5(offset int, limit int, Options_ []byte, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ? and p5 = ?", Options_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepthAndP6 Get MenuTrees via OptionsAndDepthAndP6
func GetMenuTreesByOptionsAndDepthAndP6(offset int, limit int, Options_ []byte, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ? and p6 = ?", Options_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepthAndP7 Get MenuTrees via OptionsAndDepthAndP7
func GetMenuTreesByOptionsAndDepthAndP7(offset int, limit int, Options_ []byte, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ? and p7 = ?", Options_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepthAndP8 Get MenuTrees via OptionsAndDepthAndP8
func GetMenuTreesByOptionsAndDepthAndP8(offset int, limit int, Options_ []byte, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ? and p8 = ?", Options_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepthAndP9 Get MenuTrees via OptionsAndDepthAndP9
func GetMenuTreesByOptionsAndDepthAndP9(offset int, limit int, Options_ []byte, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ? and p9 = ?", Options_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepthAndFormClass Get MenuTrees via OptionsAndDepthAndFormClass
func GetMenuTreesByOptionsAndDepthAndFormClass(offset int, limit int, Options_ []byte, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ? and form_class = ?", Options_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP1AndP2 Get MenuTrees via OptionsAndP1AndP2
func GetMenuTreesByOptionsAndP1AndP2(offset int, limit int, Options_ []byte, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p1 = ? and p2 = ?", Options_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP1AndP3 Get MenuTrees via OptionsAndP1AndP3
func GetMenuTreesByOptionsAndP1AndP3(offset int, limit int, Options_ []byte, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p1 = ? and p3 = ?", Options_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP1AndP4 Get MenuTrees via OptionsAndP1AndP4
func GetMenuTreesByOptionsAndP1AndP4(offset int, limit int, Options_ []byte, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p1 = ? and p4 = ?", Options_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP1AndP5 Get MenuTrees via OptionsAndP1AndP5
func GetMenuTreesByOptionsAndP1AndP5(offset int, limit int, Options_ []byte, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p1 = ? and p5 = ?", Options_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP1AndP6 Get MenuTrees via OptionsAndP1AndP6
func GetMenuTreesByOptionsAndP1AndP6(offset int, limit int, Options_ []byte, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p1 = ? and p6 = ?", Options_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP1AndP7 Get MenuTrees via OptionsAndP1AndP7
func GetMenuTreesByOptionsAndP1AndP7(offset int, limit int, Options_ []byte, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p1 = ? and p7 = ?", Options_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP1AndP8 Get MenuTrees via OptionsAndP1AndP8
func GetMenuTreesByOptionsAndP1AndP8(offset int, limit int, Options_ []byte, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p1 = ? and p8 = ?", Options_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP1AndP9 Get MenuTrees via OptionsAndP1AndP9
func GetMenuTreesByOptionsAndP1AndP9(offset int, limit int, Options_ []byte, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p1 = ? and p9 = ?", Options_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP1AndFormClass Get MenuTrees via OptionsAndP1AndFormClass
func GetMenuTreesByOptionsAndP1AndFormClass(offset int, limit int, Options_ []byte, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p1 = ? and form_class = ?", Options_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP2AndP3 Get MenuTrees via OptionsAndP2AndP3
func GetMenuTreesByOptionsAndP2AndP3(offset int, limit int, Options_ []byte, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p2 = ? and p3 = ?", Options_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP2AndP4 Get MenuTrees via OptionsAndP2AndP4
func GetMenuTreesByOptionsAndP2AndP4(offset int, limit int, Options_ []byte, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p2 = ? and p4 = ?", Options_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP2AndP5 Get MenuTrees via OptionsAndP2AndP5
func GetMenuTreesByOptionsAndP2AndP5(offset int, limit int, Options_ []byte, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p2 = ? and p5 = ?", Options_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP2AndP6 Get MenuTrees via OptionsAndP2AndP6
func GetMenuTreesByOptionsAndP2AndP6(offset int, limit int, Options_ []byte, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p2 = ? and p6 = ?", Options_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP2AndP7 Get MenuTrees via OptionsAndP2AndP7
func GetMenuTreesByOptionsAndP2AndP7(offset int, limit int, Options_ []byte, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p2 = ? and p7 = ?", Options_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP2AndP8 Get MenuTrees via OptionsAndP2AndP8
func GetMenuTreesByOptionsAndP2AndP8(offset int, limit int, Options_ []byte, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p2 = ? and p8 = ?", Options_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP2AndP9 Get MenuTrees via OptionsAndP2AndP9
func GetMenuTreesByOptionsAndP2AndP9(offset int, limit int, Options_ []byte, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p2 = ? and p9 = ?", Options_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP2AndFormClass Get MenuTrees via OptionsAndP2AndFormClass
func GetMenuTreesByOptionsAndP2AndFormClass(offset int, limit int, Options_ []byte, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p2 = ? and form_class = ?", Options_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP3AndP4 Get MenuTrees via OptionsAndP3AndP4
func GetMenuTreesByOptionsAndP3AndP4(offset int, limit int, Options_ []byte, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p3 = ? and p4 = ?", Options_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP3AndP5 Get MenuTrees via OptionsAndP3AndP5
func GetMenuTreesByOptionsAndP3AndP5(offset int, limit int, Options_ []byte, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p3 = ? and p5 = ?", Options_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP3AndP6 Get MenuTrees via OptionsAndP3AndP6
func GetMenuTreesByOptionsAndP3AndP6(offset int, limit int, Options_ []byte, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p3 = ? and p6 = ?", Options_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP3AndP7 Get MenuTrees via OptionsAndP3AndP7
func GetMenuTreesByOptionsAndP3AndP7(offset int, limit int, Options_ []byte, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p3 = ? and p7 = ?", Options_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP3AndP8 Get MenuTrees via OptionsAndP3AndP8
func GetMenuTreesByOptionsAndP3AndP8(offset int, limit int, Options_ []byte, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p3 = ? and p8 = ?", Options_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP3AndP9 Get MenuTrees via OptionsAndP3AndP9
func GetMenuTreesByOptionsAndP3AndP9(offset int, limit int, Options_ []byte, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p3 = ? and p9 = ?", Options_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP3AndFormClass Get MenuTrees via OptionsAndP3AndFormClass
func GetMenuTreesByOptionsAndP3AndFormClass(offset int, limit int, Options_ []byte, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p3 = ? and form_class = ?", Options_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP4AndP5 Get MenuTrees via OptionsAndP4AndP5
func GetMenuTreesByOptionsAndP4AndP5(offset int, limit int, Options_ []byte, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p4 = ? and p5 = ?", Options_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP4AndP6 Get MenuTrees via OptionsAndP4AndP6
func GetMenuTreesByOptionsAndP4AndP6(offset int, limit int, Options_ []byte, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p4 = ? and p6 = ?", Options_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP4AndP7 Get MenuTrees via OptionsAndP4AndP7
func GetMenuTreesByOptionsAndP4AndP7(offset int, limit int, Options_ []byte, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p4 = ? and p7 = ?", Options_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP4AndP8 Get MenuTrees via OptionsAndP4AndP8
func GetMenuTreesByOptionsAndP4AndP8(offset int, limit int, Options_ []byte, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p4 = ? and p8 = ?", Options_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP4AndP9 Get MenuTrees via OptionsAndP4AndP9
func GetMenuTreesByOptionsAndP4AndP9(offset int, limit int, Options_ []byte, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p4 = ? and p9 = ?", Options_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP4AndFormClass Get MenuTrees via OptionsAndP4AndFormClass
func GetMenuTreesByOptionsAndP4AndFormClass(offset int, limit int, Options_ []byte, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p4 = ? and form_class = ?", Options_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP5AndP6 Get MenuTrees via OptionsAndP5AndP6
func GetMenuTreesByOptionsAndP5AndP6(offset int, limit int, Options_ []byte, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p5 = ? and p6 = ?", Options_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP5AndP7 Get MenuTrees via OptionsAndP5AndP7
func GetMenuTreesByOptionsAndP5AndP7(offset int, limit int, Options_ []byte, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p5 = ? and p7 = ?", Options_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP5AndP8 Get MenuTrees via OptionsAndP5AndP8
func GetMenuTreesByOptionsAndP5AndP8(offset int, limit int, Options_ []byte, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p5 = ? and p8 = ?", Options_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP5AndP9 Get MenuTrees via OptionsAndP5AndP9
func GetMenuTreesByOptionsAndP5AndP9(offset int, limit int, Options_ []byte, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p5 = ? and p9 = ?", Options_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP5AndFormClass Get MenuTrees via OptionsAndP5AndFormClass
func GetMenuTreesByOptionsAndP5AndFormClass(offset int, limit int, Options_ []byte, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p5 = ? and form_class = ?", Options_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP6AndP7 Get MenuTrees via OptionsAndP6AndP7
func GetMenuTreesByOptionsAndP6AndP7(offset int, limit int, Options_ []byte, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p6 = ? and p7 = ?", Options_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP6AndP8 Get MenuTrees via OptionsAndP6AndP8
func GetMenuTreesByOptionsAndP6AndP8(offset int, limit int, Options_ []byte, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p6 = ? and p8 = ?", Options_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP6AndP9 Get MenuTrees via OptionsAndP6AndP9
func GetMenuTreesByOptionsAndP6AndP9(offset int, limit int, Options_ []byte, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p6 = ? and p9 = ?", Options_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP6AndFormClass Get MenuTrees via OptionsAndP6AndFormClass
func GetMenuTreesByOptionsAndP6AndFormClass(offset int, limit int, Options_ []byte, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p6 = ? and form_class = ?", Options_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP7AndP8 Get MenuTrees via OptionsAndP7AndP8
func GetMenuTreesByOptionsAndP7AndP8(offset int, limit int, Options_ []byte, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p7 = ? and p8 = ?", Options_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP7AndP9 Get MenuTrees via OptionsAndP7AndP9
func GetMenuTreesByOptionsAndP7AndP9(offset int, limit int, Options_ []byte, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p7 = ? and p9 = ?", Options_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP7AndFormClass Get MenuTrees via OptionsAndP7AndFormClass
func GetMenuTreesByOptionsAndP7AndFormClass(offset int, limit int, Options_ []byte, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p7 = ? and form_class = ?", Options_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP8AndP9 Get MenuTrees via OptionsAndP8AndP9
func GetMenuTreesByOptionsAndP8AndP9(offset int, limit int, Options_ []byte, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p8 = ? and p9 = ?", Options_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP8AndFormClass Get MenuTrees via OptionsAndP8AndFormClass
func GetMenuTreesByOptionsAndP8AndFormClass(offset int, limit int, Options_ []byte, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p8 = ? and form_class = ?", Options_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP9AndFormClass Get MenuTrees via OptionsAndP9AndFormClass
func GetMenuTreesByOptionsAndP9AndFormClass(offset int, limit int, Options_ []byte, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p9 = ? and form_class = ?", Options_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndDiscovered Get MenuTrees via ProviderAndEnabledAndDiscovered
func GetMenuTreesByProviderAndEnabledAndDiscovered(offset int, limit int, Provider_ string, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and discovered = ?", Provider_, Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndExpanded Get MenuTrees via ProviderAndEnabledAndExpanded
func GetMenuTreesByProviderAndEnabledAndExpanded(offset int, limit int, Provider_ string, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and expanded = ?", Provider_, Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndWeight Get MenuTrees via ProviderAndEnabledAndWeight
func GetMenuTreesByProviderAndEnabledAndWeight(offset int, limit int, Provider_ string, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and weight = ?", Provider_, Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndMetadata Get MenuTrees via ProviderAndEnabledAndMetadata
func GetMenuTreesByProviderAndEnabledAndMetadata(offset int, limit int, Provider_ string, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and metadata = ?", Provider_, Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndHasChildren Get MenuTrees via ProviderAndEnabledAndHasChildren
func GetMenuTreesByProviderAndEnabledAndHasChildren(offset int, limit int, Provider_ string, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and has_children = ?", Provider_, Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndDepth Get MenuTrees via ProviderAndEnabledAndDepth
func GetMenuTreesByProviderAndEnabledAndDepth(offset int, limit int, Provider_ string, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and depth = ?", Provider_, Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndP1 Get MenuTrees via ProviderAndEnabledAndP1
func GetMenuTreesByProviderAndEnabledAndP1(offset int, limit int, Provider_ string, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and p1 = ?", Provider_, Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndP2 Get MenuTrees via ProviderAndEnabledAndP2
func GetMenuTreesByProviderAndEnabledAndP2(offset int, limit int, Provider_ string, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and p2 = ?", Provider_, Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndP3 Get MenuTrees via ProviderAndEnabledAndP3
func GetMenuTreesByProviderAndEnabledAndP3(offset int, limit int, Provider_ string, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and p3 = ?", Provider_, Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndP4 Get MenuTrees via ProviderAndEnabledAndP4
func GetMenuTreesByProviderAndEnabledAndP4(offset int, limit int, Provider_ string, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and p4 = ?", Provider_, Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndP5 Get MenuTrees via ProviderAndEnabledAndP5
func GetMenuTreesByProviderAndEnabledAndP5(offset int, limit int, Provider_ string, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and p5 = ?", Provider_, Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndP6 Get MenuTrees via ProviderAndEnabledAndP6
func GetMenuTreesByProviderAndEnabledAndP6(offset int, limit int, Provider_ string, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and p6 = ?", Provider_, Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndP7 Get MenuTrees via ProviderAndEnabledAndP7
func GetMenuTreesByProviderAndEnabledAndP7(offset int, limit int, Provider_ string, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and p7 = ?", Provider_, Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndP8 Get MenuTrees via ProviderAndEnabledAndP8
func GetMenuTreesByProviderAndEnabledAndP8(offset int, limit int, Provider_ string, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and p8 = ?", Provider_, Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndP9 Get MenuTrees via ProviderAndEnabledAndP9
func GetMenuTreesByProviderAndEnabledAndP9(offset int, limit int, Provider_ string, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and p9 = ?", Provider_, Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabledAndFormClass Get MenuTrees via ProviderAndEnabledAndFormClass
func GetMenuTreesByProviderAndEnabledAndFormClass(offset int, limit int, Provider_ string, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ? and form_class = ?", Provider_, Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndExpanded Get MenuTrees via ProviderAndDiscoveredAndExpanded
func GetMenuTreesByProviderAndDiscoveredAndExpanded(offset int, limit int, Provider_ string, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and expanded = ?", Provider_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndWeight Get MenuTrees via ProviderAndDiscoveredAndWeight
func GetMenuTreesByProviderAndDiscoveredAndWeight(offset int, limit int, Provider_ string, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and weight = ?", Provider_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndMetadata Get MenuTrees via ProviderAndDiscoveredAndMetadata
func GetMenuTreesByProviderAndDiscoveredAndMetadata(offset int, limit int, Provider_ string, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and metadata = ?", Provider_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndHasChildren Get MenuTrees via ProviderAndDiscoveredAndHasChildren
func GetMenuTreesByProviderAndDiscoveredAndHasChildren(offset int, limit int, Provider_ string, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and has_children = ?", Provider_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndDepth Get MenuTrees via ProviderAndDiscoveredAndDepth
func GetMenuTreesByProviderAndDiscoveredAndDepth(offset int, limit int, Provider_ string, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and depth = ?", Provider_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndP1 Get MenuTrees via ProviderAndDiscoveredAndP1
func GetMenuTreesByProviderAndDiscoveredAndP1(offset int, limit int, Provider_ string, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and p1 = ?", Provider_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndP2 Get MenuTrees via ProviderAndDiscoveredAndP2
func GetMenuTreesByProviderAndDiscoveredAndP2(offset int, limit int, Provider_ string, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and p2 = ?", Provider_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndP3 Get MenuTrees via ProviderAndDiscoveredAndP3
func GetMenuTreesByProviderAndDiscoveredAndP3(offset int, limit int, Provider_ string, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and p3 = ?", Provider_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndP4 Get MenuTrees via ProviderAndDiscoveredAndP4
func GetMenuTreesByProviderAndDiscoveredAndP4(offset int, limit int, Provider_ string, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and p4 = ?", Provider_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndP5 Get MenuTrees via ProviderAndDiscoveredAndP5
func GetMenuTreesByProviderAndDiscoveredAndP5(offset int, limit int, Provider_ string, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and p5 = ?", Provider_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndP6 Get MenuTrees via ProviderAndDiscoveredAndP6
func GetMenuTreesByProviderAndDiscoveredAndP6(offset int, limit int, Provider_ string, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and p6 = ?", Provider_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndP7 Get MenuTrees via ProviderAndDiscoveredAndP7
func GetMenuTreesByProviderAndDiscoveredAndP7(offset int, limit int, Provider_ string, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and p7 = ?", Provider_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndP8 Get MenuTrees via ProviderAndDiscoveredAndP8
func GetMenuTreesByProviderAndDiscoveredAndP8(offset int, limit int, Provider_ string, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and p8 = ?", Provider_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndP9 Get MenuTrees via ProviderAndDiscoveredAndP9
func GetMenuTreesByProviderAndDiscoveredAndP9(offset int, limit int, Provider_ string, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and p9 = ?", Provider_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscoveredAndFormClass Get MenuTrees via ProviderAndDiscoveredAndFormClass
func GetMenuTreesByProviderAndDiscoveredAndFormClass(offset int, limit int, Provider_ string, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ? and form_class = ?", Provider_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndWeight Get MenuTrees via ProviderAndExpandedAndWeight
func GetMenuTreesByProviderAndExpandedAndWeight(offset int, limit int, Provider_ string, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and weight = ?", Provider_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndMetadata Get MenuTrees via ProviderAndExpandedAndMetadata
func GetMenuTreesByProviderAndExpandedAndMetadata(offset int, limit int, Provider_ string, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and metadata = ?", Provider_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndHasChildren Get MenuTrees via ProviderAndExpandedAndHasChildren
func GetMenuTreesByProviderAndExpandedAndHasChildren(offset int, limit int, Provider_ string, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and has_children = ?", Provider_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndDepth Get MenuTrees via ProviderAndExpandedAndDepth
func GetMenuTreesByProviderAndExpandedAndDepth(offset int, limit int, Provider_ string, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and depth = ?", Provider_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndP1 Get MenuTrees via ProviderAndExpandedAndP1
func GetMenuTreesByProviderAndExpandedAndP1(offset int, limit int, Provider_ string, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and p1 = ?", Provider_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndP2 Get MenuTrees via ProviderAndExpandedAndP2
func GetMenuTreesByProviderAndExpandedAndP2(offset int, limit int, Provider_ string, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and p2 = ?", Provider_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndP3 Get MenuTrees via ProviderAndExpandedAndP3
func GetMenuTreesByProviderAndExpandedAndP3(offset int, limit int, Provider_ string, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and p3 = ?", Provider_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndP4 Get MenuTrees via ProviderAndExpandedAndP4
func GetMenuTreesByProviderAndExpandedAndP4(offset int, limit int, Provider_ string, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and p4 = ?", Provider_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndP5 Get MenuTrees via ProviderAndExpandedAndP5
func GetMenuTreesByProviderAndExpandedAndP5(offset int, limit int, Provider_ string, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and p5 = ?", Provider_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndP6 Get MenuTrees via ProviderAndExpandedAndP6
func GetMenuTreesByProviderAndExpandedAndP6(offset int, limit int, Provider_ string, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and p6 = ?", Provider_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndP7 Get MenuTrees via ProviderAndExpandedAndP7
func GetMenuTreesByProviderAndExpandedAndP7(offset int, limit int, Provider_ string, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and p7 = ?", Provider_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndP8 Get MenuTrees via ProviderAndExpandedAndP8
func GetMenuTreesByProviderAndExpandedAndP8(offset int, limit int, Provider_ string, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and p8 = ?", Provider_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndP9 Get MenuTrees via ProviderAndExpandedAndP9
func GetMenuTreesByProviderAndExpandedAndP9(offset int, limit int, Provider_ string, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and p9 = ?", Provider_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpandedAndFormClass Get MenuTrees via ProviderAndExpandedAndFormClass
func GetMenuTreesByProviderAndExpandedAndFormClass(offset int, limit int, Provider_ string, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ? and form_class = ?", Provider_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndMetadata Get MenuTrees via ProviderAndWeightAndMetadata
func GetMenuTreesByProviderAndWeightAndMetadata(offset int, limit int, Provider_ string, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and metadata = ?", Provider_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndHasChildren Get MenuTrees via ProviderAndWeightAndHasChildren
func GetMenuTreesByProviderAndWeightAndHasChildren(offset int, limit int, Provider_ string, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and has_children = ?", Provider_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndDepth Get MenuTrees via ProviderAndWeightAndDepth
func GetMenuTreesByProviderAndWeightAndDepth(offset int, limit int, Provider_ string, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and depth = ?", Provider_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndP1 Get MenuTrees via ProviderAndWeightAndP1
func GetMenuTreesByProviderAndWeightAndP1(offset int, limit int, Provider_ string, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and p1 = ?", Provider_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndP2 Get MenuTrees via ProviderAndWeightAndP2
func GetMenuTreesByProviderAndWeightAndP2(offset int, limit int, Provider_ string, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and p2 = ?", Provider_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndP3 Get MenuTrees via ProviderAndWeightAndP3
func GetMenuTreesByProviderAndWeightAndP3(offset int, limit int, Provider_ string, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and p3 = ?", Provider_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndP4 Get MenuTrees via ProviderAndWeightAndP4
func GetMenuTreesByProviderAndWeightAndP4(offset int, limit int, Provider_ string, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and p4 = ?", Provider_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndP5 Get MenuTrees via ProviderAndWeightAndP5
func GetMenuTreesByProviderAndWeightAndP5(offset int, limit int, Provider_ string, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and p5 = ?", Provider_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndP6 Get MenuTrees via ProviderAndWeightAndP6
func GetMenuTreesByProviderAndWeightAndP6(offset int, limit int, Provider_ string, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and p6 = ?", Provider_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndP7 Get MenuTrees via ProviderAndWeightAndP7
func GetMenuTreesByProviderAndWeightAndP7(offset int, limit int, Provider_ string, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and p7 = ?", Provider_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndP8 Get MenuTrees via ProviderAndWeightAndP8
func GetMenuTreesByProviderAndWeightAndP8(offset int, limit int, Provider_ string, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and p8 = ?", Provider_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndP9 Get MenuTrees via ProviderAndWeightAndP9
func GetMenuTreesByProviderAndWeightAndP9(offset int, limit int, Provider_ string, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and p9 = ?", Provider_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeightAndFormClass Get MenuTrees via ProviderAndWeightAndFormClass
func GetMenuTreesByProviderAndWeightAndFormClass(offset int, limit int, Provider_ string, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ? and form_class = ?", Provider_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndHasChildren Get MenuTrees via ProviderAndMetadataAndHasChildren
func GetMenuTreesByProviderAndMetadataAndHasChildren(offset int, limit int, Provider_ string, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and has_children = ?", Provider_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndDepth Get MenuTrees via ProviderAndMetadataAndDepth
func GetMenuTreesByProviderAndMetadataAndDepth(offset int, limit int, Provider_ string, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and depth = ?", Provider_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndP1 Get MenuTrees via ProviderAndMetadataAndP1
func GetMenuTreesByProviderAndMetadataAndP1(offset int, limit int, Provider_ string, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and p1 = ?", Provider_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndP2 Get MenuTrees via ProviderAndMetadataAndP2
func GetMenuTreesByProviderAndMetadataAndP2(offset int, limit int, Provider_ string, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and p2 = ?", Provider_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndP3 Get MenuTrees via ProviderAndMetadataAndP3
func GetMenuTreesByProviderAndMetadataAndP3(offset int, limit int, Provider_ string, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and p3 = ?", Provider_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndP4 Get MenuTrees via ProviderAndMetadataAndP4
func GetMenuTreesByProviderAndMetadataAndP4(offset int, limit int, Provider_ string, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and p4 = ?", Provider_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndP5 Get MenuTrees via ProviderAndMetadataAndP5
func GetMenuTreesByProviderAndMetadataAndP5(offset int, limit int, Provider_ string, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and p5 = ?", Provider_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndP6 Get MenuTrees via ProviderAndMetadataAndP6
func GetMenuTreesByProviderAndMetadataAndP6(offset int, limit int, Provider_ string, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and p6 = ?", Provider_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndP7 Get MenuTrees via ProviderAndMetadataAndP7
func GetMenuTreesByProviderAndMetadataAndP7(offset int, limit int, Provider_ string, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and p7 = ?", Provider_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndP8 Get MenuTrees via ProviderAndMetadataAndP8
func GetMenuTreesByProviderAndMetadataAndP8(offset int, limit int, Provider_ string, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and p8 = ?", Provider_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndP9 Get MenuTrees via ProviderAndMetadataAndP9
func GetMenuTreesByProviderAndMetadataAndP9(offset int, limit int, Provider_ string, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and p9 = ?", Provider_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadataAndFormClass Get MenuTrees via ProviderAndMetadataAndFormClass
func GetMenuTreesByProviderAndMetadataAndFormClass(offset int, limit int, Provider_ string, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ? and form_class = ?", Provider_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndDepth Get MenuTrees via ProviderAndHasChildrenAndDepth
func GetMenuTreesByProviderAndHasChildrenAndDepth(offset int, limit int, Provider_ string, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and depth = ?", Provider_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndP1 Get MenuTrees via ProviderAndHasChildrenAndP1
func GetMenuTreesByProviderAndHasChildrenAndP1(offset int, limit int, Provider_ string, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and p1 = ?", Provider_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndP2 Get MenuTrees via ProviderAndHasChildrenAndP2
func GetMenuTreesByProviderAndHasChildrenAndP2(offset int, limit int, Provider_ string, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and p2 = ?", Provider_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndP3 Get MenuTrees via ProviderAndHasChildrenAndP3
func GetMenuTreesByProviderAndHasChildrenAndP3(offset int, limit int, Provider_ string, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and p3 = ?", Provider_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndP4 Get MenuTrees via ProviderAndHasChildrenAndP4
func GetMenuTreesByProviderAndHasChildrenAndP4(offset int, limit int, Provider_ string, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and p4 = ?", Provider_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndP5 Get MenuTrees via ProviderAndHasChildrenAndP5
func GetMenuTreesByProviderAndHasChildrenAndP5(offset int, limit int, Provider_ string, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and p5 = ?", Provider_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndP6 Get MenuTrees via ProviderAndHasChildrenAndP6
func GetMenuTreesByProviderAndHasChildrenAndP6(offset int, limit int, Provider_ string, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and p6 = ?", Provider_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndP7 Get MenuTrees via ProviderAndHasChildrenAndP7
func GetMenuTreesByProviderAndHasChildrenAndP7(offset int, limit int, Provider_ string, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and p7 = ?", Provider_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndP8 Get MenuTrees via ProviderAndHasChildrenAndP8
func GetMenuTreesByProviderAndHasChildrenAndP8(offset int, limit int, Provider_ string, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and p8 = ?", Provider_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndP9 Get MenuTrees via ProviderAndHasChildrenAndP9
func GetMenuTreesByProviderAndHasChildrenAndP9(offset int, limit int, Provider_ string, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and p9 = ?", Provider_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildrenAndFormClass Get MenuTrees via ProviderAndHasChildrenAndFormClass
func GetMenuTreesByProviderAndHasChildrenAndFormClass(offset int, limit int, Provider_ string, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ? and form_class = ?", Provider_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepthAndP1 Get MenuTrees via ProviderAndDepthAndP1
func GetMenuTreesByProviderAndDepthAndP1(offset int, limit int, Provider_ string, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ? and p1 = ?", Provider_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepthAndP2 Get MenuTrees via ProviderAndDepthAndP2
func GetMenuTreesByProviderAndDepthAndP2(offset int, limit int, Provider_ string, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ? and p2 = ?", Provider_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepthAndP3 Get MenuTrees via ProviderAndDepthAndP3
func GetMenuTreesByProviderAndDepthAndP3(offset int, limit int, Provider_ string, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ? and p3 = ?", Provider_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepthAndP4 Get MenuTrees via ProviderAndDepthAndP4
func GetMenuTreesByProviderAndDepthAndP4(offset int, limit int, Provider_ string, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ? and p4 = ?", Provider_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepthAndP5 Get MenuTrees via ProviderAndDepthAndP5
func GetMenuTreesByProviderAndDepthAndP5(offset int, limit int, Provider_ string, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ? and p5 = ?", Provider_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepthAndP6 Get MenuTrees via ProviderAndDepthAndP6
func GetMenuTreesByProviderAndDepthAndP6(offset int, limit int, Provider_ string, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ? and p6 = ?", Provider_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepthAndP7 Get MenuTrees via ProviderAndDepthAndP7
func GetMenuTreesByProviderAndDepthAndP7(offset int, limit int, Provider_ string, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ? and p7 = ?", Provider_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepthAndP8 Get MenuTrees via ProviderAndDepthAndP8
func GetMenuTreesByProviderAndDepthAndP8(offset int, limit int, Provider_ string, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ? and p8 = ?", Provider_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepthAndP9 Get MenuTrees via ProviderAndDepthAndP9
func GetMenuTreesByProviderAndDepthAndP9(offset int, limit int, Provider_ string, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ? and p9 = ?", Provider_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepthAndFormClass Get MenuTrees via ProviderAndDepthAndFormClass
func GetMenuTreesByProviderAndDepthAndFormClass(offset int, limit int, Provider_ string, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ? and form_class = ?", Provider_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP1AndP2 Get MenuTrees via ProviderAndP1AndP2
func GetMenuTreesByProviderAndP1AndP2(offset int, limit int, Provider_ string, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p1 = ? and p2 = ?", Provider_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP1AndP3 Get MenuTrees via ProviderAndP1AndP3
func GetMenuTreesByProviderAndP1AndP3(offset int, limit int, Provider_ string, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p1 = ? and p3 = ?", Provider_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP1AndP4 Get MenuTrees via ProviderAndP1AndP4
func GetMenuTreesByProviderAndP1AndP4(offset int, limit int, Provider_ string, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p1 = ? and p4 = ?", Provider_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP1AndP5 Get MenuTrees via ProviderAndP1AndP5
func GetMenuTreesByProviderAndP1AndP5(offset int, limit int, Provider_ string, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p1 = ? and p5 = ?", Provider_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP1AndP6 Get MenuTrees via ProviderAndP1AndP6
func GetMenuTreesByProviderAndP1AndP6(offset int, limit int, Provider_ string, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p1 = ? and p6 = ?", Provider_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP1AndP7 Get MenuTrees via ProviderAndP1AndP7
func GetMenuTreesByProviderAndP1AndP7(offset int, limit int, Provider_ string, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p1 = ? and p7 = ?", Provider_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP1AndP8 Get MenuTrees via ProviderAndP1AndP8
func GetMenuTreesByProviderAndP1AndP8(offset int, limit int, Provider_ string, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p1 = ? and p8 = ?", Provider_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP1AndP9 Get MenuTrees via ProviderAndP1AndP9
func GetMenuTreesByProviderAndP1AndP9(offset int, limit int, Provider_ string, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p1 = ? and p9 = ?", Provider_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP1AndFormClass Get MenuTrees via ProviderAndP1AndFormClass
func GetMenuTreesByProviderAndP1AndFormClass(offset int, limit int, Provider_ string, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p1 = ? and form_class = ?", Provider_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP2AndP3 Get MenuTrees via ProviderAndP2AndP3
func GetMenuTreesByProviderAndP2AndP3(offset int, limit int, Provider_ string, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p2 = ? and p3 = ?", Provider_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP2AndP4 Get MenuTrees via ProviderAndP2AndP4
func GetMenuTreesByProviderAndP2AndP4(offset int, limit int, Provider_ string, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p2 = ? and p4 = ?", Provider_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP2AndP5 Get MenuTrees via ProviderAndP2AndP5
func GetMenuTreesByProviderAndP2AndP5(offset int, limit int, Provider_ string, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p2 = ? and p5 = ?", Provider_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP2AndP6 Get MenuTrees via ProviderAndP2AndP6
func GetMenuTreesByProviderAndP2AndP6(offset int, limit int, Provider_ string, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p2 = ? and p6 = ?", Provider_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP2AndP7 Get MenuTrees via ProviderAndP2AndP7
func GetMenuTreesByProviderAndP2AndP7(offset int, limit int, Provider_ string, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p2 = ? and p7 = ?", Provider_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP2AndP8 Get MenuTrees via ProviderAndP2AndP8
func GetMenuTreesByProviderAndP2AndP8(offset int, limit int, Provider_ string, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p2 = ? and p8 = ?", Provider_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP2AndP9 Get MenuTrees via ProviderAndP2AndP9
func GetMenuTreesByProviderAndP2AndP9(offset int, limit int, Provider_ string, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p2 = ? and p9 = ?", Provider_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP2AndFormClass Get MenuTrees via ProviderAndP2AndFormClass
func GetMenuTreesByProviderAndP2AndFormClass(offset int, limit int, Provider_ string, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p2 = ? and form_class = ?", Provider_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP3AndP4 Get MenuTrees via ProviderAndP3AndP4
func GetMenuTreesByProviderAndP3AndP4(offset int, limit int, Provider_ string, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p3 = ? and p4 = ?", Provider_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP3AndP5 Get MenuTrees via ProviderAndP3AndP5
func GetMenuTreesByProviderAndP3AndP5(offset int, limit int, Provider_ string, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p3 = ? and p5 = ?", Provider_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP3AndP6 Get MenuTrees via ProviderAndP3AndP6
func GetMenuTreesByProviderAndP3AndP6(offset int, limit int, Provider_ string, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p3 = ? and p6 = ?", Provider_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP3AndP7 Get MenuTrees via ProviderAndP3AndP7
func GetMenuTreesByProviderAndP3AndP7(offset int, limit int, Provider_ string, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p3 = ? and p7 = ?", Provider_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP3AndP8 Get MenuTrees via ProviderAndP3AndP8
func GetMenuTreesByProviderAndP3AndP8(offset int, limit int, Provider_ string, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p3 = ? and p8 = ?", Provider_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP3AndP9 Get MenuTrees via ProviderAndP3AndP9
func GetMenuTreesByProviderAndP3AndP9(offset int, limit int, Provider_ string, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p3 = ? and p9 = ?", Provider_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP3AndFormClass Get MenuTrees via ProviderAndP3AndFormClass
func GetMenuTreesByProviderAndP3AndFormClass(offset int, limit int, Provider_ string, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p3 = ? and form_class = ?", Provider_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP4AndP5 Get MenuTrees via ProviderAndP4AndP5
func GetMenuTreesByProviderAndP4AndP5(offset int, limit int, Provider_ string, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p4 = ? and p5 = ?", Provider_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP4AndP6 Get MenuTrees via ProviderAndP4AndP6
func GetMenuTreesByProviderAndP4AndP6(offset int, limit int, Provider_ string, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p4 = ? and p6 = ?", Provider_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP4AndP7 Get MenuTrees via ProviderAndP4AndP7
func GetMenuTreesByProviderAndP4AndP7(offset int, limit int, Provider_ string, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p4 = ? and p7 = ?", Provider_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP4AndP8 Get MenuTrees via ProviderAndP4AndP8
func GetMenuTreesByProviderAndP4AndP8(offset int, limit int, Provider_ string, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p4 = ? and p8 = ?", Provider_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP4AndP9 Get MenuTrees via ProviderAndP4AndP9
func GetMenuTreesByProviderAndP4AndP9(offset int, limit int, Provider_ string, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p4 = ? and p9 = ?", Provider_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP4AndFormClass Get MenuTrees via ProviderAndP4AndFormClass
func GetMenuTreesByProviderAndP4AndFormClass(offset int, limit int, Provider_ string, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p4 = ? and form_class = ?", Provider_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP5AndP6 Get MenuTrees via ProviderAndP5AndP6
func GetMenuTreesByProviderAndP5AndP6(offset int, limit int, Provider_ string, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p5 = ? and p6 = ?", Provider_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP5AndP7 Get MenuTrees via ProviderAndP5AndP7
func GetMenuTreesByProviderAndP5AndP7(offset int, limit int, Provider_ string, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p5 = ? and p7 = ?", Provider_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP5AndP8 Get MenuTrees via ProviderAndP5AndP8
func GetMenuTreesByProviderAndP5AndP8(offset int, limit int, Provider_ string, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p5 = ? and p8 = ?", Provider_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP5AndP9 Get MenuTrees via ProviderAndP5AndP9
func GetMenuTreesByProviderAndP5AndP9(offset int, limit int, Provider_ string, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p5 = ? and p9 = ?", Provider_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP5AndFormClass Get MenuTrees via ProviderAndP5AndFormClass
func GetMenuTreesByProviderAndP5AndFormClass(offset int, limit int, Provider_ string, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p5 = ? and form_class = ?", Provider_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP6AndP7 Get MenuTrees via ProviderAndP6AndP7
func GetMenuTreesByProviderAndP6AndP7(offset int, limit int, Provider_ string, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p6 = ? and p7 = ?", Provider_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP6AndP8 Get MenuTrees via ProviderAndP6AndP8
func GetMenuTreesByProviderAndP6AndP8(offset int, limit int, Provider_ string, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p6 = ? and p8 = ?", Provider_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP6AndP9 Get MenuTrees via ProviderAndP6AndP9
func GetMenuTreesByProviderAndP6AndP9(offset int, limit int, Provider_ string, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p6 = ? and p9 = ?", Provider_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP6AndFormClass Get MenuTrees via ProviderAndP6AndFormClass
func GetMenuTreesByProviderAndP6AndFormClass(offset int, limit int, Provider_ string, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p6 = ? and form_class = ?", Provider_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP7AndP8 Get MenuTrees via ProviderAndP7AndP8
func GetMenuTreesByProviderAndP7AndP8(offset int, limit int, Provider_ string, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p7 = ? and p8 = ?", Provider_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP7AndP9 Get MenuTrees via ProviderAndP7AndP9
func GetMenuTreesByProviderAndP7AndP9(offset int, limit int, Provider_ string, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p7 = ? and p9 = ?", Provider_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP7AndFormClass Get MenuTrees via ProviderAndP7AndFormClass
func GetMenuTreesByProviderAndP7AndFormClass(offset int, limit int, Provider_ string, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p7 = ? and form_class = ?", Provider_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP8AndP9 Get MenuTrees via ProviderAndP8AndP9
func GetMenuTreesByProviderAndP8AndP9(offset int, limit int, Provider_ string, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p8 = ? and p9 = ?", Provider_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP8AndFormClass Get MenuTrees via ProviderAndP8AndFormClass
func GetMenuTreesByProviderAndP8AndFormClass(offset int, limit int, Provider_ string, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p8 = ? and form_class = ?", Provider_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP9AndFormClass Get MenuTrees via ProviderAndP9AndFormClass
func GetMenuTreesByProviderAndP9AndFormClass(offset int, limit int, Provider_ string, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p9 = ? and form_class = ?", Provider_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndExpanded Get MenuTrees via EnabledAndDiscoveredAndExpanded
func GetMenuTreesByEnabledAndDiscoveredAndExpanded(offset int, limit int, Enabled_ int, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and expanded = ?", Enabled_, Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndWeight Get MenuTrees via EnabledAndDiscoveredAndWeight
func GetMenuTreesByEnabledAndDiscoveredAndWeight(offset int, limit int, Enabled_ int, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and weight = ?", Enabled_, Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndMetadata Get MenuTrees via EnabledAndDiscoveredAndMetadata
func GetMenuTreesByEnabledAndDiscoveredAndMetadata(offset int, limit int, Enabled_ int, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and metadata = ?", Enabled_, Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndHasChildren Get MenuTrees via EnabledAndDiscoveredAndHasChildren
func GetMenuTreesByEnabledAndDiscoveredAndHasChildren(offset int, limit int, Enabled_ int, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and has_children = ?", Enabled_, Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndDepth Get MenuTrees via EnabledAndDiscoveredAndDepth
func GetMenuTreesByEnabledAndDiscoveredAndDepth(offset int, limit int, Enabled_ int, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and depth = ?", Enabled_, Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndP1 Get MenuTrees via EnabledAndDiscoveredAndP1
func GetMenuTreesByEnabledAndDiscoveredAndP1(offset int, limit int, Enabled_ int, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and p1 = ?", Enabled_, Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndP2 Get MenuTrees via EnabledAndDiscoveredAndP2
func GetMenuTreesByEnabledAndDiscoveredAndP2(offset int, limit int, Enabled_ int, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and p2 = ?", Enabled_, Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndP3 Get MenuTrees via EnabledAndDiscoveredAndP3
func GetMenuTreesByEnabledAndDiscoveredAndP3(offset int, limit int, Enabled_ int, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and p3 = ?", Enabled_, Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndP4 Get MenuTrees via EnabledAndDiscoveredAndP4
func GetMenuTreesByEnabledAndDiscoveredAndP4(offset int, limit int, Enabled_ int, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and p4 = ?", Enabled_, Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndP5 Get MenuTrees via EnabledAndDiscoveredAndP5
func GetMenuTreesByEnabledAndDiscoveredAndP5(offset int, limit int, Enabled_ int, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and p5 = ?", Enabled_, Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndP6 Get MenuTrees via EnabledAndDiscoveredAndP6
func GetMenuTreesByEnabledAndDiscoveredAndP6(offset int, limit int, Enabled_ int, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and p6 = ?", Enabled_, Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndP7 Get MenuTrees via EnabledAndDiscoveredAndP7
func GetMenuTreesByEnabledAndDiscoveredAndP7(offset int, limit int, Enabled_ int, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and p7 = ?", Enabled_, Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndP8 Get MenuTrees via EnabledAndDiscoveredAndP8
func GetMenuTreesByEnabledAndDiscoveredAndP8(offset int, limit int, Enabled_ int, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and p8 = ?", Enabled_, Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndP9 Get MenuTrees via EnabledAndDiscoveredAndP9
func GetMenuTreesByEnabledAndDiscoveredAndP9(offset int, limit int, Enabled_ int, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and p9 = ?", Enabled_, Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscoveredAndFormClass Get MenuTrees via EnabledAndDiscoveredAndFormClass
func GetMenuTreesByEnabledAndDiscoveredAndFormClass(offset int, limit int, Enabled_ int, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ? and form_class = ?", Enabled_, Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndWeight Get MenuTrees via EnabledAndExpandedAndWeight
func GetMenuTreesByEnabledAndExpandedAndWeight(offset int, limit int, Enabled_ int, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and weight = ?", Enabled_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndMetadata Get MenuTrees via EnabledAndExpandedAndMetadata
func GetMenuTreesByEnabledAndExpandedAndMetadata(offset int, limit int, Enabled_ int, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and metadata = ?", Enabled_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndHasChildren Get MenuTrees via EnabledAndExpandedAndHasChildren
func GetMenuTreesByEnabledAndExpandedAndHasChildren(offset int, limit int, Enabled_ int, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and has_children = ?", Enabled_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndDepth Get MenuTrees via EnabledAndExpandedAndDepth
func GetMenuTreesByEnabledAndExpandedAndDepth(offset int, limit int, Enabled_ int, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and depth = ?", Enabled_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndP1 Get MenuTrees via EnabledAndExpandedAndP1
func GetMenuTreesByEnabledAndExpandedAndP1(offset int, limit int, Enabled_ int, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and p1 = ?", Enabled_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndP2 Get MenuTrees via EnabledAndExpandedAndP2
func GetMenuTreesByEnabledAndExpandedAndP2(offset int, limit int, Enabled_ int, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and p2 = ?", Enabled_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndP3 Get MenuTrees via EnabledAndExpandedAndP3
func GetMenuTreesByEnabledAndExpandedAndP3(offset int, limit int, Enabled_ int, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and p3 = ?", Enabled_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndP4 Get MenuTrees via EnabledAndExpandedAndP4
func GetMenuTreesByEnabledAndExpandedAndP4(offset int, limit int, Enabled_ int, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and p4 = ?", Enabled_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndP5 Get MenuTrees via EnabledAndExpandedAndP5
func GetMenuTreesByEnabledAndExpandedAndP5(offset int, limit int, Enabled_ int, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and p5 = ?", Enabled_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndP6 Get MenuTrees via EnabledAndExpandedAndP6
func GetMenuTreesByEnabledAndExpandedAndP6(offset int, limit int, Enabled_ int, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and p6 = ?", Enabled_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndP7 Get MenuTrees via EnabledAndExpandedAndP7
func GetMenuTreesByEnabledAndExpandedAndP7(offset int, limit int, Enabled_ int, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and p7 = ?", Enabled_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndP8 Get MenuTrees via EnabledAndExpandedAndP8
func GetMenuTreesByEnabledAndExpandedAndP8(offset int, limit int, Enabled_ int, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and p8 = ?", Enabled_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndP9 Get MenuTrees via EnabledAndExpandedAndP9
func GetMenuTreesByEnabledAndExpandedAndP9(offset int, limit int, Enabled_ int, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and p9 = ?", Enabled_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpandedAndFormClass Get MenuTrees via EnabledAndExpandedAndFormClass
func GetMenuTreesByEnabledAndExpandedAndFormClass(offset int, limit int, Enabled_ int, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ? and form_class = ?", Enabled_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndMetadata Get MenuTrees via EnabledAndWeightAndMetadata
func GetMenuTreesByEnabledAndWeightAndMetadata(offset int, limit int, Enabled_ int, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and metadata = ?", Enabled_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndHasChildren Get MenuTrees via EnabledAndWeightAndHasChildren
func GetMenuTreesByEnabledAndWeightAndHasChildren(offset int, limit int, Enabled_ int, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and has_children = ?", Enabled_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndDepth Get MenuTrees via EnabledAndWeightAndDepth
func GetMenuTreesByEnabledAndWeightAndDepth(offset int, limit int, Enabled_ int, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and depth = ?", Enabled_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndP1 Get MenuTrees via EnabledAndWeightAndP1
func GetMenuTreesByEnabledAndWeightAndP1(offset int, limit int, Enabled_ int, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and p1 = ?", Enabled_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndP2 Get MenuTrees via EnabledAndWeightAndP2
func GetMenuTreesByEnabledAndWeightAndP2(offset int, limit int, Enabled_ int, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and p2 = ?", Enabled_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndP3 Get MenuTrees via EnabledAndWeightAndP3
func GetMenuTreesByEnabledAndWeightAndP3(offset int, limit int, Enabled_ int, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and p3 = ?", Enabled_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndP4 Get MenuTrees via EnabledAndWeightAndP4
func GetMenuTreesByEnabledAndWeightAndP4(offset int, limit int, Enabled_ int, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and p4 = ?", Enabled_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndP5 Get MenuTrees via EnabledAndWeightAndP5
func GetMenuTreesByEnabledAndWeightAndP5(offset int, limit int, Enabled_ int, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and p5 = ?", Enabled_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndP6 Get MenuTrees via EnabledAndWeightAndP6
func GetMenuTreesByEnabledAndWeightAndP6(offset int, limit int, Enabled_ int, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and p6 = ?", Enabled_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndP7 Get MenuTrees via EnabledAndWeightAndP7
func GetMenuTreesByEnabledAndWeightAndP7(offset int, limit int, Enabled_ int, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and p7 = ?", Enabled_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndP8 Get MenuTrees via EnabledAndWeightAndP8
func GetMenuTreesByEnabledAndWeightAndP8(offset int, limit int, Enabled_ int, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and p8 = ?", Enabled_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndP9 Get MenuTrees via EnabledAndWeightAndP9
func GetMenuTreesByEnabledAndWeightAndP9(offset int, limit int, Enabled_ int, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and p9 = ?", Enabled_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeightAndFormClass Get MenuTrees via EnabledAndWeightAndFormClass
func GetMenuTreesByEnabledAndWeightAndFormClass(offset int, limit int, Enabled_ int, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ? and form_class = ?", Enabled_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndHasChildren Get MenuTrees via EnabledAndMetadataAndHasChildren
func GetMenuTreesByEnabledAndMetadataAndHasChildren(offset int, limit int, Enabled_ int, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and has_children = ?", Enabled_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndDepth Get MenuTrees via EnabledAndMetadataAndDepth
func GetMenuTreesByEnabledAndMetadataAndDepth(offset int, limit int, Enabled_ int, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and depth = ?", Enabled_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndP1 Get MenuTrees via EnabledAndMetadataAndP1
func GetMenuTreesByEnabledAndMetadataAndP1(offset int, limit int, Enabled_ int, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and p1 = ?", Enabled_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndP2 Get MenuTrees via EnabledAndMetadataAndP2
func GetMenuTreesByEnabledAndMetadataAndP2(offset int, limit int, Enabled_ int, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and p2 = ?", Enabled_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndP3 Get MenuTrees via EnabledAndMetadataAndP3
func GetMenuTreesByEnabledAndMetadataAndP3(offset int, limit int, Enabled_ int, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and p3 = ?", Enabled_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndP4 Get MenuTrees via EnabledAndMetadataAndP4
func GetMenuTreesByEnabledAndMetadataAndP4(offset int, limit int, Enabled_ int, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and p4 = ?", Enabled_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndP5 Get MenuTrees via EnabledAndMetadataAndP5
func GetMenuTreesByEnabledAndMetadataAndP5(offset int, limit int, Enabled_ int, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and p5 = ?", Enabled_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndP6 Get MenuTrees via EnabledAndMetadataAndP6
func GetMenuTreesByEnabledAndMetadataAndP6(offset int, limit int, Enabled_ int, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and p6 = ?", Enabled_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndP7 Get MenuTrees via EnabledAndMetadataAndP7
func GetMenuTreesByEnabledAndMetadataAndP7(offset int, limit int, Enabled_ int, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and p7 = ?", Enabled_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndP8 Get MenuTrees via EnabledAndMetadataAndP8
func GetMenuTreesByEnabledAndMetadataAndP8(offset int, limit int, Enabled_ int, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and p8 = ?", Enabled_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndP9 Get MenuTrees via EnabledAndMetadataAndP9
func GetMenuTreesByEnabledAndMetadataAndP9(offset int, limit int, Enabled_ int, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and p9 = ?", Enabled_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadataAndFormClass Get MenuTrees via EnabledAndMetadataAndFormClass
func GetMenuTreesByEnabledAndMetadataAndFormClass(offset int, limit int, Enabled_ int, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ? and form_class = ?", Enabled_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndDepth Get MenuTrees via EnabledAndHasChildrenAndDepth
func GetMenuTreesByEnabledAndHasChildrenAndDepth(offset int, limit int, Enabled_ int, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and depth = ?", Enabled_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndP1 Get MenuTrees via EnabledAndHasChildrenAndP1
func GetMenuTreesByEnabledAndHasChildrenAndP1(offset int, limit int, Enabled_ int, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and p1 = ?", Enabled_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndP2 Get MenuTrees via EnabledAndHasChildrenAndP2
func GetMenuTreesByEnabledAndHasChildrenAndP2(offset int, limit int, Enabled_ int, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and p2 = ?", Enabled_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndP3 Get MenuTrees via EnabledAndHasChildrenAndP3
func GetMenuTreesByEnabledAndHasChildrenAndP3(offset int, limit int, Enabled_ int, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and p3 = ?", Enabled_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndP4 Get MenuTrees via EnabledAndHasChildrenAndP4
func GetMenuTreesByEnabledAndHasChildrenAndP4(offset int, limit int, Enabled_ int, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and p4 = ?", Enabled_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndP5 Get MenuTrees via EnabledAndHasChildrenAndP5
func GetMenuTreesByEnabledAndHasChildrenAndP5(offset int, limit int, Enabled_ int, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and p5 = ?", Enabled_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndP6 Get MenuTrees via EnabledAndHasChildrenAndP6
func GetMenuTreesByEnabledAndHasChildrenAndP6(offset int, limit int, Enabled_ int, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and p6 = ?", Enabled_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndP7 Get MenuTrees via EnabledAndHasChildrenAndP7
func GetMenuTreesByEnabledAndHasChildrenAndP7(offset int, limit int, Enabled_ int, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and p7 = ?", Enabled_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndP8 Get MenuTrees via EnabledAndHasChildrenAndP8
func GetMenuTreesByEnabledAndHasChildrenAndP8(offset int, limit int, Enabled_ int, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and p8 = ?", Enabled_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndP9 Get MenuTrees via EnabledAndHasChildrenAndP9
func GetMenuTreesByEnabledAndHasChildrenAndP9(offset int, limit int, Enabled_ int, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and p9 = ?", Enabled_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildrenAndFormClass Get MenuTrees via EnabledAndHasChildrenAndFormClass
func GetMenuTreesByEnabledAndHasChildrenAndFormClass(offset int, limit int, Enabled_ int, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ? and form_class = ?", Enabled_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepthAndP1 Get MenuTrees via EnabledAndDepthAndP1
func GetMenuTreesByEnabledAndDepthAndP1(offset int, limit int, Enabled_ int, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ? and p1 = ?", Enabled_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepthAndP2 Get MenuTrees via EnabledAndDepthAndP2
func GetMenuTreesByEnabledAndDepthAndP2(offset int, limit int, Enabled_ int, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ? and p2 = ?", Enabled_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepthAndP3 Get MenuTrees via EnabledAndDepthAndP3
func GetMenuTreesByEnabledAndDepthAndP3(offset int, limit int, Enabled_ int, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ? and p3 = ?", Enabled_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepthAndP4 Get MenuTrees via EnabledAndDepthAndP4
func GetMenuTreesByEnabledAndDepthAndP4(offset int, limit int, Enabled_ int, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ? and p4 = ?", Enabled_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepthAndP5 Get MenuTrees via EnabledAndDepthAndP5
func GetMenuTreesByEnabledAndDepthAndP5(offset int, limit int, Enabled_ int, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ? and p5 = ?", Enabled_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepthAndP6 Get MenuTrees via EnabledAndDepthAndP6
func GetMenuTreesByEnabledAndDepthAndP6(offset int, limit int, Enabled_ int, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ? and p6 = ?", Enabled_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepthAndP7 Get MenuTrees via EnabledAndDepthAndP7
func GetMenuTreesByEnabledAndDepthAndP7(offset int, limit int, Enabled_ int, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ? and p7 = ?", Enabled_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepthAndP8 Get MenuTrees via EnabledAndDepthAndP8
func GetMenuTreesByEnabledAndDepthAndP8(offset int, limit int, Enabled_ int, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ? and p8 = ?", Enabled_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepthAndP9 Get MenuTrees via EnabledAndDepthAndP9
func GetMenuTreesByEnabledAndDepthAndP9(offset int, limit int, Enabled_ int, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ? and p9 = ?", Enabled_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepthAndFormClass Get MenuTrees via EnabledAndDepthAndFormClass
func GetMenuTreesByEnabledAndDepthAndFormClass(offset int, limit int, Enabled_ int, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ? and form_class = ?", Enabled_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP1AndP2 Get MenuTrees via EnabledAndP1AndP2
func GetMenuTreesByEnabledAndP1AndP2(offset int, limit int, Enabled_ int, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p1 = ? and p2 = ?", Enabled_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP1AndP3 Get MenuTrees via EnabledAndP1AndP3
func GetMenuTreesByEnabledAndP1AndP3(offset int, limit int, Enabled_ int, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p1 = ? and p3 = ?", Enabled_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP1AndP4 Get MenuTrees via EnabledAndP1AndP4
func GetMenuTreesByEnabledAndP1AndP4(offset int, limit int, Enabled_ int, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p1 = ? and p4 = ?", Enabled_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP1AndP5 Get MenuTrees via EnabledAndP1AndP5
func GetMenuTreesByEnabledAndP1AndP5(offset int, limit int, Enabled_ int, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p1 = ? and p5 = ?", Enabled_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP1AndP6 Get MenuTrees via EnabledAndP1AndP6
func GetMenuTreesByEnabledAndP1AndP6(offset int, limit int, Enabled_ int, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p1 = ? and p6 = ?", Enabled_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP1AndP7 Get MenuTrees via EnabledAndP1AndP7
func GetMenuTreesByEnabledAndP1AndP7(offset int, limit int, Enabled_ int, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p1 = ? and p7 = ?", Enabled_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP1AndP8 Get MenuTrees via EnabledAndP1AndP8
func GetMenuTreesByEnabledAndP1AndP8(offset int, limit int, Enabled_ int, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p1 = ? and p8 = ?", Enabled_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP1AndP9 Get MenuTrees via EnabledAndP1AndP9
func GetMenuTreesByEnabledAndP1AndP9(offset int, limit int, Enabled_ int, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p1 = ? and p9 = ?", Enabled_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP1AndFormClass Get MenuTrees via EnabledAndP1AndFormClass
func GetMenuTreesByEnabledAndP1AndFormClass(offset int, limit int, Enabled_ int, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p1 = ? and form_class = ?", Enabled_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP2AndP3 Get MenuTrees via EnabledAndP2AndP3
func GetMenuTreesByEnabledAndP2AndP3(offset int, limit int, Enabled_ int, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p2 = ? and p3 = ?", Enabled_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP2AndP4 Get MenuTrees via EnabledAndP2AndP4
func GetMenuTreesByEnabledAndP2AndP4(offset int, limit int, Enabled_ int, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p2 = ? and p4 = ?", Enabled_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP2AndP5 Get MenuTrees via EnabledAndP2AndP5
func GetMenuTreesByEnabledAndP2AndP5(offset int, limit int, Enabled_ int, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p2 = ? and p5 = ?", Enabled_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP2AndP6 Get MenuTrees via EnabledAndP2AndP6
func GetMenuTreesByEnabledAndP2AndP6(offset int, limit int, Enabled_ int, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p2 = ? and p6 = ?", Enabled_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP2AndP7 Get MenuTrees via EnabledAndP2AndP7
func GetMenuTreesByEnabledAndP2AndP7(offset int, limit int, Enabled_ int, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p2 = ? and p7 = ?", Enabled_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP2AndP8 Get MenuTrees via EnabledAndP2AndP8
func GetMenuTreesByEnabledAndP2AndP8(offset int, limit int, Enabled_ int, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p2 = ? and p8 = ?", Enabled_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP2AndP9 Get MenuTrees via EnabledAndP2AndP9
func GetMenuTreesByEnabledAndP2AndP9(offset int, limit int, Enabled_ int, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p2 = ? and p9 = ?", Enabled_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP2AndFormClass Get MenuTrees via EnabledAndP2AndFormClass
func GetMenuTreesByEnabledAndP2AndFormClass(offset int, limit int, Enabled_ int, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p2 = ? and form_class = ?", Enabled_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP3AndP4 Get MenuTrees via EnabledAndP3AndP4
func GetMenuTreesByEnabledAndP3AndP4(offset int, limit int, Enabled_ int, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p3 = ? and p4 = ?", Enabled_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP3AndP5 Get MenuTrees via EnabledAndP3AndP5
func GetMenuTreesByEnabledAndP3AndP5(offset int, limit int, Enabled_ int, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p3 = ? and p5 = ?", Enabled_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP3AndP6 Get MenuTrees via EnabledAndP3AndP6
func GetMenuTreesByEnabledAndP3AndP6(offset int, limit int, Enabled_ int, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p3 = ? and p6 = ?", Enabled_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP3AndP7 Get MenuTrees via EnabledAndP3AndP7
func GetMenuTreesByEnabledAndP3AndP7(offset int, limit int, Enabled_ int, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p3 = ? and p7 = ?", Enabled_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP3AndP8 Get MenuTrees via EnabledAndP3AndP8
func GetMenuTreesByEnabledAndP3AndP8(offset int, limit int, Enabled_ int, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p3 = ? and p8 = ?", Enabled_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP3AndP9 Get MenuTrees via EnabledAndP3AndP9
func GetMenuTreesByEnabledAndP3AndP9(offset int, limit int, Enabled_ int, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p3 = ? and p9 = ?", Enabled_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP3AndFormClass Get MenuTrees via EnabledAndP3AndFormClass
func GetMenuTreesByEnabledAndP3AndFormClass(offset int, limit int, Enabled_ int, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p3 = ? and form_class = ?", Enabled_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP4AndP5 Get MenuTrees via EnabledAndP4AndP5
func GetMenuTreesByEnabledAndP4AndP5(offset int, limit int, Enabled_ int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p4 = ? and p5 = ?", Enabled_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP4AndP6 Get MenuTrees via EnabledAndP4AndP6
func GetMenuTreesByEnabledAndP4AndP6(offset int, limit int, Enabled_ int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p4 = ? and p6 = ?", Enabled_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP4AndP7 Get MenuTrees via EnabledAndP4AndP7
func GetMenuTreesByEnabledAndP4AndP7(offset int, limit int, Enabled_ int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p4 = ? and p7 = ?", Enabled_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP4AndP8 Get MenuTrees via EnabledAndP4AndP8
func GetMenuTreesByEnabledAndP4AndP8(offset int, limit int, Enabled_ int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p4 = ? and p8 = ?", Enabled_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP4AndP9 Get MenuTrees via EnabledAndP4AndP9
func GetMenuTreesByEnabledAndP4AndP9(offset int, limit int, Enabled_ int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p4 = ? and p9 = ?", Enabled_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP4AndFormClass Get MenuTrees via EnabledAndP4AndFormClass
func GetMenuTreesByEnabledAndP4AndFormClass(offset int, limit int, Enabled_ int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p4 = ? and form_class = ?", Enabled_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP5AndP6 Get MenuTrees via EnabledAndP5AndP6
func GetMenuTreesByEnabledAndP5AndP6(offset int, limit int, Enabled_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p5 = ? and p6 = ?", Enabled_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP5AndP7 Get MenuTrees via EnabledAndP5AndP7
func GetMenuTreesByEnabledAndP5AndP7(offset int, limit int, Enabled_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p5 = ? and p7 = ?", Enabled_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP5AndP8 Get MenuTrees via EnabledAndP5AndP8
func GetMenuTreesByEnabledAndP5AndP8(offset int, limit int, Enabled_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p5 = ? and p8 = ?", Enabled_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP5AndP9 Get MenuTrees via EnabledAndP5AndP9
func GetMenuTreesByEnabledAndP5AndP9(offset int, limit int, Enabled_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p5 = ? and p9 = ?", Enabled_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP5AndFormClass Get MenuTrees via EnabledAndP5AndFormClass
func GetMenuTreesByEnabledAndP5AndFormClass(offset int, limit int, Enabled_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p5 = ? and form_class = ?", Enabled_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP6AndP7 Get MenuTrees via EnabledAndP6AndP7
func GetMenuTreesByEnabledAndP6AndP7(offset int, limit int, Enabled_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p6 = ? and p7 = ?", Enabled_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP6AndP8 Get MenuTrees via EnabledAndP6AndP8
func GetMenuTreesByEnabledAndP6AndP8(offset int, limit int, Enabled_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p6 = ? and p8 = ?", Enabled_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP6AndP9 Get MenuTrees via EnabledAndP6AndP9
func GetMenuTreesByEnabledAndP6AndP9(offset int, limit int, Enabled_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p6 = ? and p9 = ?", Enabled_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP6AndFormClass Get MenuTrees via EnabledAndP6AndFormClass
func GetMenuTreesByEnabledAndP6AndFormClass(offset int, limit int, Enabled_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p6 = ? and form_class = ?", Enabled_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP7AndP8 Get MenuTrees via EnabledAndP7AndP8
func GetMenuTreesByEnabledAndP7AndP8(offset int, limit int, Enabled_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p7 = ? and p8 = ?", Enabled_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP7AndP9 Get MenuTrees via EnabledAndP7AndP9
func GetMenuTreesByEnabledAndP7AndP9(offset int, limit int, Enabled_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p7 = ? and p9 = ?", Enabled_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP7AndFormClass Get MenuTrees via EnabledAndP7AndFormClass
func GetMenuTreesByEnabledAndP7AndFormClass(offset int, limit int, Enabled_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p7 = ? and form_class = ?", Enabled_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP8AndP9 Get MenuTrees via EnabledAndP8AndP9
func GetMenuTreesByEnabledAndP8AndP9(offset int, limit int, Enabled_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p8 = ? and p9 = ?", Enabled_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP8AndFormClass Get MenuTrees via EnabledAndP8AndFormClass
func GetMenuTreesByEnabledAndP8AndFormClass(offset int, limit int, Enabled_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p8 = ? and form_class = ?", Enabled_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP9AndFormClass Get MenuTrees via EnabledAndP9AndFormClass
func GetMenuTreesByEnabledAndP9AndFormClass(offset int, limit int, Enabled_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p9 = ? and form_class = ?", Enabled_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndWeight Get MenuTrees via DiscoveredAndExpandedAndWeight
func GetMenuTreesByDiscoveredAndExpandedAndWeight(offset int, limit int, Discovered_ int, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and weight = ?", Discovered_, Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndMetadata Get MenuTrees via DiscoveredAndExpandedAndMetadata
func GetMenuTreesByDiscoveredAndExpandedAndMetadata(offset int, limit int, Discovered_ int, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and metadata = ?", Discovered_, Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndHasChildren Get MenuTrees via DiscoveredAndExpandedAndHasChildren
func GetMenuTreesByDiscoveredAndExpandedAndHasChildren(offset int, limit int, Discovered_ int, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and has_children = ?", Discovered_, Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndDepth Get MenuTrees via DiscoveredAndExpandedAndDepth
func GetMenuTreesByDiscoveredAndExpandedAndDepth(offset int, limit int, Discovered_ int, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and depth = ?", Discovered_, Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndP1 Get MenuTrees via DiscoveredAndExpandedAndP1
func GetMenuTreesByDiscoveredAndExpandedAndP1(offset int, limit int, Discovered_ int, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and p1 = ?", Discovered_, Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndP2 Get MenuTrees via DiscoveredAndExpandedAndP2
func GetMenuTreesByDiscoveredAndExpandedAndP2(offset int, limit int, Discovered_ int, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and p2 = ?", Discovered_, Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndP3 Get MenuTrees via DiscoveredAndExpandedAndP3
func GetMenuTreesByDiscoveredAndExpandedAndP3(offset int, limit int, Discovered_ int, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and p3 = ?", Discovered_, Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndP4 Get MenuTrees via DiscoveredAndExpandedAndP4
func GetMenuTreesByDiscoveredAndExpandedAndP4(offset int, limit int, Discovered_ int, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and p4 = ?", Discovered_, Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndP5 Get MenuTrees via DiscoveredAndExpandedAndP5
func GetMenuTreesByDiscoveredAndExpandedAndP5(offset int, limit int, Discovered_ int, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and p5 = ?", Discovered_, Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndP6 Get MenuTrees via DiscoveredAndExpandedAndP6
func GetMenuTreesByDiscoveredAndExpandedAndP6(offset int, limit int, Discovered_ int, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and p6 = ?", Discovered_, Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndP7 Get MenuTrees via DiscoveredAndExpandedAndP7
func GetMenuTreesByDiscoveredAndExpandedAndP7(offset int, limit int, Discovered_ int, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and p7 = ?", Discovered_, Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndP8 Get MenuTrees via DiscoveredAndExpandedAndP8
func GetMenuTreesByDiscoveredAndExpandedAndP8(offset int, limit int, Discovered_ int, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and p8 = ?", Discovered_, Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndP9 Get MenuTrees via DiscoveredAndExpandedAndP9
func GetMenuTreesByDiscoveredAndExpandedAndP9(offset int, limit int, Discovered_ int, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and p9 = ?", Discovered_, Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpandedAndFormClass Get MenuTrees via DiscoveredAndExpandedAndFormClass
func GetMenuTreesByDiscoveredAndExpandedAndFormClass(offset int, limit int, Discovered_ int, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ? and form_class = ?", Discovered_, Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndMetadata Get MenuTrees via DiscoveredAndWeightAndMetadata
func GetMenuTreesByDiscoveredAndWeightAndMetadata(offset int, limit int, Discovered_ int, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and metadata = ?", Discovered_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndHasChildren Get MenuTrees via DiscoveredAndWeightAndHasChildren
func GetMenuTreesByDiscoveredAndWeightAndHasChildren(offset int, limit int, Discovered_ int, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and has_children = ?", Discovered_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndDepth Get MenuTrees via DiscoveredAndWeightAndDepth
func GetMenuTreesByDiscoveredAndWeightAndDepth(offset int, limit int, Discovered_ int, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and depth = ?", Discovered_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndP1 Get MenuTrees via DiscoveredAndWeightAndP1
func GetMenuTreesByDiscoveredAndWeightAndP1(offset int, limit int, Discovered_ int, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and p1 = ?", Discovered_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndP2 Get MenuTrees via DiscoveredAndWeightAndP2
func GetMenuTreesByDiscoveredAndWeightAndP2(offset int, limit int, Discovered_ int, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and p2 = ?", Discovered_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndP3 Get MenuTrees via DiscoveredAndWeightAndP3
func GetMenuTreesByDiscoveredAndWeightAndP3(offset int, limit int, Discovered_ int, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and p3 = ?", Discovered_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndP4 Get MenuTrees via DiscoveredAndWeightAndP4
func GetMenuTreesByDiscoveredAndWeightAndP4(offset int, limit int, Discovered_ int, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and p4 = ?", Discovered_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndP5 Get MenuTrees via DiscoveredAndWeightAndP5
func GetMenuTreesByDiscoveredAndWeightAndP5(offset int, limit int, Discovered_ int, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and p5 = ?", Discovered_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndP6 Get MenuTrees via DiscoveredAndWeightAndP6
func GetMenuTreesByDiscoveredAndWeightAndP6(offset int, limit int, Discovered_ int, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and p6 = ?", Discovered_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndP7 Get MenuTrees via DiscoveredAndWeightAndP7
func GetMenuTreesByDiscoveredAndWeightAndP7(offset int, limit int, Discovered_ int, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and p7 = ?", Discovered_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndP8 Get MenuTrees via DiscoveredAndWeightAndP8
func GetMenuTreesByDiscoveredAndWeightAndP8(offset int, limit int, Discovered_ int, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and p8 = ?", Discovered_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndP9 Get MenuTrees via DiscoveredAndWeightAndP9
func GetMenuTreesByDiscoveredAndWeightAndP9(offset int, limit int, Discovered_ int, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and p9 = ?", Discovered_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeightAndFormClass Get MenuTrees via DiscoveredAndWeightAndFormClass
func GetMenuTreesByDiscoveredAndWeightAndFormClass(offset int, limit int, Discovered_ int, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ? and form_class = ?", Discovered_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndHasChildren Get MenuTrees via DiscoveredAndMetadataAndHasChildren
func GetMenuTreesByDiscoveredAndMetadataAndHasChildren(offset int, limit int, Discovered_ int, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and has_children = ?", Discovered_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndDepth Get MenuTrees via DiscoveredAndMetadataAndDepth
func GetMenuTreesByDiscoveredAndMetadataAndDepth(offset int, limit int, Discovered_ int, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and depth = ?", Discovered_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndP1 Get MenuTrees via DiscoveredAndMetadataAndP1
func GetMenuTreesByDiscoveredAndMetadataAndP1(offset int, limit int, Discovered_ int, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and p1 = ?", Discovered_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndP2 Get MenuTrees via DiscoveredAndMetadataAndP2
func GetMenuTreesByDiscoveredAndMetadataAndP2(offset int, limit int, Discovered_ int, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and p2 = ?", Discovered_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndP3 Get MenuTrees via DiscoveredAndMetadataAndP3
func GetMenuTreesByDiscoveredAndMetadataAndP3(offset int, limit int, Discovered_ int, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and p3 = ?", Discovered_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndP4 Get MenuTrees via DiscoveredAndMetadataAndP4
func GetMenuTreesByDiscoveredAndMetadataAndP4(offset int, limit int, Discovered_ int, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and p4 = ?", Discovered_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndP5 Get MenuTrees via DiscoveredAndMetadataAndP5
func GetMenuTreesByDiscoveredAndMetadataAndP5(offset int, limit int, Discovered_ int, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and p5 = ?", Discovered_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndP6 Get MenuTrees via DiscoveredAndMetadataAndP6
func GetMenuTreesByDiscoveredAndMetadataAndP6(offset int, limit int, Discovered_ int, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and p6 = ?", Discovered_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndP7 Get MenuTrees via DiscoveredAndMetadataAndP7
func GetMenuTreesByDiscoveredAndMetadataAndP7(offset int, limit int, Discovered_ int, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and p7 = ?", Discovered_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndP8 Get MenuTrees via DiscoveredAndMetadataAndP8
func GetMenuTreesByDiscoveredAndMetadataAndP8(offset int, limit int, Discovered_ int, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and p8 = ?", Discovered_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndP9 Get MenuTrees via DiscoveredAndMetadataAndP9
func GetMenuTreesByDiscoveredAndMetadataAndP9(offset int, limit int, Discovered_ int, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and p9 = ?", Discovered_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadataAndFormClass Get MenuTrees via DiscoveredAndMetadataAndFormClass
func GetMenuTreesByDiscoveredAndMetadataAndFormClass(offset int, limit int, Discovered_ int, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ? and form_class = ?", Discovered_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndDepth Get MenuTrees via DiscoveredAndHasChildrenAndDepth
func GetMenuTreesByDiscoveredAndHasChildrenAndDepth(offset int, limit int, Discovered_ int, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and depth = ?", Discovered_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndP1 Get MenuTrees via DiscoveredAndHasChildrenAndP1
func GetMenuTreesByDiscoveredAndHasChildrenAndP1(offset int, limit int, Discovered_ int, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and p1 = ?", Discovered_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndP2 Get MenuTrees via DiscoveredAndHasChildrenAndP2
func GetMenuTreesByDiscoveredAndHasChildrenAndP2(offset int, limit int, Discovered_ int, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and p2 = ?", Discovered_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndP3 Get MenuTrees via DiscoveredAndHasChildrenAndP3
func GetMenuTreesByDiscoveredAndHasChildrenAndP3(offset int, limit int, Discovered_ int, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and p3 = ?", Discovered_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndP4 Get MenuTrees via DiscoveredAndHasChildrenAndP4
func GetMenuTreesByDiscoveredAndHasChildrenAndP4(offset int, limit int, Discovered_ int, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and p4 = ?", Discovered_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndP5 Get MenuTrees via DiscoveredAndHasChildrenAndP5
func GetMenuTreesByDiscoveredAndHasChildrenAndP5(offset int, limit int, Discovered_ int, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and p5 = ?", Discovered_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndP6 Get MenuTrees via DiscoveredAndHasChildrenAndP6
func GetMenuTreesByDiscoveredAndHasChildrenAndP6(offset int, limit int, Discovered_ int, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and p6 = ?", Discovered_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndP7 Get MenuTrees via DiscoveredAndHasChildrenAndP7
func GetMenuTreesByDiscoveredAndHasChildrenAndP7(offset int, limit int, Discovered_ int, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and p7 = ?", Discovered_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndP8 Get MenuTrees via DiscoveredAndHasChildrenAndP8
func GetMenuTreesByDiscoveredAndHasChildrenAndP8(offset int, limit int, Discovered_ int, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and p8 = ?", Discovered_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndP9 Get MenuTrees via DiscoveredAndHasChildrenAndP9
func GetMenuTreesByDiscoveredAndHasChildrenAndP9(offset int, limit int, Discovered_ int, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and p9 = ?", Discovered_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildrenAndFormClass Get MenuTrees via DiscoveredAndHasChildrenAndFormClass
func GetMenuTreesByDiscoveredAndHasChildrenAndFormClass(offset int, limit int, Discovered_ int, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ? and form_class = ?", Discovered_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepthAndP1 Get MenuTrees via DiscoveredAndDepthAndP1
func GetMenuTreesByDiscoveredAndDepthAndP1(offset int, limit int, Discovered_ int, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ? and p1 = ?", Discovered_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepthAndP2 Get MenuTrees via DiscoveredAndDepthAndP2
func GetMenuTreesByDiscoveredAndDepthAndP2(offset int, limit int, Discovered_ int, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ? and p2 = ?", Discovered_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepthAndP3 Get MenuTrees via DiscoveredAndDepthAndP3
func GetMenuTreesByDiscoveredAndDepthAndP3(offset int, limit int, Discovered_ int, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ? and p3 = ?", Discovered_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepthAndP4 Get MenuTrees via DiscoveredAndDepthAndP4
func GetMenuTreesByDiscoveredAndDepthAndP4(offset int, limit int, Discovered_ int, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ? and p4 = ?", Discovered_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepthAndP5 Get MenuTrees via DiscoveredAndDepthAndP5
func GetMenuTreesByDiscoveredAndDepthAndP5(offset int, limit int, Discovered_ int, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ? and p5 = ?", Discovered_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepthAndP6 Get MenuTrees via DiscoveredAndDepthAndP6
func GetMenuTreesByDiscoveredAndDepthAndP6(offset int, limit int, Discovered_ int, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ? and p6 = ?", Discovered_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepthAndP7 Get MenuTrees via DiscoveredAndDepthAndP7
func GetMenuTreesByDiscoveredAndDepthAndP7(offset int, limit int, Discovered_ int, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ? and p7 = ?", Discovered_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepthAndP8 Get MenuTrees via DiscoveredAndDepthAndP8
func GetMenuTreesByDiscoveredAndDepthAndP8(offset int, limit int, Discovered_ int, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ? and p8 = ?", Discovered_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepthAndP9 Get MenuTrees via DiscoveredAndDepthAndP9
func GetMenuTreesByDiscoveredAndDepthAndP9(offset int, limit int, Discovered_ int, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ? and p9 = ?", Discovered_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepthAndFormClass Get MenuTrees via DiscoveredAndDepthAndFormClass
func GetMenuTreesByDiscoveredAndDepthAndFormClass(offset int, limit int, Discovered_ int, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ? and form_class = ?", Discovered_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP1AndP2 Get MenuTrees via DiscoveredAndP1AndP2
func GetMenuTreesByDiscoveredAndP1AndP2(offset int, limit int, Discovered_ int, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p1 = ? and p2 = ?", Discovered_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP1AndP3 Get MenuTrees via DiscoveredAndP1AndP3
func GetMenuTreesByDiscoveredAndP1AndP3(offset int, limit int, Discovered_ int, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p1 = ? and p3 = ?", Discovered_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP1AndP4 Get MenuTrees via DiscoveredAndP1AndP4
func GetMenuTreesByDiscoveredAndP1AndP4(offset int, limit int, Discovered_ int, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p1 = ? and p4 = ?", Discovered_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP1AndP5 Get MenuTrees via DiscoveredAndP1AndP5
func GetMenuTreesByDiscoveredAndP1AndP5(offset int, limit int, Discovered_ int, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p1 = ? and p5 = ?", Discovered_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP1AndP6 Get MenuTrees via DiscoveredAndP1AndP6
func GetMenuTreesByDiscoveredAndP1AndP6(offset int, limit int, Discovered_ int, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p1 = ? and p6 = ?", Discovered_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP1AndP7 Get MenuTrees via DiscoveredAndP1AndP7
func GetMenuTreesByDiscoveredAndP1AndP7(offset int, limit int, Discovered_ int, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p1 = ? and p7 = ?", Discovered_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP1AndP8 Get MenuTrees via DiscoveredAndP1AndP8
func GetMenuTreesByDiscoveredAndP1AndP8(offset int, limit int, Discovered_ int, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p1 = ? and p8 = ?", Discovered_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP1AndP9 Get MenuTrees via DiscoveredAndP1AndP9
func GetMenuTreesByDiscoveredAndP1AndP9(offset int, limit int, Discovered_ int, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p1 = ? and p9 = ?", Discovered_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP1AndFormClass Get MenuTrees via DiscoveredAndP1AndFormClass
func GetMenuTreesByDiscoveredAndP1AndFormClass(offset int, limit int, Discovered_ int, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p1 = ? and form_class = ?", Discovered_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP2AndP3 Get MenuTrees via DiscoveredAndP2AndP3
func GetMenuTreesByDiscoveredAndP2AndP3(offset int, limit int, Discovered_ int, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p2 = ? and p3 = ?", Discovered_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP2AndP4 Get MenuTrees via DiscoveredAndP2AndP4
func GetMenuTreesByDiscoveredAndP2AndP4(offset int, limit int, Discovered_ int, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p2 = ? and p4 = ?", Discovered_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP2AndP5 Get MenuTrees via DiscoveredAndP2AndP5
func GetMenuTreesByDiscoveredAndP2AndP5(offset int, limit int, Discovered_ int, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p2 = ? and p5 = ?", Discovered_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP2AndP6 Get MenuTrees via DiscoveredAndP2AndP6
func GetMenuTreesByDiscoveredAndP2AndP6(offset int, limit int, Discovered_ int, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p2 = ? and p6 = ?", Discovered_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP2AndP7 Get MenuTrees via DiscoveredAndP2AndP7
func GetMenuTreesByDiscoveredAndP2AndP7(offset int, limit int, Discovered_ int, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p2 = ? and p7 = ?", Discovered_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP2AndP8 Get MenuTrees via DiscoveredAndP2AndP8
func GetMenuTreesByDiscoveredAndP2AndP8(offset int, limit int, Discovered_ int, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p2 = ? and p8 = ?", Discovered_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP2AndP9 Get MenuTrees via DiscoveredAndP2AndP9
func GetMenuTreesByDiscoveredAndP2AndP9(offset int, limit int, Discovered_ int, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p2 = ? and p9 = ?", Discovered_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP2AndFormClass Get MenuTrees via DiscoveredAndP2AndFormClass
func GetMenuTreesByDiscoveredAndP2AndFormClass(offset int, limit int, Discovered_ int, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p2 = ? and form_class = ?", Discovered_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP3AndP4 Get MenuTrees via DiscoveredAndP3AndP4
func GetMenuTreesByDiscoveredAndP3AndP4(offset int, limit int, Discovered_ int, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p3 = ? and p4 = ?", Discovered_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP3AndP5 Get MenuTrees via DiscoveredAndP3AndP5
func GetMenuTreesByDiscoveredAndP3AndP5(offset int, limit int, Discovered_ int, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p3 = ? and p5 = ?", Discovered_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP3AndP6 Get MenuTrees via DiscoveredAndP3AndP6
func GetMenuTreesByDiscoveredAndP3AndP6(offset int, limit int, Discovered_ int, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p3 = ? and p6 = ?", Discovered_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP3AndP7 Get MenuTrees via DiscoveredAndP3AndP7
func GetMenuTreesByDiscoveredAndP3AndP7(offset int, limit int, Discovered_ int, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p3 = ? and p7 = ?", Discovered_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP3AndP8 Get MenuTrees via DiscoveredAndP3AndP8
func GetMenuTreesByDiscoveredAndP3AndP8(offset int, limit int, Discovered_ int, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p3 = ? and p8 = ?", Discovered_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP3AndP9 Get MenuTrees via DiscoveredAndP3AndP9
func GetMenuTreesByDiscoveredAndP3AndP9(offset int, limit int, Discovered_ int, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p3 = ? and p9 = ?", Discovered_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP3AndFormClass Get MenuTrees via DiscoveredAndP3AndFormClass
func GetMenuTreesByDiscoveredAndP3AndFormClass(offset int, limit int, Discovered_ int, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p3 = ? and form_class = ?", Discovered_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP4AndP5 Get MenuTrees via DiscoveredAndP4AndP5
func GetMenuTreesByDiscoveredAndP4AndP5(offset int, limit int, Discovered_ int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p4 = ? and p5 = ?", Discovered_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP4AndP6 Get MenuTrees via DiscoveredAndP4AndP6
func GetMenuTreesByDiscoveredAndP4AndP6(offset int, limit int, Discovered_ int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p4 = ? and p6 = ?", Discovered_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP4AndP7 Get MenuTrees via DiscoveredAndP4AndP7
func GetMenuTreesByDiscoveredAndP4AndP7(offset int, limit int, Discovered_ int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p4 = ? and p7 = ?", Discovered_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP4AndP8 Get MenuTrees via DiscoveredAndP4AndP8
func GetMenuTreesByDiscoveredAndP4AndP8(offset int, limit int, Discovered_ int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p4 = ? and p8 = ?", Discovered_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP4AndP9 Get MenuTrees via DiscoveredAndP4AndP9
func GetMenuTreesByDiscoveredAndP4AndP9(offset int, limit int, Discovered_ int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p4 = ? and p9 = ?", Discovered_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP4AndFormClass Get MenuTrees via DiscoveredAndP4AndFormClass
func GetMenuTreesByDiscoveredAndP4AndFormClass(offset int, limit int, Discovered_ int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p4 = ? and form_class = ?", Discovered_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP5AndP6 Get MenuTrees via DiscoveredAndP5AndP6
func GetMenuTreesByDiscoveredAndP5AndP6(offset int, limit int, Discovered_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p5 = ? and p6 = ?", Discovered_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP5AndP7 Get MenuTrees via DiscoveredAndP5AndP7
func GetMenuTreesByDiscoveredAndP5AndP7(offset int, limit int, Discovered_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p5 = ? and p7 = ?", Discovered_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP5AndP8 Get MenuTrees via DiscoveredAndP5AndP8
func GetMenuTreesByDiscoveredAndP5AndP8(offset int, limit int, Discovered_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p5 = ? and p8 = ?", Discovered_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP5AndP9 Get MenuTrees via DiscoveredAndP5AndP9
func GetMenuTreesByDiscoveredAndP5AndP9(offset int, limit int, Discovered_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p5 = ? and p9 = ?", Discovered_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP5AndFormClass Get MenuTrees via DiscoveredAndP5AndFormClass
func GetMenuTreesByDiscoveredAndP5AndFormClass(offset int, limit int, Discovered_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p5 = ? and form_class = ?", Discovered_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP6AndP7 Get MenuTrees via DiscoveredAndP6AndP7
func GetMenuTreesByDiscoveredAndP6AndP7(offset int, limit int, Discovered_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p6 = ? and p7 = ?", Discovered_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP6AndP8 Get MenuTrees via DiscoveredAndP6AndP8
func GetMenuTreesByDiscoveredAndP6AndP8(offset int, limit int, Discovered_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p6 = ? and p8 = ?", Discovered_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP6AndP9 Get MenuTrees via DiscoveredAndP6AndP9
func GetMenuTreesByDiscoveredAndP6AndP9(offset int, limit int, Discovered_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p6 = ? and p9 = ?", Discovered_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP6AndFormClass Get MenuTrees via DiscoveredAndP6AndFormClass
func GetMenuTreesByDiscoveredAndP6AndFormClass(offset int, limit int, Discovered_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p6 = ? and form_class = ?", Discovered_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP7AndP8 Get MenuTrees via DiscoveredAndP7AndP8
func GetMenuTreesByDiscoveredAndP7AndP8(offset int, limit int, Discovered_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p7 = ? and p8 = ?", Discovered_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP7AndP9 Get MenuTrees via DiscoveredAndP7AndP9
func GetMenuTreesByDiscoveredAndP7AndP9(offset int, limit int, Discovered_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p7 = ? and p9 = ?", Discovered_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP7AndFormClass Get MenuTrees via DiscoveredAndP7AndFormClass
func GetMenuTreesByDiscoveredAndP7AndFormClass(offset int, limit int, Discovered_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p7 = ? and form_class = ?", Discovered_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP8AndP9 Get MenuTrees via DiscoveredAndP8AndP9
func GetMenuTreesByDiscoveredAndP8AndP9(offset int, limit int, Discovered_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p8 = ? and p9 = ?", Discovered_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP8AndFormClass Get MenuTrees via DiscoveredAndP8AndFormClass
func GetMenuTreesByDiscoveredAndP8AndFormClass(offset int, limit int, Discovered_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p8 = ? and form_class = ?", Discovered_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP9AndFormClass Get MenuTrees via DiscoveredAndP9AndFormClass
func GetMenuTreesByDiscoveredAndP9AndFormClass(offset int, limit int, Discovered_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p9 = ? and form_class = ?", Discovered_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndMetadata Get MenuTrees via ExpandedAndWeightAndMetadata
func GetMenuTreesByExpandedAndWeightAndMetadata(offset int, limit int, Expanded_ int, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and metadata = ?", Expanded_, Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndHasChildren Get MenuTrees via ExpandedAndWeightAndHasChildren
func GetMenuTreesByExpandedAndWeightAndHasChildren(offset int, limit int, Expanded_ int, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and has_children = ?", Expanded_, Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndDepth Get MenuTrees via ExpandedAndWeightAndDepth
func GetMenuTreesByExpandedAndWeightAndDepth(offset int, limit int, Expanded_ int, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and depth = ?", Expanded_, Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndP1 Get MenuTrees via ExpandedAndWeightAndP1
func GetMenuTreesByExpandedAndWeightAndP1(offset int, limit int, Expanded_ int, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and p1 = ?", Expanded_, Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndP2 Get MenuTrees via ExpandedAndWeightAndP2
func GetMenuTreesByExpandedAndWeightAndP2(offset int, limit int, Expanded_ int, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and p2 = ?", Expanded_, Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndP3 Get MenuTrees via ExpandedAndWeightAndP3
func GetMenuTreesByExpandedAndWeightAndP3(offset int, limit int, Expanded_ int, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and p3 = ?", Expanded_, Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndP4 Get MenuTrees via ExpandedAndWeightAndP4
func GetMenuTreesByExpandedAndWeightAndP4(offset int, limit int, Expanded_ int, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and p4 = ?", Expanded_, Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndP5 Get MenuTrees via ExpandedAndWeightAndP5
func GetMenuTreesByExpandedAndWeightAndP5(offset int, limit int, Expanded_ int, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and p5 = ?", Expanded_, Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndP6 Get MenuTrees via ExpandedAndWeightAndP6
func GetMenuTreesByExpandedAndWeightAndP6(offset int, limit int, Expanded_ int, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and p6 = ?", Expanded_, Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndP7 Get MenuTrees via ExpandedAndWeightAndP7
func GetMenuTreesByExpandedAndWeightAndP7(offset int, limit int, Expanded_ int, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and p7 = ?", Expanded_, Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndP8 Get MenuTrees via ExpandedAndWeightAndP8
func GetMenuTreesByExpandedAndWeightAndP8(offset int, limit int, Expanded_ int, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and p8 = ?", Expanded_, Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndP9 Get MenuTrees via ExpandedAndWeightAndP9
func GetMenuTreesByExpandedAndWeightAndP9(offset int, limit int, Expanded_ int, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and p9 = ?", Expanded_, Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeightAndFormClass Get MenuTrees via ExpandedAndWeightAndFormClass
func GetMenuTreesByExpandedAndWeightAndFormClass(offset int, limit int, Expanded_ int, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ? and form_class = ?", Expanded_, Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndHasChildren Get MenuTrees via ExpandedAndMetadataAndHasChildren
func GetMenuTreesByExpandedAndMetadataAndHasChildren(offset int, limit int, Expanded_ int, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and has_children = ?", Expanded_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndDepth Get MenuTrees via ExpandedAndMetadataAndDepth
func GetMenuTreesByExpandedAndMetadataAndDepth(offset int, limit int, Expanded_ int, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and depth = ?", Expanded_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndP1 Get MenuTrees via ExpandedAndMetadataAndP1
func GetMenuTreesByExpandedAndMetadataAndP1(offset int, limit int, Expanded_ int, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and p1 = ?", Expanded_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndP2 Get MenuTrees via ExpandedAndMetadataAndP2
func GetMenuTreesByExpandedAndMetadataAndP2(offset int, limit int, Expanded_ int, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and p2 = ?", Expanded_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndP3 Get MenuTrees via ExpandedAndMetadataAndP3
func GetMenuTreesByExpandedAndMetadataAndP3(offset int, limit int, Expanded_ int, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and p3 = ?", Expanded_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndP4 Get MenuTrees via ExpandedAndMetadataAndP4
func GetMenuTreesByExpandedAndMetadataAndP4(offset int, limit int, Expanded_ int, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and p4 = ?", Expanded_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndP5 Get MenuTrees via ExpandedAndMetadataAndP5
func GetMenuTreesByExpandedAndMetadataAndP5(offset int, limit int, Expanded_ int, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and p5 = ?", Expanded_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndP6 Get MenuTrees via ExpandedAndMetadataAndP6
func GetMenuTreesByExpandedAndMetadataAndP6(offset int, limit int, Expanded_ int, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and p6 = ?", Expanded_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndP7 Get MenuTrees via ExpandedAndMetadataAndP7
func GetMenuTreesByExpandedAndMetadataAndP7(offset int, limit int, Expanded_ int, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and p7 = ?", Expanded_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndP8 Get MenuTrees via ExpandedAndMetadataAndP8
func GetMenuTreesByExpandedAndMetadataAndP8(offset int, limit int, Expanded_ int, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and p8 = ?", Expanded_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndP9 Get MenuTrees via ExpandedAndMetadataAndP9
func GetMenuTreesByExpandedAndMetadataAndP9(offset int, limit int, Expanded_ int, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and p9 = ?", Expanded_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadataAndFormClass Get MenuTrees via ExpandedAndMetadataAndFormClass
func GetMenuTreesByExpandedAndMetadataAndFormClass(offset int, limit int, Expanded_ int, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ? and form_class = ?", Expanded_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndDepth Get MenuTrees via ExpandedAndHasChildrenAndDepth
func GetMenuTreesByExpandedAndHasChildrenAndDepth(offset int, limit int, Expanded_ int, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and depth = ?", Expanded_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndP1 Get MenuTrees via ExpandedAndHasChildrenAndP1
func GetMenuTreesByExpandedAndHasChildrenAndP1(offset int, limit int, Expanded_ int, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and p1 = ?", Expanded_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndP2 Get MenuTrees via ExpandedAndHasChildrenAndP2
func GetMenuTreesByExpandedAndHasChildrenAndP2(offset int, limit int, Expanded_ int, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and p2 = ?", Expanded_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndP3 Get MenuTrees via ExpandedAndHasChildrenAndP3
func GetMenuTreesByExpandedAndHasChildrenAndP3(offset int, limit int, Expanded_ int, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and p3 = ?", Expanded_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndP4 Get MenuTrees via ExpandedAndHasChildrenAndP4
func GetMenuTreesByExpandedAndHasChildrenAndP4(offset int, limit int, Expanded_ int, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and p4 = ?", Expanded_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndP5 Get MenuTrees via ExpandedAndHasChildrenAndP5
func GetMenuTreesByExpandedAndHasChildrenAndP5(offset int, limit int, Expanded_ int, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and p5 = ?", Expanded_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndP6 Get MenuTrees via ExpandedAndHasChildrenAndP6
func GetMenuTreesByExpandedAndHasChildrenAndP6(offset int, limit int, Expanded_ int, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and p6 = ?", Expanded_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndP7 Get MenuTrees via ExpandedAndHasChildrenAndP7
func GetMenuTreesByExpandedAndHasChildrenAndP7(offset int, limit int, Expanded_ int, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and p7 = ?", Expanded_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndP8 Get MenuTrees via ExpandedAndHasChildrenAndP8
func GetMenuTreesByExpandedAndHasChildrenAndP8(offset int, limit int, Expanded_ int, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and p8 = ?", Expanded_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndP9 Get MenuTrees via ExpandedAndHasChildrenAndP9
func GetMenuTreesByExpandedAndHasChildrenAndP9(offset int, limit int, Expanded_ int, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and p9 = ?", Expanded_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildrenAndFormClass Get MenuTrees via ExpandedAndHasChildrenAndFormClass
func GetMenuTreesByExpandedAndHasChildrenAndFormClass(offset int, limit int, Expanded_ int, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ? and form_class = ?", Expanded_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepthAndP1 Get MenuTrees via ExpandedAndDepthAndP1
func GetMenuTreesByExpandedAndDepthAndP1(offset int, limit int, Expanded_ int, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ? and p1 = ?", Expanded_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepthAndP2 Get MenuTrees via ExpandedAndDepthAndP2
func GetMenuTreesByExpandedAndDepthAndP2(offset int, limit int, Expanded_ int, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ? and p2 = ?", Expanded_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepthAndP3 Get MenuTrees via ExpandedAndDepthAndP3
func GetMenuTreesByExpandedAndDepthAndP3(offset int, limit int, Expanded_ int, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ? and p3 = ?", Expanded_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepthAndP4 Get MenuTrees via ExpandedAndDepthAndP4
func GetMenuTreesByExpandedAndDepthAndP4(offset int, limit int, Expanded_ int, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ? and p4 = ?", Expanded_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepthAndP5 Get MenuTrees via ExpandedAndDepthAndP5
func GetMenuTreesByExpandedAndDepthAndP5(offset int, limit int, Expanded_ int, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ? and p5 = ?", Expanded_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepthAndP6 Get MenuTrees via ExpandedAndDepthAndP6
func GetMenuTreesByExpandedAndDepthAndP6(offset int, limit int, Expanded_ int, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ? and p6 = ?", Expanded_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepthAndP7 Get MenuTrees via ExpandedAndDepthAndP7
func GetMenuTreesByExpandedAndDepthAndP7(offset int, limit int, Expanded_ int, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ? and p7 = ?", Expanded_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepthAndP8 Get MenuTrees via ExpandedAndDepthAndP8
func GetMenuTreesByExpandedAndDepthAndP8(offset int, limit int, Expanded_ int, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ? and p8 = ?", Expanded_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepthAndP9 Get MenuTrees via ExpandedAndDepthAndP9
func GetMenuTreesByExpandedAndDepthAndP9(offset int, limit int, Expanded_ int, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ? and p9 = ?", Expanded_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepthAndFormClass Get MenuTrees via ExpandedAndDepthAndFormClass
func GetMenuTreesByExpandedAndDepthAndFormClass(offset int, limit int, Expanded_ int, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ? and form_class = ?", Expanded_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP1AndP2 Get MenuTrees via ExpandedAndP1AndP2
func GetMenuTreesByExpandedAndP1AndP2(offset int, limit int, Expanded_ int, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p1 = ? and p2 = ?", Expanded_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP1AndP3 Get MenuTrees via ExpandedAndP1AndP3
func GetMenuTreesByExpandedAndP1AndP3(offset int, limit int, Expanded_ int, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p1 = ? and p3 = ?", Expanded_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP1AndP4 Get MenuTrees via ExpandedAndP1AndP4
func GetMenuTreesByExpandedAndP1AndP4(offset int, limit int, Expanded_ int, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p1 = ? and p4 = ?", Expanded_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP1AndP5 Get MenuTrees via ExpandedAndP1AndP5
func GetMenuTreesByExpandedAndP1AndP5(offset int, limit int, Expanded_ int, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p1 = ? and p5 = ?", Expanded_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP1AndP6 Get MenuTrees via ExpandedAndP1AndP6
func GetMenuTreesByExpandedAndP1AndP6(offset int, limit int, Expanded_ int, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p1 = ? and p6 = ?", Expanded_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP1AndP7 Get MenuTrees via ExpandedAndP1AndP7
func GetMenuTreesByExpandedAndP1AndP7(offset int, limit int, Expanded_ int, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p1 = ? and p7 = ?", Expanded_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP1AndP8 Get MenuTrees via ExpandedAndP1AndP8
func GetMenuTreesByExpandedAndP1AndP8(offset int, limit int, Expanded_ int, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p1 = ? and p8 = ?", Expanded_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP1AndP9 Get MenuTrees via ExpandedAndP1AndP9
func GetMenuTreesByExpandedAndP1AndP9(offset int, limit int, Expanded_ int, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p1 = ? and p9 = ?", Expanded_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP1AndFormClass Get MenuTrees via ExpandedAndP1AndFormClass
func GetMenuTreesByExpandedAndP1AndFormClass(offset int, limit int, Expanded_ int, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p1 = ? and form_class = ?", Expanded_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP2AndP3 Get MenuTrees via ExpandedAndP2AndP3
func GetMenuTreesByExpandedAndP2AndP3(offset int, limit int, Expanded_ int, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p2 = ? and p3 = ?", Expanded_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP2AndP4 Get MenuTrees via ExpandedAndP2AndP4
func GetMenuTreesByExpandedAndP2AndP4(offset int, limit int, Expanded_ int, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p2 = ? and p4 = ?", Expanded_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP2AndP5 Get MenuTrees via ExpandedAndP2AndP5
func GetMenuTreesByExpandedAndP2AndP5(offset int, limit int, Expanded_ int, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p2 = ? and p5 = ?", Expanded_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP2AndP6 Get MenuTrees via ExpandedAndP2AndP6
func GetMenuTreesByExpandedAndP2AndP6(offset int, limit int, Expanded_ int, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p2 = ? and p6 = ?", Expanded_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP2AndP7 Get MenuTrees via ExpandedAndP2AndP7
func GetMenuTreesByExpandedAndP2AndP7(offset int, limit int, Expanded_ int, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p2 = ? and p7 = ?", Expanded_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP2AndP8 Get MenuTrees via ExpandedAndP2AndP8
func GetMenuTreesByExpandedAndP2AndP8(offset int, limit int, Expanded_ int, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p2 = ? and p8 = ?", Expanded_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP2AndP9 Get MenuTrees via ExpandedAndP2AndP9
func GetMenuTreesByExpandedAndP2AndP9(offset int, limit int, Expanded_ int, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p2 = ? and p9 = ?", Expanded_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP2AndFormClass Get MenuTrees via ExpandedAndP2AndFormClass
func GetMenuTreesByExpandedAndP2AndFormClass(offset int, limit int, Expanded_ int, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p2 = ? and form_class = ?", Expanded_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP3AndP4 Get MenuTrees via ExpandedAndP3AndP4
func GetMenuTreesByExpandedAndP3AndP4(offset int, limit int, Expanded_ int, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p3 = ? and p4 = ?", Expanded_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP3AndP5 Get MenuTrees via ExpandedAndP3AndP5
func GetMenuTreesByExpandedAndP3AndP5(offset int, limit int, Expanded_ int, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p3 = ? and p5 = ?", Expanded_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP3AndP6 Get MenuTrees via ExpandedAndP3AndP6
func GetMenuTreesByExpandedAndP3AndP6(offset int, limit int, Expanded_ int, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p3 = ? and p6 = ?", Expanded_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP3AndP7 Get MenuTrees via ExpandedAndP3AndP7
func GetMenuTreesByExpandedAndP3AndP7(offset int, limit int, Expanded_ int, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p3 = ? and p7 = ?", Expanded_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP3AndP8 Get MenuTrees via ExpandedAndP3AndP8
func GetMenuTreesByExpandedAndP3AndP8(offset int, limit int, Expanded_ int, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p3 = ? and p8 = ?", Expanded_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP3AndP9 Get MenuTrees via ExpandedAndP3AndP9
func GetMenuTreesByExpandedAndP3AndP9(offset int, limit int, Expanded_ int, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p3 = ? and p9 = ?", Expanded_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP3AndFormClass Get MenuTrees via ExpandedAndP3AndFormClass
func GetMenuTreesByExpandedAndP3AndFormClass(offset int, limit int, Expanded_ int, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p3 = ? and form_class = ?", Expanded_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP4AndP5 Get MenuTrees via ExpandedAndP4AndP5
func GetMenuTreesByExpandedAndP4AndP5(offset int, limit int, Expanded_ int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p4 = ? and p5 = ?", Expanded_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP4AndP6 Get MenuTrees via ExpandedAndP4AndP6
func GetMenuTreesByExpandedAndP4AndP6(offset int, limit int, Expanded_ int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p4 = ? and p6 = ?", Expanded_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP4AndP7 Get MenuTrees via ExpandedAndP4AndP7
func GetMenuTreesByExpandedAndP4AndP7(offset int, limit int, Expanded_ int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p4 = ? and p7 = ?", Expanded_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP4AndP8 Get MenuTrees via ExpandedAndP4AndP8
func GetMenuTreesByExpandedAndP4AndP8(offset int, limit int, Expanded_ int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p4 = ? and p8 = ?", Expanded_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP4AndP9 Get MenuTrees via ExpandedAndP4AndP9
func GetMenuTreesByExpandedAndP4AndP9(offset int, limit int, Expanded_ int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p4 = ? and p9 = ?", Expanded_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP4AndFormClass Get MenuTrees via ExpandedAndP4AndFormClass
func GetMenuTreesByExpandedAndP4AndFormClass(offset int, limit int, Expanded_ int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p4 = ? and form_class = ?", Expanded_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP5AndP6 Get MenuTrees via ExpandedAndP5AndP6
func GetMenuTreesByExpandedAndP5AndP6(offset int, limit int, Expanded_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p5 = ? and p6 = ?", Expanded_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP5AndP7 Get MenuTrees via ExpandedAndP5AndP7
func GetMenuTreesByExpandedAndP5AndP7(offset int, limit int, Expanded_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p5 = ? and p7 = ?", Expanded_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP5AndP8 Get MenuTrees via ExpandedAndP5AndP8
func GetMenuTreesByExpandedAndP5AndP8(offset int, limit int, Expanded_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p5 = ? and p8 = ?", Expanded_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP5AndP9 Get MenuTrees via ExpandedAndP5AndP9
func GetMenuTreesByExpandedAndP5AndP9(offset int, limit int, Expanded_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p5 = ? and p9 = ?", Expanded_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP5AndFormClass Get MenuTrees via ExpandedAndP5AndFormClass
func GetMenuTreesByExpandedAndP5AndFormClass(offset int, limit int, Expanded_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p5 = ? and form_class = ?", Expanded_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP6AndP7 Get MenuTrees via ExpandedAndP6AndP7
func GetMenuTreesByExpandedAndP6AndP7(offset int, limit int, Expanded_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p6 = ? and p7 = ?", Expanded_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP6AndP8 Get MenuTrees via ExpandedAndP6AndP8
func GetMenuTreesByExpandedAndP6AndP8(offset int, limit int, Expanded_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p6 = ? and p8 = ?", Expanded_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP6AndP9 Get MenuTrees via ExpandedAndP6AndP9
func GetMenuTreesByExpandedAndP6AndP9(offset int, limit int, Expanded_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p6 = ? and p9 = ?", Expanded_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP6AndFormClass Get MenuTrees via ExpandedAndP6AndFormClass
func GetMenuTreesByExpandedAndP6AndFormClass(offset int, limit int, Expanded_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p6 = ? and form_class = ?", Expanded_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP7AndP8 Get MenuTrees via ExpandedAndP7AndP8
func GetMenuTreesByExpandedAndP7AndP8(offset int, limit int, Expanded_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p7 = ? and p8 = ?", Expanded_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP7AndP9 Get MenuTrees via ExpandedAndP7AndP9
func GetMenuTreesByExpandedAndP7AndP9(offset int, limit int, Expanded_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p7 = ? and p9 = ?", Expanded_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP7AndFormClass Get MenuTrees via ExpandedAndP7AndFormClass
func GetMenuTreesByExpandedAndP7AndFormClass(offset int, limit int, Expanded_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p7 = ? and form_class = ?", Expanded_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP8AndP9 Get MenuTrees via ExpandedAndP8AndP9
func GetMenuTreesByExpandedAndP8AndP9(offset int, limit int, Expanded_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p8 = ? and p9 = ?", Expanded_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP8AndFormClass Get MenuTrees via ExpandedAndP8AndFormClass
func GetMenuTreesByExpandedAndP8AndFormClass(offset int, limit int, Expanded_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p8 = ? and form_class = ?", Expanded_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP9AndFormClass Get MenuTrees via ExpandedAndP9AndFormClass
func GetMenuTreesByExpandedAndP9AndFormClass(offset int, limit int, Expanded_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p9 = ? and form_class = ?", Expanded_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndHasChildren Get MenuTrees via WeightAndMetadataAndHasChildren
func GetMenuTreesByWeightAndMetadataAndHasChildren(offset int, limit int, Weight_ int, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and has_children = ?", Weight_, Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndDepth Get MenuTrees via WeightAndMetadataAndDepth
func GetMenuTreesByWeightAndMetadataAndDepth(offset int, limit int, Weight_ int, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and depth = ?", Weight_, Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndP1 Get MenuTrees via WeightAndMetadataAndP1
func GetMenuTreesByWeightAndMetadataAndP1(offset int, limit int, Weight_ int, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and p1 = ?", Weight_, Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndP2 Get MenuTrees via WeightAndMetadataAndP2
func GetMenuTreesByWeightAndMetadataAndP2(offset int, limit int, Weight_ int, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and p2 = ?", Weight_, Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndP3 Get MenuTrees via WeightAndMetadataAndP3
func GetMenuTreesByWeightAndMetadataAndP3(offset int, limit int, Weight_ int, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and p3 = ?", Weight_, Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndP4 Get MenuTrees via WeightAndMetadataAndP4
func GetMenuTreesByWeightAndMetadataAndP4(offset int, limit int, Weight_ int, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and p4 = ?", Weight_, Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndP5 Get MenuTrees via WeightAndMetadataAndP5
func GetMenuTreesByWeightAndMetadataAndP5(offset int, limit int, Weight_ int, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and p5 = ?", Weight_, Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndP6 Get MenuTrees via WeightAndMetadataAndP6
func GetMenuTreesByWeightAndMetadataAndP6(offset int, limit int, Weight_ int, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and p6 = ?", Weight_, Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndP7 Get MenuTrees via WeightAndMetadataAndP7
func GetMenuTreesByWeightAndMetadataAndP7(offset int, limit int, Weight_ int, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and p7 = ?", Weight_, Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndP8 Get MenuTrees via WeightAndMetadataAndP8
func GetMenuTreesByWeightAndMetadataAndP8(offset int, limit int, Weight_ int, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and p8 = ?", Weight_, Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndP9 Get MenuTrees via WeightAndMetadataAndP9
func GetMenuTreesByWeightAndMetadataAndP9(offset int, limit int, Weight_ int, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and p9 = ?", Weight_, Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadataAndFormClass Get MenuTrees via WeightAndMetadataAndFormClass
func GetMenuTreesByWeightAndMetadataAndFormClass(offset int, limit int, Weight_ int, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ? and form_class = ?", Weight_, Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndDepth Get MenuTrees via WeightAndHasChildrenAndDepth
func GetMenuTreesByWeightAndHasChildrenAndDepth(offset int, limit int, Weight_ int, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and depth = ?", Weight_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndP1 Get MenuTrees via WeightAndHasChildrenAndP1
func GetMenuTreesByWeightAndHasChildrenAndP1(offset int, limit int, Weight_ int, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and p1 = ?", Weight_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndP2 Get MenuTrees via WeightAndHasChildrenAndP2
func GetMenuTreesByWeightAndHasChildrenAndP2(offset int, limit int, Weight_ int, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and p2 = ?", Weight_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndP3 Get MenuTrees via WeightAndHasChildrenAndP3
func GetMenuTreesByWeightAndHasChildrenAndP3(offset int, limit int, Weight_ int, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and p3 = ?", Weight_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndP4 Get MenuTrees via WeightAndHasChildrenAndP4
func GetMenuTreesByWeightAndHasChildrenAndP4(offset int, limit int, Weight_ int, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and p4 = ?", Weight_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndP5 Get MenuTrees via WeightAndHasChildrenAndP5
func GetMenuTreesByWeightAndHasChildrenAndP5(offset int, limit int, Weight_ int, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and p5 = ?", Weight_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndP6 Get MenuTrees via WeightAndHasChildrenAndP6
func GetMenuTreesByWeightAndHasChildrenAndP6(offset int, limit int, Weight_ int, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and p6 = ?", Weight_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndP7 Get MenuTrees via WeightAndHasChildrenAndP7
func GetMenuTreesByWeightAndHasChildrenAndP7(offset int, limit int, Weight_ int, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and p7 = ?", Weight_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndP8 Get MenuTrees via WeightAndHasChildrenAndP8
func GetMenuTreesByWeightAndHasChildrenAndP8(offset int, limit int, Weight_ int, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and p8 = ?", Weight_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndP9 Get MenuTrees via WeightAndHasChildrenAndP9
func GetMenuTreesByWeightAndHasChildrenAndP9(offset int, limit int, Weight_ int, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and p9 = ?", Weight_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildrenAndFormClass Get MenuTrees via WeightAndHasChildrenAndFormClass
func GetMenuTreesByWeightAndHasChildrenAndFormClass(offset int, limit int, Weight_ int, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ? and form_class = ?", Weight_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepthAndP1 Get MenuTrees via WeightAndDepthAndP1
func GetMenuTreesByWeightAndDepthAndP1(offset int, limit int, Weight_ int, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ? and p1 = ?", Weight_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepthAndP2 Get MenuTrees via WeightAndDepthAndP2
func GetMenuTreesByWeightAndDepthAndP2(offset int, limit int, Weight_ int, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ? and p2 = ?", Weight_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepthAndP3 Get MenuTrees via WeightAndDepthAndP3
func GetMenuTreesByWeightAndDepthAndP3(offset int, limit int, Weight_ int, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ? and p3 = ?", Weight_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepthAndP4 Get MenuTrees via WeightAndDepthAndP4
func GetMenuTreesByWeightAndDepthAndP4(offset int, limit int, Weight_ int, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ? and p4 = ?", Weight_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepthAndP5 Get MenuTrees via WeightAndDepthAndP5
func GetMenuTreesByWeightAndDepthAndP5(offset int, limit int, Weight_ int, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ? and p5 = ?", Weight_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepthAndP6 Get MenuTrees via WeightAndDepthAndP6
func GetMenuTreesByWeightAndDepthAndP6(offset int, limit int, Weight_ int, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ? and p6 = ?", Weight_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepthAndP7 Get MenuTrees via WeightAndDepthAndP7
func GetMenuTreesByWeightAndDepthAndP7(offset int, limit int, Weight_ int, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ? and p7 = ?", Weight_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepthAndP8 Get MenuTrees via WeightAndDepthAndP8
func GetMenuTreesByWeightAndDepthAndP8(offset int, limit int, Weight_ int, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ? and p8 = ?", Weight_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepthAndP9 Get MenuTrees via WeightAndDepthAndP9
func GetMenuTreesByWeightAndDepthAndP9(offset int, limit int, Weight_ int, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ? and p9 = ?", Weight_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepthAndFormClass Get MenuTrees via WeightAndDepthAndFormClass
func GetMenuTreesByWeightAndDepthAndFormClass(offset int, limit int, Weight_ int, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ? and form_class = ?", Weight_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP1AndP2 Get MenuTrees via WeightAndP1AndP2
func GetMenuTreesByWeightAndP1AndP2(offset int, limit int, Weight_ int, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p1 = ? and p2 = ?", Weight_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP1AndP3 Get MenuTrees via WeightAndP1AndP3
func GetMenuTreesByWeightAndP1AndP3(offset int, limit int, Weight_ int, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p1 = ? and p3 = ?", Weight_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP1AndP4 Get MenuTrees via WeightAndP1AndP4
func GetMenuTreesByWeightAndP1AndP4(offset int, limit int, Weight_ int, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p1 = ? and p4 = ?", Weight_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP1AndP5 Get MenuTrees via WeightAndP1AndP5
func GetMenuTreesByWeightAndP1AndP5(offset int, limit int, Weight_ int, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p1 = ? and p5 = ?", Weight_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP1AndP6 Get MenuTrees via WeightAndP1AndP6
func GetMenuTreesByWeightAndP1AndP6(offset int, limit int, Weight_ int, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p1 = ? and p6 = ?", Weight_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP1AndP7 Get MenuTrees via WeightAndP1AndP7
func GetMenuTreesByWeightAndP1AndP7(offset int, limit int, Weight_ int, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p1 = ? and p7 = ?", Weight_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP1AndP8 Get MenuTrees via WeightAndP1AndP8
func GetMenuTreesByWeightAndP1AndP8(offset int, limit int, Weight_ int, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p1 = ? and p8 = ?", Weight_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP1AndP9 Get MenuTrees via WeightAndP1AndP9
func GetMenuTreesByWeightAndP1AndP9(offset int, limit int, Weight_ int, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p1 = ? and p9 = ?", Weight_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP1AndFormClass Get MenuTrees via WeightAndP1AndFormClass
func GetMenuTreesByWeightAndP1AndFormClass(offset int, limit int, Weight_ int, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p1 = ? and form_class = ?", Weight_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP2AndP3 Get MenuTrees via WeightAndP2AndP3
func GetMenuTreesByWeightAndP2AndP3(offset int, limit int, Weight_ int, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p2 = ? and p3 = ?", Weight_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP2AndP4 Get MenuTrees via WeightAndP2AndP4
func GetMenuTreesByWeightAndP2AndP4(offset int, limit int, Weight_ int, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p2 = ? and p4 = ?", Weight_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP2AndP5 Get MenuTrees via WeightAndP2AndP5
func GetMenuTreesByWeightAndP2AndP5(offset int, limit int, Weight_ int, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p2 = ? and p5 = ?", Weight_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP2AndP6 Get MenuTrees via WeightAndP2AndP6
func GetMenuTreesByWeightAndP2AndP6(offset int, limit int, Weight_ int, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p2 = ? and p6 = ?", Weight_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP2AndP7 Get MenuTrees via WeightAndP2AndP7
func GetMenuTreesByWeightAndP2AndP7(offset int, limit int, Weight_ int, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p2 = ? and p7 = ?", Weight_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP2AndP8 Get MenuTrees via WeightAndP2AndP8
func GetMenuTreesByWeightAndP2AndP8(offset int, limit int, Weight_ int, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p2 = ? and p8 = ?", Weight_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP2AndP9 Get MenuTrees via WeightAndP2AndP9
func GetMenuTreesByWeightAndP2AndP9(offset int, limit int, Weight_ int, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p2 = ? and p9 = ?", Weight_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP2AndFormClass Get MenuTrees via WeightAndP2AndFormClass
func GetMenuTreesByWeightAndP2AndFormClass(offset int, limit int, Weight_ int, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p2 = ? and form_class = ?", Weight_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP3AndP4 Get MenuTrees via WeightAndP3AndP4
func GetMenuTreesByWeightAndP3AndP4(offset int, limit int, Weight_ int, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p3 = ? and p4 = ?", Weight_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP3AndP5 Get MenuTrees via WeightAndP3AndP5
func GetMenuTreesByWeightAndP3AndP5(offset int, limit int, Weight_ int, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p3 = ? and p5 = ?", Weight_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP3AndP6 Get MenuTrees via WeightAndP3AndP6
func GetMenuTreesByWeightAndP3AndP6(offset int, limit int, Weight_ int, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p3 = ? and p6 = ?", Weight_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP3AndP7 Get MenuTrees via WeightAndP3AndP7
func GetMenuTreesByWeightAndP3AndP7(offset int, limit int, Weight_ int, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p3 = ? and p7 = ?", Weight_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP3AndP8 Get MenuTrees via WeightAndP3AndP8
func GetMenuTreesByWeightAndP3AndP8(offset int, limit int, Weight_ int, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p3 = ? and p8 = ?", Weight_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP3AndP9 Get MenuTrees via WeightAndP3AndP9
func GetMenuTreesByWeightAndP3AndP9(offset int, limit int, Weight_ int, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p3 = ? and p9 = ?", Weight_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP3AndFormClass Get MenuTrees via WeightAndP3AndFormClass
func GetMenuTreesByWeightAndP3AndFormClass(offset int, limit int, Weight_ int, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p3 = ? and form_class = ?", Weight_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP4AndP5 Get MenuTrees via WeightAndP4AndP5
func GetMenuTreesByWeightAndP4AndP5(offset int, limit int, Weight_ int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p4 = ? and p5 = ?", Weight_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP4AndP6 Get MenuTrees via WeightAndP4AndP6
func GetMenuTreesByWeightAndP4AndP6(offset int, limit int, Weight_ int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p4 = ? and p6 = ?", Weight_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP4AndP7 Get MenuTrees via WeightAndP4AndP7
func GetMenuTreesByWeightAndP4AndP7(offset int, limit int, Weight_ int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p4 = ? and p7 = ?", Weight_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP4AndP8 Get MenuTrees via WeightAndP4AndP8
func GetMenuTreesByWeightAndP4AndP8(offset int, limit int, Weight_ int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p4 = ? and p8 = ?", Weight_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP4AndP9 Get MenuTrees via WeightAndP4AndP9
func GetMenuTreesByWeightAndP4AndP9(offset int, limit int, Weight_ int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p4 = ? and p9 = ?", Weight_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP4AndFormClass Get MenuTrees via WeightAndP4AndFormClass
func GetMenuTreesByWeightAndP4AndFormClass(offset int, limit int, Weight_ int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p4 = ? and form_class = ?", Weight_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP5AndP6 Get MenuTrees via WeightAndP5AndP6
func GetMenuTreesByWeightAndP5AndP6(offset int, limit int, Weight_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p5 = ? and p6 = ?", Weight_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP5AndP7 Get MenuTrees via WeightAndP5AndP7
func GetMenuTreesByWeightAndP5AndP7(offset int, limit int, Weight_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p5 = ? and p7 = ?", Weight_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP5AndP8 Get MenuTrees via WeightAndP5AndP8
func GetMenuTreesByWeightAndP5AndP8(offset int, limit int, Weight_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p5 = ? and p8 = ?", Weight_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP5AndP9 Get MenuTrees via WeightAndP5AndP9
func GetMenuTreesByWeightAndP5AndP9(offset int, limit int, Weight_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p5 = ? and p9 = ?", Weight_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP5AndFormClass Get MenuTrees via WeightAndP5AndFormClass
func GetMenuTreesByWeightAndP5AndFormClass(offset int, limit int, Weight_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p5 = ? and form_class = ?", Weight_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP6AndP7 Get MenuTrees via WeightAndP6AndP7
func GetMenuTreesByWeightAndP6AndP7(offset int, limit int, Weight_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p6 = ? and p7 = ?", Weight_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP6AndP8 Get MenuTrees via WeightAndP6AndP8
func GetMenuTreesByWeightAndP6AndP8(offset int, limit int, Weight_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p6 = ? and p8 = ?", Weight_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP6AndP9 Get MenuTrees via WeightAndP6AndP9
func GetMenuTreesByWeightAndP6AndP9(offset int, limit int, Weight_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p6 = ? and p9 = ?", Weight_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP6AndFormClass Get MenuTrees via WeightAndP6AndFormClass
func GetMenuTreesByWeightAndP6AndFormClass(offset int, limit int, Weight_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p6 = ? and form_class = ?", Weight_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP7AndP8 Get MenuTrees via WeightAndP7AndP8
func GetMenuTreesByWeightAndP7AndP8(offset int, limit int, Weight_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p7 = ? and p8 = ?", Weight_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP7AndP9 Get MenuTrees via WeightAndP7AndP9
func GetMenuTreesByWeightAndP7AndP9(offset int, limit int, Weight_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p7 = ? and p9 = ?", Weight_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP7AndFormClass Get MenuTrees via WeightAndP7AndFormClass
func GetMenuTreesByWeightAndP7AndFormClass(offset int, limit int, Weight_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p7 = ? and form_class = ?", Weight_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP8AndP9 Get MenuTrees via WeightAndP8AndP9
func GetMenuTreesByWeightAndP8AndP9(offset int, limit int, Weight_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p8 = ? and p9 = ?", Weight_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP8AndFormClass Get MenuTrees via WeightAndP8AndFormClass
func GetMenuTreesByWeightAndP8AndFormClass(offset int, limit int, Weight_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p8 = ? and form_class = ?", Weight_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP9AndFormClass Get MenuTrees via WeightAndP9AndFormClass
func GetMenuTreesByWeightAndP9AndFormClass(offset int, limit int, Weight_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p9 = ? and form_class = ?", Weight_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndDepth Get MenuTrees via MetadataAndHasChildrenAndDepth
func GetMenuTreesByMetadataAndHasChildrenAndDepth(offset int, limit int, Metadata_ []byte, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and depth = ?", Metadata_, HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndP1 Get MenuTrees via MetadataAndHasChildrenAndP1
func GetMenuTreesByMetadataAndHasChildrenAndP1(offset int, limit int, Metadata_ []byte, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and p1 = ?", Metadata_, HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndP2 Get MenuTrees via MetadataAndHasChildrenAndP2
func GetMenuTreesByMetadataAndHasChildrenAndP2(offset int, limit int, Metadata_ []byte, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and p2 = ?", Metadata_, HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndP3 Get MenuTrees via MetadataAndHasChildrenAndP3
func GetMenuTreesByMetadataAndHasChildrenAndP3(offset int, limit int, Metadata_ []byte, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and p3 = ?", Metadata_, HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndP4 Get MenuTrees via MetadataAndHasChildrenAndP4
func GetMenuTreesByMetadataAndHasChildrenAndP4(offset int, limit int, Metadata_ []byte, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and p4 = ?", Metadata_, HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndP5 Get MenuTrees via MetadataAndHasChildrenAndP5
func GetMenuTreesByMetadataAndHasChildrenAndP5(offset int, limit int, Metadata_ []byte, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and p5 = ?", Metadata_, HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndP6 Get MenuTrees via MetadataAndHasChildrenAndP6
func GetMenuTreesByMetadataAndHasChildrenAndP6(offset int, limit int, Metadata_ []byte, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and p6 = ?", Metadata_, HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndP7 Get MenuTrees via MetadataAndHasChildrenAndP7
func GetMenuTreesByMetadataAndHasChildrenAndP7(offset int, limit int, Metadata_ []byte, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and p7 = ?", Metadata_, HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndP8 Get MenuTrees via MetadataAndHasChildrenAndP8
func GetMenuTreesByMetadataAndHasChildrenAndP8(offset int, limit int, Metadata_ []byte, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and p8 = ?", Metadata_, HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndP9 Get MenuTrees via MetadataAndHasChildrenAndP9
func GetMenuTreesByMetadataAndHasChildrenAndP9(offset int, limit int, Metadata_ []byte, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and p9 = ?", Metadata_, HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildrenAndFormClass Get MenuTrees via MetadataAndHasChildrenAndFormClass
func GetMenuTreesByMetadataAndHasChildrenAndFormClass(offset int, limit int, Metadata_ []byte, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ? and form_class = ?", Metadata_, HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepthAndP1 Get MenuTrees via MetadataAndDepthAndP1
func GetMenuTreesByMetadataAndDepthAndP1(offset int, limit int, Metadata_ []byte, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ? and p1 = ?", Metadata_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepthAndP2 Get MenuTrees via MetadataAndDepthAndP2
func GetMenuTreesByMetadataAndDepthAndP2(offset int, limit int, Metadata_ []byte, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ? and p2 = ?", Metadata_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepthAndP3 Get MenuTrees via MetadataAndDepthAndP3
func GetMenuTreesByMetadataAndDepthAndP3(offset int, limit int, Metadata_ []byte, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ? and p3 = ?", Metadata_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepthAndP4 Get MenuTrees via MetadataAndDepthAndP4
func GetMenuTreesByMetadataAndDepthAndP4(offset int, limit int, Metadata_ []byte, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ? and p4 = ?", Metadata_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepthAndP5 Get MenuTrees via MetadataAndDepthAndP5
func GetMenuTreesByMetadataAndDepthAndP5(offset int, limit int, Metadata_ []byte, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ? and p5 = ?", Metadata_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepthAndP6 Get MenuTrees via MetadataAndDepthAndP6
func GetMenuTreesByMetadataAndDepthAndP6(offset int, limit int, Metadata_ []byte, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ? and p6 = ?", Metadata_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepthAndP7 Get MenuTrees via MetadataAndDepthAndP7
func GetMenuTreesByMetadataAndDepthAndP7(offset int, limit int, Metadata_ []byte, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ? and p7 = ?", Metadata_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepthAndP8 Get MenuTrees via MetadataAndDepthAndP8
func GetMenuTreesByMetadataAndDepthAndP8(offset int, limit int, Metadata_ []byte, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ? and p8 = ?", Metadata_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepthAndP9 Get MenuTrees via MetadataAndDepthAndP9
func GetMenuTreesByMetadataAndDepthAndP9(offset int, limit int, Metadata_ []byte, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ? and p9 = ?", Metadata_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepthAndFormClass Get MenuTrees via MetadataAndDepthAndFormClass
func GetMenuTreesByMetadataAndDepthAndFormClass(offset int, limit int, Metadata_ []byte, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ? and form_class = ?", Metadata_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP1AndP2 Get MenuTrees via MetadataAndP1AndP2
func GetMenuTreesByMetadataAndP1AndP2(offset int, limit int, Metadata_ []byte, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p1 = ? and p2 = ?", Metadata_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP1AndP3 Get MenuTrees via MetadataAndP1AndP3
func GetMenuTreesByMetadataAndP1AndP3(offset int, limit int, Metadata_ []byte, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p1 = ? and p3 = ?", Metadata_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP1AndP4 Get MenuTrees via MetadataAndP1AndP4
func GetMenuTreesByMetadataAndP1AndP4(offset int, limit int, Metadata_ []byte, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p1 = ? and p4 = ?", Metadata_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP1AndP5 Get MenuTrees via MetadataAndP1AndP5
func GetMenuTreesByMetadataAndP1AndP5(offset int, limit int, Metadata_ []byte, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p1 = ? and p5 = ?", Metadata_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP1AndP6 Get MenuTrees via MetadataAndP1AndP6
func GetMenuTreesByMetadataAndP1AndP6(offset int, limit int, Metadata_ []byte, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p1 = ? and p6 = ?", Metadata_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP1AndP7 Get MenuTrees via MetadataAndP1AndP7
func GetMenuTreesByMetadataAndP1AndP7(offset int, limit int, Metadata_ []byte, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p1 = ? and p7 = ?", Metadata_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP1AndP8 Get MenuTrees via MetadataAndP1AndP8
func GetMenuTreesByMetadataAndP1AndP8(offset int, limit int, Metadata_ []byte, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p1 = ? and p8 = ?", Metadata_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP1AndP9 Get MenuTrees via MetadataAndP1AndP9
func GetMenuTreesByMetadataAndP1AndP9(offset int, limit int, Metadata_ []byte, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p1 = ? and p9 = ?", Metadata_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP1AndFormClass Get MenuTrees via MetadataAndP1AndFormClass
func GetMenuTreesByMetadataAndP1AndFormClass(offset int, limit int, Metadata_ []byte, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p1 = ? and form_class = ?", Metadata_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP2AndP3 Get MenuTrees via MetadataAndP2AndP3
func GetMenuTreesByMetadataAndP2AndP3(offset int, limit int, Metadata_ []byte, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p2 = ? and p3 = ?", Metadata_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP2AndP4 Get MenuTrees via MetadataAndP2AndP4
func GetMenuTreesByMetadataAndP2AndP4(offset int, limit int, Metadata_ []byte, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p2 = ? and p4 = ?", Metadata_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP2AndP5 Get MenuTrees via MetadataAndP2AndP5
func GetMenuTreesByMetadataAndP2AndP5(offset int, limit int, Metadata_ []byte, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p2 = ? and p5 = ?", Metadata_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP2AndP6 Get MenuTrees via MetadataAndP2AndP6
func GetMenuTreesByMetadataAndP2AndP6(offset int, limit int, Metadata_ []byte, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p2 = ? and p6 = ?", Metadata_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP2AndP7 Get MenuTrees via MetadataAndP2AndP7
func GetMenuTreesByMetadataAndP2AndP7(offset int, limit int, Metadata_ []byte, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p2 = ? and p7 = ?", Metadata_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP2AndP8 Get MenuTrees via MetadataAndP2AndP8
func GetMenuTreesByMetadataAndP2AndP8(offset int, limit int, Metadata_ []byte, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p2 = ? and p8 = ?", Metadata_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP2AndP9 Get MenuTrees via MetadataAndP2AndP9
func GetMenuTreesByMetadataAndP2AndP9(offset int, limit int, Metadata_ []byte, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p2 = ? and p9 = ?", Metadata_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP2AndFormClass Get MenuTrees via MetadataAndP2AndFormClass
func GetMenuTreesByMetadataAndP2AndFormClass(offset int, limit int, Metadata_ []byte, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p2 = ? and form_class = ?", Metadata_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP3AndP4 Get MenuTrees via MetadataAndP3AndP4
func GetMenuTreesByMetadataAndP3AndP4(offset int, limit int, Metadata_ []byte, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p3 = ? and p4 = ?", Metadata_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP3AndP5 Get MenuTrees via MetadataAndP3AndP5
func GetMenuTreesByMetadataAndP3AndP5(offset int, limit int, Metadata_ []byte, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p3 = ? and p5 = ?", Metadata_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP3AndP6 Get MenuTrees via MetadataAndP3AndP6
func GetMenuTreesByMetadataAndP3AndP6(offset int, limit int, Metadata_ []byte, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p3 = ? and p6 = ?", Metadata_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP3AndP7 Get MenuTrees via MetadataAndP3AndP7
func GetMenuTreesByMetadataAndP3AndP7(offset int, limit int, Metadata_ []byte, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p3 = ? and p7 = ?", Metadata_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP3AndP8 Get MenuTrees via MetadataAndP3AndP8
func GetMenuTreesByMetadataAndP3AndP8(offset int, limit int, Metadata_ []byte, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p3 = ? and p8 = ?", Metadata_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP3AndP9 Get MenuTrees via MetadataAndP3AndP9
func GetMenuTreesByMetadataAndP3AndP9(offset int, limit int, Metadata_ []byte, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p3 = ? and p9 = ?", Metadata_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP3AndFormClass Get MenuTrees via MetadataAndP3AndFormClass
func GetMenuTreesByMetadataAndP3AndFormClass(offset int, limit int, Metadata_ []byte, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p3 = ? and form_class = ?", Metadata_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP4AndP5 Get MenuTrees via MetadataAndP4AndP5
func GetMenuTreesByMetadataAndP4AndP5(offset int, limit int, Metadata_ []byte, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p4 = ? and p5 = ?", Metadata_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP4AndP6 Get MenuTrees via MetadataAndP4AndP6
func GetMenuTreesByMetadataAndP4AndP6(offset int, limit int, Metadata_ []byte, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p4 = ? and p6 = ?", Metadata_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP4AndP7 Get MenuTrees via MetadataAndP4AndP7
func GetMenuTreesByMetadataAndP4AndP7(offset int, limit int, Metadata_ []byte, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p4 = ? and p7 = ?", Metadata_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP4AndP8 Get MenuTrees via MetadataAndP4AndP8
func GetMenuTreesByMetadataAndP4AndP8(offset int, limit int, Metadata_ []byte, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p4 = ? and p8 = ?", Metadata_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP4AndP9 Get MenuTrees via MetadataAndP4AndP9
func GetMenuTreesByMetadataAndP4AndP9(offset int, limit int, Metadata_ []byte, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p4 = ? and p9 = ?", Metadata_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP4AndFormClass Get MenuTrees via MetadataAndP4AndFormClass
func GetMenuTreesByMetadataAndP4AndFormClass(offset int, limit int, Metadata_ []byte, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p4 = ? and form_class = ?", Metadata_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP5AndP6 Get MenuTrees via MetadataAndP5AndP6
func GetMenuTreesByMetadataAndP5AndP6(offset int, limit int, Metadata_ []byte, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p5 = ? and p6 = ?", Metadata_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP5AndP7 Get MenuTrees via MetadataAndP5AndP7
func GetMenuTreesByMetadataAndP5AndP7(offset int, limit int, Metadata_ []byte, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p5 = ? and p7 = ?", Metadata_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP5AndP8 Get MenuTrees via MetadataAndP5AndP8
func GetMenuTreesByMetadataAndP5AndP8(offset int, limit int, Metadata_ []byte, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p5 = ? and p8 = ?", Metadata_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP5AndP9 Get MenuTrees via MetadataAndP5AndP9
func GetMenuTreesByMetadataAndP5AndP9(offset int, limit int, Metadata_ []byte, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p5 = ? and p9 = ?", Metadata_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP5AndFormClass Get MenuTrees via MetadataAndP5AndFormClass
func GetMenuTreesByMetadataAndP5AndFormClass(offset int, limit int, Metadata_ []byte, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p5 = ? and form_class = ?", Metadata_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP6AndP7 Get MenuTrees via MetadataAndP6AndP7
func GetMenuTreesByMetadataAndP6AndP7(offset int, limit int, Metadata_ []byte, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p6 = ? and p7 = ?", Metadata_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP6AndP8 Get MenuTrees via MetadataAndP6AndP8
func GetMenuTreesByMetadataAndP6AndP8(offset int, limit int, Metadata_ []byte, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p6 = ? and p8 = ?", Metadata_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP6AndP9 Get MenuTrees via MetadataAndP6AndP9
func GetMenuTreesByMetadataAndP6AndP9(offset int, limit int, Metadata_ []byte, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p6 = ? and p9 = ?", Metadata_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP6AndFormClass Get MenuTrees via MetadataAndP6AndFormClass
func GetMenuTreesByMetadataAndP6AndFormClass(offset int, limit int, Metadata_ []byte, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p6 = ? and form_class = ?", Metadata_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP7AndP8 Get MenuTrees via MetadataAndP7AndP8
func GetMenuTreesByMetadataAndP7AndP8(offset int, limit int, Metadata_ []byte, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p7 = ? and p8 = ?", Metadata_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP7AndP9 Get MenuTrees via MetadataAndP7AndP9
func GetMenuTreesByMetadataAndP7AndP9(offset int, limit int, Metadata_ []byte, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p7 = ? and p9 = ?", Metadata_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP7AndFormClass Get MenuTrees via MetadataAndP7AndFormClass
func GetMenuTreesByMetadataAndP7AndFormClass(offset int, limit int, Metadata_ []byte, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p7 = ? and form_class = ?", Metadata_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP8AndP9 Get MenuTrees via MetadataAndP8AndP9
func GetMenuTreesByMetadataAndP8AndP9(offset int, limit int, Metadata_ []byte, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p8 = ? and p9 = ?", Metadata_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP8AndFormClass Get MenuTrees via MetadataAndP8AndFormClass
func GetMenuTreesByMetadataAndP8AndFormClass(offset int, limit int, Metadata_ []byte, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p8 = ? and form_class = ?", Metadata_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP9AndFormClass Get MenuTrees via MetadataAndP9AndFormClass
func GetMenuTreesByMetadataAndP9AndFormClass(offset int, limit int, Metadata_ []byte, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p9 = ? and form_class = ?", Metadata_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepthAndP1 Get MenuTrees via HasChildrenAndDepthAndP1
func GetMenuTreesByHasChildrenAndDepthAndP1(offset int, limit int, HasChildren_ int, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ? and p1 = ?", HasChildren_, Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepthAndP2 Get MenuTrees via HasChildrenAndDepthAndP2
func GetMenuTreesByHasChildrenAndDepthAndP2(offset int, limit int, HasChildren_ int, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ? and p2 = ?", HasChildren_, Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepthAndP3 Get MenuTrees via HasChildrenAndDepthAndP3
func GetMenuTreesByHasChildrenAndDepthAndP3(offset int, limit int, HasChildren_ int, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ? and p3 = ?", HasChildren_, Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepthAndP4 Get MenuTrees via HasChildrenAndDepthAndP4
func GetMenuTreesByHasChildrenAndDepthAndP4(offset int, limit int, HasChildren_ int, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ? and p4 = ?", HasChildren_, Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepthAndP5 Get MenuTrees via HasChildrenAndDepthAndP5
func GetMenuTreesByHasChildrenAndDepthAndP5(offset int, limit int, HasChildren_ int, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ? and p5 = ?", HasChildren_, Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepthAndP6 Get MenuTrees via HasChildrenAndDepthAndP6
func GetMenuTreesByHasChildrenAndDepthAndP6(offset int, limit int, HasChildren_ int, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ? and p6 = ?", HasChildren_, Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepthAndP7 Get MenuTrees via HasChildrenAndDepthAndP7
func GetMenuTreesByHasChildrenAndDepthAndP7(offset int, limit int, HasChildren_ int, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ? and p7 = ?", HasChildren_, Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepthAndP8 Get MenuTrees via HasChildrenAndDepthAndP8
func GetMenuTreesByHasChildrenAndDepthAndP8(offset int, limit int, HasChildren_ int, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ? and p8 = ?", HasChildren_, Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepthAndP9 Get MenuTrees via HasChildrenAndDepthAndP9
func GetMenuTreesByHasChildrenAndDepthAndP9(offset int, limit int, HasChildren_ int, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ? and p9 = ?", HasChildren_, Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepthAndFormClass Get MenuTrees via HasChildrenAndDepthAndFormClass
func GetMenuTreesByHasChildrenAndDepthAndFormClass(offset int, limit int, HasChildren_ int, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ? and form_class = ?", HasChildren_, Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP1AndP2 Get MenuTrees via HasChildrenAndP1AndP2
func GetMenuTreesByHasChildrenAndP1AndP2(offset int, limit int, HasChildren_ int, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p1 = ? and p2 = ?", HasChildren_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP1AndP3 Get MenuTrees via HasChildrenAndP1AndP3
func GetMenuTreesByHasChildrenAndP1AndP3(offset int, limit int, HasChildren_ int, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p1 = ? and p3 = ?", HasChildren_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP1AndP4 Get MenuTrees via HasChildrenAndP1AndP4
func GetMenuTreesByHasChildrenAndP1AndP4(offset int, limit int, HasChildren_ int, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p1 = ? and p4 = ?", HasChildren_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP1AndP5 Get MenuTrees via HasChildrenAndP1AndP5
func GetMenuTreesByHasChildrenAndP1AndP5(offset int, limit int, HasChildren_ int, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p1 = ? and p5 = ?", HasChildren_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP1AndP6 Get MenuTrees via HasChildrenAndP1AndP6
func GetMenuTreesByHasChildrenAndP1AndP6(offset int, limit int, HasChildren_ int, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p1 = ? and p6 = ?", HasChildren_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP1AndP7 Get MenuTrees via HasChildrenAndP1AndP7
func GetMenuTreesByHasChildrenAndP1AndP7(offset int, limit int, HasChildren_ int, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p1 = ? and p7 = ?", HasChildren_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP1AndP8 Get MenuTrees via HasChildrenAndP1AndP8
func GetMenuTreesByHasChildrenAndP1AndP8(offset int, limit int, HasChildren_ int, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p1 = ? and p8 = ?", HasChildren_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP1AndP9 Get MenuTrees via HasChildrenAndP1AndP9
func GetMenuTreesByHasChildrenAndP1AndP9(offset int, limit int, HasChildren_ int, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p1 = ? and p9 = ?", HasChildren_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP1AndFormClass Get MenuTrees via HasChildrenAndP1AndFormClass
func GetMenuTreesByHasChildrenAndP1AndFormClass(offset int, limit int, HasChildren_ int, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p1 = ? and form_class = ?", HasChildren_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP2AndP3 Get MenuTrees via HasChildrenAndP2AndP3
func GetMenuTreesByHasChildrenAndP2AndP3(offset int, limit int, HasChildren_ int, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p2 = ? and p3 = ?", HasChildren_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP2AndP4 Get MenuTrees via HasChildrenAndP2AndP4
func GetMenuTreesByHasChildrenAndP2AndP4(offset int, limit int, HasChildren_ int, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p2 = ? and p4 = ?", HasChildren_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP2AndP5 Get MenuTrees via HasChildrenAndP2AndP5
func GetMenuTreesByHasChildrenAndP2AndP5(offset int, limit int, HasChildren_ int, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p2 = ? and p5 = ?", HasChildren_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP2AndP6 Get MenuTrees via HasChildrenAndP2AndP6
func GetMenuTreesByHasChildrenAndP2AndP6(offset int, limit int, HasChildren_ int, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p2 = ? and p6 = ?", HasChildren_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP2AndP7 Get MenuTrees via HasChildrenAndP2AndP7
func GetMenuTreesByHasChildrenAndP2AndP7(offset int, limit int, HasChildren_ int, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p2 = ? and p7 = ?", HasChildren_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP2AndP8 Get MenuTrees via HasChildrenAndP2AndP8
func GetMenuTreesByHasChildrenAndP2AndP8(offset int, limit int, HasChildren_ int, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p2 = ? and p8 = ?", HasChildren_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP2AndP9 Get MenuTrees via HasChildrenAndP2AndP9
func GetMenuTreesByHasChildrenAndP2AndP9(offset int, limit int, HasChildren_ int, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p2 = ? and p9 = ?", HasChildren_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP2AndFormClass Get MenuTrees via HasChildrenAndP2AndFormClass
func GetMenuTreesByHasChildrenAndP2AndFormClass(offset int, limit int, HasChildren_ int, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p2 = ? and form_class = ?", HasChildren_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP3AndP4 Get MenuTrees via HasChildrenAndP3AndP4
func GetMenuTreesByHasChildrenAndP3AndP4(offset int, limit int, HasChildren_ int, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p3 = ? and p4 = ?", HasChildren_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP3AndP5 Get MenuTrees via HasChildrenAndP3AndP5
func GetMenuTreesByHasChildrenAndP3AndP5(offset int, limit int, HasChildren_ int, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p3 = ? and p5 = ?", HasChildren_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP3AndP6 Get MenuTrees via HasChildrenAndP3AndP6
func GetMenuTreesByHasChildrenAndP3AndP6(offset int, limit int, HasChildren_ int, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p3 = ? and p6 = ?", HasChildren_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP3AndP7 Get MenuTrees via HasChildrenAndP3AndP7
func GetMenuTreesByHasChildrenAndP3AndP7(offset int, limit int, HasChildren_ int, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p3 = ? and p7 = ?", HasChildren_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP3AndP8 Get MenuTrees via HasChildrenAndP3AndP8
func GetMenuTreesByHasChildrenAndP3AndP8(offset int, limit int, HasChildren_ int, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p3 = ? and p8 = ?", HasChildren_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP3AndP9 Get MenuTrees via HasChildrenAndP3AndP9
func GetMenuTreesByHasChildrenAndP3AndP9(offset int, limit int, HasChildren_ int, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p3 = ? and p9 = ?", HasChildren_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP3AndFormClass Get MenuTrees via HasChildrenAndP3AndFormClass
func GetMenuTreesByHasChildrenAndP3AndFormClass(offset int, limit int, HasChildren_ int, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p3 = ? and form_class = ?", HasChildren_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP4AndP5 Get MenuTrees via HasChildrenAndP4AndP5
func GetMenuTreesByHasChildrenAndP4AndP5(offset int, limit int, HasChildren_ int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p4 = ? and p5 = ?", HasChildren_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP4AndP6 Get MenuTrees via HasChildrenAndP4AndP6
func GetMenuTreesByHasChildrenAndP4AndP6(offset int, limit int, HasChildren_ int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p4 = ? and p6 = ?", HasChildren_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP4AndP7 Get MenuTrees via HasChildrenAndP4AndP7
func GetMenuTreesByHasChildrenAndP4AndP7(offset int, limit int, HasChildren_ int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p4 = ? and p7 = ?", HasChildren_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP4AndP8 Get MenuTrees via HasChildrenAndP4AndP8
func GetMenuTreesByHasChildrenAndP4AndP8(offset int, limit int, HasChildren_ int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p4 = ? and p8 = ?", HasChildren_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP4AndP9 Get MenuTrees via HasChildrenAndP4AndP9
func GetMenuTreesByHasChildrenAndP4AndP9(offset int, limit int, HasChildren_ int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p4 = ? and p9 = ?", HasChildren_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP4AndFormClass Get MenuTrees via HasChildrenAndP4AndFormClass
func GetMenuTreesByHasChildrenAndP4AndFormClass(offset int, limit int, HasChildren_ int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p4 = ? and form_class = ?", HasChildren_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP5AndP6 Get MenuTrees via HasChildrenAndP5AndP6
func GetMenuTreesByHasChildrenAndP5AndP6(offset int, limit int, HasChildren_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p5 = ? and p6 = ?", HasChildren_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP5AndP7 Get MenuTrees via HasChildrenAndP5AndP7
func GetMenuTreesByHasChildrenAndP5AndP7(offset int, limit int, HasChildren_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p5 = ? and p7 = ?", HasChildren_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP5AndP8 Get MenuTrees via HasChildrenAndP5AndP8
func GetMenuTreesByHasChildrenAndP5AndP8(offset int, limit int, HasChildren_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p5 = ? and p8 = ?", HasChildren_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP5AndP9 Get MenuTrees via HasChildrenAndP5AndP9
func GetMenuTreesByHasChildrenAndP5AndP9(offset int, limit int, HasChildren_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p5 = ? and p9 = ?", HasChildren_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP5AndFormClass Get MenuTrees via HasChildrenAndP5AndFormClass
func GetMenuTreesByHasChildrenAndP5AndFormClass(offset int, limit int, HasChildren_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p5 = ? and form_class = ?", HasChildren_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP6AndP7 Get MenuTrees via HasChildrenAndP6AndP7
func GetMenuTreesByHasChildrenAndP6AndP7(offset int, limit int, HasChildren_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p6 = ? and p7 = ?", HasChildren_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP6AndP8 Get MenuTrees via HasChildrenAndP6AndP8
func GetMenuTreesByHasChildrenAndP6AndP8(offset int, limit int, HasChildren_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p6 = ? and p8 = ?", HasChildren_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP6AndP9 Get MenuTrees via HasChildrenAndP6AndP9
func GetMenuTreesByHasChildrenAndP6AndP9(offset int, limit int, HasChildren_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p6 = ? and p9 = ?", HasChildren_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP6AndFormClass Get MenuTrees via HasChildrenAndP6AndFormClass
func GetMenuTreesByHasChildrenAndP6AndFormClass(offset int, limit int, HasChildren_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p6 = ? and form_class = ?", HasChildren_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP7AndP8 Get MenuTrees via HasChildrenAndP7AndP8
func GetMenuTreesByHasChildrenAndP7AndP8(offset int, limit int, HasChildren_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p7 = ? and p8 = ?", HasChildren_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP7AndP9 Get MenuTrees via HasChildrenAndP7AndP9
func GetMenuTreesByHasChildrenAndP7AndP9(offset int, limit int, HasChildren_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p7 = ? and p9 = ?", HasChildren_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP7AndFormClass Get MenuTrees via HasChildrenAndP7AndFormClass
func GetMenuTreesByHasChildrenAndP7AndFormClass(offset int, limit int, HasChildren_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p7 = ? and form_class = ?", HasChildren_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP8AndP9 Get MenuTrees via HasChildrenAndP8AndP9
func GetMenuTreesByHasChildrenAndP8AndP9(offset int, limit int, HasChildren_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p8 = ? and p9 = ?", HasChildren_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP8AndFormClass Get MenuTrees via HasChildrenAndP8AndFormClass
func GetMenuTreesByHasChildrenAndP8AndFormClass(offset int, limit int, HasChildren_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p8 = ? and form_class = ?", HasChildren_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP9AndFormClass Get MenuTrees via HasChildrenAndP9AndFormClass
func GetMenuTreesByHasChildrenAndP9AndFormClass(offset int, limit int, HasChildren_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p9 = ? and form_class = ?", HasChildren_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP1AndP2 Get MenuTrees via DepthAndP1AndP2
func GetMenuTreesByDepthAndP1AndP2(offset int, limit int, Depth_ int, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p1 = ? and p2 = ?", Depth_, P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP1AndP3 Get MenuTrees via DepthAndP1AndP3
func GetMenuTreesByDepthAndP1AndP3(offset int, limit int, Depth_ int, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p1 = ? and p3 = ?", Depth_, P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP1AndP4 Get MenuTrees via DepthAndP1AndP4
func GetMenuTreesByDepthAndP1AndP4(offset int, limit int, Depth_ int, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p1 = ? and p4 = ?", Depth_, P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP1AndP5 Get MenuTrees via DepthAndP1AndP5
func GetMenuTreesByDepthAndP1AndP5(offset int, limit int, Depth_ int, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p1 = ? and p5 = ?", Depth_, P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP1AndP6 Get MenuTrees via DepthAndP1AndP6
func GetMenuTreesByDepthAndP1AndP6(offset int, limit int, Depth_ int, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p1 = ? and p6 = ?", Depth_, P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP1AndP7 Get MenuTrees via DepthAndP1AndP7
func GetMenuTreesByDepthAndP1AndP7(offset int, limit int, Depth_ int, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p1 = ? and p7 = ?", Depth_, P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP1AndP8 Get MenuTrees via DepthAndP1AndP8
func GetMenuTreesByDepthAndP1AndP8(offset int, limit int, Depth_ int, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p1 = ? and p8 = ?", Depth_, P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP1AndP9 Get MenuTrees via DepthAndP1AndP9
func GetMenuTreesByDepthAndP1AndP9(offset int, limit int, Depth_ int, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p1 = ? and p9 = ?", Depth_, P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP1AndFormClass Get MenuTrees via DepthAndP1AndFormClass
func GetMenuTreesByDepthAndP1AndFormClass(offset int, limit int, Depth_ int, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p1 = ? and form_class = ?", Depth_, P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP2AndP3 Get MenuTrees via DepthAndP2AndP3
func GetMenuTreesByDepthAndP2AndP3(offset int, limit int, Depth_ int, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p2 = ? and p3 = ?", Depth_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP2AndP4 Get MenuTrees via DepthAndP2AndP4
func GetMenuTreesByDepthAndP2AndP4(offset int, limit int, Depth_ int, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p2 = ? and p4 = ?", Depth_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP2AndP5 Get MenuTrees via DepthAndP2AndP5
func GetMenuTreesByDepthAndP2AndP5(offset int, limit int, Depth_ int, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p2 = ? and p5 = ?", Depth_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP2AndP6 Get MenuTrees via DepthAndP2AndP6
func GetMenuTreesByDepthAndP2AndP6(offset int, limit int, Depth_ int, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p2 = ? and p6 = ?", Depth_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP2AndP7 Get MenuTrees via DepthAndP2AndP7
func GetMenuTreesByDepthAndP2AndP7(offset int, limit int, Depth_ int, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p2 = ? and p7 = ?", Depth_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP2AndP8 Get MenuTrees via DepthAndP2AndP8
func GetMenuTreesByDepthAndP2AndP8(offset int, limit int, Depth_ int, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p2 = ? and p8 = ?", Depth_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP2AndP9 Get MenuTrees via DepthAndP2AndP9
func GetMenuTreesByDepthAndP2AndP9(offset int, limit int, Depth_ int, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p2 = ? and p9 = ?", Depth_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP2AndFormClass Get MenuTrees via DepthAndP2AndFormClass
func GetMenuTreesByDepthAndP2AndFormClass(offset int, limit int, Depth_ int, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p2 = ? and form_class = ?", Depth_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP3AndP4 Get MenuTrees via DepthAndP3AndP4
func GetMenuTreesByDepthAndP3AndP4(offset int, limit int, Depth_ int, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p3 = ? and p4 = ?", Depth_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP3AndP5 Get MenuTrees via DepthAndP3AndP5
func GetMenuTreesByDepthAndP3AndP5(offset int, limit int, Depth_ int, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p3 = ? and p5 = ?", Depth_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP3AndP6 Get MenuTrees via DepthAndP3AndP6
func GetMenuTreesByDepthAndP3AndP6(offset int, limit int, Depth_ int, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p3 = ? and p6 = ?", Depth_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP3AndP7 Get MenuTrees via DepthAndP3AndP7
func GetMenuTreesByDepthAndP3AndP7(offset int, limit int, Depth_ int, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p3 = ? and p7 = ?", Depth_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP3AndP8 Get MenuTrees via DepthAndP3AndP8
func GetMenuTreesByDepthAndP3AndP8(offset int, limit int, Depth_ int, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p3 = ? and p8 = ?", Depth_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP3AndP9 Get MenuTrees via DepthAndP3AndP9
func GetMenuTreesByDepthAndP3AndP9(offset int, limit int, Depth_ int, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p3 = ? and p9 = ?", Depth_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP3AndFormClass Get MenuTrees via DepthAndP3AndFormClass
func GetMenuTreesByDepthAndP3AndFormClass(offset int, limit int, Depth_ int, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p3 = ? and form_class = ?", Depth_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP4AndP5 Get MenuTrees via DepthAndP4AndP5
func GetMenuTreesByDepthAndP4AndP5(offset int, limit int, Depth_ int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p4 = ? and p5 = ?", Depth_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP4AndP6 Get MenuTrees via DepthAndP4AndP6
func GetMenuTreesByDepthAndP4AndP6(offset int, limit int, Depth_ int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p4 = ? and p6 = ?", Depth_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP4AndP7 Get MenuTrees via DepthAndP4AndP7
func GetMenuTreesByDepthAndP4AndP7(offset int, limit int, Depth_ int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p4 = ? and p7 = ?", Depth_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP4AndP8 Get MenuTrees via DepthAndP4AndP8
func GetMenuTreesByDepthAndP4AndP8(offset int, limit int, Depth_ int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p4 = ? and p8 = ?", Depth_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP4AndP9 Get MenuTrees via DepthAndP4AndP9
func GetMenuTreesByDepthAndP4AndP9(offset int, limit int, Depth_ int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p4 = ? and p9 = ?", Depth_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP4AndFormClass Get MenuTrees via DepthAndP4AndFormClass
func GetMenuTreesByDepthAndP4AndFormClass(offset int, limit int, Depth_ int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p4 = ? and form_class = ?", Depth_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP5AndP6 Get MenuTrees via DepthAndP5AndP6
func GetMenuTreesByDepthAndP5AndP6(offset int, limit int, Depth_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p5 = ? and p6 = ?", Depth_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP5AndP7 Get MenuTrees via DepthAndP5AndP7
func GetMenuTreesByDepthAndP5AndP7(offset int, limit int, Depth_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p5 = ? and p7 = ?", Depth_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP5AndP8 Get MenuTrees via DepthAndP5AndP8
func GetMenuTreesByDepthAndP5AndP8(offset int, limit int, Depth_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p5 = ? and p8 = ?", Depth_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP5AndP9 Get MenuTrees via DepthAndP5AndP9
func GetMenuTreesByDepthAndP5AndP9(offset int, limit int, Depth_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p5 = ? and p9 = ?", Depth_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP5AndFormClass Get MenuTrees via DepthAndP5AndFormClass
func GetMenuTreesByDepthAndP5AndFormClass(offset int, limit int, Depth_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p5 = ? and form_class = ?", Depth_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP6AndP7 Get MenuTrees via DepthAndP6AndP7
func GetMenuTreesByDepthAndP6AndP7(offset int, limit int, Depth_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p6 = ? and p7 = ?", Depth_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP6AndP8 Get MenuTrees via DepthAndP6AndP8
func GetMenuTreesByDepthAndP6AndP8(offset int, limit int, Depth_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p6 = ? and p8 = ?", Depth_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP6AndP9 Get MenuTrees via DepthAndP6AndP9
func GetMenuTreesByDepthAndP6AndP9(offset int, limit int, Depth_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p6 = ? and p9 = ?", Depth_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP6AndFormClass Get MenuTrees via DepthAndP6AndFormClass
func GetMenuTreesByDepthAndP6AndFormClass(offset int, limit int, Depth_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p6 = ? and form_class = ?", Depth_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP7AndP8 Get MenuTrees via DepthAndP7AndP8
func GetMenuTreesByDepthAndP7AndP8(offset int, limit int, Depth_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p7 = ? and p8 = ?", Depth_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP7AndP9 Get MenuTrees via DepthAndP7AndP9
func GetMenuTreesByDepthAndP7AndP9(offset int, limit int, Depth_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p7 = ? and p9 = ?", Depth_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP7AndFormClass Get MenuTrees via DepthAndP7AndFormClass
func GetMenuTreesByDepthAndP7AndFormClass(offset int, limit int, Depth_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p7 = ? and form_class = ?", Depth_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP8AndP9 Get MenuTrees via DepthAndP8AndP9
func GetMenuTreesByDepthAndP8AndP9(offset int, limit int, Depth_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p8 = ? and p9 = ?", Depth_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP8AndFormClass Get MenuTrees via DepthAndP8AndFormClass
func GetMenuTreesByDepthAndP8AndFormClass(offset int, limit int, Depth_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p8 = ? and form_class = ?", Depth_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP9AndFormClass Get MenuTrees via DepthAndP9AndFormClass
func GetMenuTreesByDepthAndP9AndFormClass(offset int, limit int, Depth_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p9 = ? and form_class = ?", Depth_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP2AndP3 Get MenuTrees via P1AndP2AndP3
func GetMenuTreesByP1AndP2AndP3(offset int, limit int, P1_ int, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p2 = ? and p3 = ?", P1_, P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP2AndP4 Get MenuTrees via P1AndP2AndP4
func GetMenuTreesByP1AndP2AndP4(offset int, limit int, P1_ int, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p2 = ? and p4 = ?", P1_, P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP2AndP5 Get MenuTrees via P1AndP2AndP5
func GetMenuTreesByP1AndP2AndP5(offset int, limit int, P1_ int, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p2 = ? and p5 = ?", P1_, P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP2AndP6 Get MenuTrees via P1AndP2AndP6
func GetMenuTreesByP1AndP2AndP6(offset int, limit int, P1_ int, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p2 = ? and p6 = ?", P1_, P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP2AndP7 Get MenuTrees via P1AndP2AndP7
func GetMenuTreesByP1AndP2AndP7(offset int, limit int, P1_ int, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p2 = ? and p7 = ?", P1_, P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP2AndP8 Get MenuTrees via P1AndP2AndP8
func GetMenuTreesByP1AndP2AndP8(offset int, limit int, P1_ int, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p2 = ? and p8 = ?", P1_, P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP2AndP9 Get MenuTrees via P1AndP2AndP9
func GetMenuTreesByP1AndP2AndP9(offset int, limit int, P1_ int, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p2 = ? and p9 = ?", P1_, P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP2AndFormClass Get MenuTrees via P1AndP2AndFormClass
func GetMenuTreesByP1AndP2AndFormClass(offset int, limit int, P1_ int, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p2 = ? and form_class = ?", P1_, P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP3AndP4 Get MenuTrees via P1AndP3AndP4
func GetMenuTreesByP1AndP3AndP4(offset int, limit int, P1_ int, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p3 = ? and p4 = ?", P1_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP3AndP5 Get MenuTrees via P1AndP3AndP5
func GetMenuTreesByP1AndP3AndP5(offset int, limit int, P1_ int, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p3 = ? and p5 = ?", P1_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP3AndP6 Get MenuTrees via P1AndP3AndP6
func GetMenuTreesByP1AndP3AndP6(offset int, limit int, P1_ int, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p3 = ? and p6 = ?", P1_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP3AndP7 Get MenuTrees via P1AndP3AndP7
func GetMenuTreesByP1AndP3AndP7(offset int, limit int, P1_ int, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p3 = ? and p7 = ?", P1_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP3AndP8 Get MenuTrees via P1AndP3AndP8
func GetMenuTreesByP1AndP3AndP8(offset int, limit int, P1_ int, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p3 = ? and p8 = ?", P1_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP3AndP9 Get MenuTrees via P1AndP3AndP9
func GetMenuTreesByP1AndP3AndP9(offset int, limit int, P1_ int, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p3 = ? and p9 = ?", P1_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP3AndFormClass Get MenuTrees via P1AndP3AndFormClass
func GetMenuTreesByP1AndP3AndFormClass(offset int, limit int, P1_ int, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p3 = ? and form_class = ?", P1_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP4AndP5 Get MenuTrees via P1AndP4AndP5
func GetMenuTreesByP1AndP4AndP5(offset int, limit int, P1_ int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p4 = ? and p5 = ?", P1_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP4AndP6 Get MenuTrees via P1AndP4AndP6
func GetMenuTreesByP1AndP4AndP6(offset int, limit int, P1_ int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p4 = ? and p6 = ?", P1_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP4AndP7 Get MenuTrees via P1AndP4AndP7
func GetMenuTreesByP1AndP4AndP7(offset int, limit int, P1_ int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p4 = ? and p7 = ?", P1_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP4AndP8 Get MenuTrees via P1AndP4AndP8
func GetMenuTreesByP1AndP4AndP8(offset int, limit int, P1_ int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p4 = ? and p8 = ?", P1_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP4AndP9 Get MenuTrees via P1AndP4AndP9
func GetMenuTreesByP1AndP4AndP9(offset int, limit int, P1_ int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p4 = ? and p9 = ?", P1_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP4AndFormClass Get MenuTrees via P1AndP4AndFormClass
func GetMenuTreesByP1AndP4AndFormClass(offset int, limit int, P1_ int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p4 = ? and form_class = ?", P1_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP5AndP6 Get MenuTrees via P1AndP5AndP6
func GetMenuTreesByP1AndP5AndP6(offset int, limit int, P1_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p5 = ? and p6 = ?", P1_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP5AndP7 Get MenuTrees via P1AndP5AndP7
func GetMenuTreesByP1AndP5AndP7(offset int, limit int, P1_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p5 = ? and p7 = ?", P1_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP5AndP8 Get MenuTrees via P1AndP5AndP8
func GetMenuTreesByP1AndP5AndP8(offset int, limit int, P1_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p5 = ? and p8 = ?", P1_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP5AndP9 Get MenuTrees via P1AndP5AndP9
func GetMenuTreesByP1AndP5AndP9(offset int, limit int, P1_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p5 = ? and p9 = ?", P1_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP5AndFormClass Get MenuTrees via P1AndP5AndFormClass
func GetMenuTreesByP1AndP5AndFormClass(offset int, limit int, P1_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p5 = ? and form_class = ?", P1_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP6AndP7 Get MenuTrees via P1AndP6AndP7
func GetMenuTreesByP1AndP6AndP7(offset int, limit int, P1_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p6 = ? and p7 = ?", P1_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP6AndP8 Get MenuTrees via P1AndP6AndP8
func GetMenuTreesByP1AndP6AndP8(offset int, limit int, P1_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p6 = ? and p8 = ?", P1_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP6AndP9 Get MenuTrees via P1AndP6AndP9
func GetMenuTreesByP1AndP6AndP9(offset int, limit int, P1_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p6 = ? and p9 = ?", P1_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP6AndFormClass Get MenuTrees via P1AndP6AndFormClass
func GetMenuTreesByP1AndP6AndFormClass(offset int, limit int, P1_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p6 = ? and form_class = ?", P1_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP7AndP8 Get MenuTrees via P1AndP7AndP8
func GetMenuTreesByP1AndP7AndP8(offset int, limit int, P1_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p7 = ? and p8 = ?", P1_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP7AndP9 Get MenuTrees via P1AndP7AndP9
func GetMenuTreesByP1AndP7AndP9(offset int, limit int, P1_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p7 = ? and p9 = ?", P1_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP7AndFormClass Get MenuTrees via P1AndP7AndFormClass
func GetMenuTreesByP1AndP7AndFormClass(offset int, limit int, P1_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p7 = ? and form_class = ?", P1_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP8AndP9 Get MenuTrees via P1AndP8AndP9
func GetMenuTreesByP1AndP8AndP9(offset int, limit int, P1_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p8 = ? and p9 = ?", P1_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP8AndFormClass Get MenuTrees via P1AndP8AndFormClass
func GetMenuTreesByP1AndP8AndFormClass(offset int, limit int, P1_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p8 = ? and form_class = ?", P1_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP9AndFormClass Get MenuTrees via P1AndP9AndFormClass
func GetMenuTreesByP1AndP9AndFormClass(offset int, limit int, P1_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p9 = ? and form_class = ?", P1_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP3AndP4 Get MenuTrees via P2AndP3AndP4
func GetMenuTreesByP2AndP3AndP4(offset int, limit int, P2_ int, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p3 = ? and p4 = ?", P2_, P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP3AndP5 Get MenuTrees via P2AndP3AndP5
func GetMenuTreesByP2AndP3AndP5(offset int, limit int, P2_ int, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p3 = ? and p5 = ?", P2_, P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP3AndP6 Get MenuTrees via P2AndP3AndP6
func GetMenuTreesByP2AndP3AndP6(offset int, limit int, P2_ int, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p3 = ? and p6 = ?", P2_, P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP3AndP7 Get MenuTrees via P2AndP3AndP7
func GetMenuTreesByP2AndP3AndP7(offset int, limit int, P2_ int, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p3 = ? and p7 = ?", P2_, P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP3AndP8 Get MenuTrees via P2AndP3AndP8
func GetMenuTreesByP2AndP3AndP8(offset int, limit int, P2_ int, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p3 = ? and p8 = ?", P2_, P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP3AndP9 Get MenuTrees via P2AndP3AndP9
func GetMenuTreesByP2AndP3AndP9(offset int, limit int, P2_ int, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p3 = ? and p9 = ?", P2_, P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP3AndFormClass Get MenuTrees via P2AndP3AndFormClass
func GetMenuTreesByP2AndP3AndFormClass(offset int, limit int, P2_ int, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p3 = ? and form_class = ?", P2_, P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP4AndP5 Get MenuTrees via P2AndP4AndP5
func GetMenuTreesByP2AndP4AndP5(offset int, limit int, P2_ int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p4 = ? and p5 = ?", P2_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP4AndP6 Get MenuTrees via P2AndP4AndP6
func GetMenuTreesByP2AndP4AndP6(offset int, limit int, P2_ int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p4 = ? and p6 = ?", P2_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP4AndP7 Get MenuTrees via P2AndP4AndP7
func GetMenuTreesByP2AndP4AndP7(offset int, limit int, P2_ int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p4 = ? and p7 = ?", P2_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP4AndP8 Get MenuTrees via P2AndP4AndP8
func GetMenuTreesByP2AndP4AndP8(offset int, limit int, P2_ int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p4 = ? and p8 = ?", P2_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP4AndP9 Get MenuTrees via P2AndP4AndP9
func GetMenuTreesByP2AndP4AndP9(offset int, limit int, P2_ int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p4 = ? and p9 = ?", P2_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP4AndFormClass Get MenuTrees via P2AndP4AndFormClass
func GetMenuTreesByP2AndP4AndFormClass(offset int, limit int, P2_ int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p4 = ? and form_class = ?", P2_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP5AndP6 Get MenuTrees via P2AndP5AndP6
func GetMenuTreesByP2AndP5AndP6(offset int, limit int, P2_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p5 = ? and p6 = ?", P2_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP5AndP7 Get MenuTrees via P2AndP5AndP7
func GetMenuTreesByP2AndP5AndP7(offset int, limit int, P2_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p5 = ? and p7 = ?", P2_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP5AndP8 Get MenuTrees via P2AndP5AndP8
func GetMenuTreesByP2AndP5AndP8(offset int, limit int, P2_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p5 = ? and p8 = ?", P2_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP5AndP9 Get MenuTrees via P2AndP5AndP9
func GetMenuTreesByP2AndP5AndP9(offset int, limit int, P2_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p5 = ? and p9 = ?", P2_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP5AndFormClass Get MenuTrees via P2AndP5AndFormClass
func GetMenuTreesByP2AndP5AndFormClass(offset int, limit int, P2_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p5 = ? and form_class = ?", P2_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP6AndP7 Get MenuTrees via P2AndP6AndP7
func GetMenuTreesByP2AndP6AndP7(offset int, limit int, P2_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p6 = ? and p7 = ?", P2_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP6AndP8 Get MenuTrees via P2AndP6AndP8
func GetMenuTreesByP2AndP6AndP8(offset int, limit int, P2_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p6 = ? and p8 = ?", P2_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP6AndP9 Get MenuTrees via P2AndP6AndP9
func GetMenuTreesByP2AndP6AndP9(offset int, limit int, P2_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p6 = ? and p9 = ?", P2_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP6AndFormClass Get MenuTrees via P2AndP6AndFormClass
func GetMenuTreesByP2AndP6AndFormClass(offset int, limit int, P2_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p6 = ? and form_class = ?", P2_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP7AndP8 Get MenuTrees via P2AndP7AndP8
func GetMenuTreesByP2AndP7AndP8(offset int, limit int, P2_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p7 = ? and p8 = ?", P2_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP7AndP9 Get MenuTrees via P2AndP7AndP9
func GetMenuTreesByP2AndP7AndP9(offset int, limit int, P2_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p7 = ? and p9 = ?", P2_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP7AndFormClass Get MenuTrees via P2AndP7AndFormClass
func GetMenuTreesByP2AndP7AndFormClass(offset int, limit int, P2_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p7 = ? and form_class = ?", P2_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP8AndP9 Get MenuTrees via P2AndP8AndP9
func GetMenuTreesByP2AndP8AndP9(offset int, limit int, P2_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p8 = ? and p9 = ?", P2_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP8AndFormClass Get MenuTrees via P2AndP8AndFormClass
func GetMenuTreesByP2AndP8AndFormClass(offset int, limit int, P2_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p8 = ? and form_class = ?", P2_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP9AndFormClass Get MenuTrees via P2AndP9AndFormClass
func GetMenuTreesByP2AndP9AndFormClass(offset int, limit int, P2_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p9 = ? and form_class = ?", P2_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP4AndP5 Get MenuTrees via P3AndP4AndP5
func GetMenuTreesByP3AndP4AndP5(offset int, limit int, P3_ int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p4 = ? and p5 = ?", P3_, P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP4AndP6 Get MenuTrees via P3AndP4AndP6
func GetMenuTreesByP3AndP4AndP6(offset int, limit int, P3_ int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p4 = ? and p6 = ?", P3_, P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP4AndP7 Get MenuTrees via P3AndP4AndP7
func GetMenuTreesByP3AndP4AndP7(offset int, limit int, P3_ int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p4 = ? and p7 = ?", P3_, P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP4AndP8 Get MenuTrees via P3AndP4AndP8
func GetMenuTreesByP3AndP4AndP8(offset int, limit int, P3_ int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p4 = ? and p8 = ?", P3_, P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP4AndP9 Get MenuTrees via P3AndP4AndP9
func GetMenuTreesByP3AndP4AndP9(offset int, limit int, P3_ int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p4 = ? and p9 = ?", P3_, P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP4AndFormClass Get MenuTrees via P3AndP4AndFormClass
func GetMenuTreesByP3AndP4AndFormClass(offset int, limit int, P3_ int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p4 = ? and form_class = ?", P3_, P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP5AndP6 Get MenuTrees via P3AndP5AndP6
func GetMenuTreesByP3AndP5AndP6(offset int, limit int, P3_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p5 = ? and p6 = ?", P3_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP5AndP7 Get MenuTrees via P3AndP5AndP7
func GetMenuTreesByP3AndP5AndP7(offset int, limit int, P3_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p5 = ? and p7 = ?", P3_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP5AndP8 Get MenuTrees via P3AndP5AndP8
func GetMenuTreesByP3AndP5AndP8(offset int, limit int, P3_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p5 = ? and p8 = ?", P3_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP5AndP9 Get MenuTrees via P3AndP5AndP9
func GetMenuTreesByP3AndP5AndP9(offset int, limit int, P3_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p5 = ? and p9 = ?", P3_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP5AndFormClass Get MenuTrees via P3AndP5AndFormClass
func GetMenuTreesByP3AndP5AndFormClass(offset int, limit int, P3_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p5 = ? and form_class = ?", P3_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP6AndP7 Get MenuTrees via P3AndP6AndP7
func GetMenuTreesByP3AndP6AndP7(offset int, limit int, P3_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p6 = ? and p7 = ?", P3_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP6AndP8 Get MenuTrees via P3AndP6AndP8
func GetMenuTreesByP3AndP6AndP8(offset int, limit int, P3_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p6 = ? and p8 = ?", P3_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP6AndP9 Get MenuTrees via P3AndP6AndP9
func GetMenuTreesByP3AndP6AndP9(offset int, limit int, P3_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p6 = ? and p9 = ?", P3_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP6AndFormClass Get MenuTrees via P3AndP6AndFormClass
func GetMenuTreesByP3AndP6AndFormClass(offset int, limit int, P3_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p6 = ? and form_class = ?", P3_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP7AndP8 Get MenuTrees via P3AndP7AndP8
func GetMenuTreesByP3AndP7AndP8(offset int, limit int, P3_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p7 = ? and p8 = ?", P3_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP7AndP9 Get MenuTrees via P3AndP7AndP9
func GetMenuTreesByP3AndP7AndP9(offset int, limit int, P3_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p7 = ? and p9 = ?", P3_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP7AndFormClass Get MenuTrees via P3AndP7AndFormClass
func GetMenuTreesByP3AndP7AndFormClass(offset int, limit int, P3_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p7 = ? and form_class = ?", P3_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP8AndP9 Get MenuTrees via P3AndP8AndP9
func GetMenuTreesByP3AndP8AndP9(offset int, limit int, P3_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p8 = ? and p9 = ?", P3_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP8AndFormClass Get MenuTrees via P3AndP8AndFormClass
func GetMenuTreesByP3AndP8AndFormClass(offset int, limit int, P3_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p8 = ? and form_class = ?", P3_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP9AndFormClass Get MenuTrees via P3AndP9AndFormClass
func GetMenuTreesByP3AndP9AndFormClass(offset int, limit int, P3_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p9 = ? and form_class = ?", P3_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP5AndP6 Get MenuTrees via P4AndP5AndP6
func GetMenuTreesByP4AndP5AndP6(offset int, limit int, P4_ int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p5 = ? and p6 = ?", P4_, P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP5AndP7 Get MenuTrees via P4AndP5AndP7
func GetMenuTreesByP4AndP5AndP7(offset int, limit int, P4_ int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p5 = ? and p7 = ?", P4_, P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP5AndP8 Get MenuTrees via P4AndP5AndP8
func GetMenuTreesByP4AndP5AndP8(offset int, limit int, P4_ int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p5 = ? and p8 = ?", P4_, P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP5AndP9 Get MenuTrees via P4AndP5AndP9
func GetMenuTreesByP4AndP5AndP9(offset int, limit int, P4_ int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p5 = ? and p9 = ?", P4_, P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP5AndFormClass Get MenuTrees via P4AndP5AndFormClass
func GetMenuTreesByP4AndP5AndFormClass(offset int, limit int, P4_ int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p5 = ? and form_class = ?", P4_, P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP6AndP7 Get MenuTrees via P4AndP6AndP7
func GetMenuTreesByP4AndP6AndP7(offset int, limit int, P4_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p6 = ? and p7 = ?", P4_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP6AndP8 Get MenuTrees via P4AndP6AndP8
func GetMenuTreesByP4AndP6AndP8(offset int, limit int, P4_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p6 = ? and p8 = ?", P4_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP6AndP9 Get MenuTrees via P4AndP6AndP9
func GetMenuTreesByP4AndP6AndP9(offset int, limit int, P4_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p6 = ? and p9 = ?", P4_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP6AndFormClass Get MenuTrees via P4AndP6AndFormClass
func GetMenuTreesByP4AndP6AndFormClass(offset int, limit int, P4_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p6 = ? and form_class = ?", P4_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP7AndP8 Get MenuTrees via P4AndP7AndP8
func GetMenuTreesByP4AndP7AndP8(offset int, limit int, P4_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p7 = ? and p8 = ?", P4_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP7AndP9 Get MenuTrees via P4AndP7AndP9
func GetMenuTreesByP4AndP7AndP9(offset int, limit int, P4_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p7 = ? and p9 = ?", P4_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP7AndFormClass Get MenuTrees via P4AndP7AndFormClass
func GetMenuTreesByP4AndP7AndFormClass(offset int, limit int, P4_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p7 = ? and form_class = ?", P4_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP8AndP9 Get MenuTrees via P4AndP8AndP9
func GetMenuTreesByP4AndP8AndP9(offset int, limit int, P4_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p8 = ? and p9 = ?", P4_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP8AndFormClass Get MenuTrees via P4AndP8AndFormClass
func GetMenuTreesByP4AndP8AndFormClass(offset int, limit int, P4_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p8 = ? and form_class = ?", P4_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP9AndFormClass Get MenuTrees via P4AndP9AndFormClass
func GetMenuTreesByP4AndP9AndFormClass(offset int, limit int, P4_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p9 = ? and form_class = ?", P4_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP6AndP7 Get MenuTrees via P5AndP6AndP7
func GetMenuTreesByP5AndP6AndP7(offset int, limit int, P5_ int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p6 = ? and p7 = ?", P5_, P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP6AndP8 Get MenuTrees via P5AndP6AndP8
func GetMenuTreesByP5AndP6AndP8(offset int, limit int, P5_ int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p6 = ? and p8 = ?", P5_, P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP6AndP9 Get MenuTrees via P5AndP6AndP9
func GetMenuTreesByP5AndP6AndP9(offset int, limit int, P5_ int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p6 = ? and p9 = ?", P5_, P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP6AndFormClass Get MenuTrees via P5AndP6AndFormClass
func GetMenuTreesByP5AndP6AndFormClass(offset int, limit int, P5_ int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p6 = ? and form_class = ?", P5_, P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP7AndP8 Get MenuTrees via P5AndP7AndP8
func GetMenuTreesByP5AndP7AndP8(offset int, limit int, P5_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p7 = ? and p8 = ?", P5_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP7AndP9 Get MenuTrees via P5AndP7AndP9
func GetMenuTreesByP5AndP7AndP9(offset int, limit int, P5_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p7 = ? and p9 = ?", P5_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP7AndFormClass Get MenuTrees via P5AndP7AndFormClass
func GetMenuTreesByP5AndP7AndFormClass(offset int, limit int, P5_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p7 = ? and form_class = ?", P5_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP8AndP9 Get MenuTrees via P5AndP8AndP9
func GetMenuTreesByP5AndP8AndP9(offset int, limit int, P5_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p8 = ? and p9 = ?", P5_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP8AndFormClass Get MenuTrees via P5AndP8AndFormClass
func GetMenuTreesByP5AndP8AndFormClass(offset int, limit int, P5_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p8 = ? and form_class = ?", P5_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP9AndFormClass Get MenuTrees via P5AndP9AndFormClass
func GetMenuTreesByP5AndP9AndFormClass(offset int, limit int, P5_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p9 = ? and form_class = ?", P5_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP6AndP7AndP8 Get MenuTrees via P6AndP7AndP8
func GetMenuTreesByP6AndP7AndP8(offset int, limit int, P6_ int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ? and p7 = ? and p8 = ?", P6_, P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP6AndP7AndP9 Get MenuTrees via P6AndP7AndP9
func GetMenuTreesByP6AndP7AndP9(offset int, limit int, P6_ int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ? and p7 = ? and p9 = ?", P6_, P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP6AndP7AndFormClass Get MenuTrees via P6AndP7AndFormClass
func GetMenuTreesByP6AndP7AndFormClass(offset int, limit int, P6_ int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ? and p7 = ? and form_class = ?", P6_, P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP6AndP8AndP9 Get MenuTrees via P6AndP8AndP9
func GetMenuTreesByP6AndP8AndP9(offset int, limit int, P6_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ? and p8 = ? and p9 = ?", P6_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP6AndP8AndFormClass Get MenuTrees via P6AndP8AndFormClass
func GetMenuTreesByP6AndP8AndFormClass(offset int, limit int, P6_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ? and p8 = ? and form_class = ?", P6_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP6AndP9AndFormClass Get MenuTrees via P6AndP9AndFormClass
func GetMenuTreesByP6AndP9AndFormClass(offset int, limit int, P6_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ? and p9 = ? and form_class = ?", P6_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP7AndP8AndP9 Get MenuTrees via P7AndP8AndP9
func GetMenuTreesByP7AndP8AndP9(offset int, limit int, P7_ int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p7 = ? and p8 = ? and p9 = ?", P7_, P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP7AndP8AndFormClass Get MenuTrees via P7AndP8AndFormClass
func GetMenuTreesByP7AndP8AndFormClass(offset int, limit int, P7_ int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p7 = ? and p8 = ? and form_class = ?", P7_, P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP7AndP9AndFormClass Get MenuTrees via P7AndP9AndFormClass
func GetMenuTreesByP7AndP9AndFormClass(offset int, limit int, P7_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p7 = ? and p9 = ? and form_class = ?", P7_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP8AndP9AndFormClass Get MenuTrees via P8AndP9AndFormClass
func GetMenuTreesByP8AndP9AndFormClass(offset int, limit int, P8_ int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p8 = ? and p9 = ? and form_class = ?", P8_, P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMlid Get MenuTrees via MenuNameAndMlid
func GetMenuTreesByMenuNameAndMlid(offset int, limit int, MenuName_ string, Mlid_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and mlid = ?", MenuName_, Mlid_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndId Get MenuTrees via MenuNameAndId
func GetMenuTreesByMenuNameAndId(offset int, limit int, MenuName_ string, Id_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and id = ?", MenuName_, Id_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndParent Get MenuTrees via MenuNameAndParent
func GetMenuTreesByMenuNameAndParent(offset int, limit int, MenuName_ string, Parent_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and parent = ?", MenuName_, Parent_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteName Get MenuTrees via MenuNameAndRouteName
func GetMenuTreesByMenuNameAndRouteName(offset int, limit int, MenuName_ string, RouteName_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_name = ?", MenuName_, RouteName_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParamKey Get MenuTrees via MenuNameAndRouteParamKey
func GetMenuTreesByMenuNameAndRouteParamKey(offset int, limit int, MenuName_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_param_key = ?", MenuName_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndRouteParameters Get MenuTrees via MenuNameAndRouteParameters
func GetMenuTreesByMenuNameAndRouteParameters(offset int, limit int, MenuName_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and route_parameters = ?", MenuName_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndUrl Get MenuTrees via MenuNameAndUrl
func GetMenuTreesByMenuNameAndUrl(offset int, limit int, MenuName_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and url = ?", MenuName_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndTitle Get MenuTrees via MenuNameAndTitle
func GetMenuTreesByMenuNameAndTitle(offset int, limit int, MenuName_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and title = ?", MenuName_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDescription Get MenuTrees via MenuNameAndDescription
func GetMenuTreesByMenuNameAndDescription(offset int, limit int, MenuName_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and description = ?", MenuName_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndClass Get MenuTrees via MenuNameAndClass
func GetMenuTreesByMenuNameAndClass(offset int, limit int, MenuName_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and class = ?", MenuName_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndOptions Get MenuTrees via MenuNameAndOptions
func GetMenuTreesByMenuNameAndOptions(offset int, limit int, MenuName_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and options = ?", MenuName_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndProvider Get MenuTrees via MenuNameAndProvider
func GetMenuTreesByMenuNameAndProvider(offset int, limit int, MenuName_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and provider = ?", MenuName_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndEnabled Get MenuTrees via MenuNameAndEnabled
func GetMenuTreesByMenuNameAndEnabled(offset int, limit int, MenuName_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and enabled = ?", MenuName_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDiscovered Get MenuTrees via MenuNameAndDiscovered
func GetMenuTreesByMenuNameAndDiscovered(offset int, limit int, MenuName_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and discovered = ?", MenuName_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndExpanded Get MenuTrees via MenuNameAndExpanded
func GetMenuTreesByMenuNameAndExpanded(offset int, limit int, MenuName_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and expanded = ?", MenuName_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndWeight Get MenuTrees via MenuNameAndWeight
func GetMenuTreesByMenuNameAndWeight(offset int, limit int, MenuName_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and weight = ?", MenuName_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndMetadata Get MenuTrees via MenuNameAndMetadata
func GetMenuTreesByMenuNameAndMetadata(offset int, limit int, MenuName_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and metadata = ?", MenuName_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndHasChildren Get MenuTrees via MenuNameAndHasChildren
func GetMenuTreesByMenuNameAndHasChildren(offset int, limit int, MenuName_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and has_children = ?", MenuName_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndDepth Get MenuTrees via MenuNameAndDepth
func GetMenuTreesByMenuNameAndDepth(offset int, limit int, MenuName_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and depth = ?", MenuName_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP1 Get MenuTrees via MenuNameAndP1
func GetMenuTreesByMenuNameAndP1(offset int, limit int, MenuName_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p1 = ?", MenuName_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP2 Get MenuTrees via MenuNameAndP2
func GetMenuTreesByMenuNameAndP2(offset int, limit int, MenuName_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p2 = ?", MenuName_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP3 Get MenuTrees via MenuNameAndP3
func GetMenuTreesByMenuNameAndP3(offset int, limit int, MenuName_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p3 = ?", MenuName_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP4 Get MenuTrees via MenuNameAndP4
func GetMenuTreesByMenuNameAndP4(offset int, limit int, MenuName_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p4 = ?", MenuName_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP5 Get MenuTrees via MenuNameAndP5
func GetMenuTreesByMenuNameAndP5(offset int, limit int, MenuName_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p5 = ?", MenuName_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP6 Get MenuTrees via MenuNameAndP6
func GetMenuTreesByMenuNameAndP6(offset int, limit int, MenuName_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p6 = ?", MenuName_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP7 Get MenuTrees via MenuNameAndP7
func GetMenuTreesByMenuNameAndP7(offset int, limit int, MenuName_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p7 = ?", MenuName_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP8 Get MenuTrees via MenuNameAndP8
func GetMenuTreesByMenuNameAndP8(offset int, limit int, MenuName_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p8 = ?", MenuName_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndP9 Get MenuTrees via MenuNameAndP9
func GetMenuTreesByMenuNameAndP9(offset int, limit int, MenuName_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and p9 = ?", MenuName_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMenuNameAndFormClass Get MenuTrees via MenuNameAndFormClass
func GetMenuTreesByMenuNameAndFormClass(offset int, limit int, MenuName_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ? and form_class = ?", MenuName_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndId Get MenuTrees via MlidAndId
func GetMenuTreesByMlidAndId(offset int, limit int, Mlid_ int, Id_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and id = ?", Mlid_, Id_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndParent Get MenuTrees via MlidAndParent
func GetMenuTreesByMlidAndParent(offset int, limit int, Mlid_ int, Parent_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and parent = ?", Mlid_, Parent_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteName Get MenuTrees via MlidAndRouteName
func GetMenuTreesByMlidAndRouteName(offset int, limit int, Mlid_ int, RouteName_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_name = ?", Mlid_, RouteName_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParamKey Get MenuTrees via MlidAndRouteParamKey
func GetMenuTreesByMlidAndRouteParamKey(offset int, limit int, Mlid_ int, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_param_key = ?", Mlid_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndRouteParameters Get MenuTrees via MlidAndRouteParameters
func GetMenuTreesByMlidAndRouteParameters(offset int, limit int, Mlid_ int, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and route_parameters = ?", Mlid_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndUrl Get MenuTrees via MlidAndUrl
func GetMenuTreesByMlidAndUrl(offset int, limit int, Mlid_ int, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and url = ?", Mlid_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndTitle Get MenuTrees via MlidAndTitle
func GetMenuTreesByMlidAndTitle(offset int, limit int, Mlid_ int, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and title = ?", Mlid_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDescription Get MenuTrees via MlidAndDescription
func GetMenuTreesByMlidAndDescription(offset int, limit int, Mlid_ int, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and description = ?", Mlid_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndClass Get MenuTrees via MlidAndClass
func GetMenuTreesByMlidAndClass(offset int, limit int, Mlid_ int, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and class = ?", Mlid_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndOptions Get MenuTrees via MlidAndOptions
func GetMenuTreesByMlidAndOptions(offset int, limit int, Mlid_ int, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and options = ?", Mlid_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndProvider Get MenuTrees via MlidAndProvider
func GetMenuTreesByMlidAndProvider(offset int, limit int, Mlid_ int, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and provider = ?", Mlid_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndEnabled Get MenuTrees via MlidAndEnabled
func GetMenuTreesByMlidAndEnabled(offset int, limit int, Mlid_ int, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and enabled = ?", Mlid_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDiscovered Get MenuTrees via MlidAndDiscovered
func GetMenuTreesByMlidAndDiscovered(offset int, limit int, Mlid_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and discovered = ?", Mlid_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndExpanded Get MenuTrees via MlidAndExpanded
func GetMenuTreesByMlidAndExpanded(offset int, limit int, Mlid_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and expanded = ?", Mlid_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndWeight Get MenuTrees via MlidAndWeight
func GetMenuTreesByMlidAndWeight(offset int, limit int, Mlid_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and weight = ?", Mlid_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndMetadata Get MenuTrees via MlidAndMetadata
func GetMenuTreesByMlidAndMetadata(offset int, limit int, Mlid_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and metadata = ?", Mlid_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndHasChildren Get MenuTrees via MlidAndHasChildren
func GetMenuTreesByMlidAndHasChildren(offset int, limit int, Mlid_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and has_children = ?", Mlid_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndDepth Get MenuTrees via MlidAndDepth
func GetMenuTreesByMlidAndDepth(offset int, limit int, Mlid_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and depth = ?", Mlid_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP1 Get MenuTrees via MlidAndP1
func GetMenuTreesByMlidAndP1(offset int, limit int, Mlid_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p1 = ?", Mlid_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP2 Get MenuTrees via MlidAndP2
func GetMenuTreesByMlidAndP2(offset int, limit int, Mlid_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p2 = ?", Mlid_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP3 Get MenuTrees via MlidAndP3
func GetMenuTreesByMlidAndP3(offset int, limit int, Mlid_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p3 = ?", Mlid_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP4 Get MenuTrees via MlidAndP4
func GetMenuTreesByMlidAndP4(offset int, limit int, Mlid_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p4 = ?", Mlid_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP5 Get MenuTrees via MlidAndP5
func GetMenuTreesByMlidAndP5(offset int, limit int, Mlid_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p5 = ?", Mlid_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP6 Get MenuTrees via MlidAndP6
func GetMenuTreesByMlidAndP6(offset int, limit int, Mlid_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p6 = ?", Mlid_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP7 Get MenuTrees via MlidAndP7
func GetMenuTreesByMlidAndP7(offset int, limit int, Mlid_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p7 = ?", Mlid_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP8 Get MenuTrees via MlidAndP8
func GetMenuTreesByMlidAndP8(offset int, limit int, Mlid_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p8 = ?", Mlid_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndP9 Get MenuTrees via MlidAndP9
func GetMenuTreesByMlidAndP9(offset int, limit int, Mlid_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and p9 = ?", Mlid_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMlidAndFormClass Get MenuTrees via MlidAndFormClass
func GetMenuTreesByMlidAndFormClass(offset int, limit int, Mlid_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ? and form_class = ?", Mlid_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndParent Get MenuTrees via IdAndParent
func GetMenuTreesByIdAndParent(offset int, limit int, Id_ string, Parent_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and parent = ?", Id_, Parent_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteName Get MenuTrees via IdAndRouteName
func GetMenuTreesByIdAndRouteName(offset int, limit int, Id_ string, RouteName_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_name = ?", Id_, RouteName_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParamKey Get MenuTrees via IdAndRouteParamKey
func GetMenuTreesByIdAndRouteParamKey(offset int, limit int, Id_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_param_key = ?", Id_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndRouteParameters Get MenuTrees via IdAndRouteParameters
func GetMenuTreesByIdAndRouteParameters(offset int, limit int, Id_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and route_parameters = ?", Id_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndUrl Get MenuTrees via IdAndUrl
func GetMenuTreesByIdAndUrl(offset int, limit int, Id_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and url = ?", Id_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndTitle Get MenuTrees via IdAndTitle
func GetMenuTreesByIdAndTitle(offset int, limit int, Id_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and title = ?", Id_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDescription Get MenuTrees via IdAndDescription
func GetMenuTreesByIdAndDescription(offset int, limit int, Id_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and description = ?", Id_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndClass Get MenuTrees via IdAndClass
func GetMenuTreesByIdAndClass(offset int, limit int, Id_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and class = ?", Id_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndOptions Get MenuTrees via IdAndOptions
func GetMenuTreesByIdAndOptions(offset int, limit int, Id_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and options = ?", Id_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndProvider Get MenuTrees via IdAndProvider
func GetMenuTreesByIdAndProvider(offset int, limit int, Id_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and provider = ?", Id_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndEnabled Get MenuTrees via IdAndEnabled
func GetMenuTreesByIdAndEnabled(offset int, limit int, Id_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and enabled = ?", Id_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDiscovered Get MenuTrees via IdAndDiscovered
func GetMenuTreesByIdAndDiscovered(offset int, limit int, Id_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and discovered = ?", Id_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndExpanded Get MenuTrees via IdAndExpanded
func GetMenuTreesByIdAndExpanded(offset int, limit int, Id_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and expanded = ?", Id_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndWeight Get MenuTrees via IdAndWeight
func GetMenuTreesByIdAndWeight(offset int, limit int, Id_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and weight = ?", Id_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndMetadata Get MenuTrees via IdAndMetadata
func GetMenuTreesByIdAndMetadata(offset int, limit int, Id_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and metadata = ?", Id_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndHasChildren Get MenuTrees via IdAndHasChildren
func GetMenuTreesByIdAndHasChildren(offset int, limit int, Id_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and has_children = ?", Id_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndDepth Get MenuTrees via IdAndDepth
func GetMenuTreesByIdAndDepth(offset int, limit int, Id_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and depth = ?", Id_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP1 Get MenuTrees via IdAndP1
func GetMenuTreesByIdAndP1(offset int, limit int, Id_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p1 = ?", Id_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP2 Get MenuTrees via IdAndP2
func GetMenuTreesByIdAndP2(offset int, limit int, Id_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p2 = ?", Id_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP3 Get MenuTrees via IdAndP3
func GetMenuTreesByIdAndP3(offset int, limit int, Id_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p3 = ?", Id_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP4 Get MenuTrees via IdAndP4
func GetMenuTreesByIdAndP4(offset int, limit int, Id_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p4 = ?", Id_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP5 Get MenuTrees via IdAndP5
func GetMenuTreesByIdAndP5(offset int, limit int, Id_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p5 = ?", Id_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP6 Get MenuTrees via IdAndP6
func GetMenuTreesByIdAndP6(offset int, limit int, Id_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p6 = ?", Id_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP7 Get MenuTrees via IdAndP7
func GetMenuTreesByIdAndP7(offset int, limit int, Id_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p7 = ?", Id_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP8 Get MenuTrees via IdAndP8
func GetMenuTreesByIdAndP8(offset int, limit int, Id_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p8 = ?", Id_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndP9 Get MenuTrees via IdAndP9
func GetMenuTreesByIdAndP9(offset int, limit int, Id_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and p9 = ?", Id_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByIdAndFormClass Get MenuTrees via IdAndFormClass
func GetMenuTreesByIdAndFormClass(offset int, limit int, Id_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ? and form_class = ?", Id_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteName Get MenuTrees via ParentAndRouteName
func GetMenuTreesByParentAndRouteName(offset int, limit int, Parent_ string, RouteName_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_name = ?", Parent_, RouteName_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParamKey Get MenuTrees via ParentAndRouteParamKey
func GetMenuTreesByParentAndRouteParamKey(offset int, limit int, Parent_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_param_key = ?", Parent_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndRouteParameters Get MenuTrees via ParentAndRouteParameters
func GetMenuTreesByParentAndRouteParameters(offset int, limit int, Parent_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and route_parameters = ?", Parent_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndUrl Get MenuTrees via ParentAndUrl
func GetMenuTreesByParentAndUrl(offset int, limit int, Parent_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and url = ?", Parent_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndTitle Get MenuTrees via ParentAndTitle
func GetMenuTreesByParentAndTitle(offset int, limit int, Parent_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and title = ?", Parent_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDescription Get MenuTrees via ParentAndDescription
func GetMenuTreesByParentAndDescription(offset int, limit int, Parent_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and description = ?", Parent_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndClass Get MenuTrees via ParentAndClass
func GetMenuTreesByParentAndClass(offset int, limit int, Parent_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and class = ?", Parent_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndOptions Get MenuTrees via ParentAndOptions
func GetMenuTreesByParentAndOptions(offset int, limit int, Parent_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and options = ?", Parent_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndProvider Get MenuTrees via ParentAndProvider
func GetMenuTreesByParentAndProvider(offset int, limit int, Parent_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and provider = ?", Parent_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndEnabled Get MenuTrees via ParentAndEnabled
func GetMenuTreesByParentAndEnabled(offset int, limit int, Parent_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and enabled = ?", Parent_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDiscovered Get MenuTrees via ParentAndDiscovered
func GetMenuTreesByParentAndDiscovered(offset int, limit int, Parent_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and discovered = ?", Parent_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndExpanded Get MenuTrees via ParentAndExpanded
func GetMenuTreesByParentAndExpanded(offset int, limit int, Parent_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and expanded = ?", Parent_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndWeight Get MenuTrees via ParentAndWeight
func GetMenuTreesByParentAndWeight(offset int, limit int, Parent_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and weight = ?", Parent_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndMetadata Get MenuTrees via ParentAndMetadata
func GetMenuTreesByParentAndMetadata(offset int, limit int, Parent_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and metadata = ?", Parent_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndHasChildren Get MenuTrees via ParentAndHasChildren
func GetMenuTreesByParentAndHasChildren(offset int, limit int, Parent_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and has_children = ?", Parent_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndDepth Get MenuTrees via ParentAndDepth
func GetMenuTreesByParentAndDepth(offset int, limit int, Parent_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and depth = ?", Parent_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP1 Get MenuTrees via ParentAndP1
func GetMenuTreesByParentAndP1(offset int, limit int, Parent_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p1 = ?", Parent_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP2 Get MenuTrees via ParentAndP2
func GetMenuTreesByParentAndP2(offset int, limit int, Parent_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p2 = ?", Parent_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP3 Get MenuTrees via ParentAndP3
func GetMenuTreesByParentAndP3(offset int, limit int, Parent_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p3 = ?", Parent_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP4 Get MenuTrees via ParentAndP4
func GetMenuTreesByParentAndP4(offset int, limit int, Parent_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p4 = ?", Parent_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP5 Get MenuTrees via ParentAndP5
func GetMenuTreesByParentAndP5(offset int, limit int, Parent_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p5 = ?", Parent_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP6 Get MenuTrees via ParentAndP6
func GetMenuTreesByParentAndP6(offset int, limit int, Parent_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p6 = ?", Parent_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP7 Get MenuTrees via ParentAndP7
func GetMenuTreesByParentAndP7(offset int, limit int, Parent_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p7 = ?", Parent_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP8 Get MenuTrees via ParentAndP8
func GetMenuTreesByParentAndP8(offset int, limit int, Parent_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p8 = ?", Parent_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndP9 Get MenuTrees via ParentAndP9
func GetMenuTreesByParentAndP9(offset int, limit int, Parent_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and p9 = ?", Parent_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByParentAndFormClass Get MenuTrees via ParentAndFormClass
func GetMenuTreesByParentAndFormClass(offset int, limit int, Parent_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ? and form_class = ?", Parent_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParamKey Get MenuTrees via RouteNameAndRouteParamKey
func GetMenuTreesByRouteNameAndRouteParamKey(offset int, limit int, RouteName_ string, RouteParamKey_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_param_key = ?", RouteName_, RouteParamKey_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndRouteParameters Get MenuTrees via RouteNameAndRouteParameters
func GetMenuTreesByRouteNameAndRouteParameters(offset int, limit int, RouteName_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and route_parameters = ?", RouteName_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndUrl Get MenuTrees via RouteNameAndUrl
func GetMenuTreesByRouteNameAndUrl(offset int, limit int, RouteName_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and url = ?", RouteName_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndTitle Get MenuTrees via RouteNameAndTitle
func GetMenuTreesByRouteNameAndTitle(offset int, limit int, RouteName_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and title = ?", RouteName_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDescription Get MenuTrees via RouteNameAndDescription
func GetMenuTreesByRouteNameAndDescription(offset int, limit int, RouteName_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and description = ?", RouteName_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndClass Get MenuTrees via RouteNameAndClass
func GetMenuTreesByRouteNameAndClass(offset int, limit int, RouteName_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and class = ?", RouteName_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndOptions Get MenuTrees via RouteNameAndOptions
func GetMenuTreesByRouteNameAndOptions(offset int, limit int, RouteName_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and options = ?", RouteName_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndProvider Get MenuTrees via RouteNameAndProvider
func GetMenuTreesByRouteNameAndProvider(offset int, limit int, RouteName_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and provider = ?", RouteName_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndEnabled Get MenuTrees via RouteNameAndEnabled
func GetMenuTreesByRouteNameAndEnabled(offset int, limit int, RouteName_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and enabled = ?", RouteName_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDiscovered Get MenuTrees via RouteNameAndDiscovered
func GetMenuTreesByRouteNameAndDiscovered(offset int, limit int, RouteName_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and discovered = ?", RouteName_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndExpanded Get MenuTrees via RouteNameAndExpanded
func GetMenuTreesByRouteNameAndExpanded(offset int, limit int, RouteName_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and expanded = ?", RouteName_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndWeight Get MenuTrees via RouteNameAndWeight
func GetMenuTreesByRouteNameAndWeight(offset int, limit int, RouteName_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and weight = ?", RouteName_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndMetadata Get MenuTrees via RouteNameAndMetadata
func GetMenuTreesByRouteNameAndMetadata(offset int, limit int, RouteName_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and metadata = ?", RouteName_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndHasChildren Get MenuTrees via RouteNameAndHasChildren
func GetMenuTreesByRouteNameAndHasChildren(offset int, limit int, RouteName_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and has_children = ?", RouteName_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndDepth Get MenuTrees via RouteNameAndDepth
func GetMenuTreesByRouteNameAndDepth(offset int, limit int, RouteName_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and depth = ?", RouteName_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP1 Get MenuTrees via RouteNameAndP1
func GetMenuTreesByRouteNameAndP1(offset int, limit int, RouteName_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p1 = ?", RouteName_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP2 Get MenuTrees via RouteNameAndP2
func GetMenuTreesByRouteNameAndP2(offset int, limit int, RouteName_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p2 = ?", RouteName_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP3 Get MenuTrees via RouteNameAndP3
func GetMenuTreesByRouteNameAndP3(offset int, limit int, RouteName_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p3 = ?", RouteName_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP4 Get MenuTrees via RouteNameAndP4
func GetMenuTreesByRouteNameAndP4(offset int, limit int, RouteName_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p4 = ?", RouteName_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP5 Get MenuTrees via RouteNameAndP5
func GetMenuTreesByRouteNameAndP5(offset int, limit int, RouteName_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p5 = ?", RouteName_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP6 Get MenuTrees via RouteNameAndP6
func GetMenuTreesByRouteNameAndP6(offset int, limit int, RouteName_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p6 = ?", RouteName_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP7 Get MenuTrees via RouteNameAndP7
func GetMenuTreesByRouteNameAndP7(offset int, limit int, RouteName_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p7 = ?", RouteName_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP8 Get MenuTrees via RouteNameAndP8
func GetMenuTreesByRouteNameAndP8(offset int, limit int, RouteName_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p8 = ?", RouteName_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndP9 Get MenuTrees via RouteNameAndP9
func GetMenuTreesByRouteNameAndP9(offset int, limit int, RouteName_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and p9 = ?", RouteName_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteNameAndFormClass Get MenuTrees via RouteNameAndFormClass
func GetMenuTreesByRouteNameAndFormClass(offset int, limit int, RouteName_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ? and form_class = ?", RouteName_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndRouteParameters Get MenuTrees via RouteParamKeyAndRouteParameters
func GetMenuTreesByRouteParamKeyAndRouteParameters(offset int, limit int, RouteParamKey_ string, RouteParameters_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and route_parameters = ?", RouteParamKey_, RouteParameters_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndUrl Get MenuTrees via RouteParamKeyAndUrl
func GetMenuTreesByRouteParamKeyAndUrl(offset int, limit int, RouteParamKey_ string, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and url = ?", RouteParamKey_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndTitle Get MenuTrees via RouteParamKeyAndTitle
func GetMenuTreesByRouteParamKeyAndTitle(offset int, limit int, RouteParamKey_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and title = ?", RouteParamKey_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDescription Get MenuTrees via RouteParamKeyAndDescription
func GetMenuTreesByRouteParamKeyAndDescription(offset int, limit int, RouteParamKey_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and description = ?", RouteParamKey_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndClass Get MenuTrees via RouteParamKeyAndClass
func GetMenuTreesByRouteParamKeyAndClass(offset int, limit int, RouteParamKey_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and class = ?", RouteParamKey_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndOptions Get MenuTrees via RouteParamKeyAndOptions
func GetMenuTreesByRouteParamKeyAndOptions(offset int, limit int, RouteParamKey_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and options = ?", RouteParamKey_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndProvider Get MenuTrees via RouteParamKeyAndProvider
func GetMenuTreesByRouteParamKeyAndProvider(offset int, limit int, RouteParamKey_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and provider = ?", RouteParamKey_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndEnabled Get MenuTrees via RouteParamKeyAndEnabled
func GetMenuTreesByRouteParamKeyAndEnabled(offset int, limit int, RouteParamKey_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and enabled = ?", RouteParamKey_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDiscovered Get MenuTrees via RouteParamKeyAndDiscovered
func GetMenuTreesByRouteParamKeyAndDiscovered(offset int, limit int, RouteParamKey_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and discovered = ?", RouteParamKey_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndExpanded Get MenuTrees via RouteParamKeyAndExpanded
func GetMenuTreesByRouteParamKeyAndExpanded(offset int, limit int, RouteParamKey_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and expanded = ?", RouteParamKey_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndWeight Get MenuTrees via RouteParamKeyAndWeight
func GetMenuTreesByRouteParamKeyAndWeight(offset int, limit int, RouteParamKey_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and weight = ?", RouteParamKey_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndMetadata Get MenuTrees via RouteParamKeyAndMetadata
func GetMenuTreesByRouteParamKeyAndMetadata(offset int, limit int, RouteParamKey_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and metadata = ?", RouteParamKey_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndHasChildren Get MenuTrees via RouteParamKeyAndHasChildren
func GetMenuTreesByRouteParamKeyAndHasChildren(offset int, limit int, RouteParamKey_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and has_children = ?", RouteParamKey_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndDepth Get MenuTrees via RouteParamKeyAndDepth
func GetMenuTreesByRouteParamKeyAndDepth(offset int, limit int, RouteParamKey_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and depth = ?", RouteParamKey_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP1 Get MenuTrees via RouteParamKeyAndP1
func GetMenuTreesByRouteParamKeyAndP1(offset int, limit int, RouteParamKey_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p1 = ?", RouteParamKey_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP2 Get MenuTrees via RouteParamKeyAndP2
func GetMenuTreesByRouteParamKeyAndP2(offset int, limit int, RouteParamKey_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p2 = ?", RouteParamKey_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP3 Get MenuTrees via RouteParamKeyAndP3
func GetMenuTreesByRouteParamKeyAndP3(offset int, limit int, RouteParamKey_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p3 = ?", RouteParamKey_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP4 Get MenuTrees via RouteParamKeyAndP4
func GetMenuTreesByRouteParamKeyAndP4(offset int, limit int, RouteParamKey_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p4 = ?", RouteParamKey_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP5 Get MenuTrees via RouteParamKeyAndP5
func GetMenuTreesByRouteParamKeyAndP5(offset int, limit int, RouteParamKey_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p5 = ?", RouteParamKey_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP6 Get MenuTrees via RouteParamKeyAndP6
func GetMenuTreesByRouteParamKeyAndP6(offset int, limit int, RouteParamKey_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p6 = ?", RouteParamKey_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP7 Get MenuTrees via RouteParamKeyAndP7
func GetMenuTreesByRouteParamKeyAndP7(offset int, limit int, RouteParamKey_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p7 = ?", RouteParamKey_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP8 Get MenuTrees via RouteParamKeyAndP8
func GetMenuTreesByRouteParamKeyAndP8(offset int, limit int, RouteParamKey_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p8 = ?", RouteParamKey_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndP9 Get MenuTrees via RouteParamKeyAndP9
func GetMenuTreesByRouteParamKeyAndP9(offset int, limit int, RouteParamKey_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and p9 = ?", RouteParamKey_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParamKeyAndFormClass Get MenuTrees via RouteParamKeyAndFormClass
func GetMenuTreesByRouteParamKeyAndFormClass(offset int, limit int, RouteParamKey_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ? and form_class = ?", RouteParamKey_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndUrl Get MenuTrees via RouteParametersAndUrl
func GetMenuTreesByRouteParametersAndUrl(offset int, limit int, RouteParameters_ []byte, Url_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and url = ?", RouteParameters_, Url_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndTitle Get MenuTrees via RouteParametersAndTitle
func GetMenuTreesByRouteParametersAndTitle(offset int, limit int, RouteParameters_ []byte, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and title = ?", RouteParameters_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDescription Get MenuTrees via RouteParametersAndDescription
func GetMenuTreesByRouteParametersAndDescription(offset int, limit int, RouteParameters_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and description = ?", RouteParameters_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndClass Get MenuTrees via RouteParametersAndClass
func GetMenuTreesByRouteParametersAndClass(offset int, limit int, RouteParameters_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and class = ?", RouteParameters_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndOptions Get MenuTrees via RouteParametersAndOptions
func GetMenuTreesByRouteParametersAndOptions(offset int, limit int, RouteParameters_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and options = ?", RouteParameters_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndProvider Get MenuTrees via RouteParametersAndProvider
func GetMenuTreesByRouteParametersAndProvider(offset int, limit int, RouteParameters_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and provider = ?", RouteParameters_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndEnabled Get MenuTrees via RouteParametersAndEnabled
func GetMenuTreesByRouteParametersAndEnabled(offset int, limit int, RouteParameters_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and enabled = ?", RouteParameters_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDiscovered Get MenuTrees via RouteParametersAndDiscovered
func GetMenuTreesByRouteParametersAndDiscovered(offset int, limit int, RouteParameters_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and discovered = ?", RouteParameters_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndExpanded Get MenuTrees via RouteParametersAndExpanded
func GetMenuTreesByRouteParametersAndExpanded(offset int, limit int, RouteParameters_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and expanded = ?", RouteParameters_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndWeight Get MenuTrees via RouteParametersAndWeight
func GetMenuTreesByRouteParametersAndWeight(offset int, limit int, RouteParameters_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and weight = ?", RouteParameters_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndMetadata Get MenuTrees via RouteParametersAndMetadata
func GetMenuTreesByRouteParametersAndMetadata(offset int, limit int, RouteParameters_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and metadata = ?", RouteParameters_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndHasChildren Get MenuTrees via RouteParametersAndHasChildren
func GetMenuTreesByRouteParametersAndHasChildren(offset int, limit int, RouteParameters_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and has_children = ?", RouteParameters_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndDepth Get MenuTrees via RouteParametersAndDepth
func GetMenuTreesByRouteParametersAndDepth(offset int, limit int, RouteParameters_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and depth = ?", RouteParameters_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP1 Get MenuTrees via RouteParametersAndP1
func GetMenuTreesByRouteParametersAndP1(offset int, limit int, RouteParameters_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p1 = ?", RouteParameters_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP2 Get MenuTrees via RouteParametersAndP2
func GetMenuTreesByRouteParametersAndP2(offset int, limit int, RouteParameters_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p2 = ?", RouteParameters_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP3 Get MenuTrees via RouteParametersAndP3
func GetMenuTreesByRouteParametersAndP3(offset int, limit int, RouteParameters_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p3 = ?", RouteParameters_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP4 Get MenuTrees via RouteParametersAndP4
func GetMenuTreesByRouteParametersAndP4(offset int, limit int, RouteParameters_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p4 = ?", RouteParameters_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP5 Get MenuTrees via RouteParametersAndP5
func GetMenuTreesByRouteParametersAndP5(offset int, limit int, RouteParameters_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p5 = ?", RouteParameters_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP6 Get MenuTrees via RouteParametersAndP6
func GetMenuTreesByRouteParametersAndP6(offset int, limit int, RouteParameters_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p6 = ?", RouteParameters_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP7 Get MenuTrees via RouteParametersAndP7
func GetMenuTreesByRouteParametersAndP7(offset int, limit int, RouteParameters_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p7 = ?", RouteParameters_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP8 Get MenuTrees via RouteParametersAndP8
func GetMenuTreesByRouteParametersAndP8(offset int, limit int, RouteParameters_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p8 = ?", RouteParameters_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndP9 Get MenuTrees via RouteParametersAndP9
func GetMenuTreesByRouteParametersAndP9(offset int, limit int, RouteParameters_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and p9 = ?", RouteParameters_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByRouteParametersAndFormClass Get MenuTrees via RouteParametersAndFormClass
func GetMenuTreesByRouteParametersAndFormClass(offset int, limit int, RouteParameters_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ? and form_class = ?", RouteParameters_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndTitle Get MenuTrees via UrlAndTitle
func GetMenuTreesByUrlAndTitle(offset int, limit int, Url_ string, Title_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and title = ?", Url_, Title_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDescription Get MenuTrees via UrlAndDescription
func GetMenuTreesByUrlAndDescription(offset int, limit int, Url_ string, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and description = ?", Url_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndClass Get MenuTrees via UrlAndClass
func GetMenuTreesByUrlAndClass(offset int, limit int, Url_ string, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and class = ?", Url_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndOptions Get MenuTrees via UrlAndOptions
func GetMenuTreesByUrlAndOptions(offset int, limit int, Url_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and options = ?", Url_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndProvider Get MenuTrees via UrlAndProvider
func GetMenuTreesByUrlAndProvider(offset int, limit int, Url_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and provider = ?", Url_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndEnabled Get MenuTrees via UrlAndEnabled
func GetMenuTreesByUrlAndEnabled(offset int, limit int, Url_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and enabled = ?", Url_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDiscovered Get MenuTrees via UrlAndDiscovered
func GetMenuTreesByUrlAndDiscovered(offset int, limit int, Url_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and discovered = ?", Url_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndExpanded Get MenuTrees via UrlAndExpanded
func GetMenuTreesByUrlAndExpanded(offset int, limit int, Url_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and expanded = ?", Url_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndWeight Get MenuTrees via UrlAndWeight
func GetMenuTreesByUrlAndWeight(offset int, limit int, Url_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and weight = ?", Url_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndMetadata Get MenuTrees via UrlAndMetadata
func GetMenuTreesByUrlAndMetadata(offset int, limit int, Url_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and metadata = ?", Url_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndHasChildren Get MenuTrees via UrlAndHasChildren
func GetMenuTreesByUrlAndHasChildren(offset int, limit int, Url_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and has_children = ?", Url_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndDepth Get MenuTrees via UrlAndDepth
func GetMenuTreesByUrlAndDepth(offset int, limit int, Url_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and depth = ?", Url_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP1 Get MenuTrees via UrlAndP1
func GetMenuTreesByUrlAndP1(offset int, limit int, Url_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p1 = ?", Url_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP2 Get MenuTrees via UrlAndP2
func GetMenuTreesByUrlAndP2(offset int, limit int, Url_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p2 = ?", Url_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP3 Get MenuTrees via UrlAndP3
func GetMenuTreesByUrlAndP3(offset int, limit int, Url_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p3 = ?", Url_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP4 Get MenuTrees via UrlAndP4
func GetMenuTreesByUrlAndP4(offset int, limit int, Url_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p4 = ?", Url_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP5 Get MenuTrees via UrlAndP5
func GetMenuTreesByUrlAndP5(offset int, limit int, Url_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p5 = ?", Url_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP6 Get MenuTrees via UrlAndP6
func GetMenuTreesByUrlAndP6(offset int, limit int, Url_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p6 = ?", Url_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP7 Get MenuTrees via UrlAndP7
func GetMenuTreesByUrlAndP7(offset int, limit int, Url_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p7 = ?", Url_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP8 Get MenuTrees via UrlAndP8
func GetMenuTreesByUrlAndP8(offset int, limit int, Url_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p8 = ?", Url_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndP9 Get MenuTrees via UrlAndP9
func GetMenuTreesByUrlAndP9(offset int, limit int, Url_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and p9 = ?", Url_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByUrlAndFormClass Get MenuTrees via UrlAndFormClass
func GetMenuTreesByUrlAndFormClass(offset int, limit int, Url_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ? and form_class = ?", Url_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDescription Get MenuTrees via TitleAndDescription
func GetMenuTreesByTitleAndDescription(offset int, limit int, Title_ []byte, Description_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and description = ?", Title_, Description_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndClass Get MenuTrees via TitleAndClass
func GetMenuTreesByTitleAndClass(offset int, limit int, Title_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and class = ?", Title_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndOptions Get MenuTrees via TitleAndOptions
func GetMenuTreesByTitleAndOptions(offset int, limit int, Title_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and options = ?", Title_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndProvider Get MenuTrees via TitleAndProvider
func GetMenuTreesByTitleAndProvider(offset int, limit int, Title_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and provider = ?", Title_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndEnabled Get MenuTrees via TitleAndEnabled
func GetMenuTreesByTitleAndEnabled(offset int, limit int, Title_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and enabled = ?", Title_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDiscovered Get MenuTrees via TitleAndDiscovered
func GetMenuTreesByTitleAndDiscovered(offset int, limit int, Title_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and discovered = ?", Title_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndExpanded Get MenuTrees via TitleAndExpanded
func GetMenuTreesByTitleAndExpanded(offset int, limit int, Title_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and expanded = ?", Title_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndWeight Get MenuTrees via TitleAndWeight
func GetMenuTreesByTitleAndWeight(offset int, limit int, Title_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and weight = ?", Title_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndMetadata Get MenuTrees via TitleAndMetadata
func GetMenuTreesByTitleAndMetadata(offset int, limit int, Title_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and metadata = ?", Title_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndHasChildren Get MenuTrees via TitleAndHasChildren
func GetMenuTreesByTitleAndHasChildren(offset int, limit int, Title_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and has_children = ?", Title_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndDepth Get MenuTrees via TitleAndDepth
func GetMenuTreesByTitleAndDepth(offset int, limit int, Title_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and depth = ?", Title_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP1 Get MenuTrees via TitleAndP1
func GetMenuTreesByTitleAndP1(offset int, limit int, Title_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p1 = ?", Title_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP2 Get MenuTrees via TitleAndP2
func GetMenuTreesByTitleAndP2(offset int, limit int, Title_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p2 = ?", Title_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP3 Get MenuTrees via TitleAndP3
func GetMenuTreesByTitleAndP3(offset int, limit int, Title_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p3 = ?", Title_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP4 Get MenuTrees via TitleAndP4
func GetMenuTreesByTitleAndP4(offset int, limit int, Title_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p4 = ?", Title_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP5 Get MenuTrees via TitleAndP5
func GetMenuTreesByTitleAndP5(offset int, limit int, Title_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p5 = ?", Title_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP6 Get MenuTrees via TitleAndP6
func GetMenuTreesByTitleAndP6(offset int, limit int, Title_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p6 = ?", Title_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP7 Get MenuTrees via TitleAndP7
func GetMenuTreesByTitleAndP7(offset int, limit int, Title_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p7 = ?", Title_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP8 Get MenuTrees via TitleAndP8
func GetMenuTreesByTitleAndP8(offset int, limit int, Title_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p8 = ?", Title_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndP9 Get MenuTrees via TitleAndP9
func GetMenuTreesByTitleAndP9(offset int, limit int, Title_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and p9 = ?", Title_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByTitleAndFormClass Get MenuTrees via TitleAndFormClass
func GetMenuTreesByTitleAndFormClass(offset int, limit int, Title_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ? and form_class = ?", Title_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndClass Get MenuTrees via DescriptionAndClass
func GetMenuTreesByDescriptionAndClass(offset int, limit int, Description_ []byte, Class_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and class = ?", Description_, Class_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndOptions Get MenuTrees via DescriptionAndOptions
func GetMenuTreesByDescriptionAndOptions(offset int, limit int, Description_ []byte, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and options = ?", Description_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndProvider Get MenuTrees via DescriptionAndProvider
func GetMenuTreesByDescriptionAndProvider(offset int, limit int, Description_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and provider = ?", Description_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndEnabled Get MenuTrees via DescriptionAndEnabled
func GetMenuTreesByDescriptionAndEnabled(offset int, limit int, Description_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and enabled = ?", Description_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDiscovered Get MenuTrees via DescriptionAndDiscovered
func GetMenuTreesByDescriptionAndDiscovered(offset int, limit int, Description_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and discovered = ?", Description_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndExpanded Get MenuTrees via DescriptionAndExpanded
func GetMenuTreesByDescriptionAndExpanded(offset int, limit int, Description_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and expanded = ?", Description_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndWeight Get MenuTrees via DescriptionAndWeight
func GetMenuTreesByDescriptionAndWeight(offset int, limit int, Description_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and weight = ?", Description_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndMetadata Get MenuTrees via DescriptionAndMetadata
func GetMenuTreesByDescriptionAndMetadata(offset int, limit int, Description_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and metadata = ?", Description_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndHasChildren Get MenuTrees via DescriptionAndHasChildren
func GetMenuTreesByDescriptionAndHasChildren(offset int, limit int, Description_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and has_children = ?", Description_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndDepth Get MenuTrees via DescriptionAndDepth
func GetMenuTreesByDescriptionAndDepth(offset int, limit int, Description_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and depth = ?", Description_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP1 Get MenuTrees via DescriptionAndP1
func GetMenuTreesByDescriptionAndP1(offset int, limit int, Description_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p1 = ?", Description_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP2 Get MenuTrees via DescriptionAndP2
func GetMenuTreesByDescriptionAndP2(offset int, limit int, Description_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p2 = ?", Description_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP3 Get MenuTrees via DescriptionAndP3
func GetMenuTreesByDescriptionAndP3(offset int, limit int, Description_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p3 = ?", Description_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP4 Get MenuTrees via DescriptionAndP4
func GetMenuTreesByDescriptionAndP4(offset int, limit int, Description_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p4 = ?", Description_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP5 Get MenuTrees via DescriptionAndP5
func GetMenuTreesByDescriptionAndP5(offset int, limit int, Description_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p5 = ?", Description_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP6 Get MenuTrees via DescriptionAndP6
func GetMenuTreesByDescriptionAndP6(offset int, limit int, Description_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p6 = ?", Description_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP7 Get MenuTrees via DescriptionAndP7
func GetMenuTreesByDescriptionAndP7(offset int, limit int, Description_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p7 = ?", Description_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP8 Get MenuTrees via DescriptionAndP8
func GetMenuTreesByDescriptionAndP8(offset int, limit int, Description_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p8 = ?", Description_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndP9 Get MenuTrees via DescriptionAndP9
func GetMenuTreesByDescriptionAndP9(offset int, limit int, Description_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and p9 = ?", Description_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDescriptionAndFormClass Get MenuTrees via DescriptionAndFormClass
func GetMenuTreesByDescriptionAndFormClass(offset int, limit int, Description_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ? and form_class = ?", Description_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndOptions Get MenuTrees via ClassAndOptions
func GetMenuTreesByClassAndOptions(offset int, limit int, Class_ string, Options_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and options = ?", Class_, Options_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndProvider Get MenuTrees via ClassAndProvider
func GetMenuTreesByClassAndProvider(offset int, limit int, Class_ string, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and provider = ?", Class_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndEnabled Get MenuTrees via ClassAndEnabled
func GetMenuTreesByClassAndEnabled(offset int, limit int, Class_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and enabled = ?", Class_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDiscovered Get MenuTrees via ClassAndDiscovered
func GetMenuTreesByClassAndDiscovered(offset int, limit int, Class_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and discovered = ?", Class_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndExpanded Get MenuTrees via ClassAndExpanded
func GetMenuTreesByClassAndExpanded(offset int, limit int, Class_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and expanded = ?", Class_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndWeight Get MenuTrees via ClassAndWeight
func GetMenuTreesByClassAndWeight(offset int, limit int, Class_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and weight = ?", Class_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndMetadata Get MenuTrees via ClassAndMetadata
func GetMenuTreesByClassAndMetadata(offset int, limit int, Class_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and metadata = ?", Class_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndHasChildren Get MenuTrees via ClassAndHasChildren
func GetMenuTreesByClassAndHasChildren(offset int, limit int, Class_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and has_children = ?", Class_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndDepth Get MenuTrees via ClassAndDepth
func GetMenuTreesByClassAndDepth(offset int, limit int, Class_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and depth = ?", Class_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP1 Get MenuTrees via ClassAndP1
func GetMenuTreesByClassAndP1(offset int, limit int, Class_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p1 = ?", Class_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP2 Get MenuTrees via ClassAndP2
func GetMenuTreesByClassAndP2(offset int, limit int, Class_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p2 = ?", Class_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP3 Get MenuTrees via ClassAndP3
func GetMenuTreesByClassAndP3(offset int, limit int, Class_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p3 = ?", Class_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP4 Get MenuTrees via ClassAndP4
func GetMenuTreesByClassAndP4(offset int, limit int, Class_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p4 = ?", Class_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP5 Get MenuTrees via ClassAndP5
func GetMenuTreesByClassAndP5(offset int, limit int, Class_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p5 = ?", Class_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP6 Get MenuTrees via ClassAndP6
func GetMenuTreesByClassAndP6(offset int, limit int, Class_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p6 = ?", Class_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP7 Get MenuTrees via ClassAndP7
func GetMenuTreesByClassAndP7(offset int, limit int, Class_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p7 = ?", Class_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP8 Get MenuTrees via ClassAndP8
func GetMenuTreesByClassAndP8(offset int, limit int, Class_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p8 = ?", Class_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndP9 Get MenuTrees via ClassAndP9
func GetMenuTreesByClassAndP9(offset int, limit int, Class_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and p9 = ?", Class_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByClassAndFormClass Get MenuTrees via ClassAndFormClass
func GetMenuTreesByClassAndFormClass(offset int, limit int, Class_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ? and form_class = ?", Class_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndProvider Get MenuTrees via OptionsAndProvider
func GetMenuTreesByOptionsAndProvider(offset int, limit int, Options_ []byte, Provider_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and provider = ?", Options_, Provider_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndEnabled Get MenuTrees via OptionsAndEnabled
func GetMenuTreesByOptionsAndEnabled(offset int, limit int, Options_ []byte, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and enabled = ?", Options_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDiscovered Get MenuTrees via OptionsAndDiscovered
func GetMenuTreesByOptionsAndDiscovered(offset int, limit int, Options_ []byte, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and discovered = ?", Options_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndExpanded Get MenuTrees via OptionsAndExpanded
func GetMenuTreesByOptionsAndExpanded(offset int, limit int, Options_ []byte, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and expanded = ?", Options_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndWeight Get MenuTrees via OptionsAndWeight
func GetMenuTreesByOptionsAndWeight(offset int, limit int, Options_ []byte, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and weight = ?", Options_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndMetadata Get MenuTrees via OptionsAndMetadata
func GetMenuTreesByOptionsAndMetadata(offset int, limit int, Options_ []byte, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and metadata = ?", Options_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndHasChildren Get MenuTrees via OptionsAndHasChildren
func GetMenuTreesByOptionsAndHasChildren(offset int, limit int, Options_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and has_children = ?", Options_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndDepth Get MenuTrees via OptionsAndDepth
func GetMenuTreesByOptionsAndDepth(offset int, limit int, Options_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and depth = ?", Options_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP1 Get MenuTrees via OptionsAndP1
func GetMenuTreesByOptionsAndP1(offset int, limit int, Options_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p1 = ?", Options_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP2 Get MenuTrees via OptionsAndP2
func GetMenuTreesByOptionsAndP2(offset int, limit int, Options_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p2 = ?", Options_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP3 Get MenuTrees via OptionsAndP3
func GetMenuTreesByOptionsAndP3(offset int, limit int, Options_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p3 = ?", Options_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP4 Get MenuTrees via OptionsAndP4
func GetMenuTreesByOptionsAndP4(offset int, limit int, Options_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p4 = ?", Options_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP5 Get MenuTrees via OptionsAndP5
func GetMenuTreesByOptionsAndP5(offset int, limit int, Options_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p5 = ?", Options_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP6 Get MenuTrees via OptionsAndP6
func GetMenuTreesByOptionsAndP6(offset int, limit int, Options_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p6 = ?", Options_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP7 Get MenuTrees via OptionsAndP7
func GetMenuTreesByOptionsAndP7(offset int, limit int, Options_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p7 = ?", Options_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP8 Get MenuTrees via OptionsAndP8
func GetMenuTreesByOptionsAndP8(offset int, limit int, Options_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p8 = ?", Options_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndP9 Get MenuTrees via OptionsAndP9
func GetMenuTreesByOptionsAndP9(offset int, limit int, Options_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and p9 = ?", Options_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByOptionsAndFormClass Get MenuTrees via OptionsAndFormClass
func GetMenuTreesByOptionsAndFormClass(offset int, limit int, Options_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ? and form_class = ?", Options_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndEnabled Get MenuTrees via ProviderAndEnabled
func GetMenuTreesByProviderAndEnabled(offset int, limit int, Provider_ string, Enabled_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and enabled = ?", Provider_, Enabled_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDiscovered Get MenuTrees via ProviderAndDiscovered
func GetMenuTreesByProviderAndDiscovered(offset int, limit int, Provider_ string, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and discovered = ?", Provider_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndExpanded Get MenuTrees via ProviderAndExpanded
func GetMenuTreesByProviderAndExpanded(offset int, limit int, Provider_ string, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and expanded = ?", Provider_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndWeight Get MenuTrees via ProviderAndWeight
func GetMenuTreesByProviderAndWeight(offset int, limit int, Provider_ string, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and weight = ?", Provider_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndMetadata Get MenuTrees via ProviderAndMetadata
func GetMenuTreesByProviderAndMetadata(offset int, limit int, Provider_ string, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and metadata = ?", Provider_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndHasChildren Get MenuTrees via ProviderAndHasChildren
func GetMenuTreesByProviderAndHasChildren(offset int, limit int, Provider_ string, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and has_children = ?", Provider_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndDepth Get MenuTrees via ProviderAndDepth
func GetMenuTreesByProviderAndDepth(offset int, limit int, Provider_ string, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and depth = ?", Provider_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP1 Get MenuTrees via ProviderAndP1
func GetMenuTreesByProviderAndP1(offset int, limit int, Provider_ string, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p1 = ?", Provider_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP2 Get MenuTrees via ProviderAndP2
func GetMenuTreesByProviderAndP2(offset int, limit int, Provider_ string, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p2 = ?", Provider_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP3 Get MenuTrees via ProviderAndP3
func GetMenuTreesByProviderAndP3(offset int, limit int, Provider_ string, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p3 = ?", Provider_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP4 Get MenuTrees via ProviderAndP4
func GetMenuTreesByProviderAndP4(offset int, limit int, Provider_ string, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p4 = ?", Provider_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP5 Get MenuTrees via ProviderAndP5
func GetMenuTreesByProviderAndP5(offset int, limit int, Provider_ string, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p5 = ?", Provider_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP6 Get MenuTrees via ProviderAndP6
func GetMenuTreesByProviderAndP6(offset int, limit int, Provider_ string, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p6 = ?", Provider_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP7 Get MenuTrees via ProviderAndP7
func GetMenuTreesByProviderAndP7(offset int, limit int, Provider_ string, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p7 = ?", Provider_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP8 Get MenuTrees via ProviderAndP8
func GetMenuTreesByProviderAndP8(offset int, limit int, Provider_ string, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p8 = ?", Provider_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndP9 Get MenuTrees via ProviderAndP9
func GetMenuTreesByProviderAndP9(offset int, limit int, Provider_ string, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and p9 = ?", Provider_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByProviderAndFormClass Get MenuTrees via ProviderAndFormClass
func GetMenuTreesByProviderAndFormClass(offset int, limit int, Provider_ string, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ? and form_class = ?", Provider_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDiscovered Get MenuTrees via EnabledAndDiscovered
func GetMenuTreesByEnabledAndDiscovered(offset int, limit int, Enabled_ int, Discovered_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and discovered = ?", Enabled_, Discovered_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndExpanded Get MenuTrees via EnabledAndExpanded
func GetMenuTreesByEnabledAndExpanded(offset int, limit int, Enabled_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and expanded = ?", Enabled_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndWeight Get MenuTrees via EnabledAndWeight
func GetMenuTreesByEnabledAndWeight(offset int, limit int, Enabled_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and weight = ?", Enabled_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndMetadata Get MenuTrees via EnabledAndMetadata
func GetMenuTreesByEnabledAndMetadata(offset int, limit int, Enabled_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and metadata = ?", Enabled_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndHasChildren Get MenuTrees via EnabledAndHasChildren
func GetMenuTreesByEnabledAndHasChildren(offset int, limit int, Enabled_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and has_children = ?", Enabled_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndDepth Get MenuTrees via EnabledAndDepth
func GetMenuTreesByEnabledAndDepth(offset int, limit int, Enabled_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and depth = ?", Enabled_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP1 Get MenuTrees via EnabledAndP1
func GetMenuTreesByEnabledAndP1(offset int, limit int, Enabled_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p1 = ?", Enabled_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP2 Get MenuTrees via EnabledAndP2
func GetMenuTreesByEnabledAndP2(offset int, limit int, Enabled_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p2 = ?", Enabled_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP3 Get MenuTrees via EnabledAndP3
func GetMenuTreesByEnabledAndP3(offset int, limit int, Enabled_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p3 = ?", Enabled_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP4 Get MenuTrees via EnabledAndP4
func GetMenuTreesByEnabledAndP4(offset int, limit int, Enabled_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p4 = ?", Enabled_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP5 Get MenuTrees via EnabledAndP5
func GetMenuTreesByEnabledAndP5(offset int, limit int, Enabled_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p5 = ?", Enabled_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP6 Get MenuTrees via EnabledAndP6
func GetMenuTreesByEnabledAndP6(offset int, limit int, Enabled_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p6 = ?", Enabled_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP7 Get MenuTrees via EnabledAndP7
func GetMenuTreesByEnabledAndP7(offset int, limit int, Enabled_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p7 = ?", Enabled_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP8 Get MenuTrees via EnabledAndP8
func GetMenuTreesByEnabledAndP8(offset int, limit int, Enabled_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p8 = ?", Enabled_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndP9 Get MenuTrees via EnabledAndP9
func GetMenuTreesByEnabledAndP9(offset int, limit int, Enabled_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and p9 = ?", Enabled_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByEnabledAndFormClass Get MenuTrees via EnabledAndFormClass
func GetMenuTreesByEnabledAndFormClass(offset int, limit int, Enabled_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ? and form_class = ?", Enabled_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndExpanded Get MenuTrees via DiscoveredAndExpanded
func GetMenuTreesByDiscoveredAndExpanded(offset int, limit int, Discovered_ int, Expanded_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and expanded = ?", Discovered_, Expanded_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndWeight Get MenuTrees via DiscoveredAndWeight
func GetMenuTreesByDiscoveredAndWeight(offset int, limit int, Discovered_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and weight = ?", Discovered_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndMetadata Get MenuTrees via DiscoveredAndMetadata
func GetMenuTreesByDiscoveredAndMetadata(offset int, limit int, Discovered_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and metadata = ?", Discovered_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndHasChildren Get MenuTrees via DiscoveredAndHasChildren
func GetMenuTreesByDiscoveredAndHasChildren(offset int, limit int, Discovered_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and has_children = ?", Discovered_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndDepth Get MenuTrees via DiscoveredAndDepth
func GetMenuTreesByDiscoveredAndDepth(offset int, limit int, Discovered_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and depth = ?", Discovered_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP1 Get MenuTrees via DiscoveredAndP1
func GetMenuTreesByDiscoveredAndP1(offset int, limit int, Discovered_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p1 = ?", Discovered_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP2 Get MenuTrees via DiscoveredAndP2
func GetMenuTreesByDiscoveredAndP2(offset int, limit int, Discovered_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p2 = ?", Discovered_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP3 Get MenuTrees via DiscoveredAndP3
func GetMenuTreesByDiscoveredAndP3(offset int, limit int, Discovered_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p3 = ?", Discovered_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP4 Get MenuTrees via DiscoveredAndP4
func GetMenuTreesByDiscoveredAndP4(offset int, limit int, Discovered_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p4 = ?", Discovered_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP5 Get MenuTrees via DiscoveredAndP5
func GetMenuTreesByDiscoveredAndP5(offset int, limit int, Discovered_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p5 = ?", Discovered_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP6 Get MenuTrees via DiscoveredAndP6
func GetMenuTreesByDiscoveredAndP6(offset int, limit int, Discovered_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p6 = ?", Discovered_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP7 Get MenuTrees via DiscoveredAndP7
func GetMenuTreesByDiscoveredAndP7(offset int, limit int, Discovered_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p7 = ?", Discovered_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP8 Get MenuTrees via DiscoveredAndP8
func GetMenuTreesByDiscoveredAndP8(offset int, limit int, Discovered_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p8 = ?", Discovered_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndP9 Get MenuTrees via DiscoveredAndP9
func GetMenuTreesByDiscoveredAndP9(offset int, limit int, Discovered_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and p9 = ?", Discovered_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDiscoveredAndFormClass Get MenuTrees via DiscoveredAndFormClass
func GetMenuTreesByDiscoveredAndFormClass(offset int, limit int, Discovered_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ? and form_class = ?", Discovered_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndWeight Get MenuTrees via ExpandedAndWeight
func GetMenuTreesByExpandedAndWeight(offset int, limit int, Expanded_ int, Weight_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and weight = ?", Expanded_, Weight_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndMetadata Get MenuTrees via ExpandedAndMetadata
func GetMenuTreesByExpandedAndMetadata(offset int, limit int, Expanded_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and metadata = ?", Expanded_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndHasChildren Get MenuTrees via ExpandedAndHasChildren
func GetMenuTreesByExpandedAndHasChildren(offset int, limit int, Expanded_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and has_children = ?", Expanded_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndDepth Get MenuTrees via ExpandedAndDepth
func GetMenuTreesByExpandedAndDepth(offset int, limit int, Expanded_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and depth = ?", Expanded_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP1 Get MenuTrees via ExpandedAndP1
func GetMenuTreesByExpandedAndP1(offset int, limit int, Expanded_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p1 = ?", Expanded_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP2 Get MenuTrees via ExpandedAndP2
func GetMenuTreesByExpandedAndP2(offset int, limit int, Expanded_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p2 = ?", Expanded_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP3 Get MenuTrees via ExpandedAndP3
func GetMenuTreesByExpandedAndP3(offset int, limit int, Expanded_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p3 = ?", Expanded_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP4 Get MenuTrees via ExpandedAndP4
func GetMenuTreesByExpandedAndP4(offset int, limit int, Expanded_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p4 = ?", Expanded_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP5 Get MenuTrees via ExpandedAndP5
func GetMenuTreesByExpandedAndP5(offset int, limit int, Expanded_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p5 = ?", Expanded_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP6 Get MenuTrees via ExpandedAndP6
func GetMenuTreesByExpandedAndP6(offset int, limit int, Expanded_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p6 = ?", Expanded_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP7 Get MenuTrees via ExpandedAndP7
func GetMenuTreesByExpandedAndP7(offset int, limit int, Expanded_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p7 = ?", Expanded_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP8 Get MenuTrees via ExpandedAndP8
func GetMenuTreesByExpandedAndP8(offset int, limit int, Expanded_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p8 = ?", Expanded_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndP9 Get MenuTrees via ExpandedAndP9
func GetMenuTreesByExpandedAndP9(offset int, limit int, Expanded_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and p9 = ?", Expanded_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByExpandedAndFormClass Get MenuTrees via ExpandedAndFormClass
func GetMenuTreesByExpandedAndFormClass(offset int, limit int, Expanded_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ? and form_class = ?", Expanded_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndMetadata Get MenuTrees via WeightAndMetadata
func GetMenuTreesByWeightAndMetadata(offset int, limit int, Weight_ int, Metadata_ []byte) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and metadata = ?", Weight_, Metadata_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndHasChildren Get MenuTrees via WeightAndHasChildren
func GetMenuTreesByWeightAndHasChildren(offset int, limit int, Weight_ int, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and has_children = ?", Weight_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndDepth Get MenuTrees via WeightAndDepth
func GetMenuTreesByWeightAndDepth(offset int, limit int, Weight_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and depth = ?", Weight_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP1 Get MenuTrees via WeightAndP1
func GetMenuTreesByWeightAndP1(offset int, limit int, Weight_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p1 = ?", Weight_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP2 Get MenuTrees via WeightAndP2
func GetMenuTreesByWeightAndP2(offset int, limit int, Weight_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p2 = ?", Weight_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP3 Get MenuTrees via WeightAndP3
func GetMenuTreesByWeightAndP3(offset int, limit int, Weight_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p3 = ?", Weight_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP4 Get MenuTrees via WeightAndP4
func GetMenuTreesByWeightAndP4(offset int, limit int, Weight_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p4 = ?", Weight_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP5 Get MenuTrees via WeightAndP5
func GetMenuTreesByWeightAndP5(offset int, limit int, Weight_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p5 = ?", Weight_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP6 Get MenuTrees via WeightAndP6
func GetMenuTreesByWeightAndP6(offset int, limit int, Weight_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p6 = ?", Weight_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP7 Get MenuTrees via WeightAndP7
func GetMenuTreesByWeightAndP7(offset int, limit int, Weight_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p7 = ?", Weight_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP8 Get MenuTrees via WeightAndP8
func GetMenuTreesByWeightAndP8(offset int, limit int, Weight_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p8 = ?", Weight_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndP9 Get MenuTrees via WeightAndP9
func GetMenuTreesByWeightAndP9(offset int, limit int, Weight_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and p9 = ?", Weight_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByWeightAndFormClass Get MenuTrees via WeightAndFormClass
func GetMenuTreesByWeightAndFormClass(offset int, limit int, Weight_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ? and form_class = ?", Weight_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndHasChildren Get MenuTrees via MetadataAndHasChildren
func GetMenuTreesByMetadataAndHasChildren(offset int, limit int, Metadata_ []byte, HasChildren_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and has_children = ?", Metadata_, HasChildren_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndDepth Get MenuTrees via MetadataAndDepth
func GetMenuTreesByMetadataAndDepth(offset int, limit int, Metadata_ []byte, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and depth = ?", Metadata_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP1 Get MenuTrees via MetadataAndP1
func GetMenuTreesByMetadataAndP1(offset int, limit int, Metadata_ []byte, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p1 = ?", Metadata_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP2 Get MenuTrees via MetadataAndP2
func GetMenuTreesByMetadataAndP2(offset int, limit int, Metadata_ []byte, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p2 = ?", Metadata_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP3 Get MenuTrees via MetadataAndP3
func GetMenuTreesByMetadataAndP3(offset int, limit int, Metadata_ []byte, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p3 = ?", Metadata_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP4 Get MenuTrees via MetadataAndP4
func GetMenuTreesByMetadataAndP4(offset int, limit int, Metadata_ []byte, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p4 = ?", Metadata_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP5 Get MenuTrees via MetadataAndP5
func GetMenuTreesByMetadataAndP5(offset int, limit int, Metadata_ []byte, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p5 = ?", Metadata_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP6 Get MenuTrees via MetadataAndP6
func GetMenuTreesByMetadataAndP6(offset int, limit int, Metadata_ []byte, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p6 = ?", Metadata_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP7 Get MenuTrees via MetadataAndP7
func GetMenuTreesByMetadataAndP7(offset int, limit int, Metadata_ []byte, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p7 = ?", Metadata_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP8 Get MenuTrees via MetadataAndP8
func GetMenuTreesByMetadataAndP8(offset int, limit int, Metadata_ []byte, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p8 = ?", Metadata_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndP9 Get MenuTrees via MetadataAndP9
func GetMenuTreesByMetadataAndP9(offset int, limit int, Metadata_ []byte, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and p9 = ?", Metadata_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByMetadataAndFormClass Get MenuTrees via MetadataAndFormClass
func GetMenuTreesByMetadataAndFormClass(offset int, limit int, Metadata_ []byte, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ? and form_class = ?", Metadata_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndDepth Get MenuTrees via HasChildrenAndDepth
func GetMenuTreesByHasChildrenAndDepth(offset int, limit int, HasChildren_ int, Depth_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and depth = ?", HasChildren_, Depth_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP1 Get MenuTrees via HasChildrenAndP1
func GetMenuTreesByHasChildrenAndP1(offset int, limit int, HasChildren_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p1 = ?", HasChildren_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP2 Get MenuTrees via HasChildrenAndP2
func GetMenuTreesByHasChildrenAndP2(offset int, limit int, HasChildren_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p2 = ?", HasChildren_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP3 Get MenuTrees via HasChildrenAndP3
func GetMenuTreesByHasChildrenAndP3(offset int, limit int, HasChildren_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p3 = ?", HasChildren_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP4 Get MenuTrees via HasChildrenAndP4
func GetMenuTreesByHasChildrenAndP4(offset int, limit int, HasChildren_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p4 = ?", HasChildren_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP5 Get MenuTrees via HasChildrenAndP5
func GetMenuTreesByHasChildrenAndP5(offset int, limit int, HasChildren_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p5 = ?", HasChildren_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP6 Get MenuTrees via HasChildrenAndP6
func GetMenuTreesByHasChildrenAndP6(offset int, limit int, HasChildren_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p6 = ?", HasChildren_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP7 Get MenuTrees via HasChildrenAndP7
func GetMenuTreesByHasChildrenAndP7(offset int, limit int, HasChildren_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p7 = ?", HasChildren_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP8 Get MenuTrees via HasChildrenAndP8
func GetMenuTreesByHasChildrenAndP8(offset int, limit int, HasChildren_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p8 = ?", HasChildren_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndP9 Get MenuTrees via HasChildrenAndP9
func GetMenuTreesByHasChildrenAndP9(offset int, limit int, HasChildren_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and p9 = ?", HasChildren_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByHasChildrenAndFormClass Get MenuTrees via HasChildrenAndFormClass
func GetMenuTreesByHasChildrenAndFormClass(offset int, limit int, HasChildren_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ? and form_class = ?", HasChildren_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP1 Get MenuTrees via DepthAndP1
func GetMenuTreesByDepthAndP1(offset int, limit int, Depth_ int, P1_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p1 = ?", Depth_, P1_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP2 Get MenuTrees via DepthAndP2
func GetMenuTreesByDepthAndP2(offset int, limit int, Depth_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p2 = ?", Depth_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP3 Get MenuTrees via DepthAndP3
func GetMenuTreesByDepthAndP3(offset int, limit int, Depth_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p3 = ?", Depth_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP4 Get MenuTrees via DepthAndP4
func GetMenuTreesByDepthAndP4(offset int, limit int, Depth_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p4 = ?", Depth_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP5 Get MenuTrees via DepthAndP5
func GetMenuTreesByDepthAndP5(offset int, limit int, Depth_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p5 = ?", Depth_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP6 Get MenuTrees via DepthAndP6
func GetMenuTreesByDepthAndP6(offset int, limit int, Depth_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p6 = ?", Depth_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP7 Get MenuTrees via DepthAndP7
func GetMenuTreesByDepthAndP7(offset int, limit int, Depth_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p7 = ?", Depth_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP8 Get MenuTrees via DepthAndP8
func GetMenuTreesByDepthAndP8(offset int, limit int, Depth_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p8 = ?", Depth_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndP9 Get MenuTrees via DepthAndP9
func GetMenuTreesByDepthAndP9(offset int, limit int, Depth_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and p9 = ?", Depth_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByDepthAndFormClass Get MenuTrees via DepthAndFormClass
func GetMenuTreesByDepthAndFormClass(offset int, limit int, Depth_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ? and form_class = ?", Depth_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP2 Get MenuTrees via P1AndP2
func GetMenuTreesByP1AndP2(offset int, limit int, P1_ int, P2_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p2 = ?", P1_, P2_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP3 Get MenuTrees via P1AndP3
func GetMenuTreesByP1AndP3(offset int, limit int, P1_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p3 = ?", P1_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP4 Get MenuTrees via P1AndP4
func GetMenuTreesByP1AndP4(offset int, limit int, P1_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p4 = ?", P1_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP5 Get MenuTrees via P1AndP5
func GetMenuTreesByP1AndP5(offset int, limit int, P1_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p5 = ?", P1_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP6 Get MenuTrees via P1AndP6
func GetMenuTreesByP1AndP6(offset int, limit int, P1_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p6 = ?", P1_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP7 Get MenuTrees via P1AndP7
func GetMenuTreesByP1AndP7(offset int, limit int, P1_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p7 = ?", P1_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP8 Get MenuTrees via P1AndP8
func GetMenuTreesByP1AndP8(offset int, limit int, P1_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p8 = ?", P1_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndP9 Get MenuTrees via P1AndP9
func GetMenuTreesByP1AndP9(offset int, limit int, P1_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and p9 = ?", P1_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP1AndFormClass Get MenuTrees via P1AndFormClass
func GetMenuTreesByP1AndFormClass(offset int, limit int, P1_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ? and form_class = ?", P1_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP3 Get MenuTrees via P2AndP3
func GetMenuTreesByP2AndP3(offset int, limit int, P2_ int, P3_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p3 = ?", P2_, P3_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP4 Get MenuTrees via P2AndP4
func GetMenuTreesByP2AndP4(offset int, limit int, P2_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p4 = ?", P2_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP5 Get MenuTrees via P2AndP5
func GetMenuTreesByP2AndP5(offset int, limit int, P2_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p5 = ?", P2_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP6 Get MenuTrees via P2AndP6
func GetMenuTreesByP2AndP6(offset int, limit int, P2_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p6 = ?", P2_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP7 Get MenuTrees via P2AndP7
func GetMenuTreesByP2AndP7(offset int, limit int, P2_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p7 = ?", P2_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP8 Get MenuTrees via P2AndP8
func GetMenuTreesByP2AndP8(offset int, limit int, P2_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p8 = ?", P2_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndP9 Get MenuTrees via P2AndP9
func GetMenuTreesByP2AndP9(offset int, limit int, P2_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and p9 = ?", P2_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP2AndFormClass Get MenuTrees via P2AndFormClass
func GetMenuTreesByP2AndFormClass(offset int, limit int, P2_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ? and form_class = ?", P2_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP4 Get MenuTrees via P3AndP4
func GetMenuTreesByP3AndP4(offset int, limit int, P3_ int, P4_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p4 = ?", P3_, P4_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP5 Get MenuTrees via P3AndP5
func GetMenuTreesByP3AndP5(offset int, limit int, P3_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p5 = ?", P3_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP6 Get MenuTrees via P3AndP6
func GetMenuTreesByP3AndP6(offset int, limit int, P3_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p6 = ?", P3_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP7 Get MenuTrees via P3AndP7
func GetMenuTreesByP3AndP7(offset int, limit int, P3_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p7 = ?", P3_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP8 Get MenuTrees via P3AndP8
func GetMenuTreesByP3AndP8(offset int, limit int, P3_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p8 = ?", P3_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndP9 Get MenuTrees via P3AndP9
func GetMenuTreesByP3AndP9(offset int, limit int, P3_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and p9 = ?", P3_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP3AndFormClass Get MenuTrees via P3AndFormClass
func GetMenuTreesByP3AndFormClass(offset int, limit int, P3_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ? and form_class = ?", P3_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP5 Get MenuTrees via P4AndP5
func GetMenuTreesByP4AndP5(offset int, limit int, P4_ int, P5_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p5 = ?", P4_, P5_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP6 Get MenuTrees via P4AndP6
func GetMenuTreesByP4AndP6(offset int, limit int, P4_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p6 = ?", P4_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP7 Get MenuTrees via P4AndP7
func GetMenuTreesByP4AndP7(offset int, limit int, P4_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p7 = ?", P4_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP8 Get MenuTrees via P4AndP8
func GetMenuTreesByP4AndP8(offset int, limit int, P4_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p8 = ?", P4_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndP9 Get MenuTrees via P4AndP9
func GetMenuTreesByP4AndP9(offset int, limit int, P4_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and p9 = ?", P4_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP4AndFormClass Get MenuTrees via P4AndFormClass
func GetMenuTreesByP4AndFormClass(offset int, limit int, P4_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ? and form_class = ?", P4_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP6 Get MenuTrees via P5AndP6
func GetMenuTreesByP5AndP6(offset int, limit int, P5_ int, P6_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p6 = ?", P5_, P6_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP7 Get MenuTrees via P5AndP7
func GetMenuTreesByP5AndP7(offset int, limit int, P5_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p7 = ?", P5_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP8 Get MenuTrees via P5AndP8
func GetMenuTreesByP5AndP8(offset int, limit int, P5_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p8 = ?", P5_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndP9 Get MenuTrees via P5AndP9
func GetMenuTreesByP5AndP9(offset int, limit int, P5_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and p9 = ?", P5_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP5AndFormClass Get MenuTrees via P5AndFormClass
func GetMenuTreesByP5AndFormClass(offset int, limit int, P5_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ? and form_class = ?", P5_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP6AndP7 Get MenuTrees via P6AndP7
func GetMenuTreesByP6AndP7(offset int, limit int, P6_ int, P7_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ? and p7 = ?", P6_, P7_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP6AndP8 Get MenuTrees via P6AndP8
func GetMenuTreesByP6AndP8(offset int, limit int, P6_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ? and p8 = ?", P6_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP6AndP9 Get MenuTrees via P6AndP9
func GetMenuTreesByP6AndP9(offset int, limit int, P6_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ? and p9 = ?", P6_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP6AndFormClass Get MenuTrees via P6AndFormClass
func GetMenuTreesByP6AndFormClass(offset int, limit int, P6_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ? and form_class = ?", P6_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP7AndP8 Get MenuTrees via P7AndP8
func GetMenuTreesByP7AndP8(offset int, limit int, P7_ int, P8_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p7 = ? and p8 = ?", P7_, P8_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP7AndP9 Get MenuTrees via P7AndP9
func GetMenuTreesByP7AndP9(offset int, limit int, P7_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p7 = ? and p9 = ?", P7_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP7AndFormClass Get MenuTrees via P7AndFormClass
func GetMenuTreesByP7AndFormClass(offset int, limit int, P7_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p7 = ? and form_class = ?", P7_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP8AndP9 Get MenuTrees via P8AndP9
func GetMenuTreesByP8AndP9(offset int, limit int, P8_ int, P9_ int) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p8 = ? and p9 = ?", P8_, P9_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP8AndFormClass Get MenuTrees via P8AndFormClass
func GetMenuTreesByP8AndFormClass(offset int, limit int, P8_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p8 = ? and form_class = ?", P8_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesByP9AndFormClass Get MenuTrees via P9AndFormClass
func GetMenuTreesByP9AndFormClass(offset int, limit int, P9_ int, FormClass_ string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p9 = ? and form_class = ?", P9_, FormClass_).Limit(limit, offset).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTrees Get MenuTrees via field
func GetMenuTrees(offset int, limit int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaMenuName Get MenuTrees via MenuName
func GetMenuTreesViaMenuName(offset int, limit int, MenuName_ string, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("menu_name = ?", MenuName_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaMlid Get MenuTrees via Mlid
func GetMenuTreesViaMlid(offset int, limit int, Mlid_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("mlid = ?", Mlid_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaId Get MenuTrees via Id
func GetMenuTreesViaId(offset int, limit int, Id_ string, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("id = ?", Id_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaParent Get MenuTrees via Parent
func GetMenuTreesViaParent(offset int, limit int, Parent_ string, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("parent = ?", Parent_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaRouteName Get MenuTrees via RouteName
func GetMenuTreesViaRouteName(offset int, limit int, RouteName_ string, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_name = ?", RouteName_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaRouteParamKey Get MenuTrees via RouteParamKey
func GetMenuTreesViaRouteParamKey(offset int, limit int, RouteParamKey_ string, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_param_key = ?", RouteParamKey_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaRouteParameters Get MenuTrees via RouteParameters
func GetMenuTreesViaRouteParameters(offset int, limit int, RouteParameters_ []byte, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("route_parameters = ?", RouteParameters_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaUrl Get MenuTrees via Url
func GetMenuTreesViaUrl(offset int, limit int, Url_ string, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("url = ?", Url_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaTitle Get MenuTrees via Title
func GetMenuTreesViaTitle(offset int, limit int, Title_ []byte, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("title = ?", Title_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaDescription Get MenuTrees via Description
func GetMenuTreesViaDescription(offset int, limit int, Description_ []byte, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("description = ?", Description_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaClass Get MenuTrees via Class
func GetMenuTreesViaClass(offset int, limit int, Class_ string, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("class = ?", Class_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaOptions Get MenuTrees via Options
func GetMenuTreesViaOptions(offset int, limit int, Options_ []byte, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("options = ?", Options_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaProvider Get MenuTrees via Provider
func GetMenuTreesViaProvider(offset int, limit int, Provider_ string, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("provider = ?", Provider_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaEnabled Get MenuTrees via Enabled
func GetMenuTreesViaEnabled(offset int, limit int, Enabled_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("enabled = ?", Enabled_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaDiscovered Get MenuTrees via Discovered
func GetMenuTreesViaDiscovered(offset int, limit int, Discovered_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("discovered = ?", Discovered_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaExpanded Get MenuTrees via Expanded
func GetMenuTreesViaExpanded(offset int, limit int, Expanded_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("expanded = ?", Expanded_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaWeight Get MenuTrees via Weight
func GetMenuTreesViaWeight(offset int, limit int, Weight_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("weight = ?", Weight_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaMetadata Get MenuTrees via Metadata
func GetMenuTreesViaMetadata(offset int, limit int, Metadata_ []byte, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("metadata = ?", Metadata_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaHasChildren Get MenuTrees via HasChildren
func GetMenuTreesViaHasChildren(offset int, limit int, HasChildren_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("has_children = ?", HasChildren_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaDepth Get MenuTrees via Depth
func GetMenuTreesViaDepth(offset int, limit int, Depth_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("depth = ?", Depth_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaP1 Get MenuTrees via P1
func GetMenuTreesViaP1(offset int, limit int, P1_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p1 = ?", P1_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaP2 Get MenuTrees via P2
func GetMenuTreesViaP2(offset int, limit int, P2_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p2 = ?", P2_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaP3 Get MenuTrees via P3
func GetMenuTreesViaP3(offset int, limit int, P3_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p3 = ?", P3_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaP4 Get MenuTrees via P4
func GetMenuTreesViaP4(offset int, limit int, P4_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p4 = ?", P4_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaP5 Get MenuTrees via P5
func GetMenuTreesViaP5(offset int, limit int, P5_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p5 = ?", P5_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaP6 Get MenuTrees via P6
func GetMenuTreesViaP6(offset int, limit int, P6_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p6 = ?", P6_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaP7 Get MenuTrees via P7
func GetMenuTreesViaP7(offset int, limit int, P7_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p7 = ?", P7_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaP8 Get MenuTrees via P8
func GetMenuTreesViaP8(offset int, limit int, P8_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p8 = ?", P8_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaP9 Get MenuTrees via P9
func GetMenuTreesViaP9(offset int, limit int, P9_ int, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("p9 = ?", P9_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// GetMenuTreesViaFormClass Get MenuTrees via FormClass
func GetMenuTreesViaFormClass(offset int, limit int, FormClass_ string, field string) (*[]*MenuTree, error) {
	var _MenuTree = new([]*MenuTree)
	err := Engine.Table("menu_tree").Where("form_class = ?", FormClass_).Limit(limit, offset).Desc(field).Find(_MenuTree)
	return _MenuTree, err
}

// HasMenuTreeViaMenuName Has MenuTree via MenuName
func HasMenuTreeViaMenuName(iMenuName string) bool {
	if has, err := Engine.Where("menu_name = ?", iMenuName).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaMlid Has MenuTree via Mlid
func HasMenuTreeViaMlid(iMlid int) bool {
	if has, err := Engine.Where("mlid = ?", iMlid).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaId Has MenuTree via Id
func HasMenuTreeViaId(iId string) bool {
	if has, err := Engine.Where("id = ?", iId).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaParent Has MenuTree via Parent
func HasMenuTreeViaParent(iParent string) bool {
	if has, err := Engine.Where("parent = ?", iParent).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaRouteName Has MenuTree via RouteName
func HasMenuTreeViaRouteName(iRouteName string) bool {
	if has, err := Engine.Where("route_name = ?", iRouteName).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaRouteParamKey Has MenuTree via RouteParamKey
func HasMenuTreeViaRouteParamKey(iRouteParamKey string) bool {
	if has, err := Engine.Where("route_param_key = ?", iRouteParamKey).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaRouteParameters Has MenuTree via RouteParameters
func HasMenuTreeViaRouteParameters(iRouteParameters []byte) bool {
	if has, err := Engine.Where("route_parameters = ?", iRouteParameters).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaUrl Has MenuTree via Url
func HasMenuTreeViaUrl(iUrl string) bool {
	if has, err := Engine.Where("url = ?", iUrl).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaTitle Has MenuTree via Title
func HasMenuTreeViaTitle(iTitle []byte) bool {
	if has, err := Engine.Where("title = ?", iTitle).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaDescription Has MenuTree via Description
func HasMenuTreeViaDescription(iDescription []byte) bool {
	if has, err := Engine.Where("description = ?", iDescription).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaClass Has MenuTree via Class
func HasMenuTreeViaClass(iClass string) bool {
	if has, err := Engine.Where("class = ?", iClass).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaOptions Has MenuTree via Options
func HasMenuTreeViaOptions(iOptions []byte) bool {
	if has, err := Engine.Where("options = ?", iOptions).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaProvider Has MenuTree via Provider
func HasMenuTreeViaProvider(iProvider string) bool {
	if has, err := Engine.Where("provider = ?", iProvider).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaEnabled Has MenuTree via Enabled
func HasMenuTreeViaEnabled(iEnabled int) bool {
	if has, err := Engine.Where("enabled = ?", iEnabled).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaDiscovered Has MenuTree via Discovered
func HasMenuTreeViaDiscovered(iDiscovered int) bool {
	if has, err := Engine.Where("discovered = ?", iDiscovered).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaExpanded Has MenuTree via Expanded
func HasMenuTreeViaExpanded(iExpanded int) bool {
	if has, err := Engine.Where("expanded = ?", iExpanded).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaWeight Has MenuTree via Weight
func HasMenuTreeViaWeight(iWeight int) bool {
	if has, err := Engine.Where("weight = ?", iWeight).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaMetadata Has MenuTree via Metadata
func HasMenuTreeViaMetadata(iMetadata []byte) bool {
	if has, err := Engine.Where("metadata = ?", iMetadata).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaHasChildren Has MenuTree via HasChildren
func HasMenuTreeViaHasChildren(iHasChildren int) bool {
	if has, err := Engine.Where("has_children = ?", iHasChildren).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaDepth Has MenuTree via Depth
func HasMenuTreeViaDepth(iDepth int) bool {
	if has, err := Engine.Where("depth = ?", iDepth).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaP1 Has MenuTree via P1
func HasMenuTreeViaP1(iP1 int) bool {
	if has, err := Engine.Where("p1 = ?", iP1).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaP2 Has MenuTree via P2
func HasMenuTreeViaP2(iP2 int) bool {
	if has, err := Engine.Where("p2 = ?", iP2).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaP3 Has MenuTree via P3
func HasMenuTreeViaP3(iP3 int) bool {
	if has, err := Engine.Where("p3 = ?", iP3).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaP4 Has MenuTree via P4
func HasMenuTreeViaP4(iP4 int) bool {
	if has, err := Engine.Where("p4 = ?", iP4).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaP5 Has MenuTree via P5
func HasMenuTreeViaP5(iP5 int) bool {
	if has, err := Engine.Where("p5 = ?", iP5).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaP6 Has MenuTree via P6
func HasMenuTreeViaP6(iP6 int) bool {
	if has, err := Engine.Where("p6 = ?", iP6).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaP7 Has MenuTree via P7
func HasMenuTreeViaP7(iP7 int) bool {
	if has, err := Engine.Where("p7 = ?", iP7).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaP8 Has MenuTree via P8
func HasMenuTreeViaP8(iP8 int) bool {
	if has, err := Engine.Where("p8 = ?", iP8).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaP9 Has MenuTree via P9
func HasMenuTreeViaP9(iP9 int) bool {
	if has, err := Engine.Where("p9 = ?", iP9).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// HasMenuTreeViaFormClass Has MenuTree via FormClass
func HasMenuTreeViaFormClass(iFormClass string) bool {
	if has, err := Engine.Where("form_class = ?", iFormClass).Get(new(MenuTree)); err != nil {
		return false
	} else {
		if has {
			return true
		}
		return false
	}
}

// GetMenuTreeViaMenuName Get MenuTree via MenuName
func GetMenuTreeViaMenuName(iMenuName string) (*MenuTree, error) {
	var _MenuTree = &MenuTree{MenuName: iMenuName}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaMlid Get MenuTree via Mlid
func GetMenuTreeViaMlid(iMlid int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Mlid: iMlid}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaId Get MenuTree via Id
func GetMenuTreeViaId(iId string) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Id: iId}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaParent Get MenuTree via Parent
func GetMenuTreeViaParent(iParent string) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Parent: iParent}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaRouteName Get MenuTree via RouteName
func GetMenuTreeViaRouteName(iRouteName string) (*MenuTree, error) {
	var _MenuTree = &MenuTree{RouteName: iRouteName}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaRouteParamKey Get MenuTree via RouteParamKey
func GetMenuTreeViaRouteParamKey(iRouteParamKey string) (*MenuTree, error) {
	var _MenuTree = &MenuTree{RouteParamKey: iRouteParamKey}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaRouteParameters Get MenuTree via RouteParameters
func GetMenuTreeViaRouteParameters(iRouteParameters []byte) (*MenuTree, error) {
	var _MenuTree = &MenuTree{RouteParameters: iRouteParameters}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaUrl Get MenuTree via Url
func GetMenuTreeViaUrl(iUrl string) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Url: iUrl}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaTitle Get MenuTree via Title
func GetMenuTreeViaTitle(iTitle []byte) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Title: iTitle}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaDescription Get MenuTree via Description
func GetMenuTreeViaDescription(iDescription []byte) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Description: iDescription}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaClass Get MenuTree via Class
func GetMenuTreeViaClass(iClass string) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Class: iClass}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaOptions Get MenuTree via Options
func GetMenuTreeViaOptions(iOptions []byte) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Options: iOptions}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaProvider Get MenuTree via Provider
func GetMenuTreeViaProvider(iProvider string) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Provider: iProvider}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaEnabled Get MenuTree via Enabled
func GetMenuTreeViaEnabled(iEnabled int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Enabled: iEnabled}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaDiscovered Get MenuTree via Discovered
func GetMenuTreeViaDiscovered(iDiscovered int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Discovered: iDiscovered}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaExpanded Get MenuTree via Expanded
func GetMenuTreeViaExpanded(iExpanded int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Expanded: iExpanded}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaWeight Get MenuTree via Weight
func GetMenuTreeViaWeight(iWeight int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Weight: iWeight}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaMetadata Get MenuTree via Metadata
func GetMenuTreeViaMetadata(iMetadata []byte) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Metadata: iMetadata}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaHasChildren Get MenuTree via HasChildren
func GetMenuTreeViaHasChildren(iHasChildren int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{HasChildren: iHasChildren}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaDepth Get MenuTree via Depth
func GetMenuTreeViaDepth(iDepth int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{Depth: iDepth}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaP1 Get MenuTree via P1
func GetMenuTreeViaP1(iP1 int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{P1: iP1}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaP2 Get MenuTree via P2
func GetMenuTreeViaP2(iP2 int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{P2: iP2}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaP3 Get MenuTree via P3
func GetMenuTreeViaP3(iP3 int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{P3: iP3}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaP4 Get MenuTree via P4
func GetMenuTreeViaP4(iP4 int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{P4: iP4}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaP5 Get MenuTree via P5
func GetMenuTreeViaP5(iP5 int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{P5: iP5}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaP6 Get MenuTree via P6
func GetMenuTreeViaP6(iP6 int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{P6: iP6}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaP7 Get MenuTree via P7
func GetMenuTreeViaP7(iP7 int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{P7: iP7}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaP8 Get MenuTree via P8
func GetMenuTreeViaP8(iP8 int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{P8: iP8}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaP9 Get MenuTree via P9
func GetMenuTreeViaP9(iP9 int) (*MenuTree, error) {
	var _MenuTree = &MenuTree{P9: iP9}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// GetMenuTreeViaFormClass Get MenuTree via FormClass
func GetMenuTreeViaFormClass(iFormClass string) (*MenuTree, error) {
	var _MenuTree = &MenuTree{FormClass: iFormClass}
	has, err := Engine.Get(_MenuTree)
	if has {
		return _MenuTree, err
	} else {
		return nil, err
	}
}

// SetMenuTreeViaMenuName Set MenuTree via MenuName
func SetMenuTreeViaMenuName(iMenuName string, menu_tree *MenuTree) (int64, error) {
	menu_tree.MenuName = iMenuName
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaMlid Set MenuTree via Mlid
func SetMenuTreeViaMlid(iMlid int, menu_tree *MenuTree) (int64, error) {
	menu_tree.Mlid = iMlid
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaId Set MenuTree via Id
func SetMenuTreeViaId(iId string, menu_tree *MenuTree) (int64, error) {
	menu_tree.Id = iId
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaParent Set MenuTree via Parent
func SetMenuTreeViaParent(iParent string, menu_tree *MenuTree) (int64, error) {
	menu_tree.Parent = iParent
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaRouteName Set MenuTree via RouteName
func SetMenuTreeViaRouteName(iRouteName string, menu_tree *MenuTree) (int64, error) {
	menu_tree.RouteName = iRouteName
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaRouteParamKey Set MenuTree via RouteParamKey
func SetMenuTreeViaRouteParamKey(iRouteParamKey string, menu_tree *MenuTree) (int64, error) {
	menu_tree.RouteParamKey = iRouteParamKey
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaRouteParameters Set MenuTree via RouteParameters
func SetMenuTreeViaRouteParameters(iRouteParameters []byte, menu_tree *MenuTree) (int64, error) {
	menu_tree.RouteParameters = iRouteParameters
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaUrl Set MenuTree via Url
func SetMenuTreeViaUrl(iUrl string, menu_tree *MenuTree) (int64, error) {
	menu_tree.Url = iUrl
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaTitle Set MenuTree via Title
func SetMenuTreeViaTitle(iTitle []byte, menu_tree *MenuTree) (int64, error) {
	menu_tree.Title = iTitle
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaDescription Set MenuTree via Description
func SetMenuTreeViaDescription(iDescription []byte, menu_tree *MenuTree) (int64, error) {
	menu_tree.Description = iDescription
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaClass Set MenuTree via Class
func SetMenuTreeViaClass(iClass string, menu_tree *MenuTree) (int64, error) {
	menu_tree.Class = iClass
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaOptions Set MenuTree via Options
func SetMenuTreeViaOptions(iOptions []byte, menu_tree *MenuTree) (int64, error) {
	menu_tree.Options = iOptions
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaProvider Set MenuTree via Provider
func SetMenuTreeViaProvider(iProvider string, menu_tree *MenuTree) (int64, error) {
	menu_tree.Provider = iProvider
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaEnabled Set MenuTree via Enabled
func SetMenuTreeViaEnabled(iEnabled int, menu_tree *MenuTree) (int64, error) {
	menu_tree.Enabled = iEnabled
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaDiscovered Set MenuTree via Discovered
func SetMenuTreeViaDiscovered(iDiscovered int, menu_tree *MenuTree) (int64, error) {
	menu_tree.Discovered = iDiscovered
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaExpanded Set MenuTree via Expanded
func SetMenuTreeViaExpanded(iExpanded int, menu_tree *MenuTree) (int64, error) {
	menu_tree.Expanded = iExpanded
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaWeight Set MenuTree via Weight
func SetMenuTreeViaWeight(iWeight int, menu_tree *MenuTree) (int64, error) {
	menu_tree.Weight = iWeight
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaMetadata Set MenuTree via Metadata
func SetMenuTreeViaMetadata(iMetadata []byte, menu_tree *MenuTree) (int64, error) {
	menu_tree.Metadata = iMetadata
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaHasChildren Set MenuTree via HasChildren
func SetMenuTreeViaHasChildren(iHasChildren int, menu_tree *MenuTree) (int64, error) {
	menu_tree.HasChildren = iHasChildren
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaDepth Set MenuTree via Depth
func SetMenuTreeViaDepth(iDepth int, menu_tree *MenuTree) (int64, error) {
	menu_tree.Depth = iDepth
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaP1 Set MenuTree via P1
func SetMenuTreeViaP1(iP1 int, menu_tree *MenuTree) (int64, error) {
	menu_tree.P1 = iP1
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaP2 Set MenuTree via P2
func SetMenuTreeViaP2(iP2 int, menu_tree *MenuTree) (int64, error) {
	menu_tree.P2 = iP2
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaP3 Set MenuTree via P3
func SetMenuTreeViaP3(iP3 int, menu_tree *MenuTree) (int64, error) {
	menu_tree.P3 = iP3
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaP4 Set MenuTree via P4
func SetMenuTreeViaP4(iP4 int, menu_tree *MenuTree) (int64, error) {
	menu_tree.P4 = iP4
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaP5 Set MenuTree via P5
func SetMenuTreeViaP5(iP5 int, menu_tree *MenuTree) (int64, error) {
	menu_tree.P5 = iP5
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaP6 Set MenuTree via P6
func SetMenuTreeViaP6(iP6 int, menu_tree *MenuTree) (int64, error) {
	menu_tree.P6 = iP6
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaP7 Set MenuTree via P7
func SetMenuTreeViaP7(iP7 int, menu_tree *MenuTree) (int64, error) {
	menu_tree.P7 = iP7
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaP8 Set MenuTree via P8
func SetMenuTreeViaP8(iP8 int, menu_tree *MenuTree) (int64, error) {
	menu_tree.P8 = iP8
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaP9 Set MenuTree via P9
func SetMenuTreeViaP9(iP9 int, menu_tree *MenuTree) (int64, error) {
	menu_tree.P9 = iP9
	return Engine.Insert(menu_tree)
}

// SetMenuTreeViaFormClass Set MenuTree via FormClass
func SetMenuTreeViaFormClass(iFormClass string, menu_tree *MenuTree) (int64, error) {
	menu_tree.FormClass = iFormClass
	return Engine.Insert(menu_tree)
}

// AddMenuTree Add MenuTree via all columns
func AddMenuTree(iMenuName string, iMlid int, iId string, iParent string, iRouteName string, iRouteParamKey string, iRouteParameters []byte, iUrl string, iTitle []byte, iDescription []byte, iClass string, iOptions []byte, iProvider string, iEnabled int, iDiscovered int, iExpanded int, iWeight int, iMetadata []byte, iHasChildren int, iDepth int, iP1 int, iP2 int, iP3 int, iP4 int, iP5 int, iP6 int, iP7 int, iP8 int, iP9 int, iFormClass string) error {
	_MenuTree := &MenuTree{MenuName: iMenuName, Mlid: iMlid, Id: iId, Parent: iParent, RouteName: iRouteName, RouteParamKey: iRouteParamKey, RouteParameters: iRouteParameters, Url: iUrl, Title: iTitle, Description: iDescription, Class: iClass, Options: iOptions, Provider: iProvider, Enabled: iEnabled, Discovered: iDiscovered, Expanded: iExpanded, Weight: iWeight, Metadata: iMetadata, HasChildren: iHasChildren, Depth: iDepth, P1: iP1, P2: iP2, P3: iP3, P4: iP4, P5: iP5, P6: iP6, P7: iP7, P8: iP8, P9: iP9, FormClass: iFormClass}
	if _, err := Engine.Insert(_MenuTree); err != nil {
		return err
	} else {
		return nil
	}
}

// PostMenuTree Post MenuTree via iMenuTree
func PostMenuTree(iMenuTree *MenuTree) (string, error) {
	_, err := Engine.Insert(iMenuTree)
	return iMenuTree.MenuName, err
}

// PutMenuTree Put MenuTree
func PutMenuTree(iMenuTree *MenuTree) (string, error) {
	_, err := Engine.Id(iMenuTree.MenuName).Update(iMenuTree)
	return iMenuTree.MenuName, err
}

// PutMenuTreeViaMenuName Put MenuTree via MenuName
func PutMenuTreeViaMenuName(MenuName_ string, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{MenuName: MenuName_})
	return row, err
}

// PutMenuTreeViaMlid Put MenuTree via Mlid
func PutMenuTreeViaMlid(Mlid_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Mlid: Mlid_})
	return row, err
}

// PutMenuTreeViaId Put MenuTree via Id
func PutMenuTreeViaId(Id_ string, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Id: Id_})
	return row, err
}

// PutMenuTreeViaParent Put MenuTree via Parent
func PutMenuTreeViaParent(Parent_ string, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Parent: Parent_})
	return row, err
}

// PutMenuTreeViaRouteName Put MenuTree via RouteName
func PutMenuTreeViaRouteName(RouteName_ string, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{RouteName: RouteName_})
	return row, err
}

// PutMenuTreeViaRouteParamKey Put MenuTree via RouteParamKey
func PutMenuTreeViaRouteParamKey(RouteParamKey_ string, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{RouteParamKey: RouteParamKey_})
	return row, err
}

// PutMenuTreeViaRouteParameters Put MenuTree via RouteParameters
func PutMenuTreeViaRouteParameters(RouteParameters_ []byte, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{RouteParameters: RouteParameters_})
	return row, err
}

// PutMenuTreeViaUrl Put MenuTree via Url
func PutMenuTreeViaUrl(Url_ string, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Url: Url_})
	return row, err
}

// PutMenuTreeViaTitle Put MenuTree via Title
func PutMenuTreeViaTitle(Title_ []byte, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Title: Title_})
	return row, err
}

// PutMenuTreeViaDescription Put MenuTree via Description
func PutMenuTreeViaDescription(Description_ []byte, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Description: Description_})
	return row, err
}

// PutMenuTreeViaClass Put MenuTree via Class
func PutMenuTreeViaClass(Class_ string, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Class: Class_})
	return row, err
}

// PutMenuTreeViaOptions Put MenuTree via Options
func PutMenuTreeViaOptions(Options_ []byte, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Options: Options_})
	return row, err
}

// PutMenuTreeViaProvider Put MenuTree via Provider
func PutMenuTreeViaProvider(Provider_ string, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Provider: Provider_})
	return row, err
}

// PutMenuTreeViaEnabled Put MenuTree via Enabled
func PutMenuTreeViaEnabled(Enabled_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Enabled: Enabled_})
	return row, err
}

// PutMenuTreeViaDiscovered Put MenuTree via Discovered
func PutMenuTreeViaDiscovered(Discovered_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Discovered: Discovered_})
	return row, err
}

// PutMenuTreeViaExpanded Put MenuTree via Expanded
func PutMenuTreeViaExpanded(Expanded_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Expanded: Expanded_})
	return row, err
}

// PutMenuTreeViaWeight Put MenuTree via Weight
func PutMenuTreeViaWeight(Weight_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Weight: Weight_})
	return row, err
}

// PutMenuTreeViaMetadata Put MenuTree via Metadata
func PutMenuTreeViaMetadata(Metadata_ []byte, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Metadata: Metadata_})
	return row, err
}

// PutMenuTreeViaHasChildren Put MenuTree via HasChildren
func PutMenuTreeViaHasChildren(HasChildren_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{HasChildren: HasChildren_})
	return row, err
}

// PutMenuTreeViaDepth Put MenuTree via Depth
func PutMenuTreeViaDepth(Depth_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{Depth: Depth_})
	return row, err
}

// PutMenuTreeViaP1 Put MenuTree via P1
func PutMenuTreeViaP1(P1_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{P1: P1_})
	return row, err
}

// PutMenuTreeViaP2 Put MenuTree via P2
func PutMenuTreeViaP2(P2_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{P2: P2_})
	return row, err
}

// PutMenuTreeViaP3 Put MenuTree via P3
func PutMenuTreeViaP3(P3_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{P3: P3_})
	return row, err
}

// PutMenuTreeViaP4 Put MenuTree via P4
func PutMenuTreeViaP4(P4_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{P4: P4_})
	return row, err
}

// PutMenuTreeViaP5 Put MenuTree via P5
func PutMenuTreeViaP5(P5_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{P5: P5_})
	return row, err
}

// PutMenuTreeViaP6 Put MenuTree via P6
func PutMenuTreeViaP6(P6_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{P6: P6_})
	return row, err
}

// PutMenuTreeViaP7 Put MenuTree via P7
func PutMenuTreeViaP7(P7_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{P7: P7_})
	return row, err
}

// PutMenuTreeViaP8 Put MenuTree via P8
func PutMenuTreeViaP8(P8_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{P8: P8_})
	return row, err
}

// PutMenuTreeViaP9 Put MenuTree via P9
func PutMenuTreeViaP9(P9_ int, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{P9: P9_})
	return row, err
}

// PutMenuTreeViaFormClass Put MenuTree via FormClass
func PutMenuTreeViaFormClass(FormClass_ string, iMenuTree *MenuTree) (int64, error) {
	row, err := Engine.Update(iMenuTree, &MenuTree{FormClass: FormClass_})
	return row, err
}

// UpdateMenuTreeViaMenuName via map[string]interface{}{}
func UpdateMenuTreeViaMenuName(iMenuName string, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("menu_name = ?", iMenuName).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaMlid via map[string]interface{}{}
func UpdateMenuTreeViaMlid(iMlid int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("mlid = ?", iMlid).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaId via map[string]interface{}{}
func UpdateMenuTreeViaId(iId string, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("id = ?", iId).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaParent via map[string]interface{}{}
func UpdateMenuTreeViaParent(iParent string, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("parent = ?", iParent).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaRouteName via map[string]interface{}{}
func UpdateMenuTreeViaRouteName(iRouteName string, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("route_name = ?", iRouteName).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaRouteParamKey via map[string]interface{}{}
func UpdateMenuTreeViaRouteParamKey(iRouteParamKey string, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("route_param_key = ?", iRouteParamKey).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaRouteParameters via map[string]interface{}{}
func UpdateMenuTreeViaRouteParameters(iRouteParameters []byte, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("route_parameters = ?", iRouteParameters).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaUrl via map[string]interface{}{}
func UpdateMenuTreeViaUrl(iUrl string, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("url = ?", iUrl).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaTitle via map[string]interface{}{}
func UpdateMenuTreeViaTitle(iTitle []byte, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("title = ?", iTitle).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaDescription via map[string]interface{}{}
func UpdateMenuTreeViaDescription(iDescription []byte, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("description = ?", iDescription).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaClass via map[string]interface{}{}
func UpdateMenuTreeViaClass(iClass string, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("class = ?", iClass).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaOptions via map[string]interface{}{}
func UpdateMenuTreeViaOptions(iOptions []byte, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("options = ?", iOptions).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaProvider via map[string]interface{}{}
func UpdateMenuTreeViaProvider(iProvider string, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("provider = ?", iProvider).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaEnabled via map[string]interface{}{}
func UpdateMenuTreeViaEnabled(iEnabled int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("enabled = ?", iEnabled).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaDiscovered via map[string]interface{}{}
func UpdateMenuTreeViaDiscovered(iDiscovered int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("discovered = ?", iDiscovered).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaExpanded via map[string]interface{}{}
func UpdateMenuTreeViaExpanded(iExpanded int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("expanded = ?", iExpanded).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaWeight via map[string]interface{}{}
func UpdateMenuTreeViaWeight(iWeight int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("weight = ?", iWeight).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaMetadata via map[string]interface{}{}
func UpdateMenuTreeViaMetadata(iMetadata []byte, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("metadata = ?", iMetadata).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaHasChildren via map[string]interface{}{}
func UpdateMenuTreeViaHasChildren(iHasChildren int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("has_children = ?", iHasChildren).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaDepth via map[string]interface{}{}
func UpdateMenuTreeViaDepth(iDepth int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("depth = ?", iDepth).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaP1 via map[string]interface{}{}
func UpdateMenuTreeViaP1(iP1 int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("p1 = ?", iP1).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaP2 via map[string]interface{}{}
func UpdateMenuTreeViaP2(iP2 int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("p2 = ?", iP2).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaP3 via map[string]interface{}{}
func UpdateMenuTreeViaP3(iP3 int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("p3 = ?", iP3).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaP4 via map[string]interface{}{}
func UpdateMenuTreeViaP4(iP4 int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("p4 = ?", iP4).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaP5 via map[string]interface{}{}
func UpdateMenuTreeViaP5(iP5 int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("p5 = ?", iP5).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaP6 via map[string]interface{}{}
func UpdateMenuTreeViaP6(iP6 int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("p6 = ?", iP6).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaP7 via map[string]interface{}{}
func UpdateMenuTreeViaP7(iP7 int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("p7 = ?", iP7).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaP8 via map[string]interface{}{}
func UpdateMenuTreeViaP8(iP8 int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("p8 = ?", iP8).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaP9 via map[string]interface{}{}
func UpdateMenuTreeViaP9(iP9 int, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("p9 = ?", iP9).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// UpdateMenuTreeViaFormClass via map[string]interface{}{}
func UpdateMenuTreeViaFormClass(iFormClass string, iMenuTreeMap *map[string]interface{}) error {
	if row, err := Engine.Table(new(MenuTree)).Where("form_class = ?", iFormClass).Update(iMenuTreeMap); (err != nil) || (row <= 0) {
		return err
	} else {
		return nil
	}
}

// DeleteMenuTree Delete MenuTree
func DeleteMenuTree(iMenuName string) (int64, error) {
	row, err := Engine.Id(iMenuName).Delete(new(MenuTree))
	return row, err
}

// DeleteMenuTreeViaMenuName Delete MenuTree via MenuName
func DeleteMenuTreeViaMenuName(iMenuName string) (err error) {
	var has bool
	var _MenuTree = &MenuTree{MenuName: iMenuName}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("menu_name = ?", iMenuName).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaMlid Delete MenuTree via Mlid
func DeleteMenuTreeViaMlid(iMlid int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Mlid: iMlid}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("mlid = ?", iMlid).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaId Delete MenuTree via Id
func DeleteMenuTreeViaId(iId string) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Id: iId}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("id = ?", iId).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaParent Delete MenuTree via Parent
func DeleteMenuTreeViaParent(iParent string) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Parent: iParent}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("parent = ?", iParent).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaRouteName Delete MenuTree via RouteName
func DeleteMenuTreeViaRouteName(iRouteName string) (err error) {
	var has bool
	var _MenuTree = &MenuTree{RouteName: iRouteName}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("route_name = ?", iRouteName).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaRouteParamKey Delete MenuTree via RouteParamKey
func DeleteMenuTreeViaRouteParamKey(iRouteParamKey string) (err error) {
	var has bool
	var _MenuTree = &MenuTree{RouteParamKey: iRouteParamKey}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("route_param_key = ?", iRouteParamKey).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaRouteParameters Delete MenuTree via RouteParameters
func DeleteMenuTreeViaRouteParameters(iRouteParameters []byte) (err error) {
	var has bool
	var _MenuTree = &MenuTree{RouteParameters: iRouteParameters}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("route_parameters = ?", iRouteParameters).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaUrl Delete MenuTree via Url
func DeleteMenuTreeViaUrl(iUrl string) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Url: iUrl}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("url = ?", iUrl).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaTitle Delete MenuTree via Title
func DeleteMenuTreeViaTitle(iTitle []byte) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Title: iTitle}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("title = ?", iTitle).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaDescription Delete MenuTree via Description
func DeleteMenuTreeViaDescription(iDescription []byte) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Description: iDescription}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("description = ?", iDescription).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaClass Delete MenuTree via Class
func DeleteMenuTreeViaClass(iClass string) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Class: iClass}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("class = ?", iClass).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaOptions Delete MenuTree via Options
func DeleteMenuTreeViaOptions(iOptions []byte) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Options: iOptions}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("options = ?", iOptions).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaProvider Delete MenuTree via Provider
func DeleteMenuTreeViaProvider(iProvider string) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Provider: iProvider}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("provider = ?", iProvider).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaEnabled Delete MenuTree via Enabled
func DeleteMenuTreeViaEnabled(iEnabled int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Enabled: iEnabled}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("enabled = ?", iEnabled).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaDiscovered Delete MenuTree via Discovered
func DeleteMenuTreeViaDiscovered(iDiscovered int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Discovered: iDiscovered}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("discovered = ?", iDiscovered).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaExpanded Delete MenuTree via Expanded
func DeleteMenuTreeViaExpanded(iExpanded int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Expanded: iExpanded}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("expanded = ?", iExpanded).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaWeight Delete MenuTree via Weight
func DeleteMenuTreeViaWeight(iWeight int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Weight: iWeight}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("weight = ?", iWeight).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaMetadata Delete MenuTree via Metadata
func DeleteMenuTreeViaMetadata(iMetadata []byte) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Metadata: iMetadata}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("metadata = ?", iMetadata).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaHasChildren Delete MenuTree via HasChildren
func DeleteMenuTreeViaHasChildren(iHasChildren int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{HasChildren: iHasChildren}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("has_children = ?", iHasChildren).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaDepth Delete MenuTree via Depth
func DeleteMenuTreeViaDepth(iDepth int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{Depth: iDepth}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("depth = ?", iDepth).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaP1 Delete MenuTree via P1
func DeleteMenuTreeViaP1(iP1 int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{P1: iP1}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("p1 = ?", iP1).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaP2 Delete MenuTree via P2
func DeleteMenuTreeViaP2(iP2 int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{P2: iP2}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("p2 = ?", iP2).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaP3 Delete MenuTree via P3
func DeleteMenuTreeViaP3(iP3 int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{P3: iP3}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("p3 = ?", iP3).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaP4 Delete MenuTree via P4
func DeleteMenuTreeViaP4(iP4 int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{P4: iP4}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("p4 = ?", iP4).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaP5 Delete MenuTree via P5
func DeleteMenuTreeViaP5(iP5 int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{P5: iP5}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("p5 = ?", iP5).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaP6 Delete MenuTree via P6
func DeleteMenuTreeViaP6(iP6 int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{P6: iP6}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("p6 = ?", iP6).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaP7 Delete MenuTree via P7
func DeleteMenuTreeViaP7(iP7 int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{P7: iP7}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("p7 = ?", iP7).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaP8 Delete MenuTree via P8
func DeleteMenuTreeViaP8(iP8 int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{P8: iP8}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("p8 = ?", iP8).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaP9 Delete MenuTree via P9
func DeleteMenuTreeViaP9(iP9 int) (err error) {
	var has bool
	var _MenuTree = &MenuTree{P9: iP9}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("p9 = ?", iP9).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}

// DeleteMenuTreeViaFormClass Delete MenuTree via FormClass
func DeleteMenuTreeViaFormClass(iFormClass string) (err error) {
	var has bool
	var _MenuTree = &MenuTree{FormClass: iFormClass}
	if has, err = Engine.Get(_MenuTree); (has == true) && (err == nil) {
		if row, err := Engine.Where("form_class = ?", iFormClass).Delete(new(MenuTree)); (err != nil) || (row <= 0) {
			return err
		} else {
			return nil
		}
	}
	return
}
