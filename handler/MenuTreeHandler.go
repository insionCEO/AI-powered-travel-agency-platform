package handler

import (
	"drupapp/helper"
	"drupapp/model"
	"github.com/insionng/macross"
)

func GetMenuTreesCountHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()

	if offset > 0 {
		var m = map[string]interface{}{}
		_int64, _error := model.GetMenuTreesCount(offset, limit)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		m["menu_treesCount"] = _int64
		return self.JSON(m)
	}
	herr.Message = "Can't get to the GetMenuTreesCount's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeCountViaMenuNameHandler(self *macross.Context) error {
	MenuName_ := self.Args("menu_name").String()
	_int64 := model.GetMenuTreeCountViaMenuName(MenuName_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaMlidHandler(self *macross.Context) error {
	Mlid_ := self.Args("mlid").MustInt()
	_int64 := model.GetMenuTreeCountViaMlid(Mlid_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaIdHandler(self *macross.Context) error {
	Id_ := self.Args("id").String()
	_int64 := model.GetMenuTreeCountViaId(Id_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaParentHandler(self *macross.Context) error {
	Parent_ := self.Args("parent").String()
	_int64 := model.GetMenuTreeCountViaParent(Parent_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaRouteNameHandler(self *macross.Context) error {
	RouteName_ := self.Args("route_name").String()
	_int64 := model.GetMenuTreeCountViaRouteName(RouteName_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaRouteParamKeyHandler(self *macross.Context) error {
	RouteParamKey_ := self.Args("route_param_key").String()
	_int64 := model.GetMenuTreeCountViaRouteParamKey(RouteParamKey_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaRouteParametersHandler(self *macross.Context) error {
	RouteParameters_ := self.Args("route_parameters").Bytes()
	_int64 := model.GetMenuTreeCountViaRouteParameters(RouteParameters_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaUrlHandler(self *macross.Context) error {
	Url_ := self.Args("url").String()
	_int64 := model.GetMenuTreeCountViaUrl(Url_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaTitleHandler(self *macross.Context) error {
	Title_ := self.Args("title").Bytes()
	_int64 := model.GetMenuTreeCountViaTitle(Title_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaDescriptionHandler(self *macross.Context) error {
	Description_ := self.Args("description").Bytes()
	_int64 := model.GetMenuTreeCountViaDescription(Description_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaClassHandler(self *macross.Context) error {
	Class_ := self.Args("class").String()
	_int64 := model.GetMenuTreeCountViaClass(Class_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaOptionsHandler(self *macross.Context) error {
	Options_ := self.Args("options").Bytes()
	_int64 := model.GetMenuTreeCountViaOptions(Options_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaProviderHandler(self *macross.Context) error {
	Provider_ := self.Args("provider").String()
	_int64 := model.GetMenuTreeCountViaProvider(Provider_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaEnabledHandler(self *macross.Context) error {
	Enabled_ := self.Args("enabled").MustInt()
	_int64 := model.GetMenuTreeCountViaEnabled(Enabled_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaDiscoveredHandler(self *macross.Context) error {
	Discovered_ := self.Args("discovered").MustInt()
	_int64 := model.GetMenuTreeCountViaDiscovered(Discovered_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaExpandedHandler(self *macross.Context) error {
	Expanded_ := self.Args("expanded").MustInt()
	_int64 := model.GetMenuTreeCountViaExpanded(Expanded_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaWeightHandler(self *macross.Context) error {
	Weight_ := self.Args("weight").MustInt()
	_int64 := model.GetMenuTreeCountViaWeight(Weight_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaMetadataHandler(self *macross.Context) error {
	Metadata_ := self.Args("metadata").Bytes()
	_int64 := model.GetMenuTreeCountViaMetadata(Metadata_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaHasChildrenHandler(self *macross.Context) error {
	HasChildren_ := self.Args("has_children").MustInt()
	_int64 := model.GetMenuTreeCountViaHasChildren(HasChildren_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaDepthHandler(self *macross.Context) error {
	Depth_ := self.Args("depth").MustInt()
	_int64 := model.GetMenuTreeCountViaDepth(Depth_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaP1Handler(self *macross.Context) error {
	P1_ := self.Args("p1").MustInt()
	_int64 := model.GetMenuTreeCountViaP1(P1_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaP2Handler(self *macross.Context) error {
	P2_ := self.Args("p2").MustInt()
	_int64 := model.GetMenuTreeCountViaP2(P2_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaP3Handler(self *macross.Context) error {
	P3_ := self.Args("p3").MustInt()
	_int64 := model.GetMenuTreeCountViaP3(P3_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaP4Handler(self *macross.Context) error {
	P4_ := self.Args("p4").MustInt()
	_int64 := model.GetMenuTreeCountViaP4(P4_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaP5Handler(self *macross.Context) error {
	P5_ := self.Args("p5").MustInt()
	_int64 := model.GetMenuTreeCountViaP5(P5_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaP6Handler(self *macross.Context) error {
	P6_ := self.Args("p6").MustInt()
	_int64 := model.GetMenuTreeCountViaP6(P6_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaP7Handler(self *macross.Context) error {
	P7_ := self.Args("p7").MustInt()
	_int64 := model.GetMenuTreeCountViaP7(P7_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaP8Handler(self *macross.Context) error {
	P8_ := self.Args("p8").MustInt()
	_int64 := model.GetMenuTreeCountViaP8(P8_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaP9Handler(self *macross.Context) error {
	P9_ := self.Args("p9").MustInt()
	_int64 := model.GetMenuTreeCountViaP9(P9_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreeCountViaFormClassHandler(self *macross.Context) error {
	FormClass_ := self.Args("form_class").String()
	_int64 := model.GetMenuTreeCountViaFormClass(FormClass_)
	var m = map[string]interface{}{}
	if _int64 <= 0 {
		m["menu_treeCount"] = 0
	}
	m["menu_treeCount"] = _int64
	return self.JSON(m)
}

func GetMenuTreesViaMenuNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iMenuName := self.Args("menu_name").String()
	if (offset > 0) && helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesViaMenuName(offset, limit, iMenuName, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaMenuName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaMlidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iMlid := self.Args("mlid").MustInt()
	if (offset > 0) && helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesViaMlid(offset, limit, iMlid, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaMlid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iId := self.Args("id").String()
	if (offset > 0) && helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesViaId(offset, limit, iId, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaId's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iParent := self.Args("parent").String()
	if (offset > 0) && helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesViaParent(offset, limit, iParent, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iRouteName := self.Args("route_name").String()
	if (offset > 0) && helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesViaRouteName(offset, limit, iRouteName, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iRouteParamKey := self.Args("route_param_key").String()
	if (offset > 0) && helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesViaRouteParamKey(offset, limit, iRouteParamKey, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	if (offset > 0) && helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesViaRouteParameters(offset, limit, iRouteParameters, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iUrl := self.Args("url").String()
	if (offset > 0) && helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesViaUrl(offset, limit, iUrl, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iTitle := self.Args("title").Bytes()
	if (offset > 0) && helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesViaTitle(offset, limit, iTitle, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iDescription := self.Args("description").Bytes()
	if (offset > 0) && helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesViaDescription(offset, limit, iDescription, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iClass := self.Args("class").String()
	if (offset > 0) && helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesViaClass(offset, limit, iClass, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iOptions := self.Args("options").Bytes()
	if (offset > 0) && helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesViaOptions(offset, limit, iOptions, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iProvider := self.Args("provider").String()
	if (offset > 0) && helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesViaProvider(offset, limit, iProvider, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iEnabled := self.Args("enabled").MustInt()
	if (offset > 0) && helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesViaEnabled(offset, limit, iEnabled, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iDiscovered := self.Args("discovered").MustInt()
	if (offset > 0) && helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesViaDiscovered(offset, limit, iDiscovered, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iExpanded := self.Args("expanded").MustInt()
	if (offset > 0) && helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesViaExpanded(offset, limit, iExpanded, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iWeight := self.Args("weight").MustInt()
	if (offset > 0) && helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesViaWeight(offset, limit, iWeight, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iMetadata := self.Args("metadata").Bytes()
	if (offset > 0) && helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesViaMetadata(offset, limit, iMetadata, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iHasChildren := self.Args("has_children").MustInt()
	if (offset > 0) && helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesViaHasChildren(offset, limit, iHasChildren, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iDepth := self.Args("depth").MustInt()
	if (offset > 0) && helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesViaDepth(offset, limit, iDepth, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iP1 := self.Args("p1").MustInt()
	if (offset > 0) && helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesViaP1(offset, limit, iP1, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iP2 := self.Args("p2").MustInt()
	if (offset > 0) && helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesViaP2(offset, limit, iP2, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iP3 := self.Args("p3").MustInt()
	if (offset > 0) && helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesViaP3(offset, limit, iP3, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iP4 := self.Args("p4").MustInt()
	if (offset > 0) && helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesViaP4(offset, limit, iP4, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iP5 := self.Args("p5").MustInt()
	if (offset > 0) && helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesViaP5(offset, limit, iP5, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iP6 := self.Args("p6").MustInt()
	if (offset > 0) && helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesViaP6(offset, limit, iP6, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iP7 := self.Args("p7").MustInt()
	if (offset > 0) && helper.IsHas(iP7) {
		_MenuTree, _error := model.GetMenuTreesViaP7(offset, limit, iP7, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iP8 := self.Args("p8").MustInt()
	if (offset > 0) && helper.IsHas(iP8) {
		_MenuTree, _error := model.GetMenuTreesViaP8(offset, limit, iP8, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iP9 := self.Args("p9").MustInt()
	if (offset > 0) && helper.IsHas(iP9) {
		_MenuTree, _error := model.GetMenuTreesViaP9(offset, limit, iP9, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesViaFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	iFormClass := self.Args("form_class").String()
	if (offset > 0) && helper.IsHas(iFormClass) {
		_MenuTree, _error := model.GetMenuTreesViaFormClass(offset, limit, iFormClass, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesViaFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndId(offset, limit, iMenuName,iMlid,iId)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndId's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndParent(offset, limit, iMenuName,iMlid,iParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndRouteName(offset, limit, iMenuName,iMlid,iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndRouteParamKey(offset, limit, iMenuName,iMlid,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndRouteParameters(offset, limit, iMenuName,iMlid,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndUrl(offset, limit, iMenuName,iMlid,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndTitle(offset, limit, iMenuName,iMlid,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndDescription(offset, limit, iMenuName,iMlid,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndClass(offset, limit, iMenuName,iMlid,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndOptions(offset, limit, iMenuName,iMlid,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndProvider(offset, limit, iMenuName,iMlid,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndEnabled(offset, limit, iMenuName,iMlid,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndDiscovered(offset, limit, iMenuName,iMlid,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndExpanded(offset, limit, iMenuName,iMlid,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndWeight(offset, limit, iMenuName,iMlid,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndMetadata(offset, limit, iMenuName,iMlid,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndHasChildren(offset, limit, iMenuName,iMlid,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndDepth(offset, limit, iMenuName,iMlid,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndP1(offset, limit, iMenuName,iMlid,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndP2(offset, limit, iMenuName,iMlid,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndP3(offset, limit, iMenuName,iMlid,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndP4(offset, limit, iMenuName,iMlid,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndP5(offset, limit, iMenuName,iMlid,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndP6(offset, limit, iMenuName,iMlid,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndP7(offset, limit, iMenuName,iMlid,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndP8(offset, limit, iMenuName,iMlid,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndP9(offset, limit, iMenuName,iMlid,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlidAndFormClass(offset, limit, iMenuName,iMlid,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlidAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndParent(offset, limit, iMenuName,iId,iParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndRouteName(offset, limit, iMenuName,iId,iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndRouteParamKey(offset, limit, iMenuName,iId,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndRouteParameters(offset, limit, iMenuName,iId,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndUrl(offset, limit, iMenuName,iId,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndTitle(offset, limit, iMenuName,iId,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndDescription(offset, limit, iMenuName,iId,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndClass(offset, limit, iMenuName,iId,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndOptions(offset, limit, iMenuName,iId,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndProvider(offset, limit, iMenuName,iId,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndEnabled(offset, limit, iMenuName,iId,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndDiscovered(offset, limit, iMenuName,iId,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndExpanded(offset, limit, iMenuName,iId,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndWeight(offset, limit, iMenuName,iId,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndMetadata(offset, limit, iMenuName,iId,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndHasChildren(offset, limit, iMenuName,iId,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndDepth(offset, limit, iMenuName,iId,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndP1(offset, limit, iMenuName,iId,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndP2(offset, limit, iMenuName,iId,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndP3(offset, limit, iMenuName,iId,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndP4(offset, limit, iMenuName,iId,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndP5(offset, limit, iMenuName,iId,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndP6(offset, limit, iMenuName,iId,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndP7(offset, limit, iMenuName,iId,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndP8(offset, limit, iMenuName,iId,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndP9(offset, limit, iMenuName,iId,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndIdAndFormClass(offset, limit, iMenuName,iId,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndIdAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndRouteName(offset, limit, iMenuName,iParent,iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndRouteParamKey(offset, limit, iMenuName,iParent,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndRouteParameters(offset, limit, iMenuName,iParent,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndUrl(offset, limit, iMenuName,iParent,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndTitle(offset, limit, iMenuName,iParent,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndDescription(offset, limit, iMenuName,iParent,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndClass(offset, limit, iMenuName,iParent,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndOptions(offset, limit, iMenuName,iParent,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndProvider(offset, limit, iMenuName,iParent,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndEnabled(offset, limit, iMenuName,iParent,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndDiscovered(offset, limit, iMenuName,iParent,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndExpanded(offset, limit, iMenuName,iParent,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndWeight(offset, limit, iMenuName,iParent,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndMetadata(offset, limit, iMenuName,iParent,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndHasChildren(offset, limit, iMenuName,iParent,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndDepth(offset, limit, iMenuName,iParent,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndP1(offset, limit, iMenuName,iParent,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndP2(offset, limit, iMenuName,iParent,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndP3(offset, limit, iMenuName,iParent,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndP4(offset, limit, iMenuName,iParent,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndP5(offset, limit, iMenuName,iParent,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndP6(offset, limit, iMenuName,iParent,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndP7(offset, limit, iMenuName,iParent,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndP8(offset, limit, iMenuName,iParent,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndP9(offset, limit, iMenuName,iParent,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParentAndFormClass(offset, limit, iMenuName,iParent,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParentAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndRouteParamKey(offset, limit, iMenuName,iRouteName,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndRouteParameters(offset, limit, iMenuName,iRouteName,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndUrl(offset, limit, iMenuName,iRouteName,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndTitle(offset, limit, iMenuName,iRouteName,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndDescription(offset, limit, iMenuName,iRouteName,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndClass(offset, limit, iMenuName,iRouteName,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndOptions(offset, limit, iMenuName,iRouteName,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndProvider(offset, limit, iMenuName,iRouteName,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndEnabled(offset, limit, iMenuName,iRouteName,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndDiscovered(offset, limit, iMenuName,iRouteName,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndExpanded(offset, limit, iMenuName,iRouteName,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndWeight(offset, limit, iMenuName,iRouteName,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndMetadata(offset, limit, iMenuName,iRouteName,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndHasChildren(offset, limit, iMenuName,iRouteName,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndDepth(offset, limit, iMenuName,iRouteName,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndP1(offset, limit, iMenuName,iRouteName,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndP2(offset, limit, iMenuName,iRouteName,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndP3(offset, limit, iMenuName,iRouteName,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndP4(offset, limit, iMenuName,iRouteName,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndP5(offset, limit, iMenuName,iRouteName,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndP6(offset, limit, iMenuName,iRouteName,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndP7(offset, limit, iMenuName,iRouteName,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndP8(offset, limit, iMenuName,iRouteName,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndP9(offset, limit, iMenuName,iRouteName,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteNameAndFormClass(offset, limit, iMenuName,iRouteName,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteNameAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndRouteParameters(offset, limit, iMenuName,iRouteParamKey,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndUrl(offset, limit, iMenuName,iRouteParamKey,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndTitle(offset, limit, iMenuName,iRouteParamKey,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndDescription(offset, limit, iMenuName,iRouteParamKey,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndClass(offset, limit, iMenuName,iRouteParamKey,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndOptions(offset, limit, iMenuName,iRouteParamKey,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndProvider(offset, limit, iMenuName,iRouteParamKey,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndEnabled(offset, limit, iMenuName,iRouteParamKey,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndDiscovered(offset, limit, iMenuName,iRouteParamKey,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndExpanded(offset, limit, iMenuName,iRouteParamKey,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndWeight(offset, limit, iMenuName,iRouteParamKey,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndMetadata(offset, limit, iMenuName,iRouteParamKey,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndHasChildren(offset, limit, iMenuName,iRouteParamKey,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndDepth(offset, limit, iMenuName,iRouteParamKey,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndP1(offset, limit, iMenuName,iRouteParamKey,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndP2(offset, limit, iMenuName,iRouteParamKey,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndP3(offset, limit, iMenuName,iRouteParamKey,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndP4(offset, limit, iMenuName,iRouteParamKey,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndP5(offset, limit, iMenuName,iRouteParamKey,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndP6(offset, limit, iMenuName,iRouteParamKey,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndP7(offset, limit, iMenuName,iRouteParamKey,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndP8(offset, limit, iMenuName,iRouteParamKey,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndP9(offset, limit, iMenuName,iRouteParamKey,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKeyAndFormClass(offset, limit, iMenuName,iRouteParamKey,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKeyAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndUrl(offset, limit, iMenuName,iRouteParameters,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndTitle(offset, limit, iMenuName,iRouteParameters,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndDescription(offset, limit, iMenuName,iRouteParameters,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndClass(offset, limit, iMenuName,iRouteParameters,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndOptions(offset, limit, iMenuName,iRouteParameters,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndProvider(offset, limit, iMenuName,iRouteParameters,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndEnabled(offset, limit, iMenuName,iRouteParameters,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndDiscovered(offset, limit, iMenuName,iRouteParameters,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndExpanded(offset, limit, iMenuName,iRouteParameters,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndWeight(offset, limit, iMenuName,iRouteParameters,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndMetadata(offset, limit, iMenuName,iRouteParameters,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndHasChildren(offset, limit, iMenuName,iRouteParameters,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndDepth(offset, limit, iMenuName,iRouteParameters,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndP1(offset, limit, iMenuName,iRouteParameters,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndP2(offset, limit, iMenuName,iRouteParameters,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndP3(offset, limit, iMenuName,iRouteParameters,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndP4(offset, limit, iMenuName,iRouteParameters,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndP5(offset, limit, iMenuName,iRouteParameters,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndP6(offset, limit, iMenuName,iRouteParameters,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndP7(offset, limit, iMenuName,iRouteParameters,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndP8(offset, limit, iMenuName,iRouteParameters,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndP9(offset, limit, iMenuName,iRouteParameters,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParametersAndFormClass(offset, limit, iMenuName,iRouteParameters,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParametersAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndTitle(offset, limit, iMenuName,iUrl,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndDescription(offset, limit, iMenuName,iUrl,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndClass(offset, limit, iMenuName,iUrl,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndOptions(offset, limit, iMenuName,iUrl,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndProvider(offset, limit, iMenuName,iUrl,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndEnabled(offset, limit, iMenuName,iUrl,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndDiscovered(offset, limit, iMenuName,iUrl,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndExpanded(offset, limit, iMenuName,iUrl,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndWeight(offset, limit, iMenuName,iUrl,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndMetadata(offset, limit, iMenuName,iUrl,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndHasChildren(offset, limit, iMenuName,iUrl,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndDepth(offset, limit, iMenuName,iUrl,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndP1(offset, limit, iMenuName,iUrl,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndP2(offset, limit, iMenuName,iUrl,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndP3(offset, limit, iMenuName,iUrl,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndP4(offset, limit, iMenuName,iUrl,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndP5(offset, limit, iMenuName,iUrl,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndP6(offset, limit, iMenuName,iUrl,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndP7(offset, limit, iMenuName,iUrl,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndP8(offset, limit, iMenuName,iUrl,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndP9(offset, limit, iMenuName,iUrl,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrlAndFormClass(offset, limit, iMenuName,iUrl,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrlAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndDescription(offset, limit, iMenuName,iTitle,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndClass(offset, limit, iMenuName,iTitle,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndOptions(offset, limit, iMenuName,iTitle,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndProvider(offset, limit, iMenuName,iTitle,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndEnabled(offset, limit, iMenuName,iTitle,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndDiscovered(offset, limit, iMenuName,iTitle,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndExpanded(offset, limit, iMenuName,iTitle,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndWeight(offset, limit, iMenuName,iTitle,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndMetadata(offset, limit, iMenuName,iTitle,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndHasChildren(offset, limit, iMenuName,iTitle,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndDepth(offset, limit, iMenuName,iTitle,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndP1(offset, limit, iMenuName,iTitle,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndP2(offset, limit, iMenuName,iTitle,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndP3(offset, limit, iMenuName,iTitle,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndP4(offset, limit, iMenuName,iTitle,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndP5(offset, limit, iMenuName,iTitle,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndP6(offset, limit, iMenuName,iTitle,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndP7(offset, limit, iMenuName,iTitle,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndP8(offset, limit, iMenuName,iTitle,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndP9(offset, limit, iMenuName,iTitle,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitleAndFormClass(offset, limit, iMenuName,iTitle,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitleAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndClass(offset, limit, iMenuName,iDescription,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndOptions(offset, limit, iMenuName,iDescription,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndProvider(offset, limit, iMenuName,iDescription,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndEnabled(offset, limit, iMenuName,iDescription,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndDiscovered(offset, limit, iMenuName,iDescription,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndExpanded(offset, limit, iMenuName,iDescription,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndWeight(offset, limit, iMenuName,iDescription,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndMetadata(offset, limit, iMenuName,iDescription,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndHasChildren(offset, limit, iMenuName,iDescription,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndDepth(offset, limit, iMenuName,iDescription,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndP1(offset, limit, iMenuName,iDescription,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndP2(offset, limit, iMenuName,iDescription,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndP3(offset, limit, iMenuName,iDescription,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndP4(offset, limit, iMenuName,iDescription,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndP5(offset, limit, iMenuName,iDescription,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndP6(offset, limit, iMenuName,iDescription,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndP7(offset, limit, iMenuName,iDescription,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndP8(offset, limit, iMenuName,iDescription,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndP9(offset, limit, iMenuName,iDescription,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescriptionAndFormClass(offset, limit, iMenuName,iDescription,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescriptionAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndOptions(offset, limit, iMenuName,iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndProvider(offset, limit, iMenuName,iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndEnabled(offset, limit, iMenuName,iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndDiscovered(offset, limit, iMenuName,iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndExpanded(offset, limit, iMenuName,iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndWeight(offset, limit, iMenuName,iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndMetadata(offset, limit, iMenuName,iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndHasChildren(offset, limit, iMenuName,iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndDepth(offset, limit, iMenuName,iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndP1(offset, limit, iMenuName,iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndP2(offset, limit, iMenuName,iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndP3(offset, limit, iMenuName,iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndP4(offset, limit, iMenuName,iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndP5(offset, limit, iMenuName,iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndP6(offset, limit, iMenuName,iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndP7(offset, limit, iMenuName,iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndP8(offset, limit, iMenuName,iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndP9(offset, limit, iMenuName,iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClassAndFormClass(offset, limit, iMenuName,iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndProvider(offset, limit, iMenuName,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndEnabled(offset, limit, iMenuName,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndDiscovered(offset, limit, iMenuName,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndExpanded(offset, limit, iMenuName,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndWeight(offset, limit, iMenuName,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndMetadata(offset, limit, iMenuName,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndHasChildren(offset, limit, iMenuName,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndDepth(offset, limit, iMenuName,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndP1(offset, limit, iMenuName,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndP2(offset, limit, iMenuName,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndP3(offset, limit, iMenuName,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndP4(offset, limit, iMenuName,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndP5(offset, limit, iMenuName,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndP6(offset, limit, iMenuName,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndP7(offset, limit, iMenuName,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndP8(offset, limit, iMenuName,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndP9(offset, limit, iMenuName,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptionsAndFormClass(offset, limit, iMenuName,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndEnabled(offset, limit, iMenuName,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndDiscovered(offset, limit, iMenuName,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndExpanded(offset, limit, iMenuName,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndWeight(offset, limit, iMenuName,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndMetadata(offset, limit, iMenuName,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndHasChildren(offset, limit, iMenuName,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndDepth(offset, limit, iMenuName,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndP1(offset, limit, iMenuName,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndP2(offset, limit, iMenuName,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndP3(offset, limit, iMenuName,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndP4(offset, limit, iMenuName,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndP5(offset, limit, iMenuName,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndP6(offset, limit, iMenuName,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndP7(offset, limit, iMenuName,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndP8(offset, limit, iMenuName,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndP9(offset, limit, iMenuName,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProviderAndFormClass(offset, limit, iMenuName,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndDiscovered(offset, limit, iMenuName,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndExpanded(offset, limit, iMenuName,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndWeight(offset, limit, iMenuName,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndMetadata(offset, limit, iMenuName,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndHasChildren(offset, limit, iMenuName,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndDepth(offset, limit, iMenuName,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndP1(offset, limit, iMenuName,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndP2(offset, limit, iMenuName,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndP3(offset, limit, iMenuName,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndP4(offset, limit, iMenuName,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndP5(offset, limit, iMenuName,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndP6(offset, limit, iMenuName,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndP7(offset, limit, iMenuName,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndP8(offset, limit, iMenuName,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndP9(offset, limit, iMenuName,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabledAndFormClass(offset, limit, iMenuName,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndExpanded(offset, limit, iMenuName,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndWeight(offset, limit, iMenuName,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndMetadata(offset, limit, iMenuName,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndHasChildren(offset, limit, iMenuName,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndDepth(offset, limit, iMenuName,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndP1(offset, limit, iMenuName,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndP2(offset, limit, iMenuName,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndP3(offset, limit, iMenuName,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndP4(offset, limit, iMenuName,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndP5(offset, limit, iMenuName,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndP6(offset, limit, iMenuName,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndP7(offset, limit, iMenuName,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndP8(offset, limit, iMenuName,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndP9(offset, limit, iMenuName,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscoveredAndFormClass(offset, limit, iMenuName,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndWeight(offset, limit, iMenuName,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndMetadata(offset, limit, iMenuName,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndHasChildren(offset, limit, iMenuName,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndDepth(offset, limit, iMenuName,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndP1(offset, limit, iMenuName,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndP2(offset, limit, iMenuName,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndP3(offset, limit, iMenuName,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndP4(offset, limit, iMenuName,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndP5(offset, limit, iMenuName,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndP6(offset, limit, iMenuName,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndP7(offset, limit, iMenuName,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndP8(offset, limit, iMenuName,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndP9(offset, limit, iMenuName,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpandedAndFormClass(offset, limit, iMenuName,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndMetadata(offset, limit, iMenuName,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndHasChildren(offset, limit, iMenuName,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndDepth(offset, limit, iMenuName,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndP1(offset, limit, iMenuName,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndP2(offset, limit, iMenuName,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndP3(offset, limit, iMenuName,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndP4(offset, limit, iMenuName,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndP5(offset, limit, iMenuName,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndP6(offset, limit, iMenuName,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndP7(offset, limit, iMenuName,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndP8(offset, limit, iMenuName,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndP9(offset, limit, iMenuName,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeightAndFormClass(offset, limit, iMenuName,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndHasChildren(offset, limit, iMenuName,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndDepth(offset, limit, iMenuName,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndP1(offset, limit, iMenuName,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndP2(offset, limit, iMenuName,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndP3(offset, limit, iMenuName,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndP4(offset, limit, iMenuName,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndP5(offset, limit, iMenuName,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndP6(offset, limit, iMenuName,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndP7(offset, limit, iMenuName,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndP8(offset, limit, iMenuName,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndP9(offset, limit, iMenuName,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadataAndFormClass(offset, limit, iMenuName,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndDepth(offset, limit, iMenuName,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndP1(offset, limit, iMenuName,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndP2(offset, limit, iMenuName,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndP3(offset, limit, iMenuName,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndP4(offset, limit, iMenuName,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndP5(offset, limit, iMenuName,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndP6(offset, limit, iMenuName,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndP7(offset, limit, iMenuName,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndP8(offset, limit, iMenuName,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndP9(offset, limit, iMenuName,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildrenAndFormClass(offset, limit, iMenuName,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepthAndP1(offset, limit, iMenuName,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepthAndP2(offset, limit, iMenuName,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepthAndP3(offset, limit, iMenuName,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepthAndP4(offset, limit, iMenuName,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepthAndP5(offset, limit, iMenuName,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepthAndP6(offset, limit, iMenuName,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepthAndP7(offset, limit, iMenuName,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepthAndP8(offset, limit, iMenuName,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepthAndP9(offset, limit, iMenuName,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepthAndFormClass(offset, limit, iMenuName,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP1AndP2(offset, limit, iMenuName,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP1AndP3(offset, limit, iMenuName,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP1AndP4(offset, limit, iMenuName,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP1AndP5(offset, limit, iMenuName,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP1AndP6(offset, limit, iMenuName,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP1AndP7(offset, limit, iMenuName,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP1AndP8(offset, limit, iMenuName,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP1AndP9(offset, limit, iMenuName,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP1AndFormClass(offset, limit, iMenuName,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP2AndP3(offset, limit, iMenuName,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP2AndP4(offset, limit, iMenuName,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP2AndP5(offset, limit, iMenuName,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP2AndP6(offset, limit, iMenuName,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP2AndP7(offset, limit, iMenuName,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP2AndP8(offset, limit, iMenuName,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP2AndP9(offset, limit, iMenuName,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP2AndFormClass(offset, limit, iMenuName,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP3AndP4(offset, limit, iMenuName,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP3AndP5(offset, limit, iMenuName,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP3AndP6(offset, limit, iMenuName,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP3AndP7(offset, limit, iMenuName,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP3AndP8(offset, limit, iMenuName,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP3AndP9(offset, limit, iMenuName,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP3AndFormClass(offset, limit, iMenuName,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP4AndP5(offset, limit, iMenuName,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP4AndP6(offset, limit, iMenuName,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP4AndP7(offset, limit, iMenuName,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP4AndP8(offset, limit, iMenuName,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP4AndP9(offset, limit, iMenuName,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP4AndFormClass(offset, limit, iMenuName,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP5AndP6(offset, limit, iMenuName,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP5AndP7(offset, limit, iMenuName,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP5AndP8(offset, limit, iMenuName,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP5AndP9(offset, limit, iMenuName,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP5AndFormClass(offset, limit, iMenuName,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP6AndP7(offset, limit, iMenuName,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP6AndP8(offset, limit, iMenuName,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP6AndP9(offset, limit, iMenuName,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP6AndFormClass(offset, limit, iMenuName,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP7AndP8(offset, limit, iMenuName,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP7AndP9(offset, limit, iMenuName,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP7AndFormClass(offset, limit, iMenuName,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP8AndP9(offset, limit, iMenuName,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP8AndFormClass(offset, limit, iMenuName,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP9AndFormClass(offset, limit, iMenuName,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndParent(offset, limit, iMlid,iId,iParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndRouteName(offset, limit, iMlid,iId,iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndRouteParamKey(offset, limit, iMlid,iId,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndRouteParameters(offset, limit, iMlid,iId,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndUrl(offset, limit, iMlid,iId,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndTitle(offset, limit, iMlid,iId,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndDescription(offset, limit, iMlid,iId,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndClass(offset, limit, iMlid,iId,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndOptions(offset, limit, iMlid,iId,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndProvider(offset, limit, iMlid,iId,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndEnabled(offset, limit, iMlid,iId,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndDiscovered(offset, limit, iMlid,iId,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndExpanded(offset, limit, iMlid,iId,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndWeight(offset, limit, iMlid,iId,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndMetadata(offset, limit, iMlid,iId,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndHasChildren(offset, limit, iMlid,iId,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndDepth(offset, limit, iMlid,iId,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndP1(offset, limit, iMlid,iId,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndP2(offset, limit, iMlid,iId,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndP3(offset, limit, iMlid,iId,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndP4(offset, limit, iMlid,iId,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndP5(offset, limit, iMlid,iId,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndP6(offset, limit, iMlid,iId,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndP7(offset, limit, iMlid,iId,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndP8(offset, limit, iMlid,iId,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndP9(offset, limit, iMlid,iId,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndIdAndFormClass(offset, limit, iMlid,iId,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndIdAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndRouteName(offset, limit, iMlid,iParent,iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndRouteParamKey(offset, limit, iMlid,iParent,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndRouteParameters(offset, limit, iMlid,iParent,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndUrl(offset, limit, iMlid,iParent,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndTitle(offset, limit, iMlid,iParent,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndDescription(offset, limit, iMlid,iParent,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndClass(offset, limit, iMlid,iParent,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndOptions(offset, limit, iMlid,iParent,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndProvider(offset, limit, iMlid,iParent,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndEnabled(offset, limit, iMlid,iParent,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndDiscovered(offset, limit, iMlid,iParent,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndExpanded(offset, limit, iMlid,iParent,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndWeight(offset, limit, iMlid,iParent,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndMetadata(offset, limit, iMlid,iParent,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndHasChildren(offset, limit, iMlid,iParent,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndDepth(offset, limit, iMlid,iParent,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndP1(offset, limit, iMlid,iParent,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndP2(offset, limit, iMlid,iParent,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndP3(offset, limit, iMlid,iParent,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndP4(offset, limit, iMlid,iParent,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndP5(offset, limit, iMlid,iParent,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndP6(offset, limit, iMlid,iParent,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndP7(offset, limit, iMlid,iParent,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndP8(offset, limit, iMlid,iParent,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndP9(offset, limit, iMlid,iParent,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParentAndFormClass(offset, limit, iMlid,iParent,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParentAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndRouteParamKey(offset, limit, iMlid,iRouteName,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndRouteParameters(offset, limit, iMlid,iRouteName,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndUrl(offset, limit, iMlid,iRouteName,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndTitle(offset, limit, iMlid,iRouteName,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndDescription(offset, limit, iMlid,iRouteName,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndClass(offset, limit, iMlid,iRouteName,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndOptions(offset, limit, iMlid,iRouteName,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndProvider(offset, limit, iMlid,iRouteName,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndEnabled(offset, limit, iMlid,iRouteName,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndDiscovered(offset, limit, iMlid,iRouteName,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndExpanded(offset, limit, iMlid,iRouteName,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndWeight(offset, limit, iMlid,iRouteName,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndMetadata(offset, limit, iMlid,iRouteName,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndHasChildren(offset, limit, iMlid,iRouteName,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndDepth(offset, limit, iMlid,iRouteName,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndP1(offset, limit, iMlid,iRouteName,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndP2(offset, limit, iMlid,iRouteName,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndP3(offset, limit, iMlid,iRouteName,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndP4(offset, limit, iMlid,iRouteName,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndP5(offset, limit, iMlid,iRouteName,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndP6(offset, limit, iMlid,iRouteName,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndP7(offset, limit, iMlid,iRouteName,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndP8(offset, limit, iMlid,iRouteName,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndP9(offset, limit, iMlid,iRouteName,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteNameAndFormClass(offset, limit, iMlid,iRouteName,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteNameAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndRouteParameters(offset, limit, iMlid,iRouteParamKey,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndUrl(offset, limit, iMlid,iRouteParamKey,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndTitle(offset, limit, iMlid,iRouteParamKey,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndDescription(offset, limit, iMlid,iRouteParamKey,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndClass(offset, limit, iMlid,iRouteParamKey,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndOptions(offset, limit, iMlid,iRouteParamKey,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndProvider(offset, limit, iMlid,iRouteParamKey,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndEnabled(offset, limit, iMlid,iRouteParamKey,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndDiscovered(offset, limit, iMlid,iRouteParamKey,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndExpanded(offset, limit, iMlid,iRouteParamKey,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndWeight(offset, limit, iMlid,iRouteParamKey,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndMetadata(offset, limit, iMlid,iRouteParamKey,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndHasChildren(offset, limit, iMlid,iRouteParamKey,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndDepth(offset, limit, iMlid,iRouteParamKey,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndP1(offset, limit, iMlid,iRouteParamKey,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndP2(offset, limit, iMlid,iRouteParamKey,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndP3(offset, limit, iMlid,iRouteParamKey,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndP4(offset, limit, iMlid,iRouteParamKey,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndP5(offset, limit, iMlid,iRouteParamKey,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndP6(offset, limit, iMlid,iRouteParamKey,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndP7(offset, limit, iMlid,iRouteParamKey,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndP8(offset, limit, iMlid,iRouteParamKey,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndP9(offset, limit, iMlid,iRouteParamKey,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKeyAndFormClass(offset, limit, iMlid,iRouteParamKey,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKeyAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndUrl(offset, limit, iMlid,iRouteParameters,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndTitle(offset, limit, iMlid,iRouteParameters,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndDescription(offset, limit, iMlid,iRouteParameters,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndClass(offset, limit, iMlid,iRouteParameters,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndOptions(offset, limit, iMlid,iRouteParameters,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndProvider(offset, limit, iMlid,iRouteParameters,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndEnabled(offset, limit, iMlid,iRouteParameters,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndDiscovered(offset, limit, iMlid,iRouteParameters,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndExpanded(offset, limit, iMlid,iRouteParameters,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndWeight(offset, limit, iMlid,iRouteParameters,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndMetadata(offset, limit, iMlid,iRouteParameters,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndHasChildren(offset, limit, iMlid,iRouteParameters,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndDepth(offset, limit, iMlid,iRouteParameters,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndP1(offset, limit, iMlid,iRouteParameters,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndP2(offset, limit, iMlid,iRouteParameters,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndP3(offset, limit, iMlid,iRouteParameters,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndP4(offset, limit, iMlid,iRouteParameters,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndP5(offset, limit, iMlid,iRouteParameters,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndP6(offset, limit, iMlid,iRouteParameters,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndP7(offset, limit, iMlid,iRouteParameters,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndP8(offset, limit, iMlid,iRouteParameters,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndP9(offset, limit, iMlid,iRouteParameters,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParametersAndFormClass(offset, limit, iMlid,iRouteParameters,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParametersAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndTitle(offset, limit, iMlid,iUrl,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndDescription(offset, limit, iMlid,iUrl,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndClass(offset, limit, iMlid,iUrl,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndOptions(offset, limit, iMlid,iUrl,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndProvider(offset, limit, iMlid,iUrl,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndEnabled(offset, limit, iMlid,iUrl,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndDiscovered(offset, limit, iMlid,iUrl,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndExpanded(offset, limit, iMlid,iUrl,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndWeight(offset, limit, iMlid,iUrl,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndMetadata(offset, limit, iMlid,iUrl,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndHasChildren(offset, limit, iMlid,iUrl,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndDepth(offset, limit, iMlid,iUrl,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndP1(offset, limit, iMlid,iUrl,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndP2(offset, limit, iMlid,iUrl,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndP3(offset, limit, iMlid,iUrl,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndP4(offset, limit, iMlid,iUrl,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndP5(offset, limit, iMlid,iUrl,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndP6(offset, limit, iMlid,iUrl,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndP7(offset, limit, iMlid,iUrl,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndP8(offset, limit, iMlid,iUrl,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndP9(offset, limit, iMlid,iUrl,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrlAndFormClass(offset, limit, iMlid,iUrl,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrlAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndDescription(offset, limit, iMlid,iTitle,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndClass(offset, limit, iMlid,iTitle,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndOptions(offset, limit, iMlid,iTitle,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndProvider(offset, limit, iMlid,iTitle,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndEnabled(offset, limit, iMlid,iTitle,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndDiscovered(offset, limit, iMlid,iTitle,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndExpanded(offset, limit, iMlid,iTitle,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndWeight(offset, limit, iMlid,iTitle,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndMetadata(offset, limit, iMlid,iTitle,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndHasChildren(offset, limit, iMlid,iTitle,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndDepth(offset, limit, iMlid,iTitle,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndP1(offset, limit, iMlid,iTitle,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndP2(offset, limit, iMlid,iTitle,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndP3(offset, limit, iMlid,iTitle,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndP4(offset, limit, iMlid,iTitle,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndP5(offset, limit, iMlid,iTitle,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndP6(offset, limit, iMlid,iTitle,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndP7(offset, limit, iMlid,iTitle,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndP8(offset, limit, iMlid,iTitle,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndP9(offset, limit, iMlid,iTitle,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitleAndFormClass(offset, limit, iMlid,iTitle,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitleAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndClass(offset, limit, iMlid,iDescription,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndOptions(offset, limit, iMlid,iDescription,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndProvider(offset, limit, iMlid,iDescription,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndEnabled(offset, limit, iMlid,iDescription,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndDiscovered(offset, limit, iMlid,iDescription,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndExpanded(offset, limit, iMlid,iDescription,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndWeight(offset, limit, iMlid,iDescription,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndMetadata(offset, limit, iMlid,iDescription,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndHasChildren(offset, limit, iMlid,iDescription,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndDepth(offset, limit, iMlid,iDescription,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndP1(offset, limit, iMlid,iDescription,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndP2(offset, limit, iMlid,iDescription,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndP3(offset, limit, iMlid,iDescription,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndP4(offset, limit, iMlid,iDescription,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndP5(offset, limit, iMlid,iDescription,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndP6(offset, limit, iMlid,iDescription,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndP7(offset, limit, iMlid,iDescription,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndP8(offset, limit, iMlid,iDescription,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndP9(offset, limit, iMlid,iDescription,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescriptionAndFormClass(offset, limit, iMlid,iDescription,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescriptionAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndOptions(offset, limit, iMlid,iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndProvider(offset, limit, iMlid,iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndEnabled(offset, limit, iMlid,iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndDiscovered(offset, limit, iMlid,iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndExpanded(offset, limit, iMlid,iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndWeight(offset, limit, iMlid,iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndMetadata(offset, limit, iMlid,iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndHasChildren(offset, limit, iMlid,iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndDepth(offset, limit, iMlid,iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndP1(offset, limit, iMlid,iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndP2(offset, limit, iMlid,iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndP3(offset, limit, iMlid,iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndP4(offset, limit, iMlid,iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndP5(offset, limit, iMlid,iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndP6(offset, limit, iMlid,iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndP7(offset, limit, iMlid,iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndP8(offset, limit, iMlid,iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndP9(offset, limit, iMlid,iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClassAndFormClass(offset, limit, iMlid,iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndProvider(offset, limit, iMlid,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndEnabled(offset, limit, iMlid,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndDiscovered(offset, limit, iMlid,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndExpanded(offset, limit, iMlid,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndWeight(offset, limit, iMlid,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndMetadata(offset, limit, iMlid,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndHasChildren(offset, limit, iMlid,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndDepth(offset, limit, iMlid,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndP1(offset, limit, iMlid,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndP2(offset, limit, iMlid,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndP3(offset, limit, iMlid,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndP4(offset, limit, iMlid,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndP5(offset, limit, iMlid,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndP6(offset, limit, iMlid,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndP7(offset, limit, iMlid,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndP8(offset, limit, iMlid,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndP9(offset, limit, iMlid,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptionsAndFormClass(offset, limit, iMlid,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndEnabled(offset, limit, iMlid,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndDiscovered(offset, limit, iMlid,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndExpanded(offset, limit, iMlid,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndWeight(offset, limit, iMlid,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndMetadata(offset, limit, iMlid,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndHasChildren(offset, limit, iMlid,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndDepth(offset, limit, iMlid,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndP1(offset, limit, iMlid,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndP2(offset, limit, iMlid,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndP3(offset, limit, iMlid,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndP4(offset, limit, iMlid,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndP5(offset, limit, iMlid,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndP6(offset, limit, iMlid,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndP7(offset, limit, iMlid,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndP8(offset, limit, iMlid,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndP9(offset, limit, iMlid,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProviderAndFormClass(offset, limit, iMlid,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndDiscovered(offset, limit, iMlid,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndExpanded(offset, limit, iMlid,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndWeight(offset, limit, iMlid,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndMetadata(offset, limit, iMlid,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndHasChildren(offset, limit, iMlid,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndDepth(offset, limit, iMlid,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndP1(offset, limit, iMlid,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndP2(offset, limit, iMlid,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndP3(offset, limit, iMlid,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndP4(offset, limit, iMlid,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndP5(offset, limit, iMlid,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndP6(offset, limit, iMlid,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndP7(offset, limit, iMlid,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndP8(offset, limit, iMlid,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndP9(offset, limit, iMlid,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabledAndFormClass(offset, limit, iMlid,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndExpanded(offset, limit, iMlid,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndWeight(offset, limit, iMlid,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndMetadata(offset, limit, iMlid,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndHasChildren(offset, limit, iMlid,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndDepth(offset, limit, iMlid,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndP1(offset, limit, iMlid,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndP2(offset, limit, iMlid,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndP3(offset, limit, iMlid,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndP4(offset, limit, iMlid,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndP5(offset, limit, iMlid,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndP6(offset, limit, iMlid,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndP7(offset, limit, iMlid,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndP8(offset, limit, iMlid,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndP9(offset, limit, iMlid,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscoveredAndFormClass(offset, limit, iMlid,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndWeight(offset, limit, iMlid,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndMetadata(offset, limit, iMlid,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndHasChildren(offset, limit, iMlid,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndDepth(offset, limit, iMlid,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndP1(offset, limit, iMlid,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndP2(offset, limit, iMlid,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndP3(offset, limit, iMlid,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndP4(offset, limit, iMlid,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndP5(offset, limit, iMlid,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndP6(offset, limit, iMlid,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndP7(offset, limit, iMlid,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndP8(offset, limit, iMlid,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndP9(offset, limit, iMlid,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpandedAndFormClass(offset, limit, iMlid,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndMetadata(offset, limit, iMlid,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndHasChildren(offset, limit, iMlid,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndDepth(offset, limit, iMlid,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndP1(offset, limit, iMlid,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndP2(offset, limit, iMlid,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndP3(offset, limit, iMlid,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndP4(offset, limit, iMlid,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndP5(offset, limit, iMlid,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndP6(offset, limit, iMlid,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndP7(offset, limit, iMlid,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndP8(offset, limit, iMlid,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndP9(offset, limit, iMlid,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeightAndFormClass(offset, limit, iMlid,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndHasChildren(offset, limit, iMlid,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndDepth(offset, limit, iMlid,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndP1(offset, limit, iMlid,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndP2(offset, limit, iMlid,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndP3(offset, limit, iMlid,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndP4(offset, limit, iMlid,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndP5(offset, limit, iMlid,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndP6(offset, limit, iMlid,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndP7(offset, limit, iMlid,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndP8(offset, limit, iMlid,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndP9(offset, limit, iMlid,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadataAndFormClass(offset, limit, iMlid,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndDepth(offset, limit, iMlid,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndP1(offset, limit, iMlid,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndP2(offset, limit, iMlid,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndP3(offset, limit, iMlid,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndP4(offset, limit, iMlid,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndP5(offset, limit, iMlid,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndP6(offset, limit, iMlid,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndP7(offset, limit, iMlid,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndP8(offset, limit, iMlid,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndP9(offset, limit, iMlid,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildrenAndFormClass(offset, limit, iMlid,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepthAndP1(offset, limit, iMlid,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepthAndP2(offset, limit, iMlid,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepthAndP3(offset, limit, iMlid,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepthAndP4(offset, limit, iMlid,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepthAndP5(offset, limit, iMlid,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepthAndP6(offset, limit, iMlid,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepthAndP7(offset, limit, iMlid,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepthAndP8(offset, limit, iMlid,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepthAndP9(offset, limit, iMlid,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepthAndFormClass(offset, limit, iMlid,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP1AndP2(offset, limit, iMlid,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP1AndP3(offset, limit, iMlid,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP1AndP4(offset, limit, iMlid,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP1AndP5(offset, limit, iMlid,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP1AndP6(offset, limit, iMlid,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP1AndP7(offset, limit, iMlid,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP1AndP8(offset, limit, iMlid,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP1AndP9(offset, limit, iMlid,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP1AndFormClass(offset, limit, iMlid,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP2AndP3(offset, limit, iMlid,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP2AndP4(offset, limit, iMlid,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP2AndP5(offset, limit, iMlid,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP2AndP6(offset, limit, iMlid,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP2AndP7(offset, limit, iMlid,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP2AndP8(offset, limit, iMlid,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP2AndP9(offset, limit, iMlid,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP2AndFormClass(offset, limit, iMlid,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP3AndP4(offset, limit, iMlid,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP3AndP5(offset, limit, iMlid,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP3AndP6(offset, limit, iMlid,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP3AndP7(offset, limit, iMlid,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP3AndP8(offset, limit, iMlid,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP3AndP9(offset, limit, iMlid,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP3AndFormClass(offset, limit, iMlid,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP4AndP5(offset, limit, iMlid,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP4AndP6(offset, limit, iMlid,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP4AndP7(offset, limit, iMlid,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP4AndP8(offset, limit, iMlid,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP4AndP9(offset, limit, iMlid,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP4AndFormClass(offset, limit, iMlid,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP5AndP6(offset, limit, iMlid,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP5AndP7(offset, limit, iMlid,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP5AndP8(offset, limit, iMlid,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP5AndP9(offset, limit, iMlid,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP5AndFormClass(offset, limit, iMlid,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP6AndP7(offset, limit, iMlid,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP6AndP8(offset, limit, iMlid,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP6AndP9(offset, limit, iMlid,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP6AndFormClass(offset, limit, iMlid,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP7AndP8(offset, limit, iMlid,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP7AndP9(offset, limit, iMlid,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP7AndFormClass(offset, limit, iMlid,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP8AndP9(offset, limit, iMlid,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP8AndFormClass(offset, limit, iMlid,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP9AndFormClass(offset, limit, iMlid,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndRouteName(offset, limit, iId,iParent,iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndRouteParamKey(offset, limit, iId,iParent,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndRouteParameters(offset, limit, iId,iParent,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndUrl(offset, limit, iId,iParent,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndTitle(offset, limit, iId,iParent,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndDescription(offset, limit, iId,iParent,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndClass(offset, limit, iId,iParent,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndOptions(offset, limit, iId,iParent,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndProvider(offset, limit, iId,iParent,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndEnabled(offset, limit, iId,iParent,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndDiscovered(offset, limit, iId,iParent,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndExpanded(offset, limit, iId,iParent,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndWeight(offset, limit, iId,iParent,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndMetadata(offset, limit, iId,iParent,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndHasChildren(offset, limit, iId,iParent,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndDepth(offset, limit, iId,iParent,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndP1(offset, limit, iId,iParent,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndP2(offset, limit, iId,iParent,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndP3(offset, limit, iId,iParent,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndP4(offset, limit, iId,iParent,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndP5(offset, limit, iId,iParent,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndP6(offset, limit, iId,iParent,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndP7(offset, limit, iId,iParent,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndP8(offset, limit, iId,iParent,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndP9(offset, limit, iId,iParent,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParentAndFormClass(offset, limit, iId,iParent,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParentAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndRouteParamKey(offset, limit, iId,iRouteName,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndRouteParameters(offset, limit, iId,iRouteName,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndUrl(offset, limit, iId,iRouteName,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndTitle(offset, limit, iId,iRouteName,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndDescription(offset, limit, iId,iRouteName,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndClass(offset, limit, iId,iRouteName,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndOptions(offset, limit, iId,iRouteName,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndProvider(offset, limit, iId,iRouteName,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndEnabled(offset, limit, iId,iRouteName,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndDiscovered(offset, limit, iId,iRouteName,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndExpanded(offset, limit, iId,iRouteName,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndWeight(offset, limit, iId,iRouteName,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndMetadata(offset, limit, iId,iRouteName,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndHasChildren(offset, limit, iId,iRouteName,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndDepth(offset, limit, iId,iRouteName,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndP1(offset, limit, iId,iRouteName,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndP2(offset, limit, iId,iRouteName,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndP3(offset, limit, iId,iRouteName,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndP4(offset, limit, iId,iRouteName,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndP5(offset, limit, iId,iRouteName,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndP6(offset, limit, iId,iRouteName,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndP7(offset, limit, iId,iRouteName,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndP8(offset, limit, iId,iRouteName,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndP9(offset, limit, iId,iRouteName,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteNameAndFormClass(offset, limit, iId,iRouteName,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteNameAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndRouteParameters(offset, limit, iId,iRouteParamKey,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndUrl(offset, limit, iId,iRouteParamKey,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndTitle(offset, limit, iId,iRouteParamKey,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndDescription(offset, limit, iId,iRouteParamKey,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndClass(offset, limit, iId,iRouteParamKey,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndOptions(offset, limit, iId,iRouteParamKey,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndProvider(offset, limit, iId,iRouteParamKey,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndEnabled(offset, limit, iId,iRouteParamKey,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndDiscovered(offset, limit, iId,iRouteParamKey,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndExpanded(offset, limit, iId,iRouteParamKey,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndWeight(offset, limit, iId,iRouteParamKey,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndMetadata(offset, limit, iId,iRouteParamKey,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndHasChildren(offset, limit, iId,iRouteParamKey,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndDepth(offset, limit, iId,iRouteParamKey,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndP1(offset, limit, iId,iRouteParamKey,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndP2(offset, limit, iId,iRouteParamKey,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndP3(offset, limit, iId,iRouteParamKey,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndP4(offset, limit, iId,iRouteParamKey,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndP5(offset, limit, iId,iRouteParamKey,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndP6(offset, limit, iId,iRouteParamKey,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndP7(offset, limit, iId,iRouteParamKey,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndP8(offset, limit, iId,iRouteParamKey,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndP9(offset, limit, iId,iRouteParamKey,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKeyAndFormClass(offset, limit, iId,iRouteParamKey,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKeyAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndUrl(offset, limit, iId,iRouteParameters,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndTitle(offset, limit, iId,iRouteParameters,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndDescription(offset, limit, iId,iRouteParameters,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndClass(offset, limit, iId,iRouteParameters,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndOptions(offset, limit, iId,iRouteParameters,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndProvider(offset, limit, iId,iRouteParameters,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndEnabled(offset, limit, iId,iRouteParameters,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndDiscovered(offset, limit, iId,iRouteParameters,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndExpanded(offset, limit, iId,iRouteParameters,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndWeight(offset, limit, iId,iRouteParameters,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndMetadata(offset, limit, iId,iRouteParameters,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndHasChildren(offset, limit, iId,iRouteParameters,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndDepth(offset, limit, iId,iRouteParameters,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndP1(offset, limit, iId,iRouteParameters,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndP2(offset, limit, iId,iRouteParameters,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndP3(offset, limit, iId,iRouteParameters,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndP4(offset, limit, iId,iRouteParameters,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndP5(offset, limit, iId,iRouteParameters,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndP6(offset, limit, iId,iRouteParameters,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndP7(offset, limit, iId,iRouteParameters,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndP8(offset, limit, iId,iRouteParameters,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndP9(offset, limit, iId,iRouteParameters,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParametersAndFormClass(offset, limit, iId,iRouteParameters,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParametersAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndTitle(offset, limit, iId,iUrl,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndDescription(offset, limit, iId,iUrl,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndClass(offset, limit, iId,iUrl,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndOptions(offset, limit, iId,iUrl,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndProvider(offset, limit, iId,iUrl,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndEnabled(offset, limit, iId,iUrl,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndDiscovered(offset, limit, iId,iUrl,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndExpanded(offset, limit, iId,iUrl,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndWeight(offset, limit, iId,iUrl,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndMetadata(offset, limit, iId,iUrl,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndHasChildren(offset, limit, iId,iUrl,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndDepth(offset, limit, iId,iUrl,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndP1(offset, limit, iId,iUrl,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndP2(offset, limit, iId,iUrl,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndP3(offset, limit, iId,iUrl,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndP4(offset, limit, iId,iUrl,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndP5(offset, limit, iId,iUrl,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndP6(offset, limit, iId,iUrl,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndP7(offset, limit, iId,iUrl,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndP8(offset, limit, iId,iUrl,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndP9(offset, limit, iId,iUrl,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrlAndFormClass(offset, limit, iId,iUrl,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrlAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndDescription(offset, limit, iId,iTitle,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndClass(offset, limit, iId,iTitle,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndOptions(offset, limit, iId,iTitle,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndProvider(offset, limit, iId,iTitle,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndEnabled(offset, limit, iId,iTitle,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndDiscovered(offset, limit, iId,iTitle,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndExpanded(offset, limit, iId,iTitle,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndWeight(offset, limit, iId,iTitle,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndMetadata(offset, limit, iId,iTitle,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndHasChildren(offset, limit, iId,iTitle,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndDepth(offset, limit, iId,iTitle,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndP1(offset, limit, iId,iTitle,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndP2(offset, limit, iId,iTitle,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndP3(offset, limit, iId,iTitle,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndP4(offset, limit, iId,iTitle,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndP5(offset, limit, iId,iTitle,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndP6(offset, limit, iId,iTitle,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndP7(offset, limit, iId,iTitle,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndP8(offset, limit, iId,iTitle,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndP9(offset, limit, iId,iTitle,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitleAndFormClass(offset, limit, iId,iTitle,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitleAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndClass(offset, limit, iId,iDescription,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndOptions(offset, limit, iId,iDescription,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndProvider(offset, limit, iId,iDescription,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndEnabled(offset, limit, iId,iDescription,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndDiscovered(offset, limit, iId,iDescription,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndExpanded(offset, limit, iId,iDescription,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndWeight(offset, limit, iId,iDescription,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndMetadata(offset, limit, iId,iDescription,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndHasChildren(offset, limit, iId,iDescription,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndDepth(offset, limit, iId,iDescription,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndP1(offset, limit, iId,iDescription,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndP2(offset, limit, iId,iDescription,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndP3(offset, limit, iId,iDescription,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndP4(offset, limit, iId,iDescription,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndP5(offset, limit, iId,iDescription,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndP6(offset, limit, iId,iDescription,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndP7(offset, limit, iId,iDescription,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndP8(offset, limit, iId,iDescription,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndP9(offset, limit, iId,iDescription,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescriptionAndFormClass(offset, limit, iId,iDescription,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescriptionAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndOptions(offset, limit, iId,iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndProvider(offset, limit, iId,iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndEnabled(offset, limit, iId,iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndDiscovered(offset, limit, iId,iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndExpanded(offset, limit, iId,iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndWeight(offset, limit, iId,iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndMetadata(offset, limit, iId,iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndHasChildren(offset, limit, iId,iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndDepth(offset, limit, iId,iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndP1(offset, limit, iId,iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndP2(offset, limit, iId,iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndP3(offset, limit, iId,iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndP4(offset, limit, iId,iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndP5(offset, limit, iId,iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndP6(offset, limit, iId,iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndP7(offset, limit, iId,iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndP8(offset, limit, iId,iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndP9(offset, limit, iId,iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClassAndFormClass(offset, limit, iId,iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndProvider(offset, limit, iId,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndEnabled(offset, limit, iId,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndDiscovered(offset, limit, iId,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndExpanded(offset, limit, iId,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndWeight(offset, limit, iId,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndMetadata(offset, limit, iId,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndHasChildren(offset, limit, iId,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndDepth(offset, limit, iId,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndP1(offset, limit, iId,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndP2(offset, limit, iId,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndP3(offset, limit, iId,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndP4(offset, limit, iId,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndP5(offset, limit, iId,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndP6(offset, limit, iId,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndP7(offset, limit, iId,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndP8(offset, limit, iId,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndP9(offset, limit, iId,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptionsAndFormClass(offset, limit, iId,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndEnabled(offset, limit, iId,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndDiscovered(offset, limit, iId,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndExpanded(offset, limit, iId,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndWeight(offset, limit, iId,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndMetadata(offset, limit, iId,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndHasChildren(offset, limit, iId,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndDepth(offset, limit, iId,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndP1(offset, limit, iId,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndP2(offset, limit, iId,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndP3(offset, limit, iId,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndP4(offset, limit, iId,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndP5(offset, limit, iId,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndP6(offset, limit, iId,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndP7(offset, limit, iId,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndP8(offset, limit, iId,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndP9(offset, limit, iId,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProviderAndFormClass(offset, limit, iId,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndDiscovered(offset, limit, iId,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndExpanded(offset, limit, iId,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndWeight(offset, limit, iId,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndMetadata(offset, limit, iId,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndHasChildren(offset, limit, iId,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndDepth(offset, limit, iId,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndP1(offset, limit, iId,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndP2(offset, limit, iId,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndP3(offset, limit, iId,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndP4(offset, limit, iId,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndP5(offset, limit, iId,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndP6(offset, limit, iId,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndP7(offset, limit, iId,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndP8(offset, limit, iId,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndP9(offset, limit, iId,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabledAndFormClass(offset, limit, iId,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndExpanded(offset, limit, iId,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndWeight(offset, limit, iId,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndMetadata(offset, limit, iId,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndHasChildren(offset, limit, iId,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndDepth(offset, limit, iId,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndP1(offset, limit, iId,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndP2(offset, limit, iId,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndP3(offset, limit, iId,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndP4(offset, limit, iId,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndP5(offset, limit, iId,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndP6(offset, limit, iId,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndP7(offset, limit, iId,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndP8(offset, limit, iId,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndP9(offset, limit, iId,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscoveredAndFormClass(offset, limit, iId,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndWeight(offset, limit, iId,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndMetadata(offset, limit, iId,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndHasChildren(offset, limit, iId,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndDepth(offset, limit, iId,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndP1(offset, limit, iId,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndP2(offset, limit, iId,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndP3(offset, limit, iId,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndP4(offset, limit, iId,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndP5(offset, limit, iId,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndP6(offset, limit, iId,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndP7(offset, limit, iId,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndP8(offset, limit, iId,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndP9(offset, limit, iId,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpandedAndFormClass(offset, limit, iId,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndMetadata(offset, limit, iId,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndHasChildren(offset, limit, iId,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndDepth(offset, limit, iId,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndP1(offset, limit, iId,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndP2(offset, limit, iId,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndP3(offset, limit, iId,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndP4(offset, limit, iId,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndP5(offset, limit, iId,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndP6(offset, limit, iId,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndP7(offset, limit, iId,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndP8(offset, limit, iId,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndP9(offset, limit, iId,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeightAndFormClass(offset, limit, iId,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndHasChildren(offset, limit, iId,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndDepth(offset, limit, iId,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndP1(offset, limit, iId,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndP2(offset, limit, iId,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndP3(offset, limit, iId,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndP4(offset, limit, iId,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndP5(offset, limit, iId,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndP6(offset, limit, iId,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndP7(offset, limit, iId,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndP8(offset, limit, iId,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndP9(offset, limit, iId,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadataAndFormClass(offset, limit, iId,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndDepth(offset, limit, iId,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndP1(offset, limit, iId,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndP2(offset, limit, iId,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndP3(offset, limit, iId,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndP4(offset, limit, iId,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndP5(offset, limit, iId,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndP6(offset, limit, iId,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndP7(offset, limit, iId,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndP8(offset, limit, iId,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndP9(offset, limit, iId,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildrenAndFormClass(offset, limit, iId,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepthAndP1(offset, limit, iId,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepthAndP2(offset, limit, iId,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepthAndP3(offset, limit, iId,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepthAndP4(offset, limit, iId,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepthAndP5(offset, limit, iId,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepthAndP6(offset, limit, iId,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepthAndP7(offset, limit, iId,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepthAndP8(offset, limit, iId,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepthAndP9(offset, limit, iId,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepthAndFormClass(offset, limit, iId,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP1AndP2(offset, limit, iId,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP1AndP3(offset, limit, iId,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP1AndP4(offset, limit, iId,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP1AndP5(offset, limit, iId,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP1AndP6(offset, limit, iId,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP1AndP7(offset, limit, iId,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP1AndP8(offset, limit, iId,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP1AndP9(offset, limit, iId,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP1AndFormClass(offset, limit, iId,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP2AndP3(offset, limit, iId,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP2AndP4(offset, limit, iId,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP2AndP5(offset, limit, iId,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP2AndP6(offset, limit, iId,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP2AndP7(offset, limit, iId,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP2AndP8(offset, limit, iId,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP2AndP9(offset, limit, iId,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP2AndFormClass(offset, limit, iId,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP3AndP4(offset, limit, iId,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP3AndP5(offset, limit, iId,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP3AndP6(offset, limit, iId,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP3AndP7(offset, limit, iId,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP3AndP8(offset, limit, iId,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP3AndP9(offset, limit, iId,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP3AndFormClass(offset, limit, iId,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP4AndP5(offset, limit, iId,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP4AndP6(offset, limit, iId,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP4AndP7(offset, limit, iId,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP4AndP8(offset, limit, iId,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP4AndP9(offset, limit, iId,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP4AndFormClass(offset, limit, iId,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP5AndP6(offset, limit, iId,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP5AndP7(offset, limit, iId,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP5AndP8(offset, limit, iId,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP5AndP9(offset, limit, iId,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP5AndFormClass(offset, limit, iId,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP6AndP7(offset, limit, iId,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP6AndP8(offset, limit, iId,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP6AndP9(offset, limit, iId,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP6AndFormClass(offset, limit, iId,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP7AndP8(offset, limit, iId,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP7AndP9(offset, limit, iId,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP7AndFormClass(offset, limit, iId,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP8AndP9(offset, limit, iId,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP8AndFormClass(offset, limit, iId,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP9AndFormClass(offset, limit, iId,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndRouteParamKey(offset, limit, iParent,iRouteName,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndRouteParameters(offset, limit, iParent,iRouteName,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndUrl(offset, limit, iParent,iRouteName,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndTitle(offset, limit, iParent,iRouteName,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndDescription(offset, limit, iParent,iRouteName,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndClass(offset, limit, iParent,iRouteName,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndOptions(offset, limit, iParent,iRouteName,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndProvider(offset, limit, iParent,iRouteName,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndEnabled(offset, limit, iParent,iRouteName,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndDiscovered(offset, limit, iParent,iRouteName,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndExpanded(offset, limit, iParent,iRouteName,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndWeight(offset, limit, iParent,iRouteName,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndMetadata(offset, limit, iParent,iRouteName,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndHasChildren(offset, limit, iParent,iRouteName,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndDepth(offset, limit, iParent,iRouteName,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndP1(offset, limit, iParent,iRouteName,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndP2(offset, limit, iParent,iRouteName,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndP3(offset, limit, iParent,iRouteName,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndP4(offset, limit, iParent,iRouteName,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndP5(offset, limit, iParent,iRouteName,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndP6(offset, limit, iParent,iRouteName,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndP7(offset, limit, iParent,iRouteName,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndP8(offset, limit, iParent,iRouteName,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndP9(offset, limit, iParent,iRouteName,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteNameAndFormClass(offset, limit, iParent,iRouteName,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteNameAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndRouteParameters(offset, limit, iParent,iRouteParamKey,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndUrl(offset, limit, iParent,iRouteParamKey,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndTitle(offset, limit, iParent,iRouteParamKey,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndDescription(offset, limit, iParent,iRouteParamKey,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndClass(offset, limit, iParent,iRouteParamKey,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndOptions(offset, limit, iParent,iRouteParamKey,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndProvider(offset, limit, iParent,iRouteParamKey,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndEnabled(offset, limit, iParent,iRouteParamKey,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndDiscovered(offset, limit, iParent,iRouteParamKey,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndExpanded(offset, limit, iParent,iRouteParamKey,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndWeight(offset, limit, iParent,iRouteParamKey,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndMetadata(offset, limit, iParent,iRouteParamKey,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndHasChildren(offset, limit, iParent,iRouteParamKey,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndDepth(offset, limit, iParent,iRouteParamKey,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndP1(offset, limit, iParent,iRouteParamKey,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndP2(offset, limit, iParent,iRouteParamKey,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndP3(offset, limit, iParent,iRouteParamKey,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndP4(offset, limit, iParent,iRouteParamKey,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndP5(offset, limit, iParent,iRouteParamKey,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndP6(offset, limit, iParent,iRouteParamKey,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndP7(offset, limit, iParent,iRouteParamKey,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndP8(offset, limit, iParent,iRouteParamKey,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndP9(offset, limit, iParent,iRouteParamKey,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKeyAndFormClass(offset, limit, iParent,iRouteParamKey,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKeyAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndUrl(offset, limit, iParent,iRouteParameters,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndTitle(offset, limit, iParent,iRouteParameters,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndDescription(offset, limit, iParent,iRouteParameters,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndClass(offset, limit, iParent,iRouteParameters,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndOptions(offset, limit, iParent,iRouteParameters,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndProvider(offset, limit, iParent,iRouteParameters,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndEnabled(offset, limit, iParent,iRouteParameters,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndDiscovered(offset, limit, iParent,iRouteParameters,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndExpanded(offset, limit, iParent,iRouteParameters,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndWeight(offset, limit, iParent,iRouteParameters,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndMetadata(offset, limit, iParent,iRouteParameters,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndHasChildren(offset, limit, iParent,iRouteParameters,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndDepth(offset, limit, iParent,iRouteParameters,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndP1(offset, limit, iParent,iRouteParameters,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndP2(offset, limit, iParent,iRouteParameters,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndP3(offset, limit, iParent,iRouteParameters,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndP4(offset, limit, iParent,iRouteParameters,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndP5(offset, limit, iParent,iRouteParameters,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndP6(offset, limit, iParent,iRouteParameters,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndP7(offset, limit, iParent,iRouteParameters,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndP8(offset, limit, iParent,iRouteParameters,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndP9(offset, limit, iParent,iRouteParameters,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParametersAndFormClass(offset, limit, iParent,iRouteParameters,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParametersAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndTitle(offset, limit, iParent,iUrl,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndDescription(offset, limit, iParent,iUrl,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndClass(offset, limit, iParent,iUrl,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndOptions(offset, limit, iParent,iUrl,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndProvider(offset, limit, iParent,iUrl,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndEnabled(offset, limit, iParent,iUrl,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndDiscovered(offset, limit, iParent,iUrl,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndExpanded(offset, limit, iParent,iUrl,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndWeight(offset, limit, iParent,iUrl,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndMetadata(offset, limit, iParent,iUrl,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndHasChildren(offset, limit, iParent,iUrl,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndDepth(offset, limit, iParent,iUrl,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndP1(offset, limit, iParent,iUrl,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndP2(offset, limit, iParent,iUrl,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndP3(offset, limit, iParent,iUrl,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndP4(offset, limit, iParent,iUrl,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndP5(offset, limit, iParent,iUrl,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndP6(offset, limit, iParent,iUrl,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndP7(offset, limit, iParent,iUrl,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndP8(offset, limit, iParent,iUrl,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndP9(offset, limit, iParent,iUrl,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrlAndFormClass(offset, limit, iParent,iUrl,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrlAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndDescription(offset, limit, iParent,iTitle,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndClass(offset, limit, iParent,iTitle,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndOptions(offset, limit, iParent,iTitle,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndProvider(offset, limit, iParent,iTitle,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndEnabled(offset, limit, iParent,iTitle,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndDiscovered(offset, limit, iParent,iTitle,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndExpanded(offset, limit, iParent,iTitle,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndWeight(offset, limit, iParent,iTitle,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndMetadata(offset, limit, iParent,iTitle,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndHasChildren(offset, limit, iParent,iTitle,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndDepth(offset, limit, iParent,iTitle,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndP1(offset, limit, iParent,iTitle,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndP2(offset, limit, iParent,iTitle,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndP3(offset, limit, iParent,iTitle,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndP4(offset, limit, iParent,iTitle,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndP5(offset, limit, iParent,iTitle,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndP6(offset, limit, iParent,iTitle,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndP7(offset, limit, iParent,iTitle,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndP8(offset, limit, iParent,iTitle,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndP9(offset, limit, iParent,iTitle,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitleAndFormClass(offset, limit, iParent,iTitle,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitleAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndClass(offset, limit, iParent,iDescription,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndOptions(offset, limit, iParent,iDescription,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndProvider(offset, limit, iParent,iDescription,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndEnabled(offset, limit, iParent,iDescription,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndDiscovered(offset, limit, iParent,iDescription,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndExpanded(offset, limit, iParent,iDescription,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndWeight(offset, limit, iParent,iDescription,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndMetadata(offset, limit, iParent,iDescription,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndHasChildren(offset, limit, iParent,iDescription,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndDepth(offset, limit, iParent,iDescription,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndP1(offset, limit, iParent,iDescription,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndP2(offset, limit, iParent,iDescription,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndP3(offset, limit, iParent,iDescription,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndP4(offset, limit, iParent,iDescription,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndP5(offset, limit, iParent,iDescription,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndP6(offset, limit, iParent,iDescription,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndP7(offset, limit, iParent,iDescription,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndP8(offset, limit, iParent,iDescription,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndP9(offset, limit, iParent,iDescription,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescriptionAndFormClass(offset, limit, iParent,iDescription,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescriptionAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndOptions(offset, limit, iParent,iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndProvider(offset, limit, iParent,iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndEnabled(offset, limit, iParent,iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndDiscovered(offset, limit, iParent,iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndExpanded(offset, limit, iParent,iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndWeight(offset, limit, iParent,iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndMetadata(offset, limit, iParent,iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndHasChildren(offset, limit, iParent,iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndDepth(offset, limit, iParent,iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndP1(offset, limit, iParent,iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndP2(offset, limit, iParent,iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndP3(offset, limit, iParent,iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndP4(offset, limit, iParent,iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndP5(offset, limit, iParent,iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndP6(offset, limit, iParent,iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndP7(offset, limit, iParent,iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndP8(offset, limit, iParent,iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndP9(offset, limit, iParent,iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClassAndFormClass(offset, limit, iParent,iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndProvider(offset, limit, iParent,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndEnabled(offset, limit, iParent,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndDiscovered(offset, limit, iParent,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndExpanded(offset, limit, iParent,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndWeight(offset, limit, iParent,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndMetadata(offset, limit, iParent,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndHasChildren(offset, limit, iParent,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndDepth(offset, limit, iParent,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndP1(offset, limit, iParent,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndP2(offset, limit, iParent,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndP3(offset, limit, iParent,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndP4(offset, limit, iParent,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndP5(offset, limit, iParent,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndP6(offset, limit, iParent,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndP7(offset, limit, iParent,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndP8(offset, limit, iParent,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndP9(offset, limit, iParent,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptionsAndFormClass(offset, limit, iParent,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndEnabled(offset, limit, iParent,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndDiscovered(offset, limit, iParent,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndExpanded(offset, limit, iParent,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndWeight(offset, limit, iParent,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndMetadata(offset, limit, iParent,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndHasChildren(offset, limit, iParent,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndDepth(offset, limit, iParent,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndP1(offset, limit, iParent,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndP2(offset, limit, iParent,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndP3(offset, limit, iParent,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndP4(offset, limit, iParent,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndP5(offset, limit, iParent,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndP6(offset, limit, iParent,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndP7(offset, limit, iParent,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndP8(offset, limit, iParent,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndP9(offset, limit, iParent,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProviderAndFormClass(offset, limit, iParent,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndDiscovered(offset, limit, iParent,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndExpanded(offset, limit, iParent,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndWeight(offset, limit, iParent,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndMetadata(offset, limit, iParent,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndHasChildren(offset, limit, iParent,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndDepth(offset, limit, iParent,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndP1(offset, limit, iParent,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndP2(offset, limit, iParent,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndP3(offset, limit, iParent,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndP4(offset, limit, iParent,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndP5(offset, limit, iParent,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndP6(offset, limit, iParent,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndP7(offset, limit, iParent,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndP8(offset, limit, iParent,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndP9(offset, limit, iParent,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabledAndFormClass(offset, limit, iParent,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndExpanded(offset, limit, iParent,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndWeight(offset, limit, iParent,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndMetadata(offset, limit, iParent,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndHasChildren(offset, limit, iParent,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndDepth(offset, limit, iParent,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndP1(offset, limit, iParent,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndP2(offset, limit, iParent,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndP3(offset, limit, iParent,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndP4(offset, limit, iParent,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndP5(offset, limit, iParent,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndP6(offset, limit, iParent,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndP7(offset, limit, iParent,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndP8(offset, limit, iParent,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndP9(offset, limit, iParent,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscoveredAndFormClass(offset, limit, iParent,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndWeight(offset, limit, iParent,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndMetadata(offset, limit, iParent,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndHasChildren(offset, limit, iParent,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndDepth(offset, limit, iParent,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndP1(offset, limit, iParent,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndP2(offset, limit, iParent,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndP3(offset, limit, iParent,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndP4(offset, limit, iParent,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndP5(offset, limit, iParent,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndP6(offset, limit, iParent,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndP7(offset, limit, iParent,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndP8(offset, limit, iParent,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndP9(offset, limit, iParent,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpandedAndFormClass(offset, limit, iParent,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndMetadata(offset, limit, iParent,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndHasChildren(offset, limit, iParent,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndDepth(offset, limit, iParent,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndP1(offset, limit, iParent,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndP2(offset, limit, iParent,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndP3(offset, limit, iParent,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndP4(offset, limit, iParent,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndP5(offset, limit, iParent,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndP6(offset, limit, iParent,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndP7(offset, limit, iParent,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndP8(offset, limit, iParent,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndP9(offset, limit, iParent,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeightAndFormClass(offset, limit, iParent,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndHasChildren(offset, limit, iParent,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndDepth(offset, limit, iParent,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndP1(offset, limit, iParent,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndP2(offset, limit, iParent,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndP3(offset, limit, iParent,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndP4(offset, limit, iParent,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndP5(offset, limit, iParent,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndP6(offset, limit, iParent,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndP7(offset, limit, iParent,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndP8(offset, limit, iParent,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndP9(offset, limit, iParent,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadataAndFormClass(offset, limit, iParent,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndDepth(offset, limit, iParent,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndP1(offset, limit, iParent,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndP2(offset, limit, iParent,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndP3(offset, limit, iParent,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndP4(offset, limit, iParent,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndP5(offset, limit, iParent,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndP6(offset, limit, iParent,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndP7(offset, limit, iParent,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndP8(offset, limit, iParent,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndP9(offset, limit, iParent,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildrenAndFormClass(offset, limit, iParent,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepthAndP1(offset, limit, iParent,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepthAndP2(offset, limit, iParent,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepthAndP3(offset, limit, iParent,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepthAndP4(offset, limit, iParent,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepthAndP5(offset, limit, iParent,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepthAndP6(offset, limit, iParent,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepthAndP7(offset, limit, iParent,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepthAndP8(offset, limit, iParent,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepthAndP9(offset, limit, iParent,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepthAndFormClass(offset, limit, iParent,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP1AndP2(offset, limit, iParent,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP1AndP3(offset, limit, iParent,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP1AndP4(offset, limit, iParent,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP1AndP5(offset, limit, iParent,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP1AndP6(offset, limit, iParent,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP1AndP7(offset, limit, iParent,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP1AndP8(offset, limit, iParent,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP1AndP9(offset, limit, iParent,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP1AndFormClass(offset, limit, iParent,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP2AndP3(offset, limit, iParent,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP2AndP4(offset, limit, iParent,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP2AndP5(offset, limit, iParent,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP2AndP6(offset, limit, iParent,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP2AndP7(offset, limit, iParent,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP2AndP8(offset, limit, iParent,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP2AndP9(offset, limit, iParent,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP2AndFormClass(offset, limit, iParent,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP3AndP4(offset, limit, iParent,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP3AndP5(offset, limit, iParent,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP3AndP6(offset, limit, iParent,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP3AndP7(offset, limit, iParent,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP3AndP8(offset, limit, iParent,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP3AndP9(offset, limit, iParent,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP3AndFormClass(offset, limit, iParent,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP4AndP5(offset, limit, iParent,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP4AndP6(offset, limit, iParent,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP4AndP7(offset, limit, iParent,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP4AndP8(offset, limit, iParent,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP4AndP9(offset, limit, iParent,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP4AndFormClass(offset, limit, iParent,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP5AndP6(offset, limit, iParent,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP5AndP7(offset, limit, iParent,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP5AndP8(offset, limit, iParent,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP5AndP9(offset, limit, iParent,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP5AndFormClass(offset, limit, iParent,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP6AndP7(offset, limit, iParent,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP6AndP8(offset, limit, iParent,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP6AndP9(offset, limit, iParent,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP6AndFormClass(offset, limit, iParent,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP7AndP8(offset, limit, iParent,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP7AndP9(offset, limit, iParent,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP7AndFormClass(offset, limit, iParent,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP8AndP9(offset, limit, iParent,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP8AndFormClass(offset, limit, iParent,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP9AndFormClass(offset, limit, iParent,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndRouteParameters(offset, limit, iRouteName,iRouteParamKey,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndUrl(offset, limit, iRouteName,iRouteParamKey,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndTitle(offset, limit, iRouteName,iRouteParamKey,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndDescription(offset, limit, iRouteName,iRouteParamKey,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndClass(offset, limit, iRouteName,iRouteParamKey,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndOptions(offset, limit, iRouteName,iRouteParamKey,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndProvider(offset, limit, iRouteName,iRouteParamKey,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndEnabled(offset, limit, iRouteName,iRouteParamKey,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndDiscovered(offset, limit, iRouteName,iRouteParamKey,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndExpanded(offset, limit, iRouteName,iRouteParamKey,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndWeight(offset, limit, iRouteName,iRouteParamKey,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndMetadata(offset, limit, iRouteName,iRouteParamKey,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndHasChildren(offset, limit, iRouteName,iRouteParamKey,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndDepth(offset, limit, iRouteName,iRouteParamKey,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndP1(offset, limit, iRouteName,iRouteParamKey,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndP2(offset, limit, iRouteName,iRouteParamKey,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndP3(offset, limit, iRouteName,iRouteParamKey,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndP4(offset, limit, iRouteName,iRouteParamKey,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndP5(offset, limit, iRouteName,iRouteParamKey,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndP6(offset, limit, iRouteName,iRouteParamKey,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndP7(offset, limit, iRouteName,iRouteParamKey,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndP8(offset, limit, iRouteName,iRouteParamKey,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndP9(offset, limit, iRouteName,iRouteParamKey,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKeyAndFormClass(offset, limit, iRouteName,iRouteParamKey,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKeyAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndUrl(offset, limit, iRouteName,iRouteParameters,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndTitle(offset, limit, iRouteName,iRouteParameters,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndDescription(offset, limit, iRouteName,iRouteParameters,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndClass(offset, limit, iRouteName,iRouteParameters,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndOptions(offset, limit, iRouteName,iRouteParameters,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndProvider(offset, limit, iRouteName,iRouteParameters,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndEnabled(offset, limit, iRouteName,iRouteParameters,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndDiscovered(offset, limit, iRouteName,iRouteParameters,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndExpanded(offset, limit, iRouteName,iRouteParameters,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndWeight(offset, limit, iRouteName,iRouteParameters,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndMetadata(offset, limit, iRouteName,iRouteParameters,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndHasChildren(offset, limit, iRouteName,iRouteParameters,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndDepth(offset, limit, iRouteName,iRouteParameters,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndP1(offset, limit, iRouteName,iRouteParameters,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndP2(offset, limit, iRouteName,iRouteParameters,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndP3(offset, limit, iRouteName,iRouteParameters,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndP4(offset, limit, iRouteName,iRouteParameters,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndP5(offset, limit, iRouteName,iRouteParameters,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndP6(offset, limit, iRouteName,iRouteParameters,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndP7(offset, limit, iRouteName,iRouteParameters,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndP8(offset, limit, iRouteName,iRouteParameters,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndP9(offset, limit, iRouteName,iRouteParameters,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParametersAndFormClass(offset, limit, iRouteName,iRouteParameters,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParametersAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndTitle(offset, limit, iRouteName,iUrl,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndDescription(offset, limit, iRouteName,iUrl,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndClass(offset, limit, iRouteName,iUrl,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndOptions(offset, limit, iRouteName,iUrl,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndProvider(offset, limit, iRouteName,iUrl,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndEnabled(offset, limit, iRouteName,iUrl,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndDiscovered(offset, limit, iRouteName,iUrl,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndExpanded(offset, limit, iRouteName,iUrl,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndWeight(offset, limit, iRouteName,iUrl,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndMetadata(offset, limit, iRouteName,iUrl,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndHasChildren(offset, limit, iRouteName,iUrl,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndDepth(offset, limit, iRouteName,iUrl,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndP1(offset, limit, iRouteName,iUrl,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndP2(offset, limit, iRouteName,iUrl,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndP3(offset, limit, iRouteName,iUrl,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndP4(offset, limit, iRouteName,iUrl,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndP5(offset, limit, iRouteName,iUrl,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndP6(offset, limit, iRouteName,iUrl,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndP7(offset, limit, iRouteName,iUrl,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndP8(offset, limit, iRouteName,iUrl,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndP9(offset, limit, iRouteName,iUrl,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrlAndFormClass(offset, limit, iRouteName,iUrl,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrlAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndDescription(offset, limit, iRouteName,iTitle,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndClass(offset, limit, iRouteName,iTitle,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndOptions(offset, limit, iRouteName,iTitle,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndProvider(offset, limit, iRouteName,iTitle,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndEnabled(offset, limit, iRouteName,iTitle,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndDiscovered(offset, limit, iRouteName,iTitle,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndExpanded(offset, limit, iRouteName,iTitle,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndWeight(offset, limit, iRouteName,iTitle,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndMetadata(offset, limit, iRouteName,iTitle,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndHasChildren(offset, limit, iRouteName,iTitle,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndDepth(offset, limit, iRouteName,iTitle,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndP1(offset, limit, iRouteName,iTitle,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndP2(offset, limit, iRouteName,iTitle,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndP3(offset, limit, iRouteName,iTitle,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndP4(offset, limit, iRouteName,iTitle,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndP5(offset, limit, iRouteName,iTitle,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndP6(offset, limit, iRouteName,iTitle,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndP7(offset, limit, iRouteName,iTitle,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndP8(offset, limit, iRouteName,iTitle,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndP9(offset, limit, iRouteName,iTitle,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitleAndFormClass(offset, limit, iRouteName,iTitle,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitleAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndClass(offset, limit, iRouteName,iDescription,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndOptions(offset, limit, iRouteName,iDescription,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndProvider(offset, limit, iRouteName,iDescription,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndEnabled(offset, limit, iRouteName,iDescription,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndDiscovered(offset, limit, iRouteName,iDescription,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndExpanded(offset, limit, iRouteName,iDescription,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndWeight(offset, limit, iRouteName,iDescription,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndMetadata(offset, limit, iRouteName,iDescription,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndHasChildren(offset, limit, iRouteName,iDescription,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndDepth(offset, limit, iRouteName,iDescription,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndP1(offset, limit, iRouteName,iDescription,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndP2(offset, limit, iRouteName,iDescription,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndP3(offset, limit, iRouteName,iDescription,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndP4(offset, limit, iRouteName,iDescription,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndP5(offset, limit, iRouteName,iDescription,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndP6(offset, limit, iRouteName,iDescription,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndP7(offset, limit, iRouteName,iDescription,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndP8(offset, limit, iRouteName,iDescription,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndP9(offset, limit, iRouteName,iDescription,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescriptionAndFormClass(offset, limit, iRouteName,iDescription,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescriptionAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndOptions(offset, limit, iRouteName,iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndProvider(offset, limit, iRouteName,iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndEnabled(offset, limit, iRouteName,iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndDiscovered(offset, limit, iRouteName,iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndExpanded(offset, limit, iRouteName,iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndWeight(offset, limit, iRouteName,iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndMetadata(offset, limit, iRouteName,iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndHasChildren(offset, limit, iRouteName,iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndDepth(offset, limit, iRouteName,iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndP1(offset, limit, iRouteName,iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndP2(offset, limit, iRouteName,iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndP3(offset, limit, iRouteName,iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndP4(offset, limit, iRouteName,iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndP5(offset, limit, iRouteName,iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndP6(offset, limit, iRouteName,iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndP7(offset, limit, iRouteName,iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndP8(offset, limit, iRouteName,iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndP9(offset, limit, iRouteName,iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClassAndFormClass(offset, limit, iRouteName,iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndProvider(offset, limit, iRouteName,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndEnabled(offset, limit, iRouteName,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndDiscovered(offset, limit, iRouteName,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndExpanded(offset, limit, iRouteName,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndWeight(offset, limit, iRouteName,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndMetadata(offset, limit, iRouteName,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndHasChildren(offset, limit, iRouteName,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndDepth(offset, limit, iRouteName,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndP1(offset, limit, iRouteName,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndP2(offset, limit, iRouteName,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndP3(offset, limit, iRouteName,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndP4(offset, limit, iRouteName,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndP5(offset, limit, iRouteName,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndP6(offset, limit, iRouteName,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndP7(offset, limit, iRouteName,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndP8(offset, limit, iRouteName,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndP9(offset, limit, iRouteName,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptionsAndFormClass(offset, limit, iRouteName,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndEnabled(offset, limit, iRouteName,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndDiscovered(offset, limit, iRouteName,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndExpanded(offset, limit, iRouteName,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndWeight(offset, limit, iRouteName,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndMetadata(offset, limit, iRouteName,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndHasChildren(offset, limit, iRouteName,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndDepth(offset, limit, iRouteName,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndP1(offset, limit, iRouteName,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndP2(offset, limit, iRouteName,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndP3(offset, limit, iRouteName,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndP4(offset, limit, iRouteName,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndP5(offset, limit, iRouteName,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndP6(offset, limit, iRouteName,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndP7(offset, limit, iRouteName,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndP8(offset, limit, iRouteName,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndP9(offset, limit, iRouteName,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProviderAndFormClass(offset, limit, iRouteName,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndDiscovered(offset, limit, iRouteName,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndExpanded(offset, limit, iRouteName,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndWeight(offset, limit, iRouteName,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndMetadata(offset, limit, iRouteName,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndHasChildren(offset, limit, iRouteName,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndDepth(offset, limit, iRouteName,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndP1(offset, limit, iRouteName,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndP2(offset, limit, iRouteName,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndP3(offset, limit, iRouteName,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndP4(offset, limit, iRouteName,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndP5(offset, limit, iRouteName,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndP6(offset, limit, iRouteName,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndP7(offset, limit, iRouteName,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndP8(offset, limit, iRouteName,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndP9(offset, limit, iRouteName,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabledAndFormClass(offset, limit, iRouteName,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndExpanded(offset, limit, iRouteName,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndWeight(offset, limit, iRouteName,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndMetadata(offset, limit, iRouteName,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndHasChildren(offset, limit, iRouteName,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndDepth(offset, limit, iRouteName,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndP1(offset, limit, iRouteName,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndP2(offset, limit, iRouteName,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndP3(offset, limit, iRouteName,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndP4(offset, limit, iRouteName,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndP5(offset, limit, iRouteName,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndP6(offset, limit, iRouteName,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndP7(offset, limit, iRouteName,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndP8(offset, limit, iRouteName,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndP9(offset, limit, iRouteName,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscoveredAndFormClass(offset, limit, iRouteName,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndWeight(offset, limit, iRouteName,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndMetadata(offset, limit, iRouteName,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndHasChildren(offset, limit, iRouteName,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndDepth(offset, limit, iRouteName,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndP1(offset, limit, iRouteName,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndP2(offset, limit, iRouteName,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndP3(offset, limit, iRouteName,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndP4(offset, limit, iRouteName,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndP5(offset, limit, iRouteName,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndP6(offset, limit, iRouteName,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndP7(offset, limit, iRouteName,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndP8(offset, limit, iRouteName,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndP9(offset, limit, iRouteName,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpandedAndFormClass(offset, limit, iRouteName,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndMetadata(offset, limit, iRouteName,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndHasChildren(offset, limit, iRouteName,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndDepth(offset, limit, iRouteName,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndP1(offset, limit, iRouteName,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndP2(offset, limit, iRouteName,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndP3(offset, limit, iRouteName,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndP4(offset, limit, iRouteName,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndP5(offset, limit, iRouteName,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndP6(offset, limit, iRouteName,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndP7(offset, limit, iRouteName,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndP8(offset, limit, iRouteName,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndP9(offset, limit, iRouteName,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeightAndFormClass(offset, limit, iRouteName,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndHasChildren(offset, limit, iRouteName,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndDepth(offset, limit, iRouteName,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndP1(offset, limit, iRouteName,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndP2(offset, limit, iRouteName,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndP3(offset, limit, iRouteName,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndP4(offset, limit, iRouteName,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndP5(offset, limit, iRouteName,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndP6(offset, limit, iRouteName,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndP7(offset, limit, iRouteName,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndP8(offset, limit, iRouteName,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndP9(offset, limit, iRouteName,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadataAndFormClass(offset, limit, iRouteName,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndDepth(offset, limit, iRouteName,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndP1(offset, limit, iRouteName,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndP2(offset, limit, iRouteName,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndP3(offset, limit, iRouteName,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndP4(offset, limit, iRouteName,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndP5(offset, limit, iRouteName,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndP6(offset, limit, iRouteName,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndP7(offset, limit, iRouteName,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndP8(offset, limit, iRouteName,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndP9(offset, limit, iRouteName,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildrenAndFormClass(offset, limit, iRouteName,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepthAndP1(offset, limit, iRouteName,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepthAndP2(offset, limit, iRouteName,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepthAndP3(offset, limit, iRouteName,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepthAndP4(offset, limit, iRouteName,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepthAndP5(offset, limit, iRouteName,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepthAndP6(offset, limit, iRouteName,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepthAndP7(offset, limit, iRouteName,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepthAndP8(offset, limit, iRouteName,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepthAndP9(offset, limit, iRouteName,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepthAndFormClass(offset, limit, iRouteName,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP1AndP2(offset, limit, iRouteName,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP1AndP3(offset, limit, iRouteName,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP1AndP4(offset, limit, iRouteName,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP1AndP5(offset, limit, iRouteName,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP1AndP6(offset, limit, iRouteName,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP1AndP7(offset, limit, iRouteName,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP1AndP8(offset, limit, iRouteName,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP1AndP9(offset, limit, iRouteName,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP1AndFormClass(offset, limit, iRouteName,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP2AndP3(offset, limit, iRouteName,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP2AndP4(offset, limit, iRouteName,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP2AndP5(offset, limit, iRouteName,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP2AndP6(offset, limit, iRouteName,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP2AndP7(offset, limit, iRouteName,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP2AndP8(offset, limit, iRouteName,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP2AndP9(offset, limit, iRouteName,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP2AndFormClass(offset, limit, iRouteName,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP3AndP4(offset, limit, iRouteName,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP3AndP5(offset, limit, iRouteName,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP3AndP6(offset, limit, iRouteName,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP3AndP7(offset, limit, iRouteName,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP3AndP8(offset, limit, iRouteName,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP3AndP9(offset, limit, iRouteName,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP3AndFormClass(offset, limit, iRouteName,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP4AndP5(offset, limit, iRouteName,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP4AndP6(offset, limit, iRouteName,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP4AndP7(offset, limit, iRouteName,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP4AndP8(offset, limit, iRouteName,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP4AndP9(offset, limit, iRouteName,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP4AndFormClass(offset, limit, iRouteName,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP5AndP6(offset, limit, iRouteName,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP5AndP7(offset, limit, iRouteName,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP5AndP8(offset, limit, iRouteName,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP5AndP9(offset, limit, iRouteName,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP5AndFormClass(offset, limit, iRouteName,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP6AndP7(offset, limit, iRouteName,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP6AndP8(offset, limit, iRouteName,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP6AndP9(offset, limit, iRouteName,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP6AndFormClass(offset, limit, iRouteName,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP7AndP8(offset, limit, iRouteName,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP7AndP9(offset, limit, iRouteName,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP7AndFormClass(offset, limit, iRouteName,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP8AndP9(offset, limit, iRouteName,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP8AndFormClass(offset, limit, iRouteName,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP9AndFormClass(offset, limit, iRouteName,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndUrl(offset, limit, iRouteParamKey,iRouteParameters,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndTitle(offset, limit, iRouteParamKey,iRouteParameters,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndDescription(offset, limit, iRouteParamKey,iRouteParameters,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndClass(offset, limit, iRouteParamKey,iRouteParameters,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndOptions(offset, limit, iRouteParamKey,iRouteParameters,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndProvider(offset, limit, iRouteParamKey,iRouteParameters,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndEnabled(offset, limit, iRouteParamKey,iRouteParameters,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndDiscovered(offset, limit, iRouteParamKey,iRouteParameters,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndExpanded(offset, limit, iRouteParamKey,iRouteParameters,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndWeight(offset, limit, iRouteParamKey,iRouteParameters,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndMetadata(offset, limit, iRouteParamKey,iRouteParameters,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndHasChildren(offset, limit, iRouteParamKey,iRouteParameters,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndDepth(offset, limit, iRouteParamKey,iRouteParameters,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndP1(offset, limit, iRouteParamKey,iRouteParameters,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndP2(offset, limit, iRouteParamKey,iRouteParameters,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndP3(offset, limit, iRouteParamKey,iRouteParameters,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndP4(offset, limit, iRouteParamKey,iRouteParameters,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndP5(offset, limit, iRouteParamKey,iRouteParameters,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndP6(offset, limit, iRouteParamKey,iRouteParameters,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndP7(offset, limit, iRouteParamKey,iRouteParameters,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndP8(offset, limit, iRouteParamKey,iRouteParameters,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndP9(offset, limit, iRouteParamKey,iRouteParameters,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParametersAndFormClass(offset, limit, iRouteParamKey,iRouteParameters,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParametersAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndTitle(offset, limit, iRouteParamKey,iUrl,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndDescription(offset, limit, iRouteParamKey,iUrl,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndClass(offset, limit, iRouteParamKey,iUrl,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndOptions(offset, limit, iRouteParamKey,iUrl,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndProvider(offset, limit, iRouteParamKey,iUrl,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndEnabled(offset, limit, iRouteParamKey,iUrl,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndDiscovered(offset, limit, iRouteParamKey,iUrl,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndExpanded(offset, limit, iRouteParamKey,iUrl,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndWeight(offset, limit, iRouteParamKey,iUrl,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndMetadata(offset, limit, iRouteParamKey,iUrl,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndHasChildren(offset, limit, iRouteParamKey,iUrl,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndDepth(offset, limit, iRouteParamKey,iUrl,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndP1(offset, limit, iRouteParamKey,iUrl,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndP2(offset, limit, iRouteParamKey,iUrl,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndP3(offset, limit, iRouteParamKey,iUrl,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndP4(offset, limit, iRouteParamKey,iUrl,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndP5(offset, limit, iRouteParamKey,iUrl,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndP6(offset, limit, iRouteParamKey,iUrl,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndP7(offset, limit, iRouteParamKey,iUrl,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndP8(offset, limit, iRouteParamKey,iUrl,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndP9(offset, limit, iRouteParamKey,iUrl,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrlAndFormClass(offset, limit, iRouteParamKey,iUrl,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrlAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndDescription(offset, limit, iRouteParamKey,iTitle,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndClass(offset, limit, iRouteParamKey,iTitle,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndOptions(offset, limit, iRouteParamKey,iTitle,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndProvider(offset, limit, iRouteParamKey,iTitle,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndEnabled(offset, limit, iRouteParamKey,iTitle,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndDiscovered(offset, limit, iRouteParamKey,iTitle,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndExpanded(offset, limit, iRouteParamKey,iTitle,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndWeight(offset, limit, iRouteParamKey,iTitle,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndMetadata(offset, limit, iRouteParamKey,iTitle,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndHasChildren(offset, limit, iRouteParamKey,iTitle,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndDepth(offset, limit, iRouteParamKey,iTitle,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndP1(offset, limit, iRouteParamKey,iTitle,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndP2(offset, limit, iRouteParamKey,iTitle,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndP3(offset, limit, iRouteParamKey,iTitle,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndP4(offset, limit, iRouteParamKey,iTitle,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndP5(offset, limit, iRouteParamKey,iTitle,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndP6(offset, limit, iRouteParamKey,iTitle,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndP7(offset, limit, iRouteParamKey,iTitle,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndP8(offset, limit, iRouteParamKey,iTitle,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndP9(offset, limit, iRouteParamKey,iTitle,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitleAndFormClass(offset, limit, iRouteParamKey,iTitle,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitleAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndClass(offset, limit, iRouteParamKey,iDescription,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndOptions(offset, limit, iRouteParamKey,iDescription,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndProvider(offset, limit, iRouteParamKey,iDescription,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndEnabled(offset, limit, iRouteParamKey,iDescription,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndDiscovered(offset, limit, iRouteParamKey,iDescription,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndExpanded(offset, limit, iRouteParamKey,iDescription,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndWeight(offset, limit, iRouteParamKey,iDescription,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndMetadata(offset, limit, iRouteParamKey,iDescription,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndHasChildren(offset, limit, iRouteParamKey,iDescription,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndDepth(offset, limit, iRouteParamKey,iDescription,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndP1(offset, limit, iRouteParamKey,iDescription,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndP2(offset, limit, iRouteParamKey,iDescription,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndP3(offset, limit, iRouteParamKey,iDescription,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndP4(offset, limit, iRouteParamKey,iDescription,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndP5(offset, limit, iRouteParamKey,iDescription,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndP6(offset, limit, iRouteParamKey,iDescription,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndP7(offset, limit, iRouteParamKey,iDescription,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndP8(offset, limit, iRouteParamKey,iDescription,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndP9(offset, limit, iRouteParamKey,iDescription,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescriptionAndFormClass(offset, limit, iRouteParamKey,iDescription,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescriptionAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndOptions(offset, limit, iRouteParamKey,iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndProvider(offset, limit, iRouteParamKey,iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndEnabled(offset, limit, iRouteParamKey,iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndDiscovered(offset, limit, iRouteParamKey,iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndExpanded(offset, limit, iRouteParamKey,iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndWeight(offset, limit, iRouteParamKey,iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndMetadata(offset, limit, iRouteParamKey,iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndHasChildren(offset, limit, iRouteParamKey,iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndDepth(offset, limit, iRouteParamKey,iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndP1(offset, limit, iRouteParamKey,iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndP2(offset, limit, iRouteParamKey,iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndP3(offset, limit, iRouteParamKey,iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndP4(offset, limit, iRouteParamKey,iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndP5(offset, limit, iRouteParamKey,iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndP6(offset, limit, iRouteParamKey,iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndP7(offset, limit, iRouteParamKey,iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndP8(offset, limit, iRouteParamKey,iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndP9(offset, limit, iRouteParamKey,iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClassAndFormClass(offset, limit, iRouteParamKey,iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndProvider(offset, limit, iRouteParamKey,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndEnabled(offset, limit, iRouteParamKey,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndDiscovered(offset, limit, iRouteParamKey,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndExpanded(offset, limit, iRouteParamKey,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndWeight(offset, limit, iRouteParamKey,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndMetadata(offset, limit, iRouteParamKey,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndHasChildren(offset, limit, iRouteParamKey,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndDepth(offset, limit, iRouteParamKey,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndP1(offset, limit, iRouteParamKey,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndP2(offset, limit, iRouteParamKey,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndP3(offset, limit, iRouteParamKey,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndP4(offset, limit, iRouteParamKey,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndP5(offset, limit, iRouteParamKey,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndP6(offset, limit, iRouteParamKey,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndP7(offset, limit, iRouteParamKey,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndP8(offset, limit, iRouteParamKey,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndP9(offset, limit, iRouteParamKey,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptionsAndFormClass(offset, limit, iRouteParamKey,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndEnabled(offset, limit, iRouteParamKey,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndDiscovered(offset, limit, iRouteParamKey,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndExpanded(offset, limit, iRouteParamKey,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndWeight(offset, limit, iRouteParamKey,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndMetadata(offset, limit, iRouteParamKey,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndHasChildren(offset, limit, iRouteParamKey,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndDepth(offset, limit, iRouteParamKey,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndP1(offset, limit, iRouteParamKey,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndP2(offset, limit, iRouteParamKey,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndP3(offset, limit, iRouteParamKey,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndP4(offset, limit, iRouteParamKey,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndP5(offset, limit, iRouteParamKey,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndP6(offset, limit, iRouteParamKey,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndP7(offset, limit, iRouteParamKey,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndP8(offset, limit, iRouteParamKey,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndP9(offset, limit, iRouteParamKey,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProviderAndFormClass(offset, limit, iRouteParamKey,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndDiscovered(offset, limit, iRouteParamKey,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndExpanded(offset, limit, iRouteParamKey,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndWeight(offset, limit, iRouteParamKey,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndMetadata(offset, limit, iRouteParamKey,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndHasChildren(offset, limit, iRouteParamKey,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndDepth(offset, limit, iRouteParamKey,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndP1(offset, limit, iRouteParamKey,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndP2(offset, limit, iRouteParamKey,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndP3(offset, limit, iRouteParamKey,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndP4(offset, limit, iRouteParamKey,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndP5(offset, limit, iRouteParamKey,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndP6(offset, limit, iRouteParamKey,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndP7(offset, limit, iRouteParamKey,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndP8(offset, limit, iRouteParamKey,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndP9(offset, limit, iRouteParamKey,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabledAndFormClass(offset, limit, iRouteParamKey,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndExpanded(offset, limit, iRouteParamKey,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndWeight(offset, limit, iRouteParamKey,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndMetadata(offset, limit, iRouteParamKey,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndHasChildren(offset, limit, iRouteParamKey,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndDepth(offset, limit, iRouteParamKey,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndP1(offset, limit, iRouteParamKey,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndP2(offset, limit, iRouteParamKey,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndP3(offset, limit, iRouteParamKey,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndP4(offset, limit, iRouteParamKey,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndP5(offset, limit, iRouteParamKey,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndP6(offset, limit, iRouteParamKey,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndP7(offset, limit, iRouteParamKey,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndP8(offset, limit, iRouteParamKey,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndP9(offset, limit, iRouteParamKey,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscoveredAndFormClass(offset, limit, iRouteParamKey,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndWeight(offset, limit, iRouteParamKey,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndMetadata(offset, limit, iRouteParamKey,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndHasChildren(offset, limit, iRouteParamKey,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndDepth(offset, limit, iRouteParamKey,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndP1(offset, limit, iRouteParamKey,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndP2(offset, limit, iRouteParamKey,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndP3(offset, limit, iRouteParamKey,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndP4(offset, limit, iRouteParamKey,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndP5(offset, limit, iRouteParamKey,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndP6(offset, limit, iRouteParamKey,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndP7(offset, limit, iRouteParamKey,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndP8(offset, limit, iRouteParamKey,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndP9(offset, limit, iRouteParamKey,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpandedAndFormClass(offset, limit, iRouteParamKey,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndMetadata(offset, limit, iRouteParamKey,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndHasChildren(offset, limit, iRouteParamKey,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndDepth(offset, limit, iRouteParamKey,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndP1(offset, limit, iRouteParamKey,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndP2(offset, limit, iRouteParamKey,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndP3(offset, limit, iRouteParamKey,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndP4(offset, limit, iRouteParamKey,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndP5(offset, limit, iRouteParamKey,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndP6(offset, limit, iRouteParamKey,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndP7(offset, limit, iRouteParamKey,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndP8(offset, limit, iRouteParamKey,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndP9(offset, limit, iRouteParamKey,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeightAndFormClass(offset, limit, iRouteParamKey,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndHasChildren(offset, limit, iRouteParamKey,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndDepth(offset, limit, iRouteParamKey,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndP1(offset, limit, iRouteParamKey,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndP2(offset, limit, iRouteParamKey,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndP3(offset, limit, iRouteParamKey,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndP4(offset, limit, iRouteParamKey,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndP5(offset, limit, iRouteParamKey,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndP6(offset, limit, iRouteParamKey,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndP7(offset, limit, iRouteParamKey,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndP8(offset, limit, iRouteParamKey,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndP9(offset, limit, iRouteParamKey,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadataAndFormClass(offset, limit, iRouteParamKey,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndDepth(offset, limit, iRouteParamKey,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndP1(offset, limit, iRouteParamKey,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndP2(offset, limit, iRouteParamKey,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndP3(offset, limit, iRouteParamKey,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndP4(offset, limit, iRouteParamKey,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndP5(offset, limit, iRouteParamKey,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndP6(offset, limit, iRouteParamKey,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndP7(offset, limit, iRouteParamKey,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndP8(offset, limit, iRouteParamKey,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndP9(offset, limit, iRouteParamKey,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildrenAndFormClass(offset, limit, iRouteParamKey,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepthAndP1(offset, limit, iRouteParamKey,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepthAndP2(offset, limit, iRouteParamKey,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepthAndP3(offset, limit, iRouteParamKey,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepthAndP4(offset, limit, iRouteParamKey,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepthAndP5(offset, limit, iRouteParamKey,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepthAndP6(offset, limit, iRouteParamKey,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepthAndP7(offset, limit, iRouteParamKey,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepthAndP8(offset, limit, iRouteParamKey,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepthAndP9(offset, limit, iRouteParamKey,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepthAndFormClass(offset, limit, iRouteParamKey,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP1AndP2(offset, limit, iRouteParamKey,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP1AndP3(offset, limit, iRouteParamKey,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP1AndP4(offset, limit, iRouteParamKey,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP1AndP5(offset, limit, iRouteParamKey,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP1AndP6(offset, limit, iRouteParamKey,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP1AndP7(offset, limit, iRouteParamKey,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP1AndP8(offset, limit, iRouteParamKey,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP1AndP9(offset, limit, iRouteParamKey,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP1AndFormClass(offset, limit, iRouteParamKey,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP2AndP3(offset, limit, iRouteParamKey,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP2AndP4(offset, limit, iRouteParamKey,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP2AndP5(offset, limit, iRouteParamKey,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP2AndP6(offset, limit, iRouteParamKey,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP2AndP7(offset, limit, iRouteParamKey,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP2AndP8(offset, limit, iRouteParamKey,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP2AndP9(offset, limit, iRouteParamKey,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP2AndFormClass(offset, limit, iRouteParamKey,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP3AndP4(offset, limit, iRouteParamKey,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP3AndP5(offset, limit, iRouteParamKey,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP3AndP6(offset, limit, iRouteParamKey,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP3AndP7(offset, limit, iRouteParamKey,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP3AndP8(offset, limit, iRouteParamKey,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP3AndP9(offset, limit, iRouteParamKey,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP3AndFormClass(offset, limit, iRouteParamKey,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP4AndP5(offset, limit, iRouteParamKey,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP4AndP6(offset, limit, iRouteParamKey,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP4AndP7(offset, limit, iRouteParamKey,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP4AndP8(offset, limit, iRouteParamKey,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP4AndP9(offset, limit, iRouteParamKey,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP4AndFormClass(offset, limit, iRouteParamKey,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP5AndP6(offset, limit, iRouteParamKey,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP5AndP7(offset, limit, iRouteParamKey,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP5AndP8(offset, limit, iRouteParamKey,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP5AndP9(offset, limit, iRouteParamKey,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP5AndFormClass(offset, limit, iRouteParamKey,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP6AndP7(offset, limit, iRouteParamKey,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP6AndP8(offset, limit, iRouteParamKey,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP6AndP9(offset, limit, iRouteParamKey,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP6AndFormClass(offset, limit, iRouteParamKey,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP7AndP8(offset, limit, iRouteParamKey,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP7AndP9(offset, limit, iRouteParamKey,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP7AndFormClass(offset, limit, iRouteParamKey,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP8AndP9(offset, limit, iRouteParamKey,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP8AndFormClass(offset, limit, iRouteParamKey,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP9AndFormClass(offset, limit, iRouteParamKey,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndTitle(offset, limit, iRouteParameters,iUrl,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndDescription(offset, limit, iRouteParameters,iUrl,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndClass(offset, limit, iRouteParameters,iUrl,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndOptions(offset, limit, iRouteParameters,iUrl,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndProvider(offset, limit, iRouteParameters,iUrl,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndEnabled(offset, limit, iRouteParameters,iUrl,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndDiscovered(offset, limit, iRouteParameters,iUrl,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndExpanded(offset, limit, iRouteParameters,iUrl,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndWeight(offset, limit, iRouteParameters,iUrl,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndMetadata(offset, limit, iRouteParameters,iUrl,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndHasChildren(offset, limit, iRouteParameters,iUrl,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndDepth(offset, limit, iRouteParameters,iUrl,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndP1(offset, limit, iRouteParameters,iUrl,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndP2(offset, limit, iRouteParameters,iUrl,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndP3(offset, limit, iRouteParameters,iUrl,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndP4(offset, limit, iRouteParameters,iUrl,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndP5(offset, limit, iRouteParameters,iUrl,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndP6(offset, limit, iRouteParameters,iUrl,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndP7(offset, limit, iRouteParameters,iUrl,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndP8(offset, limit, iRouteParameters,iUrl,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndP9(offset, limit, iRouteParameters,iUrl,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrlAndFormClass(offset, limit, iRouteParameters,iUrl,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrlAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndDescription(offset, limit, iRouteParameters,iTitle,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndClass(offset, limit, iRouteParameters,iTitle,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndOptions(offset, limit, iRouteParameters,iTitle,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndProvider(offset, limit, iRouteParameters,iTitle,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndEnabled(offset, limit, iRouteParameters,iTitle,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndDiscovered(offset, limit, iRouteParameters,iTitle,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndExpanded(offset, limit, iRouteParameters,iTitle,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndWeight(offset, limit, iRouteParameters,iTitle,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndMetadata(offset, limit, iRouteParameters,iTitle,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndHasChildren(offset, limit, iRouteParameters,iTitle,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndDepth(offset, limit, iRouteParameters,iTitle,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndP1(offset, limit, iRouteParameters,iTitle,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndP2(offset, limit, iRouteParameters,iTitle,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndP3(offset, limit, iRouteParameters,iTitle,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndP4(offset, limit, iRouteParameters,iTitle,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndP5(offset, limit, iRouteParameters,iTitle,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndP6(offset, limit, iRouteParameters,iTitle,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndP7(offset, limit, iRouteParameters,iTitle,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndP8(offset, limit, iRouteParameters,iTitle,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndP9(offset, limit, iRouteParameters,iTitle,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitleAndFormClass(offset, limit, iRouteParameters,iTitle,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitleAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndClass(offset, limit, iRouteParameters,iDescription,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndOptions(offset, limit, iRouteParameters,iDescription,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndProvider(offset, limit, iRouteParameters,iDescription,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndEnabled(offset, limit, iRouteParameters,iDescription,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndDiscovered(offset, limit, iRouteParameters,iDescription,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndExpanded(offset, limit, iRouteParameters,iDescription,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndWeight(offset, limit, iRouteParameters,iDescription,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndMetadata(offset, limit, iRouteParameters,iDescription,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndHasChildren(offset, limit, iRouteParameters,iDescription,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndDepth(offset, limit, iRouteParameters,iDescription,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndP1(offset, limit, iRouteParameters,iDescription,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndP2(offset, limit, iRouteParameters,iDescription,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndP3(offset, limit, iRouteParameters,iDescription,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndP4(offset, limit, iRouteParameters,iDescription,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndP5(offset, limit, iRouteParameters,iDescription,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndP6(offset, limit, iRouteParameters,iDescription,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndP7(offset, limit, iRouteParameters,iDescription,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndP8(offset, limit, iRouteParameters,iDescription,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndP9(offset, limit, iRouteParameters,iDescription,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescriptionAndFormClass(offset, limit, iRouteParameters,iDescription,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescriptionAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndOptions(offset, limit, iRouteParameters,iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndProvider(offset, limit, iRouteParameters,iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndEnabled(offset, limit, iRouteParameters,iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndDiscovered(offset, limit, iRouteParameters,iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndExpanded(offset, limit, iRouteParameters,iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndWeight(offset, limit, iRouteParameters,iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndMetadata(offset, limit, iRouteParameters,iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndHasChildren(offset, limit, iRouteParameters,iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndDepth(offset, limit, iRouteParameters,iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndP1(offset, limit, iRouteParameters,iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndP2(offset, limit, iRouteParameters,iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndP3(offset, limit, iRouteParameters,iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndP4(offset, limit, iRouteParameters,iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndP5(offset, limit, iRouteParameters,iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndP6(offset, limit, iRouteParameters,iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndP7(offset, limit, iRouteParameters,iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndP8(offset, limit, iRouteParameters,iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndP9(offset, limit, iRouteParameters,iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClassAndFormClass(offset, limit, iRouteParameters,iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndProvider(offset, limit, iRouteParameters,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndEnabled(offset, limit, iRouteParameters,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndDiscovered(offset, limit, iRouteParameters,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndExpanded(offset, limit, iRouteParameters,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndWeight(offset, limit, iRouteParameters,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndMetadata(offset, limit, iRouteParameters,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndHasChildren(offset, limit, iRouteParameters,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndDepth(offset, limit, iRouteParameters,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndP1(offset, limit, iRouteParameters,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndP2(offset, limit, iRouteParameters,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndP3(offset, limit, iRouteParameters,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndP4(offset, limit, iRouteParameters,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndP5(offset, limit, iRouteParameters,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndP6(offset, limit, iRouteParameters,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndP7(offset, limit, iRouteParameters,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndP8(offset, limit, iRouteParameters,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndP9(offset, limit, iRouteParameters,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptionsAndFormClass(offset, limit, iRouteParameters,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndEnabled(offset, limit, iRouteParameters,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndDiscovered(offset, limit, iRouteParameters,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndExpanded(offset, limit, iRouteParameters,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndWeight(offset, limit, iRouteParameters,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndMetadata(offset, limit, iRouteParameters,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndHasChildren(offset, limit, iRouteParameters,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndDepth(offset, limit, iRouteParameters,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndP1(offset, limit, iRouteParameters,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndP2(offset, limit, iRouteParameters,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndP3(offset, limit, iRouteParameters,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndP4(offset, limit, iRouteParameters,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndP5(offset, limit, iRouteParameters,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndP6(offset, limit, iRouteParameters,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndP7(offset, limit, iRouteParameters,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndP8(offset, limit, iRouteParameters,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndP9(offset, limit, iRouteParameters,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProviderAndFormClass(offset, limit, iRouteParameters,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndDiscovered(offset, limit, iRouteParameters,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndExpanded(offset, limit, iRouteParameters,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndWeight(offset, limit, iRouteParameters,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndMetadata(offset, limit, iRouteParameters,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndHasChildren(offset, limit, iRouteParameters,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndDepth(offset, limit, iRouteParameters,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndP1(offset, limit, iRouteParameters,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndP2(offset, limit, iRouteParameters,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndP3(offset, limit, iRouteParameters,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndP4(offset, limit, iRouteParameters,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndP5(offset, limit, iRouteParameters,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndP6(offset, limit, iRouteParameters,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndP7(offset, limit, iRouteParameters,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndP8(offset, limit, iRouteParameters,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndP9(offset, limit, iRouteParameters,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabledAndFormClass(offset, limit, iRouteParameters,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndExpanded(offset, limit, iRouteParameters,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndWeight(offset, limit, iRouteParameters,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndMetadata(offset, limit, iRouteParameters,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndHasChildren(offset, limit, iRouteParameters,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndDepth(offset, limit, iRouteParameters,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndP1(offset, limit, iRouteParameters,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndP2(offset, limit, iRouteParameters,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndP3(offset, limit, iRouteParameters,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndP4(offset, limit, iRouteParameters,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndP5(offset, limit, iRouteParameters,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndP6(offset, limit, iRouteParameters,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndP7(offset, limit, iRouteParameters,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndP8(offset, limit, iRouteParameters,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndP9(offset, limit, iRouteParameters,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscoveredAndFormClass(offset, limit, iRouteParameters,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndWeight(offset, limit, iRouteParameters,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndMetadata(offset, limit, iRouteParameters,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndHasChildren(offset, limit, iRouteParameters,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndDepth(offset, limit, iRouteParameters,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndP1(offset, limit, iRouteParameters,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndP2(offset, limit, iRouteParameters,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndP3(offset, limit, iRouteParameters,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndP4(offset, limit, iRouteParameters,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndP5(offset, limit, iRouteParameters,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndP6(offset, limit, iRouteParameters,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndP7(offset, limit, iRouteParameters,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndP8(offset, limit, iRouteParameters,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndP9(offset, limit, iRouteParameters,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpandedAndFormClass(offset, limit, iRouteParameters,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndMetadata(offset, limit, iRouteParameters,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndHasChildren(offset, limit, iRouteParameters,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndDepth(offset, limit, iRouteParameters,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndP1(offset, limit, iRouteParameters,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndP2(offset, limit, iRouteParameters,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndP3(offset, limit, iRouteParameters,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndP4(offset, limit, iRouteParameters,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndP5(offset, limit, iRouteParameters,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndP6(offset, limit, iRouteParameters,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndP7(offset, limit, iRouteParameters,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndP8(offset, limit, iRouteParameters,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndP9(offset, limit, iRouteParameters,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeightAndFormClass(offset, limit, iRouteParameters,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndHasChildren(offset, limit, iRouteParameters,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndDepth(offset, limit, iRouteParameters,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndP1(offset, limit, iRouteParameters,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndP2(offset, limit, iRouteParameters,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndP3(offset, limit, iRouteParameters,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndP4(offset, limit, iRouteParameters,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndP5(offset, limit, iRouteParameters,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndP6(offset, limit, iRouteParameters,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndP7(offset, limit, iRouteParameters,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndP8(offset, limit, iRouteParameters,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndP9(offset, limit, iRouteParameters,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadataAndFormClass(offset, limit, iRouteParameters,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndDepth(offset, limit, iRouteParameters,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndP1(offset, limit, iRouteParameters,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndP2(offset, limit, iRouteParameters,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndP3(offset, limit, iRouteParameters,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndP4(offset, limit, iRouteParameters,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndP5(offset, limit, iRouteParameters,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndP6(offset, limit, iRouteParameters,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndP7(offset, limit, iRouteParameters,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndP8(offset, limit, iRouteParameters,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndP9(offset, limit, iRouteParameters,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildrenAndFormClass(offset, limit, iRouteParameters,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepthAndP1(offset, limit, iRouteParameters,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepthAndP2(offset, limit, iRouteParameters,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepthAndP3(offset, limit, iRouteParameters,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepthAndP4(offset, limit, iRouteParameters,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepthAndP5(offset, limit, iRouteParameters,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepthAndP6(offset, limit, iRouteParameters,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepthAndP7(offset, limit, iRouteParameters,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepthAndP8(offset, limit, iRouteParameters,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepthAndP9(offset, limit, iRouteParameters,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepthAndFormClass(offset, limit, iRouteParameters,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP1AndP2(offset, limit, iRouteParameters,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP1AndP3(offset, limit, iRouteParameters,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP1AndP4(offset, limit, iRouteParameters,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP1AndP5(offset, limit, iRouteParameters,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP1AndP6(offset, limit, iRouteParameters,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP1AndP7(offset, limit, iRouteParameters,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP1AndP8(offset, limit, iRouteParameters,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP1AndP9(offset, limit, iRouteParameters,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP1AndFormClass(offset, limit, iRouteParameters,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP2AndP3(offset, limit, iRouteParameters,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP2AndP4(offset, limit, iRouteParameters,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP2AndP5(offset, limit, iRouteParameters,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP2AndP6(offset, limit, iRouteParameters,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP2AndP7(offset, limit, iRouteParameters,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP2AndP8(offset, limit, iRouteParameters,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP2AndP9(offset, limit, iRouteParameters,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP2AndFormClass(offset, limit, iRouteParameters,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP3AndP4(offset, limit, iRouteParameters,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP3AndP5(offset, limit, iRouteParameters,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP3AndP6(offset, limit, iRouteParameters,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP3AndP7(offset, limit, iRouteParameters,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP3AndP8(offset, limit, iRouteParameters,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP3AndP9(offset, limit, iRouteParameters,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP3AndFormClass(offset, limit, iRouteParameters,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP4AndP5(offset, limit, iRouteParameters,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP4AndP6(offset, limit, iRouteParameters,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP4AndP7(offset, limit, iRouteParameters,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP4AndP8(offset, limit, iRouteParameters,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP4AndP9(offset, limit, iRouteParameters,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP4AndFormClass(offset, limit, iRouteParameters,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP5AndP6(offset, limit, iRouteParameters,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP5AndP7(offset, limit, iRouteParameters,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP5AndP8(offset, limit, iRouteParameters,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP5AndP9(offset, limit, iRouteParameters,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP5AndFormClass(offset, limit, iRouteParameters,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP6AndP7(offset, limit, iRouteParameters,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP6AndP8(offset, limit, iRouteParameters,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP6AndP9(offset, limit, iRouteParameters,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP6AndFormClass(offset, limit, iRouteParameters,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP7AndP8(offset, limit, iRouteParameters,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP7AndP9(offset, limit, iRouteParameters,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP7AndFormClass(offset, limit, iRouteParameters,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP8AndP9(offset, limit, iRouteParameters,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP8AndFormClass(offset, limit, iRouteParameters,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP9AndFormClass(offset, limit, iRouteParameters,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndDescription(offset, limit, iUrl,iTitle,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndClass(offset, limit, iUrl,iTitle,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndOptions(offset, limit, iUrl,iTitle,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndProvider(offset, limit, iUrl,iTitle,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndEnabled(offset, limit, iUrl,iTitle,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndDiscovered(offset, limit, iUrl,iTitle,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndExpanded(offset, limit, iUrl,iTitle,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndWeight(offset, limit, iUrl,iTitle,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndMetadata(offset, limit, iUrl,iTitle,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndHasChildren(offset, limit, iUrl,iTitle,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndDepth(offset, limit, iUrl,iTitle,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndP1(offset, limit, iUrl,iTitle,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndP2(offset, limit, iUrl,iTitle,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndP3(offset, limit, iUrl,iTitle,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndP4(offset, limit, iUrl,iTitle,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndP5(offset, limit, iUrl,iTitle,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndP6(offset, limit, iUrl,iTitle,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndP7(offset, limit, iUrl,iTitle,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndP8(offset, limit, iUrl,iTitle,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndP9(offset, limit, iUrl,iTitle,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitleAndFormClass(offset, limit, iUrl,iTitle,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitleAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndClass(offset, limit, iUrl,iDescription,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndOptions(offset, limit, iUrl,iDescription,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndProvider(offset, limit, iUrl,iDescription,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndEnabled(offset, limit, iUrl,iDescription,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndDiscovered(offset, limit, iUrl,iDescription,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndExpanded(offset, limit, iUrl,iDescription,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndWeight(offset, limit, iUrl,iDescription,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndMetadata(offset, limit, iUrl,iDescription,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndHasChildren(offset, limit, iUrl,iDescription,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndDepth(offset, limit, iUrl,iDescription,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndP1(offset, limit, iUrl,iDescription,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndP2(offset, limit, iUrl,iDescription,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndP3(offset, limit, iUrl,iDescription,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndP4(offset, limit, iUrl,iDescription,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndP5(offset, limit, iUrl,iDescription,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndP6(offset, limit, iUrl,iDescription,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndP7(offset, limit, iUrl,iDescription,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndP8(offset, limit, iUrl,iDescription,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndP9(offset, limit, iUrl,iDescription,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescriptionAndFormClass(offset, limit, iUrl,iDescription,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescriptionAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndOptions(offset, limit, iUrl,iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndProvider(offset, limit, iUrl,iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndEnabled(offset, limit, iUrl,iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndDiscovered(offset, limit, iUrl,iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndExpanded(offset, limit, iUrl,iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndWeight(offset, limit, iUrl,iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndMetadata(offset, limit, iUrl,iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndHasChildren(offset, limit, iUrl,iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndDepth(offset, limit, iUrl,iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndP1(offset, limit, iUrl,iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndP2(offset, limit, iUrl,iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndP3(offset, limit, iUrl,iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndP4(offset, limit, iUrl,iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndP5(offset, limit, iUrl,iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndP6(offset, limit, iUrl,iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndP7(offset, limit, iUrl,iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndP8(offset, limit, iUrl,iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndP9(offset, limit, iUrl,iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClassAndFormClass(offset, limit, iUrl,iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndProvider(offset, limit, iUrl,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndEnabled(offset, limit, iUrl,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndDiscovered(offset, limit, iUrl,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndExpanded(offset, limit, iUrl,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndWeight(offset, limit, iUrl,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndMetadata(offset, limit, iUrl,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndHasChildren(offset, limit, iUrl,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndDepth(offset, limit, iUrl,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndP1(offset, limit, iUrl,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndP2(offset, limit, iUrl,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndP3(offset, limit, iUrl,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndP4(offset, limit, iUrl,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndP5(offset, limit, iUrl,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndP6(offset, limit, iUrl,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndP7(offset, limit, iUrl,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndP8(offset, limit, iUrl,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndP9(offset, limit, iUrl,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptionsAndFormClass(offset, limit, iUrl,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndEnabled(offset, limit, iUrl,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndDiscovered(offset, limit, iUrl,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndExpanded(offset, limit, iUrl,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndWeight(offset, limit, iUrl,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndMetadata(offset, limit, iUrl,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndHasChildren(offset, limit, iUrl,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndDepth(offset, limit, iUrl,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndP1(offset, limit, iUrl,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndP2(offset, limit, iUrl,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndP3(offset, limit, iUrl,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndP4(offset, limit, iUrl,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndP5(offset, limit, iUrl,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndP6(offset, limit, iUrl,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndP7(offset, limit, iUrl,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndP8(offset, limit, iUrl,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndP9(offset, limit, iUrl,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProviderAndFormClass(offset, limit, iUrl,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndDiscovered(offset, limit, iUrl,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndExpanded(offset, limit, iUrl,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndWeight(offset, limit, iUrl,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndMetadata(offset, limit, iUrl,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndHasChildren(offset, limit, iUrl,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndDepth(offset, limit, iUrl,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndP1(offset, limit, iUrl,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndP2(offset, limit, iUrl,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndP3(offset, limit, iUrl,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndP4(offset, limit, iUrl,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndP5(offset, limit, iUrl,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndP6(offset, limit, iUrl,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndP7(offset, limit, iUrl,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndP8(offset, limit, iUrl,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndP9(offset, limit, iUrl,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabledAndFormClass(offset, limit, iUrl,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndExpanded(offset, limit, iUrl,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndWeight(offset, limit, iUrl,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndMetadata(offset, limit, iUrl,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndHasChildren(offset, limit, iUrl,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndDepth(offset, limit, iUrl,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndP1(offset, limit, iUrl,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndP2(offset, limit, iUrl,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndP3(offset, limit, iUrl,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndP4(offset, limit, iUrl,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndP5(offset, limit, iUrl,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndP6(offset, limit, iUrl,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndP7(offset, limit, iUrl,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndP8(offset, limit, iUrl,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndP9(offset, limit, iUrl,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscoveredAndFormClass(offset, limit, iUrl,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndWeight(offset, limit, iUrl,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndMetadata(offset, limit, iUrl,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndHasChildren(offset, limit, iUrl,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndDepth(offset, limit, iUrl,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndP1(offset, limit, iUrl,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndP2(offset, limit, iUrl,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndP3(offset, limit, iUrl,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndP4(offset, limit, iUrl,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndP5(offset, limit, iUrl,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndP6(offset, limit, iUrl,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndP7(offset, limit, iUrl,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndP8(offset, limit, iUrl,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndP9(offset, limit, iUrl,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpandedAndFormClass(offset, limit, iUrl,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndMetadata(offset, limit, iUrl,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndHasChildren(offset, limit, iUrl,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndDepth(offset, limit, iUrl,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndP1(offset, limit, iUrl,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndP2(offset, limit, iUrl,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndP3(offset, limit, iUrl,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndP4(offset, limit, iUrl,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndP5(offset, limit, iUrl,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndP6(offset, limit, iUrl,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndP7(offset, limit, iUrl,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndP8(offset, limit, iUrl,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndP9(offset, limit, iUrl,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeightAndFormClass(offset, limit, iUrl,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndHasChildren(offset, limit, iUrl,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndDepth(offset, limit, iUrl,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndP1(offset, limit, iUrl,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndP2(offset, limit, iUrl,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndP3(offset, limit, iUrl,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndP4(offset, limit, iUrl,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndP5(offset, limit, iUrl,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndP6(offset, limit, iUrl,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndP7(offset, limit, iUrl,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndP8(offset, limit, iUrl,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndP9(offset, limit, iUrl,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadataAndFormClass(offset, limit, iUrl,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndDepth(offset, limit, iUrl,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndP1(offset, limit, iUrl,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndP2(offset, limit, iUrl,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndP3(offset, limit, iUrl,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndP4(offset, limit, iUrl,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndP5(offset, limit, iUrl,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndP6(offset, limit, iUrl,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndP7(offset, limit, iUrl,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndP8(offset, limit, iUrl,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndP9(offset, limit, iUrl,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildrenAndFormClass(offset, limit, iUrl,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepthAndP1(offset, limit, iUrl,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepthAndP2(offset, limit, iUrl,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepthAndP3(offset, limit, iUrl,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepthAndP4(offset, limit, iUrl,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepthAndP5(offset, limit, iUrl,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepthAndP6(offset, limit, iUrl,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepthAndP7(offset, limit, iUrl,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepthAndP8(offset, limit, iUrl,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepthAndP9(offset, limit, iUrl,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepthAndFormClass(offset, limit, iUrl,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP1AndP2(offset, limit, iUrl,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP1AndP3(offset, limit, iUrl,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP1AndP4(offset, limit, iUrl,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP1AndP5(offset, limit, iUrl,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP1AndP6(offset, limit, iUrl,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP1AndP7(offset, limit, iUrl,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP1AndP8(offset, limit, iUrl,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP1AndP9(offset, limit, iUrl,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP1AndFormClass(offset, limit, iUrl,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP2AndP3(offset, limit, iUrl,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP2AndP4(offset, limit, iUrl,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP2AndP5(offset, limit, iUrl,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP2AndP6(offset, limit, iUrl,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP2AndP7(offset, limit, iUrl,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP2AndP8(offset, limit, iUrl,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP2AndP9(offset, limit, iUrl,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP2AndFormClass(offset, limit, iUrl,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP3AndP4(offset, limit, iUrl,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP3AndP5(offset, limit, iUrl,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP3AndP6(offset, limit, iUrl,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP3AndP7(offset, limit, iUrl,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP3AndP8(offset, limit, iUrl,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP3AndP9(offset, limit, iUrl,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP3AndFormClass(offset, limit, iUrl,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP4AndP5(offset, limit, iUrl,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP4AndP6(offset, limit, iUrl,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP4AndP7(offset, limit, iUrl,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP4AndP8(offset, limit, iUrl,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP4AndP9(offset, limit, iUrl,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP4AndFormClass(offset, limit, iUrl,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP5AndP6(offset, limit, iUrl,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP5AndP7(offset, limit, iUrl,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP5AndP8(offset, limit, iUrl,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP5AndP9(offset, limit, iUrl,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP5AndFormClass(offset, limit, iUrl,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP6AndP7(offset, limit, iUrl,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP6AndP8(offset, limit, iUrl,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP6AndP9(offset, limit, iUrl,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP6AndFormClass(offset, limit, iUrl,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP7AndP8(offset, limit, iUrl,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP7AndP9(offset, limit, iUrl,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP7AndFormClass(offset, limit, iUrl,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP8AndP9(offset, limit, iUrl,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP8AndFormClass(offset, limit, iUrl,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP9AndFormClass(offset, limit, iUrl,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndClass(offset, limit, iTitle,iDescription,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndOptions(offset, limit, iTitle,iDescription,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndProvider(offset, limit, iTitle,iDescription,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndEnabled(offset, limit, iTitle,iDescription,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndDiscovered(offset, limit, iTitle,iDescription,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndExpanded(offset, limit, iTitle,iDescription,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndWeight(offset, limit, iTitle,iDescription,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndMetadata(offset, limit, iTitle,iDescription,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndHasChildren(offset, limit, iTitle,iDescription,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndDepth(offset, limit, iTitle,iDescription,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndP1(offset, limit, iTitle,iDescription,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndP2(offset, limit, iTitle,iDescription,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndP3(offset, limit, iTitle,iDescription,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndP4(offset, limit, iTitle,iDescription,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndP5(offset, limit, iTitle,iDescription,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndP6(offset, limit, iTitle,iDescription,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndP7(offset, limit, iTitle,iDescription,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndP8(offset, limit, iTitle,iDescription,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndP9(offset, limit, iTitle,iDescription,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescriptionAndFormClass(offset, limit, iTitle,iDescription,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescriptionAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndOptions(offset, limit, iTitle,iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndProvider(offset, limit, iTitle,iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndEnabled(offset, limit, iTitle,iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndDiscovered(offset, limit, iTitle,iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndExpanded(offset, limit, iTitle,iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndWeight(offset, limit, iTitle,iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndMetadata(offset, limit, iTitle,iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndHasChildren(offset, limit, iTitle,iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndDepth(offset, limit, iTitle,iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndP1(offset, limit, iTitle,iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndP2(offset, limit, iTitle,iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndP3(offset, limit, iTitle,iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndP4(offset, limit, iTitle,iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndP5(offset, limit, iTitle,iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndP6(offset, limit, iTitle,iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndP7(offset, limit, iTitle,iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndP8(offset, limit, iTitle,iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndP9(offset, limit, iTitle,iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClassAndFormClass(offset, limit, iTitle,iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndProvider(offset, limit, iTitle,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndEnabled(offset, limit, iTitle,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndDiscovered(offset, limit, iTitle,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndExpanded(offset, limit, iTitle,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndWeight(offset, limit, iTitle,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndMetadata(offset, limit, iTitle,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndHasChildren(offset, limit, iTitle,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndDepth(offset, limit, iTitle,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndP1(offset, limit, iTitle,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndP2(offset, limit, iTitle,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndP3(offset, limit, iTitle,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndP4(offset, limit, iTitle,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndP5(offset, limit, iTitle,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndP6(offset, limit, iTitle,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndP7(offset, limit, iTitle,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndP8(offset, limit, iTitle,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndP9(offset, limit, iTitle,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptionsAndFormClass(offset, limit, iTitle,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndEnabled(offset, limit, iTitle,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndDiscovered(offset, limit, iTitle,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndExpanded(offset, limit, iTitle,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndWeight(offset, limit, iTitle,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndMetadata(offset, limit, iTitle,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndHasChildren(offset, limit, iTitle,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndDepth(offset, limit, iTitle,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndP1(offset, limit, iTitle,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndP2(offset, limit, iTitle,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndP3(offset, limit, iTitle,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndP4(offset, limit, iTitle,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndP5(offset, limit, iTitle,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndP6(offset, limit, iTitle,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndP7(offset, limit, iTitle,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndP8(offset, limit, iTitle,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndP9(offset, limit, iTitle,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProviderAndFormClass(offset, limit, iTitle,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndDiscovered(offset, limit, iTitle,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndExpanded(offset, limit, iTitle,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndWeight(offset, limit, iTitle,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndMetadata(offset, limit, iTitle,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndHasChildren(offset, limit, iTitle,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndDepth(offset, limit, iTitle,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndP1(offset, limit, iTitle,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndP2(offset, limit, iTitle,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndP3(offset, limit, iTitle,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndP4(offset, limit, iTitle,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndP5(offset, limit, iTitle,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndP6(offset, limit, iTitle,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndP7(offset, limit, iTitle,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndP8(offset, limit, iTitle,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndP9(offset, limit, iTitle,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabledAndFormClass(offset, limit, iTitle,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndExpanded(offset, limit, iTitle,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndWeight(offset, limit, iTitle,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndMetadata(offset, limit, iTitle,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndHasChildren(offset, limit, iTitle,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndDepth(offset, limit, iTitle,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndP1(offset, limit, iTitle,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndP2(offset, limit, iTitle,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndP3(offset, limit, iTitle,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndP4(offset, limit, iTitle,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndP5(offset, limit, iTitle,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndP6(offset, limit, iTitle,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndP7(offset, limit, iTitle,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndP8(offset, limit, iTitle,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndP9(offset, limit, iTitle,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscoveredAndFormClass(offset, limit, iTitle,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndWeight(offset, limit, iTitle,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndMetadata(offset, limit, iTitle,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndHasChildren(offset, limit, iTitle,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndDepth(offset, limit, iTitle,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndP1(offset, limit, iTitle,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndP2(offset, limit, iTitle,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndP3(offset, limit, iTitle,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndP4(offset, limit, iTitle,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndP5(offset, limit, iTitle,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndP6(offset, limit, iTitle,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndP7(offset, limit, iTitle,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndP8(offset, limit, iTitle,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndP9(offset, limit, iTitle,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpandedAndFormClass(offset, limit, iTitle,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndMetadata(offset, limit, iTitle,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndHasChildren(offset, limit, iTitle,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndDepth(offset, limit, iTitle,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndP1(offset, limit, iTitle,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndP2(offset, limit, iTitle,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndP3(offset, limit, iTitle,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndP4(offset, limit, iTitle,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndP5(offset, limit, iTitle,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndP6(offset, limit, iTitle,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndP7(offset, limit, iTitle,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndP8(offset, limit, iTitle,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndP9(offset, limit, iTitle,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeightAndFormClass(offset, limit, iTitle,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndHasChildren(offset, limit, iTitle,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndDepth(offset, limit, iTitle,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndP1(offset, limit, iTitle,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndP2(offset, limit, iTitle,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndP3(offset, limit, iTitle,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndP4(offset, limit, iTitle,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndP5(offset, limit, iTitle,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndP6(offset, limit, iTitle,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndP7(offset, limit, iTitle,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndP8(offset, limit, iTitle,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndP9(offset, limit, iTitle,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadataAndFormClass(offset, limit, iTitle,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndDepth(offset, limit, iTitle,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndP1(offset, limit, iTitle,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndP2(offset, limit, iTitle,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndP3(offset, limit, iTitle,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndP4(offset, limit, iTitle,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndP5(offset, limit, iTitle,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndP6(offset, limit, iTitle,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndP7(offset, limit, iTitle,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndP8(offset, limit, iTitle,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndP9(offset, limit, iTitle,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildrenAndFormClass(offset, limit, iTitle,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepthAndP1(offset, limit, iTitle,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepthAndP2(offset, limit, iTitle,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepthAndP3(offset, limit, iTitle,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepthAndP4(offset, limit, iTitle,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepthAndP5(offset, limit, iTitle,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepthAndP6(offset, limit, iTitle,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepthAndP7(offset, limit, iTitle,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepthAndP8(offset, limit, iTitle,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepthAndP9(offset, limit, iTitle,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepthAndFormClass(offset, limit, iTitle,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP1AndP2(offset, limit, iTitle,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP1AndP3(offset, limit, iTitle,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP1AndP4(offset, limit, iTitle,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP1AndP5(offset, limit, iTitle,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP1AndP6(offset, limit, iTitle,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP1AndP7(offset, limit, iTitle,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP1AndP8(offset, limit, iTitle,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP1AndP9(offset, limit, iTitle,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP1AndFormClass(offset, limit, iTitle,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP2AndP3(offset, limit, iTitle,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP2AndP4(offset, limit, iTitle,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP2AndP5(offset, limit, iTitle,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP2AndP6(offset, limit, iTitle,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP2AndP7(offset, limit, iTitle,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP2AndP8(offset, limit, iTitle,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP2AndP9(offset, limit, iTitle,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP2AndFormClass(offset, limit, iTitle,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP3AndP4(offset, limit, iTitle,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP3AndP5(offset, limit, iTitle,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP3AndP6(offset, limit, iTitle,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP3AndP7(offset, limit, iTitle,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP3AndP8(offset, limit, iTitle,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP3AndP9(offset, limit, iTitle,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP3AndFormClass(offset, limit, iTitle,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP4AndP5(offset, limit, iTitle,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP4AndP6(offset, limit, iTitle,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP4AndP7(offset, limit, iTitle,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP4AndP8(offset, limit, iTitle,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP4AndP9(offset, limit, iTitle,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP4AndFormClass(offset, limit, iTitle,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP5AndP6(offset, limit, iTitle,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP5AndP7(offset, limit, iTitle,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP5AndP8(offset, limit, iTitle,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP5AndP9(offset, limit, iTitle,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP5AndFormClass(offset, limit, iTitle,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP6AndP7(offset, limit, iTitle,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP6AndP8(offset, limit, iTitle,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP6AndP9(offset, limit, iTitle,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP6AndFormClass(offset, limit, iTitle,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP7AndP8(offset, limit, iTitle,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP7AndP9(offset, limit, iTitle,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP7AndFormClass(offset, limit, iTitle,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP8AndP9(offset, limit, iTitle,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP8AndFormClass(offset, limit, iTitle,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP9AndFormClass(offset, limit, iTitle,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndOptions(offset, limit, iDescription,iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndProvider(offset, limit, iDescription,iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndEnabled(offset, limit, iDescription,iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndDiscovered(offset, limit, iDescription,iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndExpanded(offset, limit, iDescription,iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndWeight(offset, limit, iDescription,iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndMetadata(offset, limit, iDescription,iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndHasChildren(offset, limit, iDescription,iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndDepth(offset, limit, iDescription,iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndP1(offset, limit, iDescription,iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndP2(offset, limit, iDescription,iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndP3(offset, limit, iDescription,iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndP4(offset, limit, iDescription,iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndP5(offset, limit, iDescription,iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndP6(offset, limit, iDescription,iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndP7(offset, limit, iDescription,iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndP8(offset, limit, iDescription,iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndP9(offset, limit, iDescription,iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClassAndFormClass(offset, limit, iDescription,iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndProvider(offset, limit, iDescription,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndEnabled(offset, limit, iDescription,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndDiscovered(offset, limit, iDescription,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndExpanded(offset, limit, iDescription,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndWeight(offset, limit, iDescription,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndMetadata(offset, limit, iDescription,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndHasChildren(offset, limit, iDescription,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndDepth(offset, limit, iDescription,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndP1(offset, limit, iDescription,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndP2(offset, limit, iDescription,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndP3(offset, limit, iDescription,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndP4(offset, limit, iDescription,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndP5(offset, limit, iDescription,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndP6(offset, limit, iDescription,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndP7(offset, limit, iDescription,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndP8(offset, limit, iDescription,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndP9(offset, limit, iDescription,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptionsAndFormClass(offset, limit, iDescription,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndEnabled(offset, limit, iDescription,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndDiscovered(offset, limit, iDescription,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndExpanded(offset, limit, iDescription,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndWeight(offset, limit, iDescription,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndMetadata(offset, limit, iDescription,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndHasChildren(offset, limit, iDescription,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndDepth(offset, limit, iDescription,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndP1(offset, limit, iDescription,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndP2(offset, limit, iDescription,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndP3(offset, limit, iDescription,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndP4(offset, limit, iDescription,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndP5(offset, limit, iDescription,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndP6(offset, limit, iDescription,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndP7(offset, limit, iDescription,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndP8(offset, limit, iDescription,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndP9(offset, limit, iDescription,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProviderAndFormClass(offset, limit, iDescription,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndDiscovered(offset, limit, iDescription,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndExpanded(offset, limit, iDescription,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndWeight(offset, limit, iDescription,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndMetadata(offset, limit, iDescription,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndHasChildren(offset, limit, iDescription,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndDepth(offset, limit, iDescription,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndP1(offset, limit, iDescription,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndP2(offset, limit, iDescription,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndP3(offset, limit, iDescription,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndP4(offset, limit, iDescription,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndP5(offset, limit, iDescription,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndP6(offset, limit, iDescription,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndP7(offset, limit, iDescription,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndP8(offset, limit, iDescription,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndP9(offset, limit, iDescription,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabledAndFormClass(offset, limit, iDescription,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndExpanded(offset, limit, iDescription,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndWeight(offset, limit, iDescription,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndMetadata(offset, limit, iDescription,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndHasChildren(offset, limit, iDescription,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndDepth(offset, limit, iDescription,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndP1(offset, limit, iDescription,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndP2(offset, limit, iDescription,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndP3(offset, limit, iDescription,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndP4(offset, limit, iDescription,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndP5(offset, limit, iDescription,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndP6(offset, limit, iDescription,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndP7(offset, limit, iDescription,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndP8(offset, limit, iDescription,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndP9(offset, limit, iDescription,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscoveredAndFormClass(offset, limit, iDescription,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndWeight(offset, limit, iDescription,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndMetadata(offset, limit, iDescription,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndHasChildren(offset, limit, iDescription,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndDepth(offset, limit, iDescription,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndP1(offset, limit, iDescription,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndP2(offset, limit, iDescription,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndP3(offset, limit, iDescription,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndP4(offset, limit, iDescription,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndP5(offset, limit, iDescription,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndP6(offset, limit, iDescription,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndP7(offset, limit, iDescription,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndP8(offset, limit, iDescription,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndP9(offset, limit, iDescription,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpandedAndFormClass(offset, limit, iDescription,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndMetadata(offset, limit, iDescription,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndHasChildren(offset, limit, iDescription,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndDepth(offset, limit, iDescription,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndP1(offset, limit, iDescription,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndP2(offset, limit, iDescription,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndP3(offset, limit, iDescription,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndP4(offset, limit, iDescription,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndP5(offset, limit, iDescription,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndP6(offset, limit, iDescription,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndP7(offset, limit, iDescription,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndP8(offset, limit, iDescription,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndP9(offset, limit, iDescription,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeightAndFormClass(offset, limit, iDescription,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndHasChildren(offset, limit, iDescription,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndDepth(offset, limit, iDescription,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndP1(offset, limit, iDescription,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndP2(offset, limit, iDescription,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndP3(offset, limit, iDescription,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndP4(offset, limit, iDescription,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndP5(offset, limit, iDescription,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndP6(offset, limit, iDescription,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndP7(offset, limit, iDescription,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndP8(offset, limit, iDescription,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndP9(offset, limit, iDescription,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadataAndFormClass(offset, limit, iDescription,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndDepth(offset, limit, iDescription,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndP1(offset, limit, iDescription,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndP2(offset, limit, iDescription,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndP3(offset, limit, iDescription,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndP4(offset, limit, iDescription,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndP5(offset, limit, iDescription,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndP6(offset, limit, iDescription,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndP7(offset, limit, iDescription,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndP8(offset, limit, iDescription,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndP9(offset, limit, iDescription,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildrenAndFormClass(offset, limit, iDescription,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepthAndP1(offset, limit, iDescription,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepthAndP2(offset, limit, iDescription,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepthAndP3(offset, limit, iDescription,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepthAndP4(offset, limit, iDescription,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepthAndP5(offset, limit, iDescription,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepthAndP6(offset, limit, iDescription,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepthAndP7(offset, limit, iDescription,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepthAndP8(offset, limit, iDescription,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepthAndP9(offset, limit, iDescription,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepthAndFormClass(offset, limit, iDescription,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP1AndP2(offset, limit, iDescription,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP1AndP3(offset, limit, iDescription,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP1AndP4(offset, limit, iDescription,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP1AndP5(offset, limit, iDescription,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP1AndP6(offset, limit, iDescription,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP1AndP7(offset, limit, iDescription,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP1AndP8(offset, limit, iDescription,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP1AndP9(offset, limit, iDescription,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP1AndFormClass(offset, limit, iDescription,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP2AndP3(offset, limit, iDescription,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP2AndP4(offset, limit, iDescription,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP2AndP5(offset, limit, iDescription,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP2AndP6(offset, limit, iDescription,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP2AndP7(offset, limit, iDescription,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP2AndP8(offset, limit, iDescription,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP2AndP9(offset, limit, iDescription,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP2AndFormClass(offset, limit, iDescription,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP3AndP4(offset, limit, iDescription,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP3AndP5(offset, limit, iDescription,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP3AndP6(offset, limit, iDescription,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP3AndP7(offset, limit, iDescription,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP3AndP8(offset, limit, iDescription,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP3AndP9(offset, limit, iDescription,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP3AndFormClass(offset, limit, iDescription,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP4AndP5(offset, limit, iDescription,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP4AndP6(offset, limit, iDescription,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP4AndP7(offset, limit, iDescription,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP4AndP8(offset, limit, iDescription,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP4AndP9(offset, limit, iDescription,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP4AndFormClass(offset, limit, iDescription,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP5AndP6(offset, limit, iDescription,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP5AndP7(offset, limit, iDescription,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP5AndP8(offset, limit, iDescription,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP5AndP9(offset, limit, iDescription,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP5AndFormClass(offset, limit, iDescription,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP6AndP7(offset, limit, iDescription,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP6AndP8(offset, limit, iDescription,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP6AndP9(offset, limit, iDescription,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP6AndFormClass(offset, limit, iDescription,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP7AndP8(offset, limit, iDescription,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP7AndP9(offset, limit, iDescription,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP7AndFormClass(offset, limit, iDescription,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP8AndP9(offset, limit, iDescription,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP8AndFormClass(offset, limit, iDescription,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP9AndFormClass(offset, limit, iDescription,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndProvider(offset, limit, iClass,iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndEnabled(offset, limit, iClass,iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndDiscovered(offset, limit, iClass,iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndExpanded(offset, limit, iClass,iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndWeight(offset, limit, iClass,iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndMetadata(offset, limit, iClass,iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndHasChildren(offset, limit, iClass,iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndDepth(offset, limit, iClass,iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndP1(offset, limit, iClass,iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndP2(offset, limit, iClass,iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndP3(offset, limit, iClass,iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndP4(offset, limit, iClass,iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndP5(offset, limit, iClass,iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndP6(offset, limit, iClass,iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndP7(offset, limit, iClass,iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndP8(offset, limit, iClass,iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndP9(offset, limit, iClass,iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptionsAndFormClass(offset, limit, iClass,iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndEnabled(offset, limit, iClass,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndDiscovered(offset, limit, iClass,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndExpanded(offset, limit, iClass,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndWeight(offset, limit, iClass,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndMetadata(offset, limit, iClass,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndHasChildren(offset, limit, iClass,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndDepth(offset, limit, iClass,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndP1(offset, limit, iClass,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndP2(offset, limit, iClass,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndP3(offset, limit, iClass,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndP4(offset, limit, iClass,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndP5(offset, limit, iClass,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndP6(offset, limit, iClass,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndP7(offset, limit, iClass,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndP8(offset, limit, iClass,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndP9(offset, limit, iClass,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProviderAndFormClass(offset, limit, iClass,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndDiscovered(offset, limit, iClass,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndExpanded(offset, limit, iClass,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndWeight(offset, limit, iClass,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndMetadata(offset, limit, iClass,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndHasChildren(offset, limit, iClass,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndDepth(offset, limit, iClass,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndP1(offset, limit, iClass,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndP2(offset, limit, iClass,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndP3(offset, limit, iClass,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndP4(offset, limit, iClass,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndP5(offset, limit, iClass,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndP6(offset, limit, iClass,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndP7(offset, limit, iClass,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndP8(offset, limit, iClass,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndP9(offset, limit, iClass,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabledAndFormClass(offset, limit, iClass,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndExpanded(offset, limit, iClass,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndWeight(offset, limit, iClass,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndMetadata(offset, limit, iClass,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndHasChildren(offset, limit, iClass,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndDepth(offset, limit, iClass,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndP1(offset, limit, iClass,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndP2(offset, limit, iClass,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndP3(offset, limit, iClass,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndP4(offset, limit, iClass,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndP5(offset, limit, iClass,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndP6(offset, limit, iClass,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndP7(offset, limit, iClass,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndP8(offset, limit, iClass,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndP9(offset, limit, iClass,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscoveredAndFormClass(offset, limit, iClass,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndWeight(offset, limit, iClass,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndMetadata(offset, limit, iClass,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndHasChildren(offset, limit, iClass,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndDepth(offset, limit, iClass,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndP1(offset, limit, iClass,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndP2(offset, limit, iClass,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndP3(offset, limit, iClass,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndP4(offset, limit, iClass,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndP5(offset, limit, iClass,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndP6(offset, limit, iClass,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndP7(offset, limit, iClass,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndP8(offset, limit, iClass,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndP9(offset, limit, iClass,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpandedAndFormClass(offset, limit, iClass,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndMetadata(offset, limit, iClass,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndHasChildren(offset, limit, iClass,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndDepth(offset, limit, iClass,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndP1(offset, limit, iClass,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndP2(offset, limit, iClass,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndP3(offset, limit, iClass,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndP4(offset, limit, iClass,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndP5(offset, limit, iClass,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndP6(offset, limit, iClass,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndP7(offset, limit, iClass,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndP8(offset, limit, iClass,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndP9(offset, limit, iClass,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeightAndFormClass(offset, limit, iClass,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndHasChildren(offset, limit, iClass,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndDepth(offset, limit, iClass,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndP1(offset, limit, iClass,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndP2(offset, limit, iClass,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndP3(offset, limit, iClass,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndP4(offset, limit, iClass,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndP5(offset, limit, iClass,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndP6(offset, limit, iClass,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndP7(offset, limit, iClass,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndP8(offset, limit, iClass,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndP9(offset, limit, iClass,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadataAndFormClass(offset, limit, iClass,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndDepth(offset, limit, iClass,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndP1(offset, limit, iClass,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndP2(offset, limit, iClass,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndP3(offset, limit, iClass,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndP4(offset, limit, iClass,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndP5(offset, limit, iClass,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndP6(offset, limit, iClass,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndP7(offset, limit, iClass,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndP8(offset, limit, iClass,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndP9(offset, limit, iClass,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildrenAndFormClass(offset, limit, iClass,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepthAndP1(offset, limit, iClass,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepthAndP2(offset, limit, iClass,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepthAndP3(offset, limit, iClass,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepthAndP4(offset, limit, iClass,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepthAndP5(offset, limit, iClass,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepthAndP6(offset, limit, iClass,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepthAndP7(offset, limit, iClass,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepthAndP8(offset, limit, iClass,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepthAndP9(offset, limit, iClass,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepthAndFormClass(offset, limit, iClass,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP1AndP2(offset, limit, iClass,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP1AndP3(offset, limit, iClass,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP1AndP4(offset, limit, iClass,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP1AndP5(offset, limit, iClass,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP1AndP6(offset, limit, iClass,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP1AndP7(offset, limit, iClass,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP1AndP8(offset, limit, iClass,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP1AndP9(offset, limit, iClass,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP1AndFormClass(offset, limit, iClass,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP2AndP3(offset, limit, iClass,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP2AndP4(offset, limit, iClass,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP2AndP5(offset, limit, iClass,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP2AndP6(offset, limit, iClass,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP2AndP7(offset, limit, iClass,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP2AndP8(offset, limit, iClass,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP2AndP9(offset, limit, iClass,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP2AndFormClass(offset, limit, iClass,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP3AndP4(offset, limit, iClass,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP3AndP5(offset, limit, iClass,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP3AndP6(offset, limit, iClass,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP3AndP7(offset, limit, iClass,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP3AndP8(offset, limit, iClass,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP3AndP9(offset, limit, iClass,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP3AndFormClass(offset, limit, iClass,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP4AndP5(offset, limit, iClass,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP4AndP6(offset, limit, iClass,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP4AndP7(offset, limit, iClass,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP4AndP8(offset, limit, iClass,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP4AndP9(offset, limit, iClass,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP4AndFormClass(offset, limit, iClass,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP5AndP6(offset, limit, iClass,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP5AndP7(offset, limit, iClass,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP5AndP8(offset, limit, iClass,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP5AndP9(offset, limit, iClass,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP5AndFormClass(offset, limit, iClass,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP6AndP7(offset, limit, iClass,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP6AndP8(offset, limit, iClass,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP6AndP9(offset, limit, iClass,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP6AndFormClass(offset, limit, iClass,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP7AndP8(offset, limit, iClass,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP7AndP9(offset, limit, iClass,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP7AndFormClass(offset, limit, iClass,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP8AndP9(offset, limit, iClass,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP8AndFormClass(offset, limit, iClass,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP9AndFormClass(offset, limit, iClass,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndEnabled(offset, limit, iOptions,iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndDiscovered(offset, limit, iOptions,iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndExpanded(offset, limit, iOptions,iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndWeight(offset, limit, iOptions,iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndMetadata(offset, limit, iOptions,iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndHasChildren(offset, limit, iOptions,iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndDepth(offset, limit, iOptions,iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndP1(offset, limit, iOptions,iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndP2(offset, limit, iOptions,iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndP3(offset, limit, iOptions,iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndP4(offset, limit, iOptions,iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndP5(offset, limit, iOptions,iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndP6(offset, limit, iOptions,iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndP7(offset, limit, iOptions,iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndP8(offset, limit, iOptions,iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndP9(offset, limit, iOptions,iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProviderAndFormClass(offset, limit, iOptions,iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndDiscovered(offset, limit, iOptions,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndExpanded(offset, limit, iOptions,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndWeight(offset, limit, iOptions,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndMetadata(offset, limit, iOptions,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndHasChildren(offset, limit, iOptions,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndDepth(offset, limit, iOptions,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndP1(offset, limit, iOptions,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndP2(offset, limit, iOptions,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndP3(offset, limit, iOptions,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndP4(offset, limit, iOptions,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndP5(offset, limit, iOptions,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndP6(offset, limit, iOptions,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndP7(offset, limit, iOptions,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndP8(offset, limit, iOptions,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndP9(offset, limit, iOptions,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabledAndFormClass(offset, limit, iOptions,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndExpanded(offset, limit, iOptions,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndWeight(offset, limit, iOptions,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndMetadata(offset, limit, iOptions,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndHasChildren(offset, limit, iOptions,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndDepth(offset, limit, iOptions,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndP1(offset, limit, iOptions,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndP2(offset, limit, iOptions,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndP3(offset, limit, iOptions,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndP4(offset, limit, iOptions,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndP5(offset, limit, iOptions,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndP6(offset, limit, iOptions,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndP7(offset, limit, iOptions,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndP8(offset, limit, iOptions,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndP9(offset, limit, iOptions,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscoveredAndFormClass(offset, limit, iOptions,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndWeight(offset, limit, iOptions,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndMetadata(offset, limit, iOptions,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndHasChildren(offset, limit, iOptions,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndDepth(offset, limit, iOptions,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndP1(offset, limit, iOptions,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndP2(offset, limit, iOptions,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndP3(offset, limit, iOptions,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndP4(offset, limit, iOptions,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndP5(offset, limit, iOptions,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndP6(offset, limit, iOptions,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndP7(offset, limit, iOptions,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndP8(offset, limit, iOptions,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndP9(offset, limit, iOptions,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpandedAndFormClass(offset, limit, iOptions,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndMetadata(offset, limit, iOptions,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndHasChildren(offset, limit, iOptions,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndDepth(offset, limit, iOptions,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndP1(offset, limit, iOptions,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndP2(offset, limit, iOptions,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndP3(offset, limit, iOptions,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndP4(offset, limit, iOptions,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndP5(offset, limit, iOptions,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndP6(offset, limit, iOptions,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndP7(offset, limit, iOptions,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndP8(offset, limit, iOptions,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndP9(offset, limit, iOptions,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeightAndFormClass(offset, limit, iOptions,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndHasChildren(offset, limit, iOptions,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndDepth(offset, limit, iOptions,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndP1(offset, limit, iOptions,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndP2(offset, limit, iOptions,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndP3(offset, limit, iOptions,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndP4(offset, limit, iOptions,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndP5(offset, limit, iOptions,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndP6(offset, limit, iOptions,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndP7(offset, limit, iOptions,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndP8(offset, limit, iOptions,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndP9(offset, limit, iOptions,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadataAndFormClass(offset, limit, iOptions,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndDepth(offset, limit, iOptions,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndP1(offset, limit, iOptions,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndP2(offset, limit, iOptions,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndP3(offset, limit, iOptions,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndP4(offset, limit, iOptions,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndP5(offset, limit, iOptions,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndP6(offset, limit, iOptions,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndP7(offset, limit, iOptions,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndP8(offset, limit, iOptions,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndP9(offset, limit, iOptions,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildrenAndFormClass(offset, limit, iOptions,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepthAndP1(offset, limit, iOptions,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepthAndP2(offset, limit, iOptions,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepthAndP3(offset, limit, iOptions,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepthAndP4(offset, limit, iOptions,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepthAndP5(offset, limit, iOptions,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepthAndP6(offset, limit, iOptions,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepthAndP7(offset, limit, iOptions,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepthAndP8(offset, limit, iOptions,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepthAndP9(offset, limit, iOptions,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepthAndFormClass(offset, limit, iOptions,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP1AndP2(offset, limit, iOptions,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP1AndP3(offset, limit, iOptions,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP1AndP4(offset, limit, iOptions,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP1AndP5(offset, limit, iOptions,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP1AndP6(offset, limit, iOptions,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP1AndP7(offset, limit, iOptions,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP1AndP8(offset, limit, iOptions,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP1AndP9(offset, limit, iOptions,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP1AndFormClass(offset, limit, iOptions,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP2AndP3(offset, limit, iOptions,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP2AndP4(offset, limit, iOptions,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP2AndP5(offset, limit, iOptions,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP2AndP6(offset, limit, iOptions,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP2AndP7(offset, limit, iOptions,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP2AndP8(offset, limit, iOptions,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP2AndP9(offset, limit, iOptions,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP2AndFormClass(offset, limit, iOptions,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP3AndP4(offset, limit, iOptions,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP3AndP5(offset, limit, iOptions,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP3AndP6(offset, limit, iOptions,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP3AndP7(offset, limit, iOptions,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP3AndP8(offset, limit, iOptions,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP3AndP9(offset, limit, iOptions,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP3AndFormClass(offset, limit, iOptions,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP4AndP5(offset, limit, iOptions,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP4AndP6(offset, limit, iOptions,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP4AndP7(offset, limit, iOptions,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP4AndP8(offset, limit, iOptions,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP4AndP9(offset, limit, iOptions,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP4AndFormClass(offset, limit, iOptions,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP5AndP6(offset, limit, iOptions,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP5AndP7(offset, limit, iOptions,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP5AndP8(offset, limit, iOptions,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP5AndP9(offset, limit, iOptions,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP5AndFormClass(offset, limit, iOptions,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP6AndP7(offset, limit, iOptions,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP6AndP8(offset, limit, iOptions,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP6AndP9(offset, limit, iOptions,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP6AndFormClass(offset, limit, iOptions,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP7AndP8(offset, limit, iOptions,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP7AndP9(offset, limit, iOptions,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP7AndFormClass(offset, limit, iOptions,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP8AndP9(offset, limit, iOptions,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP8AndFormClass(offset, limit, iOptions,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP9AndFormClass(offset, limit, iOptions,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndDiscovered(offset, limit, iProvider,iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndExpanded(offset, limit, iProvider,iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndWeight(offset, limit, iProvider,iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndMetadata(offset, limit, iProvider,iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndHasChildren(offset, limit, iProvider,iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndDepth(offset, limit, iProvider,iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndP1(offset, limit, iProvider,iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndP2(offset, limit, iProvider,iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndP3(offset, limit, iProvider,iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndP4(offset, limit, iProvider,iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndP5(offset, limit, iProvider,iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndP6(offset, limit, iProvider,iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndP7(offset, limit, iProvider,iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndP8(offset, limit, iProvider,iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndP9(offset, limit, iProvider,iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabledAndFormClass(offset, limit, iProvider,iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndExpanded(offset, limit, iProvider,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndWeight(offset, limit, iProvider,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndMetadata(offset, limit, iProvider,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndHasChildren(offset, limit, iProvider,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndDepth(offset, limit, iProvider,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndP1(offset, limit, iProvider,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndP2(offset, limit, iProvider,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndP3(offset, limit, iProvider,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndP4(offset, limit, iProvider,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndP5(offset, limit, iProvider,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndP6(offset, limit, iProvider,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndP7(offset, limit, iProvider,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndP8(offset, limit, iProvider,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndP9(offset, limit, iProvider,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscoveredAndFormClass(offset, limit, iProvider,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndWeight(offset, limit, iProvider,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndMetadata(offset, limit, iProvider,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndHasChildren(offset, limit, iProvider,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndDepth(offset, limit, iProvider,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndP1(offset, limit, iProvider,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndP2(offset, limit, iProvider,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndP3(offset, limit, iProvider,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndP4(offset, limit, iProvider,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndP5(offset, limit, iProvider,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndP6(offset, limit, iProvider,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndP7(offset, limit, iProvider,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndP8(offset, limit, iProvider,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndP9(offset, limit, iProvider,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpandedAndFormClass(offset, limit, iProvider,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndMetadata(offset, limit, iProvider,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndHasChildren(offset, limit, iProvider,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndDepth(offset, limit, iProvider,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndP1(offset, limit, iProvider,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndP2(offset, limit, iProvider,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndP3(offset, limit, iProvider,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndP4(offset, limit, iProvider,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndP5(offset, limit, iProvider,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndP6(offset, limit, iProvider,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndP7(offset, limit, iProvider,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndP8(offset, limit, iProvider,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndP9(offset, limit, iProvider,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeightAndFormClass(offset, limit, iProvider,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndHasChildren(offset, limit, iProvider,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndDepth(offset, limit, iProvider,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndP1(offset, limit, iProvider,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndP2(offset, limit, iProvider,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndP3(offset, limit, iProvider,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndP4(offset, limit, iProvider,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndP5(offset, limit, iProvider,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndP6(offset, limit, iProvider,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndP7(offset, limit, iProvider,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndP8(offset, limit, iProvider,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndP9(offset, limit, iProvider,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadataAndFormClass(offset, limit, iProvider,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndDepth(offset, limit, iProvider,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndP1(offset, limit, iProvider,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndP2(offset, limit, iProvider,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndP3(offset, limit, iProvider,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndP4(offset, limit, iProvider,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndP5(offset, limit, iProvider,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndP6(offset, limit, iProvider,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndP7(offset, limit, iProvider,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndP8(offset, limit, iProvider,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndP9(offset, limit, iProvider,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildrenAndFormClass(offset, limit, iProvider,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepthAndP1(offset, limit, iProvider,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepthAndP2(offset, limit, iProvider,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepthAndP3(offset, limit, iProvider,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepthAndP4(offset, limit, iProvider,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepthAndP5(offset, limit, iProvider,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepthAndP6(offset, limit, iProvider,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepthAndP7(offset, limit, iProvider,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepthAndP8(offset, limit, iProvider,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepthAndP9(offset, limit, iProvider,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepthAndFormClass(offset, limit, iProvider,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP1AndP2(offset, limit, iProvider,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP1AndP3(offset, limit, iProvider,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP1AndP4(offset, limit, iProvider,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP1AndP5(offset, limit, iProvider,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP1AndP6(offset, limit, iProvider,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP1AndP7(offset, limit, iProvider,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP1AndP8(offset, limit, iProvider,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP1AndP9(offset, limit, iProvider,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP1AndFormClass(offset, limit, iProvider,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP2AndP3(offset, limit, iProvider,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP2AndP4(offset, limit, iProvider,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP2AndP5(offset, limit, iProvider,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP2AndP6(offset, limit, iProvider,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP2AndP7(offset, limit, iProvider,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP2AndP8(offset, limit, iProvider,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP2AndP9(offset, limit, iProvider,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP2AndFormClass(offset, limit, iProvider,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP3AndP4(offset, limit, iProvider,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP3AndP5(offset, limit, iProvider,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP3AndP6(offset, limit, iProvider,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP3AndP7(offset, limit, iProvider,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP3AndP8(offset, limit, iProvider,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP3AndP9(offset, limit, iProvider,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP3AndFormClass(offset, limit, iProvider,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP4AndP5(offset, limit, iProvider,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP4AndP6(offset, limit, iProvider,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP4AndP7(offset, limit, iProvider,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP4AndP8(offset, limit, iProvider,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP4AndP9(offset, limit, iProvider,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP4AndFormClass(offset, limit, iProvider,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP5AndP6(offset, limit, iProvider,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP5AndP7(offset, limit, iProvider,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP5AndP8(offset, limit, iProvider,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP5AndP9(offset, limit, iProvider,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP5AndFormClass(offset, limit, iProvider,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP6AndP7(offset, limit, iProvider,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP6AndP8(offset, limit, iProvider,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP6AndP9(offset, limit, iProvider,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP6AndFormClass(offset, limit, iProvider,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP7AndP8(offset, limit, iProvider,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP7AndP9(offset, limit, iProvider,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP7AndFormClass(offset, limit, iProvider,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP8AndP9(offset, limit, iProvider,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP8AndFormClass(offset, limit, iProvider,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP9AndFormClass(offset, limit, iProvider,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndExpanded(offset, limit, iEnabled,iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndWeight(offset, limit, iEnabled,iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndMetadata(offset, limit, iEnabled,iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndHasChildren(offset, limit, iEnabled,iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndDepth(offset, limit, iEnabled,iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndP1(offset, limit, iEnabled,iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndP2(offset, limit, iEnabled,iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndP3(offset, limit, iEnabled,iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndP4(offset, limit, iEnabled,iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndP5(offset, limit, iEnabled,iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndP6(offset, limit, iEnabled,iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndP7(offset, limit, iEnabled,iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndP8(offset, limit, iEnabled,iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndP9(offset, limit, iEnabled,iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscoveredAndFormClass(offset, limit, iEnabled,iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndWeight(offset, limit, iEnabled,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndMetadata(offset, limit, iEnabled,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndHasChildren(offset, limit, iEnabled,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndDepth(offset, limit, iEnabled,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndP1(offset, limit, iEnabled,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndP2(offset, limit, iEnabled,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndP3(offset, limit, iEnabled,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndP4(offset, limit, iEnabled,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndP5(offset, limit, iEnabled,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndP6(offset, limit, iEnabled,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndP7(offset, limit, iEnabled,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndP8(offset, limit, iEnabled,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndP9(offset, limit, iEnabled,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpandedAndFormClass(offset, limit, iEnabled,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndMetadata(offset, limit, iEnabled,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndHasChildren(offset, limit, iEnabled,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndDepth(offset, limit, iEnabled,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndP1(offset, limit, iEnabled,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndP2(offset, limit, iEnabled,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndP3(offset, limit, iEnabled,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndP4(offset, limit, iEnabled,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndP5(offset, limit, iEnabled,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndP6(offset, limit, iEnabled,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndP7(offset, limit, iEnabled,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndP8(offset, limit, iEnabled,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndP9(offset, limit, iEnabled,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeightAndFormClass(offset, limit, iEnabled,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndHasChildren(offset, limit, iEnabled,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndDepth(offset, limit, iEnabled,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndP1(offset, limit, iEnabled,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndP2(offset, limit, iEnabled,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndP3(offset, limit, iEnabled,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndP4(offset, limit, iEnabled,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndP5(offset, limit, iEnabled,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndP6(offset, limit, iEnabled,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndP7(offset, limit, iEnabled,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndP8(offset, limit, iEnabled,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndP9(offset, limit, iEnabled,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadataAndFormClass(offset, limit, iEnabled,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndDepth(offset, limit, iEnabled,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndP1(offset, limit, iEnabled,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndP2(offset, limit, iEnabled,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndP3(offset, limit, iEnabled,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndP4(offset, limit, iEnabled,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndP5(offset, limit, iEnabled,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndP6(offset, limit, iEnabled,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndP7(offset, limit, iEnabled,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndP8(offset, limit, iEnabled,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndP9(offset, limit, iEnabled,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildrenAndFormClass(offset, limit, iEnabled,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepthAndP1(offset, limit, iEnabled,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepthAndP2(offset, limit, iEnabled,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepthAndP3(offset, limit, iEnabled,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepthAndP4(offset, limit, iEnabled,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepthAndP5(offset, limit, iEnabled,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepthAndP6(offset, limit, iEnabled,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepthAndP7(offset, limit, iEnabled,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepthAndP8(offset, limit, iEnabled,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepthAndP9(offset, limit, iEnabled,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepthAndFormClass(offset, limit, iEnabled,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP1AndP2(offset, limit, iEnabled,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP1AndP3(offset, limit, iEnabled,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP1AndP4(offset, limit, iEnabled,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP1AndP5(offset, limit, iEnabled,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP1AndP6(offset, limit, iEnabled,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP1AndP7(offset, limit, iEnabled,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP1AndP8(offset, limit, iEnabled,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP1AndP9(offset, limit, iEnabled,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP1AndFormClass(offset, limit, iEnabled,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP2AndP3(offset, limit, iEnabled,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP2AndP4(offset, limit, iEnabled,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP2AndP5(offset, limit, iEnabled,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP2AndP6(offset, limit, iEnabled,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP2AndP7(offset, limit, iEnabled,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP2AndP8(offset, limit, iEnabled,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP2AndP9(offset, limit, iEnabled,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP2AndFormClass(offset, limit, iEnabled,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP3AndP4(offset, limit, iEnabled,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP3AndP5(offset, limit, iEnabled,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP3AndP6(offset, limit, iEnabled,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP3AndP7(offset, limit, iEnabled,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP3AndP8(offset, limit, iEnabled,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP3AndP9(offset, limit, iEnabled,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP3AndFormClass(offset, limit, iEnabled,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP4AndP5(offset, limit, iEnabled,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP4AndP6(offset, limit, iEnabled,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP4AndP7(offset, limit, iEnabled,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP4AndP8(offset, limit, iEnabled,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP4AndP9(offset, limit, iEnabled,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP4AndFormClass(offset, limit, iEnabled,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP5AndP6(offset, limit, iEnabled,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP5AndP7(offset, limit, iEnabled,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP5AndP8(offset, limit, iEnabled,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP5AndP9(offset, limit, iEnabled,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP5AndFormClass(offset, limit, iEnabled,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP6AndP7(offset, limit, iEnabled,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP6AndP8(offset, limit, iEnabled,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP6AndP9(offset, limit, iEnabled,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP6AndFormClass(offset, limit, iEnabled,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP7AndP8(offset, limit, iEnabled,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP7AndP9(offset, limit, iEnabled,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP7AndFormClass(offset, limit, iEnabled,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP8AndP9(offset, limit, iEnabled,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP8AndFormClass(offset, limit, iEnabled,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP9AndFormClass(offset, limit, iEnabled,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndWeight(offset, limit, iDiscovered,iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndMetadata(offset, limit, iDiscovered,iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndHasChildren(offset, limit, iDiscovered,iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndDepth(offset, limit, iDiscovered,iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndP1(offset, limit, iDiscovered,iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndP2(offset, limit, iDiscovered,iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndP3(offset, limit, iDiscovered,iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndP4(offset, limit, iDiscovered,iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndP5(offset, limit, iDiscovered,iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndP6(offset, limit, iDiscovered,iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndP7(offset, limit, iDiscovered,iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndP8(offset, limit, iDiscovered,iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndP9(offset, limit, iDiscovered,iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpandedAndFormClass(offset, limit, iDiscovered,iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndMetadata(offset, limit, iDiscovered,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndHasChildren(offset, limit, iDiscovered,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndDepth(offset, limit, iDiscovered,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndP1(offset, limit, iDiscovered,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndP2(offset, limit, iDiscovered,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndP3(offset, limit, iDiscovered,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndP4(offset, limit, iDiscovered,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndP5(offset, limit, iDiscovered,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndP6(offset, limit, iDiscovered,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndP7(offset, limit, iDiscovered,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndP8(offset, limit, iDiscovered,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndP9(offset, limit, iDiscovered,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeightAndFormClass(offset, limit, iDiscovered,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndHasChildren(offset, limit, iDiscovered,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndDepth(offset, limit, iDiscovered,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndP1(offset, limit, iDiscovered,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndP2(offset, limit, iDiscovered,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndP3(offset, limit, iDiscovered,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndP4(offset, limit, iDiscovered,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndP5(offset, limit, iDiscovered,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndP6(offset, limit, iDiscovered,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndP7(offset, limit, iDiscovered,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndP8(offset, limit, iDiscovered,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndP9(offset, limit, iDiscovered,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadataAndFormClass(offset, limit, iDiscovered,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndDepth(offset, limit, iDiscovered,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndP1(offset, limit, iDiscovered,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndP2(offset, limit, iDiscovered,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndP3(offset, limit, iDiscovered,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndP4(offset, limit, iDiscovered,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndP5(offset, limit, iDiscovered,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndP6(offset, limit, iDiscovered,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndP7(offset, limit, iDiscovered,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndP8(offset, limit, iDiscovered,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndP9(offset, limit, iDiscovered,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildrenAndFormClass(offset, limit, iDiscovered,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepthAndP1(offset, limit, iDiscovered,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepthAndP2(offset, limit, iDiscovered,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepthAndP3(offset, limit, iDiscovered,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepthAndP4(offset, limit, iDiscovered,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepthAndP5(offset, limit, iDiscovered,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepthAndP6(offset, limit, iDiscovered,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepthAndP7(offset, limit, iDiscovered,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepthAndP8(offset, limit, iDiscovered,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepthAndP9(offset, limit, iDiscovered,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepthAndFormClass(offset, limit, iDiscovered,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP1AndP2(offset, limit, iDiscovered,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP1AndP3(offset, limit, iDiscovered,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP1AndP4(offset, limit, iDiscovered,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP1AndP5(offset, limit, iDiscovered,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP1AndP6(offset, limit, iDiscovered,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP1AndP7(offset, limit, iDiscovered,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP1AndP8(offset, limit, iDiscovered,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP1AndP9(offset, limit, iDiscovered,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP1AndFormClass(offset, limit, iDiscovered,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP2AndP3(offset, limit, iDiscovered,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP2AndP4(offset, limit, iDiscovered,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP2AndP5(offset, limit, iDiscovered,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP2AndP6(offset, limit, iDiscovered,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP2AndP7(offset, limit, iDiscovered,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP2AndP8(offset, limit, iDiscovered,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP2AndP9(offset, limit, iDiscovered,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP2AndFormClass(offset, limit, iDiscovered,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP3AndP4(offset, limit, iDiscovered,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP3AndP5(offset, limit, iDiscovered,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP3AndP6(offset, limit, iDiscovered,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP3AndP7(offset, limit, iDiscovered,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP3AndP8(offset, limit, iDiscovered,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP3AndP9(offset, limit, iDiscovered,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP3AndFormClass(offset, limit, iDiscovered,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP4AndP5(offset, limit, iDiscovered,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP4AndP6(offset, limit, iDiscovered,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP4AndP7(offset, limit, iDiscovered,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP4AndP8(offset, limit, iDiscovered,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP4AndP9(offset, limit, iDiscovered,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP4AndFormClass(offset, limit, iDiscovered,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP5AndP6(offset, limit, iDiscovered,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP5AndP7(offset, limit, iDiscovered,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP5AndP8(offset, limit, iDiscovered,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP5AndP9(offset, limit, iDiscovered,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP5AndFormClass(offset, limit, iDiscovered,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP6AndP7(offset, limit, iDiscovered,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP6AndP8(offset, limit, iDiscovered,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP6AndP9(offset, limit, iDiscovered,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP6AndFormClass(offset, limit, iDiscovered,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP7AndP8(offset, limit, iDiscovered,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP7AndP9(offset, limit, iDiscovered,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP7AndFormClass(offset, limit, iDiscovered,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP8AndP9(offset, limit, iDiscovered,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP8AndFormClass(offset, limit, iDiscovered,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP9AndFormClass(offset, limit, iDiscovered,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndMetadata(offset, limit, iExpanded,iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndHasChildren(offset, limit, iExpanded,iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndDepth(offset, limit, iExpanded,iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndP1(offset, limit, iExpanded,iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndP2(offset, limit, iExpanded,iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndP3(offset, limit, iExpanded,iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndP4(offset, limit, iExpanded,iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndP5(offset, limit, iExpanded,iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndP6(offset, limit, iExpanded,iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndP7(offset, limit, iExpanded,iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndP8(offset, limit, iExpanded,iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndP9(offset, limit, iExpanded,iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeightAndFormClass(offset, limit, iExpanded,iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndHasChildren(offset, limit, iExpanded,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndDepth(offset, limit, iExpanded,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndP1(offset, limit, iExpanded,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndP2(offset, limit, iExpanded,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndP3(offset, limit, iExpanded,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndP4(offset, limit, iExpanded,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndP5(offset, limit, iExpanded,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndP6(offset, limit, iExpanded,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndP7(offset, limit, iExpanded,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndP8(offset, limit, iExpanded,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndP9(offset, limit, iExpanded,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadataAndFormClass(offset, limit, iExpanded,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndDepth(offset, limit, iExpanded,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndP1(offset, limit, iExpanded,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndP2(offset, limit, iExpanded,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndP3(offset, limit, iExpanded,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndP4(offset, limit, iExpanded,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndP5(offset, limit, iExpanded,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndP6(offset, limit, iExpanded,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndP7(offset, limit, iExpanded,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndP8(offset, limit, iExpanded,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndP9(offset, limit, iExpanded,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildrenAndFormClass(offset, limit, iExpanded,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepthAndP1(offset, limit, iExpanded,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepthAndP2(offset, limit, iExpanded,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepthAndP3(offset, limit, iExpanded,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepthAndP4(offset, limit, iExpanded,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepthAndP5(offset, limit, iExpanded,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepthAndP6(offset, limit, iExpanded,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepthAndP7(offset, limit, iExpanded,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepthAndP8(offset, limit, iExpanded,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepthAndP9(offset, limit, iExpanded,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepthAndFormClass(offset, limit, iExpanded,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP1AndP2(offset, limit, iExpanded,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP1AndP3(offset, limit, iExpanded,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP1AndP4(offset, limit, iExpanded,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP1AndP5(offset, limit, iExpanded,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP1AndP6(offset, limit, iExpanded,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP1AndP7(offset, limit, iExpanded,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP1AndP8(offset, limit, iExpanded,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP1AndP9(offset, limit, iExpanded,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP1AndFormClass(offset, limit, iExpanded,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP2AndP3(offset, limit, iExpanded,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP2AndP4(offset, limit, iExpanded,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP2AndP5(offset, limit, iExpanded,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP2AndP6(offset, limit, iExpanded,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP2AndP7(offset, limit, iExpanded,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP2AndP8(offset, limit, iExpanded,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP2AndP9(offset, limit, iExpanded,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP2AndFormClass(offset, limit, iExpanded,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP3AndP4(offset, limit, iExpanded,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP3AndP5(offset, limit, iExpanded,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP3AndP6(offset, limit, iExpanded,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP3AndP7(offset, limit, iExpanded,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP3AndP8(offset, limit, iExpanded,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP3AndP9(offset, limit, iExpanded,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP3AndFormClass(offset, limit, iExpanded,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP4AndP5(offset, limit, iExpanded,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP4AndP6(offset, limit, iExpanded,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP4AndP7(offset, limit, iExpanded,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP4AndP8(offset, limit, iExpanded,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP4AndP9(offset, limit, iExpanded,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP4AndFormClass(offset, limit, iExpanded,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP5AndP6(offset, limit, iExpanded,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP5AndP7(offset, limit, iExpanded,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP5AndP8(offset, limit, iExpanded,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP5AndP9(offset, limit, iExpanded,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP5AndFormClass(offset, limit, iExpanded,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP6AndP7(offset, limit, iExpanded,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP6AndP8(offset, limit, iExpanded,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP6AndP9(offset, limit, iExpanded,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP6AndFormClass(offset, limit, iExpanded,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP7AndP8(offset, limit, iExpanded,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP7AndP9(offset, limit, iExpanded,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP7AndFormClass(offset, limit, iExpanded,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP8AndP9(offset, limit, iExpanded,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP8AndFormClass(offset, limit, iExpanded,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP9AndFormClass(offset, limit, iExpanded,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndHasChildren(offset, limit, iWeight,iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndDepth(offset, limit, iWeight,iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndP1(offset, limit, iWeight,iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndP2(offset, limit, iWeight,iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndP3(offset, limit, iWeight,iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndP4(offset, limit, iWeight,iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndP5(offset, limit, iWeight,iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndP6(offset, limit, iWeight,iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndP7(offset, limit, iWeight,iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndP8(offset, limit, iWeight,iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndP9(offset, limit, iWeight,iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadataAndFormClass(offset, limit, iWeight,iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndDepth(offset, limit, iWeight,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndP1(offset, limit, iWeight,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndP2(offset, limit, iWeight,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndP3(offset, limit, iWeight,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndP4(offset, limit, iWeight,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndP5(offset, limit, iWeight,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndP6(offset, limit, iWeight,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndP7(offset, limit, iWeight,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndP8(offset, limit, iWeight,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndP9(offset, limit, iWeight,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildrenAndFormClass(offset, limit, iWeight,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepthAndP1(offset, limit, iWeight,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepthAndP2(offset, limit, iWeight,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepthAndP3(offset, limit, iWeight,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepthAndP4(offset, limit, iWeight,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepthAndP5(offset, limit, iWeight,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepthAndP6(offset, limit, iWeight,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepthAndP7(offset, limit, iWeight,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepthAndP8(offset, limit, iWeight,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepthAndP9(offset, limit, iWeight,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepthAndFormClass(offset, limit, iWeight,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP1AndP2(offset, limit, iWeight,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP1AndP3(offset, limit, iWeight,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP1AndP4(offset, limit, iWeight,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP1AndP5(offset, limit, iWeight,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP1AndP6(offset, limit, iWeight,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP1AndP7(offset, limit, iWeight,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP1AndP8(offset, limit, iWeight,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP1AndP9(offset, limit, iWeight,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP1AndFormClass(offset, limit, iWeight,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP2AndP3(offset, limit, iWeight,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP2AndP4(offset, limit, iWeight,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP2AndP5(offset, limit, iWeight,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP2AndP6(offset, limit, iWeight,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP2AndP7(offset, limit, iWeight,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP2AndP8(offset, limit, iWeight,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP2AndP9(offset, limit, iWeight,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP2AndFormClass(offset, limit, iWeight,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP3AndP4(offset, limit, iWeight,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP3AndP5(offset, limit, iWeight,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP3AndP6(offset, limit, iWeight,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP3AndP7(offset, limit, iWeight,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP3AndP8(offset, limit, iWeight,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP3AndP9(offset, limit, iWeight,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP3AndFormClass(offset, limit, iWeight,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP4AndP5(offset, limit, iWeight,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP4AndP6(offset, limit, iWeight,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP4AndP7(offset, limit, iWeight,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP4AndP8(offset, limit, iWeight,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP4AndP9(offset, limit, iWeight,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP4AndFormClass(offset, limit, iWeight,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP5AndP6(offset, limit, iWeight,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP5AndP7(offset, limit, iWeight,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP5AndP8(offset, limit, iWeight,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP5AndP9(offset, limit, iWeight,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP5AndFormClass(offset, limit, iWeight,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP6AndP7(offset, limit, iWeight,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP6AndP8(offset, limit, iWeight,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP6AndP9(offset, limit, iWeight,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP6AndFormClass(offset, limit, iWeight,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP7AndP8(offset, limit, iWeight,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP7AndP9(offset, limit, iWeight,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP7AndFormClass(offset, limit, iWeight,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP8AndP9(offset, limit, iWeight,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP8AndFormClass(offset, limit, iWeight,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP9AndFormClass(offset, limit, iWeight,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndDepth(offset, limit, iMetadata,iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndP1(offset, limit, iMetadata,iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndP2(offset, limit, iMetadata,iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndP3(offset, limit, iMetadata,iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndP4(offset, limit, iMetadata,iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndP5(offset, limit, iMetadata,iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndP6(offset, limit, iMetadata,iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndP7(offset, limit, iMetadata,iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndP8(offset, limit, iMetadata,iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndP9(offset, limit, iMetadata,iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildrenAndFormClass(offset, limit, iMetadata,iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepthAndP1(offset, limit, iMetadata,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepthAndP2(offset, limit, iMetadata,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepthAndP3(offset, limit, iMetadata,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepthAndP4(offset, limit, iMetadata,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepthAndP5(offset, limit, iMetadata,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepthAndP6(offset, limit, iMetadata,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepthAndP7(offset, limit, iMetadata,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepthAndP8(offset, limit, iMetadata,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepthAndP9(offset, limit, iMetadata,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepthAndFormClass(offset, limit, iMetadata,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP1AndP2(offset, limit, iMetadata,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP1AndP3(offset, limit, iMetadata,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP1AndP4(offset, limit, iMetadata,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP1AndP5(offset, limit, iMetadata,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP1AndP6(offset, limit, iMetadata,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP1AndP7(offset, limit, iMetadata,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP1AndP8(offset, limit, iMetadata,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP1AndP9(offset, limit, iMetadata,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP1AndFormClass(offset, limit, iMetadata,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP2AndP3(offset, limit, iMetadata,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP2AndP4(offset, limit, iMetadata,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP2AndP5(offset, limit, iMetadata,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP2AndP6(offset, limit, iMetadata,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP2AndP7(offset, limit, iMetadata,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP2AndP8(offset, limit, iMetadata,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP2AndP9(offset, limit, iMetadata,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP2AndFormClass(offset, limit, iMetadata,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP3AndP4(offset, limit, iMetadata,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP3AndP5(offset, limit, iMetadata,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP3AndP6(offset, limit, iMetadata,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP3AndP7(offset, limit, iMetadata,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP3AndP8(offset, limit, iMetadata,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP3AndP9(offset, limit, iMetadata,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP3AndFormClass(offset, limit, iMetadata,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP4AndP5(offset, limit, iMetadata,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP4AndP6(offset, limit, iMetadata,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP4AndP7(offset, limit, iMetadata,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP4AndP8(offset, limit, iMetadata,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP4AndP9(offset, limit, iMetadata,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP4AndFormClass(offset, limit, iMetadata,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP5AndP6(offset, limit, iMetadata,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP5AndP7(offset, limit, iMetadata,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP5AndP8(offset, limit, iMetadata,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP5AndP9(offset, limit, iMetadata,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP5AndFormClass(offset, limit, iMetadata,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP6AndP7(offset, limit, iMetadata,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP6AndP8(offset, limit, iMetadata,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP6AndP9(offset, limit, iMetadata,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP6AndFormClass(offset, limit, iMetadata,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP7AndP8(offset, limit, iMetadata,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP7AndP9(offset, limit, iMetadata,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP7AndFormClass(offset, limit, iMetadata,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP8AndP9(offset, limit, iMetadata,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP8AndFormClass(offset, limit, iMetadata,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP9AndFormClass(offset, limit, iMetadata,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepthAndP1(offset, limit, iHasChildren,iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepthAndP2(offset, limit, iHasChildren,iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepthAndP3(offset, limit, iHasChildren,iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepthAndP4(offset, limit, iHasChildren,iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepthAndP5(offset, limit, iHasChildren,iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepthAndP6(offset, limit, iHasChildren,iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepthAndP7(offset, limit, iHasChildren,iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepthAndP8(offset, limit, iHasChildren,iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepthAndP9(offset, limit, iHasChildren,iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepthAndFormClass(offset, limit, iHasChildren,iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP1AndP2(offset, limit, iHasChildren,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP1AndP3(offset, limit, iHasChildren,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP1AndP4(offset, limit, iHasChildren,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP1AndP5(offset, limit, iHasChildren,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP1AndP6(offset, limit, iHasChildren,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP1AndP7(offset, limit, iHasChildren,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP1AndP8(offset, limit, iHasChildren,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP1AndP9(offset, limit, iHasChildren,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP1AndFormClass(offset, limit, iHasChildren,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP2AndP3(offset, limit, iHasChildren,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP2AndP4(offset, limit, iHasChildren,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP2AndP5(offset, limit, iHasChildren,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP2AndP6(offset, limit, iHasChildren,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP2AndP7(offset, limit, iHasChildren,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP2AndP8(offset, limit, iHasChildren,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP2AndP9(offset, limit, iHasChildren,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP2AndFormClass(offset, limit, iHasChildren,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP3AndP4(offset, limit, iHasChildren,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP3AndP5(offset, limit, iHasChildren,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP3AndP6(offset, limit, iHasChildren,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP3AndP7(offset, limit, iHasChildren,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP3AndP8(offset, limit, iHasChildren,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP3AndP9(offset, limit, iHasChildren,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP3AndFormClass(offset, limit, iHasChildren,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP4AndP5(offset, limit, iHasChildren,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP4AndP6(offset, limit, iHasChildren,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP4AndP7(offset, limit, iHasChildren,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP4AndP8(offset, limit, iHasChildren,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP4AndP9(offset, limit, iHasChildren,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP4AndFormClass(offset, limit, iHasChildren,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP5AndP6(offset, limit, iHasChildren,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP5AndP7(offset, limit, iHasChildren,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP5AndP8(offset, limit, iHasChildren,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP5AndP9(offset, limit, iHasChildren,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP5AndFormClass(offset, limit, iHasChildren,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP6AndP7(offset, limit, iHasChildren,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP6AndP8(offset, limit, iHasChildren,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP6AndP9(offset, limit, iHasChildren,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP6AndFormClass(offset, limit, iHasChildren,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP7AndP8(offset, limit, iHasChildren,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP7AndP9(offset, limit, iHasChildren,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP7AndFormClass(offset, limit, iHasChildren,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP8AndP9(offset, limit, iHasChildren,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP8AndFormClass(offset, limit, iHasChildren,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP9AndFormClass(offset, limit, iHasChildren,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP1AndP2(offset, limit, iDepth,iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP1AndP3(offset, limit, iDepth,iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP1AndP4(offset, limit, iDepth,iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP1AndP5(offset, limit, iDepth,iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP1AndP6(offset, limit, iDepth,iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP1AndP7(offset, limit, iDepth,iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP1AndP8(offset, limit, iDepth,iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP1AndP9(offset, limit, iDepth,iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP1AndFormClass(offset, limit, iDepth,iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP2AndP3(offset, limit, iDepth,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP2AndP4(offset, limit, iDepth,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP2AndP5(offset, limit, iDepth,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP2AndP6(offset, limit, iDepth,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP2AndP7(offset, limit, iDepth,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP2AndP8(offset, limit, iDepth,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP2AndP9(offset, limit, iDepth,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP2AndFormClass(offset, limit, iDepth,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP3AndP4(offset, limit, iDepth,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP3AndP5(offset, limit, iDepth,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP3AndP6(offset, limit, iDepth,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP3AndP7(offset, limit, iDepth,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP3AndP8(offset, limit, iDepth,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP3AndP9(offset, limit, iDepth,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP3AndFormClass(offset, limit, iDepth,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP4AndP5(offset, limit, iDepth,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP4AndP6(offset, limit, iDepth,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP4AndP7(offset, limit, iDepth,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP4AndP8(offset, limit, iDepth,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP4AndP9(offset, limit, iDepth,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP4AndFormClass(offset, limit, iDepth,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP5AndP6(offset, limit, iDepth,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP5AndP7(offset, limit, iDepth,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP5AndP8(offset, limit, iDepth,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP5AndP9(offset, limit, iDepth,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP5AndFormClass(offset, limit, iDepth,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP6AndP7(offset, limit, iDepth,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP6AndP8(offset, limit, iDepth,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP6AndP9(offset, limit, iDepth,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP6AndFormClass(offset, limit, iDepth,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP7AndP8(offset, limit, iDepth,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP7AndP9(offset, limit, iDepth,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP7AndFormClass(offset, limit, iDepth,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP8AndP9(offset, limit, iDepth,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP8AndFormClass(offset, limit, iDepth,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP9AndFormClass(offset, limit, iDepth,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP2AndP3(offset, limit, iP1,iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP2AndP4(offset, limit, iP1,iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP2AndP5(offset, limit, iP1,iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP2AndP6(offset, limit, iP1,iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP2AndP7(offset, limit, iP1,iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP2AndP8(offset, limit, iP1,iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP2AndP9(offset, limit, iP1,iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP2AndFormClass(offset, limit, iP1,iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP3AndP4(offset, limit, iP1,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP3AndP5(offset, limit, iP1,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP3AndP6(offset, limit, iP1,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP3AndP7(offset, limit, iP1,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP3AndP8(offset, limit, iP1,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP3AndP9(offset, limit, iP1,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP3AndFormClass(offset, limit, iP1,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP4AndP5(offset, limit, iP1,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP4AndP6(offset, limit, iP1,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP4AndP7(offset, limit, iP1,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP4AndP8(offset, limit, iP1,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP4AndP9(offset, limit, iP1,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP4AndFormClass(offset, limit, iP1,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP5AndP6(offset, limit, iP1,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP5AndP7(offset, limit, iP1,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP5AndP8(offset, limit, iP1,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP5AndP9(offset, limit, iP1,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP5AndFormClass(offset, limit, iP1,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP6AndP7(offset, limit, iP1,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP6AndP8(offset, limit, iP1,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP6AndP9(offset, limit, iP1,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP6AndFormClass(offset, limit, iP1,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP7AndP8(offset, limit, iP1,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP7AndP9(offset, limit, iP1,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP7AndFormClass(offset, limit, iP1,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP8AndP9(offset, limit, iP1,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP8AndFormClass(offset, limit, iP1,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP9AndFormClass(offset, limit, iP1,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP3AndP4(offset, limit, iP2,iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP3AndP5(offset, limit, iP2,iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP3AndP6(offset, limit, iP2,iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP3AndP7(offset, limit, iP2,iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP3AndP8(offset, limit, iP2,iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP3AndP9(offset, limit, iP2,iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP3AndFormClass(offset, limit, iP2,iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP4AndP5(offset, limit, iP2,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP4AndP6(offset, limit, iP2,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP4AndP7(offset, limit, iP2,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP4AndP8(offset, limit, iP2,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP4AndP9(offset, limit, iP2,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP4AndFormClass(offset, limit, iP2,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP5AndP6(offset, limit, iP2,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP5AndP7(offset, limit, iP2,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP5AndP8(offset, limit, iP2,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP5AndP9(offset, limit, iP2,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP5AndFormClass(offset, limit, iP2,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP6AndP7(offset, limit, iP2,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP6AndP8(offset, limit, iP2,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP6AndP9(offset, limit, iP2,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP6AndFormClass(offset, limit, iP2,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP7AndP8(offset, limit, iP2,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP7AndP9(offset, limit, iP2,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP7AndFormClass(offset, limit, iP2,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP8AndP9(offset, limit, iP2,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP8AndFormClass(offset, limit, iP2,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP9AndFormClass(offset, limit, iP2,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP4AndP5(offset, limit, iP3,iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP4AndP6(offset, limit, iP3,iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP4AndP7(offset, limit, iP3,iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP4AndP8(offset, limit, iP3,iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP4AndP9(offset, limit, iP3,iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP4AndFormClass(offset, limit, iP3,iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP5AndP6(offset, limit, iP3,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP5AndP7(offset, limit, iP3,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP5AndP8(offset, limit, iP3,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP5AndP9(offset, limit, iP3,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP5AndFormClass(offset, limit, iP3,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP6AndP7(offset, limit, iP3,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP6AndP8(offset, limit, iP3,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP6AndP9(offset, limit, iP3,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP6AndFormClass(offset, limit, iP3,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP7AndP8(offset, limit, iP3,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP7AndP9(offset, limit, iP3,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP7AndFormClass(offset, limit, iP3,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP8AndP9(offset, limit, iP3,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP8AndFormClass(offset, limit, iP3,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP9AndFormClass(offset, limit, iP3,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP5AndP6(offset, limit, iP4,iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP5AndP7(offset, limit, iP4,iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP5AndP8(offset, limit, iP4,iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP5AndP9(offset, limit, iP4,iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP5AndFormClass(offset, limit, iP4,iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP6AndP7(offset, limit, iP4,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP6AndP8(offset, limit, iP4,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP6AndP9(offset, limit, iP4,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP6AndFormClass(offset, limit, iP4,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP7AndP8(offset, limit, iP4,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP7AndP9(offset, limit, iP4,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP7AndFormClass(offset, limit, iP4,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP8AndP9(offset, limit, iP4,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP8AndFormClass(offset, limit, iP4,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP9AndFormClass(offset, limit, iP4,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP6AndP7(offset, limit, iP5,iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP6AndP8(offset, limit, iP5,iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP6AndP9(offset, limit, iP5,iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP6AndFormClass(offset, limit, iP5,iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP7AndP8(offset, limit, iP5,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP7AndP9(offset, limit, iP5,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP7AndFormClass(offset, limit, iP5,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP8AndP9(offset, limit, iP5,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP8AndFormClass(offset, limit, iP5,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP9AndFormClass(offset, limit, iP5,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP6AndP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesByP6AndP7AndP8(offset, limit, iP6,iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP6AndP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP6AndP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesByP6AndP7AndP9(offset, limit, iP6,iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP6AndP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP6AndP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesByP6AndP7AndFormClass(offset, limit, iP6,iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP6AndP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP6AndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesByP6AndP8AndP9(offset, limit, iP6,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP6AndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP6AndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesByP6AndP8AndFormClass(offset, limit, iP6,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP6AndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP6AndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesByP6AndP9AndFormClass(offset, limit, iP6,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP6AndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP7AndP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP7) {
		_MenuTree, _error := model.GetMenuTreesByP7AndP8AndP9(offset, limit, iP7,iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP7AndP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP7AndP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP7) {
		_MenuTree, _error := model.GetMenuTreesByP7AndP8AndFormClass(offset, limit, iP7,iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP7AndP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP7AndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP7) {
		_MenuTree, _error := model.GetMenuTreesByP7AndP9AndFormClass(offset, limit, iP7,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP7AndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP8AndP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP8) {
		_MenuTree, _error := model.GetMenuTreesByP8AndP9AndFormClass(offset, limit, iP8,iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP8AndP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMlidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMlid := self.Args("mlid").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMlid(offset, limit, iMenuName,iMlid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMlid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iId := self.Args("id").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndId(offset, limit, iMenuName,iId)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndId's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iParent := self.Args("parent").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndParent(offset, limit, iMenuName,iParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteName := self.Args("route_name").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteName(offset, limit, iMenuName,iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParamKey(offset, limit, iMenuName,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndRouteParameters(offset, limit, iMenuName,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndUrl(offset, limit, iMenuName,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndTitle(offset, limit, iMenuName,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDescription(offset, limit, iMenuName,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndClass(offset, limit, iMenuName,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndOptions(offset, limit, iMenuName,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndProvider(offset, limit, iMenuName,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndEnabled(offset, limit, iMenuName,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDiscovered(offset, limit, iMenuName,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndExpanded(offset, limit, iMenuName,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndWeight(offset, limit, iMenuName,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndMetadata(offset, limit, iMenuName,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndHasChildren(offset, limit, iMenuName,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndDepth(offset, limit, iMenuName,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP1(offset, limit, iMenuName,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP2(offset, limit, iMenuName,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP3(offset, limit, iMenuName,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP4(offset, limit, iMenuName,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP5(offset, limit, iMenuName,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP6(offset, limit, iMenuName,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP7(offset, limit, iMenuName,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP8(offset, limit, iMenuName,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndP9(offset, limit, iMenuName,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMenuNameAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMenuName := self.Args("menu_name").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreesByMenuNameAndFormClass(offset, limit, iMenuName,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMenuNameAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iId := self.Args("id").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndId(offset, limit, iMlid,iId)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndId's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iParent := self.Args("parent").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndParent(offset, limit, iMlid,iParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteName := self.Args("route_name").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteName(offset, limit, iMlid,iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParamKey(offset, limit, iMlid,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndRouteParameters(offset, limit, iMlid,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iUrl := self.Args("url").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndUrl(offset, limit, iMlid,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndTitle(offset, limit, iMlid,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDescription(offset, limit, iMlid,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iClass := self.Args("class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndClass(offset, limit, iMlid,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndOptions(offset, limit, iMlid,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndProvider(offset, limit, iMlid,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndEnabled(offset, limit, iMlid,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDiscovered(offset, limit, iMlid,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndExpanded(offset, limit, iMlid,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndWeight(offset, limit, iMlid,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndMetadata(offset, limit, iMlid,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndHasChildren(offset, limit, iMlid,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndDepth(offset, limit, iMlid,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP1(offset, limit, iMlid,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP2(offset, limit, iMlid,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP3(offset, limit, iMlid,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP4(offset, limit, iMlid,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP5(offset, limit, iMlid,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP6(offset, limit, iMlid,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP7(offset, limit, iMlid,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP8(offset, limit, iMlid,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndP9(offset, limit, iMlid,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMlidAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMlid := self.Args("mlid").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreesByMlidAndFormClass(offset, limit, iMlid,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMlidAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iParent := self.Args("parent").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndParent(offset, limit, iId,iParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteName := self.Args("route_name").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteName(offset, limit, iId,iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParamKey(offset, limit, iId,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndRouteParameters(offset, limit, iId,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndUrl(offset, limit, iId,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndTitle(offset, limit, iId,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDescription(offset, limit, iId,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndClass(offset, limit, iId,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndOptions(offset, limit, iId,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndProvider(offset, limit, iId,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndEnabled(offset, limit, iId,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDiscovered(offset, limit, iId,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndExpanded(offset, limit, iId,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndWeight(offset, limit, iId,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndMetadata(offset, limit, iId,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndHasChildren(offset, limit, iId,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndDepth(offset, limit, iId,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP1(offset, limit, iId,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP2(offset, limit, iId,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP3(offset, limit, iId,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP4(offset, limit, iId,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP5(offset, limit, iId,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP6(offset, limit, iId,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP7(offset, limit, iId,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP8(offset, limit, iId,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndP9(offset, limit, iId,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByIdAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iId := self.Args("id").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreesByIdAndFormClass(offset, limit, iId,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByIdAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteName := self.Args("route_name").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteName(offset, limit, iParent,iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParamKey(offset, limit, iParent,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndRouteParameters(offset, limit, iParent,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndUrl(offset, limit, iParent,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndTitle(offset, limit, iParent,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDescription(offset, limit, iParent,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndClass(offset, limit, iParent,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndOptions(offset, limit, iParent,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndProvider(offset, limit, iParent,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndEnabled(offset, limit, iParent,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDiscovered(offset, limit, iParent,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndExpanded(offset, limit, iParent,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndWeight(offset, limit, iParent,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndMetadata(offset, limit, iParent,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndHasChildren(offset, limit, iParent,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndDepth(offset, limit, iParent,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP1(offset, limit, iParent,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP2(offset, limit, iParent,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP3(offset, limit, iParent,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP4(offset, limit, iParent,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP5(offset, limit, iParent,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP6(offset, limit, iParent,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP7(offset, limit, iParent,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP8(offset, limit, iParent,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndP9(offset, limit, iParent,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByParentAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iParent := self.Args("parent").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreesByParentAndFormClass(offset, limit, iParent,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByParentAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParamKey := self.Args("route_param_key").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParamKey(offset, limit, iRouteName,iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndRouteParameters(offset, limit, iRouteName,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndUrl(offset, limit, iRouteName,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndTitle(offset, limit, iRouteName,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDescription(offset, limit, iRouteName,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndClass(offset, limit, iRouteName,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndOptions(offset, limit, iRouteName,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndProvider(offset, limit, iRouteName,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndEnabled(offset, limit, iRouteName,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDiscovered(offset, limit, iRouteName,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndExpanded(offset, limit, iRouteName,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndWeight(offset, limit, iRouteName,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndMetadata(offset, limit, iRouteName,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndHasChildren(offset, limit, iRouteName,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndDepth(offset, limit, iRouteName,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP1(offset, limit, iRouteName,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP2(offset, limit, iRouteName,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP3(offset, limit, iRouteName,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP4(offset, limit, iRouteName,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP5(offset, limit, iRouteName,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP6(offset, limit, iRouteName,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP7(offset, limit, iRouteName,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP8(offset, limit, iRouteName,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndP9(offset, limit, iRouteName,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteNameAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteName := self.Args("route_name").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreesByRouteNameAndFormClass(offset, limit, iRouteName,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteNameAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iRouteParameters := self.Args("route_parameters").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndRouteParameters(offset, limit, iRouteParamKey,iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iUrl := self.Args("url").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndUrl(offset, limit, iRouteParamKey,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndTitle(offset, limit, iRouteParamKey,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDescription(offset, limit, iRouteParamKey,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndClass(offset, limit, iRouteParamKey,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndOptions(offset, limit, iRouteParamKey,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndProvider(offset, limit, iRouteParamKey,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndEnabled(offset, limit, iRouteParamKey,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDiscovered(offset, limit, iRouteParamKey,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndExpanded(offset, limit, iRouteParamKey,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndWeight(offset, limit, iRouteParamKey,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndMetadata(offset, limit, iRouteParamKey,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndHasChildren(offset, limit, iRouteParamKey,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndDepth(offset, limit, iRouteParamKey,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP1(offset, limit, iRouteParamKey,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP2(offset, limit, iRouteParamKey,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP3(offset, limit, iRouteParamKey,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP4(offset, limit, iRouteParamKey,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP5(offset, limit, iRouteParamKey,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP6(offset, limit, iRouteParamKey,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP7(offset, limit, iRouteParamKey,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP8(offset, limit, iRouteParamKey,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndP9(offset, limit, iRouteParamKey,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParamKeyAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParamKey := self.Args("route_param_key").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreesByRouteParamKeyAndFormClass(offset, limit, iRouteParamKey,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParamKeyAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iUrl := self.Args("url").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndUrl(offset, limit, iRouteParameters,iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndTitle(offset, limit, iRouteParameters,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDescription(offset, limit, iRouteParameters,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndClass(offset, limit, iRouteParameters,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndOptions(offset, limit, iRouteParameters,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndProvider(offset, limit, iRouteParameters,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndEnabled(offset, limit, iRouteParameters,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDiscovered(offset, limit, iRouteParameters,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndExpanded(offset, limit, iRouteParameters,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndWeight(offset, limit, iRouteParameters,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndMetadata(offset, limit, iRouteParameters,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndHasChildren(offset, limit, iRouteParameters,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndDepth(offset, limit, iRouteParameters,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP1(offset, limit, iRouteParameters,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP2(offset, limit, iRouteParameters,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP3(offset, limit, iRouteParameters,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP4(offset, limit, iRouteParameters,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP5(offset, limit, iRouteParameters,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP6(offset, limit, iRouteParameters,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP7(offset, limit, iRouteParameters,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP8(offset, limit, iRouteParameters,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndP9(offset, limit, iRouteParameters,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByRouteParametersAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iRouteParameters := self.Args("route_parameters").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreesByRouteParametersAndFormClass(offset, limit, iRouteParameters,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByRouteParametersAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iTitle := self.Args("title").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndTitle(offset, limit, iUrl,iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDescription(offset, limit, iUrl,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iClass := self.Args("class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndClass(offset, limit, iUrl,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndOptions(offset, limit, iUrl,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndProvider(offset, limit, iUrl,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndEnabled(offset, limit, iUrl,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDiscovered(offset, limit, iUrl,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndExpanded(offset, limit, iUrl,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndWeight(offset, limit, iUrl,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndMetadata(offset, limit, iUrl,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndHasChildren(offset, limit, iUrl,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndDepth(offset, limit, iUrl,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP1(offset, limit, iUrl,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP2(offset, limit, iUrl,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP3(offset, limit, iUrl,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP4(offset, limit, iUrl,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP5(offset, limit, iUrl,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP6(offset, limit, iUrl,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP7(offset, limit, iUrl,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP8(offset, limit, iUrl,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndP9(offset, limit, iUrl,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByUrlAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iUrl := self.Args("url").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreesByUrlAndFormClass(offset, limit, iUrl,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByUrlAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDescription := self.Args("description").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDescription(offset, limit, iTitle,iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndClass(offset, limit, iTitle,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndOptions(offset, limit, iTitle,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndProvider(offset, limit, iTitle,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndEnabled(offset, limit, iTitle,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDiscovered(offset, limit, iTitle,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndExpanded(offset, limit, iTitle,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndWeight(offset, limit, iTitle,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndMetadata(offset, limit, iTitle,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndHasChildren(offset, limit, iTitle,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndDepth(offset, limit, iTitle,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP1(offset, limit, iTitle,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP2(offset, limit, iTitle,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP3(offset, limit, iTitle,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP4(offset, limit, iTitle,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP5(offset, limit, iTitle,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP6(offset, limit, iTitle,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP7(offset, limit, iTitle,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP8(offset, limit, iTitle,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndP9(offset, limit, iTitle,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByTitleAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iTitle := self.Args("title").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreesByTitleAndFormClass(offset, limit, iTitle,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByTitleAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iClass := self.Args("class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndClass(offset, limit, iDescription,iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndOptions(offset, limit, iDescription,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndProvider(offset, limit, iDescription,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndEnabled(offset, limit, iDescription,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDiscovered(offset, limit, iDescription,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndExpanded(offset, limit, iDescription,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndWeight(offset, limit, iDescription,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndMetadata(offset, limit, iDescription,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndHasChildren(offset, limit, iDescription,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndDepth(offset, limit, iDescription,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP1(offset, limit, iDescription,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP2(offset, limit, iDescription,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP3(offset, limit, iDescription,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP4(offset, limit, iDescription,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP5(offset, limit, iDescription,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP6(offset, limit, iDescription,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP7(offset, limit, iDescription,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP8(offset, limit, iDescription,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndP9(offset, limit, iDescription,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDescriptionAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDescription := self.Args("description").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreesByDescriptionAndFormClass(offset, limit, iDescription,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDescriptionAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iOptions := self.Args("options").Bytes()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndOptions(offset, limit, iClass,iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndProvider(offset, limit, iClass,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndEnabled(offset, limit, iClass,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDiscovered(offset, limit, iClass,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndExpanded(offset, limit, iClass,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndWeight(offset, limit, iClass,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndMetadata(offset, limit, iClass,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndHasChildren(offset, limit, iClass,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndDepth(offset, limit, iClass,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP1(offset, limit, iClass,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP2(offset, limit, iClass,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP3(offset, limit, iClass,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP4(offset, limit, iClass,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP5(offset, limit, iClass,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP6(offset, limit, iClass,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP7(offset, limit, iClass,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP8(offset, limit, iClass,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndP9(offset, limit, iClass,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByClassAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iClass := self.Args("class").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreesByClassAndFormClass(offset, limit, iClass,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByClassAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iProvider := self.Args("provider").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndProvider(offset, limit, iOptions,iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndEnabled(offset, limit, iOptions,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDiscovered(offset, limit, iOptions,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndExpanded(offset, limit, iOptions,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndWeight(offset, limit, iOptions,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndMetadata(offset, limit, iOptions,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndHasChildren(offset, limit, iOptions,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndDepth(offset, limit, iOptions,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP1(offset, limit, iOptions,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP2(offset, limit, iOptions,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP3(offset, limit, iOptions,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP4(offset, limit, iOptions,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP5(offset, limit, iOptions,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP6(offset, limit, iOptions,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP7(offset, limit, iOptions,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP8(offset, limit, iOptions,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndP9(offset, limit, iOptions,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByOptionsAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iOptions := self.Args("options").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreesByOptionsAndFormClass(offset, limit, iOptions,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByOptionsAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iEnabled := self.Args("enabled").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndEnabled(offset, limit, iProvider,iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDiscovered(offset, limit, iProvider,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndExpanded(offset, limit, iProvider,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndWeight(offset, limit, iProvider,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndMetadata(offset, limit, iProvider,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndHasChildren(offset, limit, iProvider,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndDepth(offset, limit, iProvider,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP1(offset, limit, iProvider,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP2(offset, limit, iProvider,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP3(offset, limit, iProvider,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP4(offset, limit, iProvider,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP5(offset, limit, iProvider,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP6(offset, limit, iProvider,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP7(offset, limit, iProvider,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP8(offset, limit, iProvider,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndP9(offset, limit, iProvider,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByProviderAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iProvider := self.Args("provider").String()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreesByProviderAndFormClass(offset, limit, iProvider,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByProviderAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDiscovered := self.Args("discovered").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDiscovered(offset, limit, iEnabled,iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndExpanded(offset, limit, iEnabled,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndWeight(offset, limit, iEnabled,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndMetadata(offset, limit, iEnabled,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndHasChildren(offset, limit, iEnabled,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndDepth(offset, limit, iEnabled,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP1(offset, limit, iEnabled,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP2(offset, limit, iEnabled,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP3(offset, limit, iEnabled,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP4(offset, limit, iEnabled,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP5(offset, limit, iEnabled,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP6(offset, limit, iEnabled,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP7(offset, limit, iEnabled,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP8(offset, limit, iEnabled,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndP9(offset, limit, iEnabled,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByEnabledAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iEnabled := self.Args("enabled").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreesByEnabledAndFormClass(offset, limit, iEnabled,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByEnabledAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iExpanded := self.Args("expanded").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndExpanded(offset, limit, iDiscovered,iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndWeight(offset, limit, iDiscovered,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndMetadata(offset, limit, iDiscovered,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndHasChildren(offset, limit, iDiscovered,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndDepth(offset, limit, iDiscovered,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP1(offset, limit, iDiscovered,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP2(offset, limit, iDiscovered,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP3(offset, limit, iDiscovered,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP4(offset, limit, iDiscovered,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP5(offset, limit, iDiscovered,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP6(offset, limit, iDiscovered,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP7(offset, limit, iDiscovered,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP8(offset, limit, iDiscovered,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndP9(offset, limit, iDiscovered,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDiscoveredAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDiscovered := self.Args("discovered").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreesByDiscoveredAndFormClass(offset, limit, iDiscovered,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDiscoveredAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iWeight := self.Args("weight").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndWeight(offset, limit, iExpanded,iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndMetadata(offset, limit, iExpanded,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndHasChildren(offset, limit, iExpanded,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndDepth(offset, limit, iExpanded,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP1(offset, limit, iExpanded,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP2(offset, limit, iExpanded,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP3(offset, limit, iExpanded,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP4(offset, limit, iExpanded,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP5(offset, limit, iExpanded,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP6(offset, limit, iExpanded,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP7(offset, limit, iExpanded,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP8(offset, limit, iExpanded,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndP9(offset, limit, iExpanded,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByExpandedAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iExpanded := self.Args("expanded").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreesByExpandedAndFormClass(offset, limit, iExpanded,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByExpandedAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iMetadata := self.Args("metadata").Bytes()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndMetadata(offset, limit, iWeight,iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndHasChildren(offset, limit, iWeight,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndDepth(offset, limit, iWeight,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP1(offset, limit, iWeight,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP2(offset, limit, iWeight,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP3(offset, limit, iWeight,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP4(offset, limit, iWeight,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP5(offset, limit, iWeight,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP6(offset, limit, iWeight,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP7(offset, limit, iWeight,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP8(offset, limit, iWeight,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndP9(offset, limit, iWeight,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByWeightAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iWeight := self.Args("weight").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreesByWeightAndFormClass(offset, limit, iWeight,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByWeightAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iHasChildren := self.Args("has_children").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndHasChildren(offset, limit, iMetadata,iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndDepth(offset, limit, iMetadata,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP1(offset, limit, iMetadata,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP2(offset, limit, iMetadata,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP3(offset, limit, iMetadata,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP4(offset, limit, iMetadata,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP5(offset, limit, iMetadata,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP6(offset, limit, iMetadata,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP7(offset, limit, iMetadata,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP8(offset, limit, iMetadata,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndP9(offset, limit, iMetadata,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByMetadataAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iMetadata := self.Args("metadata").Bytes()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreesByMetadataAndFormClass(offset, limit, iMetadata,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByMetadataAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iDepth := self.Args("depth").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndDepth(offset, limit, iHasChildren,iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP1(offset, limit, iHasChildren,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP2(offset, limit, iHasChildren,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP3(offset, limit, iHasChildren,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP4(offset, limit, iHasChildren,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP5(offset, limit, iHasChildren,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP6(offset, limit, iHasChildren,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP7(offset, limit, iHasChildren,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP8(offset, limit, iHasChildren,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndP9(offset, limit, iHasChildren,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByHasChildrenAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iHasChildren := self.Args("has_children").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreesByHasChildrenAndFormClass(offset, limit, iHasChildren,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByHasChildrenAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP1 := self.Args("p1").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP1(offset, limit, iDepth,iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP2(offset, limit, iDepth,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP3(offset, limit, iDepth,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP4(offset, limit, iDepth,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP5(offset, limit, iDepth,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP6(offset, limit, iDepth,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP7(offset, limit, iDepth,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP8(offset, limit, iDepth,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndP9(offset, limit, iDepth,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByDepthAndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iDepth := self.Args("depth").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreesByDepthAndFormClass(offset, limit, iDepth,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByDepthAndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP2 := self.Args("p2").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP2(offset, limit, iP1,iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP3(offset, limit, iP1,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP4(offset, limit, iP1,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP5(offset, limit, iP1,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP6(offset, limit, iP1,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP7(offset, limit, iP1,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP8(offset, limit, iP1,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndP9(offset, limit, iP1,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP1AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP1 := self.Args("p1").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreesByP1AndFormClass(offset, limit, iP1,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP1AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP3 := self.Args("p3").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP3(offset, limit, iP2,iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP4(offset, limit, iP2,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP5(offset, limit, iP2,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP6(offset, limit, iP2,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP7(offset, limit, iP2,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP8(offset, limit, iP2,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndP9(offset, limit, iP2,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP2AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP2 := self.Args("p2").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreesByP2AndFormClass(offset, limit, iP2,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP2AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP4 := self.Args("p4").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP4(offset, limit, iP3,iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP5(offset, limit, iP3,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP6(offset, limit, iP3,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP7(offset, limit, iP3,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP8(offset, limit, iP3,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndP9(offset, limit, iP3,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP3AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP3 := self.Args("p3").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreesByP3AndFormClass(offset, limit, iP3,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP3AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP5 := self.Args("p5").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP5(offset, limit, iP4,iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP6(offset, limit, iP4,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP7(offset, limit, iP4,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP8(offset, limit, iP4,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndP9(offset, limit, iP4,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP4AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP4 := self.Args("p4").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreesByP4AndFormClass(offset, limit, iP4,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP4AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP6 := self.Args("p6").MustInt()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP6(offset, limit, iP5,iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP7(offset, limit, iP5,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP8(offset, limit, iP5,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndP9(offset, limit, iP5,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP5AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP5 := self.Args("p5").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreesByP5AndFormClass(offset, limit, iP5,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP5AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP6AndP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP7 := self.Args("p7").MustInt()

	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesByP6AndP7(offset, limit, iP6,iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP6AndP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP6AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesByP6AndP8(offset, limit, iP6,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP6AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP6AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP6 := self.Args("p6").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesByP6AndP9(offset, limit, iP6,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP6AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP6AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP6 := self.Args("p6").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreesByP6AndFormClass(offset, limit, iP6,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP6AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP7AndP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP8 := self.Args("p8").MustInt()

	if helper.IsHas(iP7) {
		_MenuTree, _error := model.GetMenuTreesByP7AndP8(offset, limit, iP7,iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP7AndP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP7AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP7 := self.Args("p7").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP7) {
		_MenuTree, _error := model.GetMenuTreesByP7AndP9(offset, limit, iP7,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP7AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP7AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP7 := self.Args("p7").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP7) {
		_MenuTree, _error := model.GetMenuTreesByP7AndFormClass(offset, limit, iP7,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP7AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP8AndP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP8 := self.Args("p8").MustInt()
	iP9 := self.Args("p9").MustInt()

	if helper.IsHas(iP8) {
		_MenuTree, _error := model.GetMenuTreesByP8AndP9(offset, limit, iP8,iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP8AndP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP8AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP8 := self.Args("p8").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP8) {
		_MenuTree, _error := model.GetMenuTreesByP8AndFormClass(offset, limit, iP8,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP8AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesByP9AndFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	iP9 := self.Args("p9").MustInt()
	iFormClass := self.Args("form_class").String()

	if helper.IsHas(iP9) {
		_MenuTree, _error := model.GetMenuTreesByP9AndFormClass(offset, limit, iP9,iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreesByP9AndFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreesHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	offset := self.Args("offset").MustInt()
	limit := self.Args("limit").MustInt()
	field := self.Args("field").String()
	if (offset > 0) && (len(field) > 0) {
		_MenuTree, _error := model.GetMenuTrees(offset, limit, field)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTrees' args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaMenuNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iMenuName := self.Args("menu_name").String()
	if helper.IsHas(iMenuName) {
		_MenuTree := model.HasMenuTreeViaMenuName(iMenuName)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaMenuName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaMlidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iMlid := self.Args("mlid").MustInt()
	if helper.IsHas(iMlid) {
		_MenuTree := model.HasMenuTreeViaMlid(iMlid)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaMlid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iId := self.Args("id").String()
	if helper.IsHas(iId) {
		_MenuTree := model.HasMenuTreeViaId(iId)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaId's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iParent := self.Args("parent").String()
	if helper.IsHas(iParent) {
		_MenuTree := model.HasMenuTreeViaParent(iParent)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iRouteName := self.Args("route_name").String()
	if helper.IsHas(iRouteName) {
		_MenuTree := model.HasMenuTreeViaRouteName(iRouteName)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iRouteParamKey := self.Args("route_param_key").String()
	if helper.IsHas(iRouteParamKey) {
		_MenuTree := model.HasMenuTreeViaRouteParamKey(iRouteParamKey)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iRouteParameters := self.Args("route_parameters").Bytes()
	if helper.IsHas(iRouteParameters) {
		_MenuTree := model.HasMenuTreeViaRouteParameters(iRouteParameters)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iUrl := self.Args("url").String()
	if helper.IsHas(iUrl) {
		_MenuTree := model.HasMenuTreeViaUrl(iUrl)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iTitle := self.Args("title").Bytes()
	if helper.IsHas(iTitle) {
		_MenuTree := model.HasMenuTreeViaTitle(iTitle)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iDescription := self.Args("description").Bytes()
	if helper.IsHas(iDescription) {
		_MenuTree := model.HasMenuTreeViaDescription(iDescription)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iClass := self.Args("class").String()
	if helper.IsHas(iClass) {
		_MenuTree := model.HasMenuTreeViaClass(iClass)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iOptions := self.Args("options").Bytes()
	if helper.IsHas(iOptions) {
		_MenuTree := model.HasMenuTreeViaOptions(iOptions)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iProvider := self.Args("provider").String()
	if helper.IsHas(iProvider) {
		_MenuTree := model.HasMenuTreeViaProvider(iProvider)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iEnabled := self.Args("enabled").MustInt()
	if helper.IsHas(iEnabled) {
		_MenuTree := model.HasMenuTreeViaEnabled(iEnabled)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iDiscovered := self.Args("discovered").MustInt()
	if helper.IsHas(iDiscovered) {
		_MenuTree := model.HasMenuTreeViaDiscovered(iDiscovered)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iExpanded := self.Args("expanded").MustInt()
	if helper.IsHas(iExpanded) {
		_MenuTree := model.HasMenuTreeViaExpanded(iExpanded)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iWeight := self.Args("weight").MustInt()
	if helper.IsHas(iWeight) {
		_MenuTree := model.HasMenuTreeViaWeight(iWeight)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iMetadata := self.Args("metadata").Bytes()
	if helper.IsHas(iMetadata) {
		_MenuTree := model.HasMenuTreeViaMetadata(iMetadata)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iHasChildren := self.Args("has_children").MustInt()
	if helper.IsHas(iHasChildren) {
		_MenuTree := model.HasMenuTreeViaHasChildren(iHasChildren)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iDepth := self.Args("depth").MustInt()
	if helper.IsHas(iDepth) {
		_MenuTree := model.HasMenuTreeViaDepth(iDepth)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP1 := self.Args("p1").MustInt()
	if helper.IsHas(iP1) {
		_MenuTree := model.HasMenuTreeViaP1(iP1)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP2 := self.Args("p2").MustInt()
	if helper.IsHas(iP2) {
		_MenuTree := model.HasMenuTreeViaP2(iP2)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP3 := self.Args("p3").MustInt()
	if helper.IsHas(iP3) {
		_MenuTree := model.HasMenuTreeViaP3(iP3)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP4 := self.Args("p4").MustInt()
	if helper.IsHas(iP4) {
		_MenuTree := model.HasMenuTreeViaP4(iP4)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP5 := self.Args("p5").MustInt()
	if helper.IsHas(iP5) {
		_MenuTree := model.HasMenuTreeViaP5(iP5)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP6 := self.Args("p6").MustInt()
	if helper.IsHas(iP6) {
		_MenuTree := model.HasMenuTreeViaP6(iP6)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP7 := self.Args("p7").MustInt()
	if helper.IsHas(iP7) {
		_MenuTree := model.HasMenuTreeViaP7(iP7)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP8 := self.Args("p8").MustInt()
	if helper.IsHas(iP8) {
		_MenuTree := model.HasMenuTreeViaP8(iP8)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP9 := self.Args("p9").MustInt()
	if helper.IsHas(iP9) {
		_MenuTree := model.HasMenuTreeViaP9(iP9)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetHasMenuTreeViaFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iFormClass := self.Args("form_class").String()
	if helper.IsHas(iFormClass) {
		_MenuTree := model.HasMenuTreeViaFormClass(iFormClass)
		var m = map[string]interface{}{}
		m["menu_tree"] = _MenuTree
		return self.JSON(m)
	}
	herr.Message = "Can't get to the HasMenuTreeViaFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaMenuNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iMenuName := self.Args("menu_name").String()
	if helper.IsHas(iMenuName) {
		_MenuTree, _error := model.GetMenuTreeViaMenuName(iMenuName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaMenuName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaMlidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iMlid := self.Args("mlid").MustInt()
	if helper.IsHas(iMlid) {
		_MenuTree, _error := model.GetMenuTreeViaMlid(iMlid)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaMlid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iId := self.Args("id").String()
	if helper.IsHas(iId) {
		_MenuTree, _error := model.GetMenuTreeViaId(iId)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaId's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iParent := self.Args("parent").String()
	if helper.IsHas(iParent) {
		_MenuTree, _error := model.GetMenuTreeViaParent(iParent)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iRouteName := self.Args("route_name").String()
	if helper.IsHas(iRouteName) {
		_MenuTree, _error := model.GetMenuTreeViaRouteName(iRouteName)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iRouteParamKey := self.Args("route_param_key").String()
	if helper.IsHas(iRouteParamKey) {
		_MenuTree, _error := model.GetMenuTreeViaRouteParamKey(iRouteParamKey)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iRouteParameters := self.Args("route_parameters").Bytes()
	if helper.IsHas(iRouteParameters) {
		_MenuTree, _error := model.GetMenuTreeViaRouteParameters(iRouteParameters)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iUrl := self.Args("url").String()
	if helper.IsHas(iUrl) {
		_MenuTree, _error := model.GetMenuTreeViaUrl(iUrl)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iTitle := self.Args("title").Bytes()
	if helper.IsHas(iTitle) {
		_MenuTree, _error := model.GetMenuTreeViaTitle(iTitle)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iDescription := self.Args("description").Bytes()
	if helper.IsHas(iDescription) {
		_MenuTree, _error := model.GetMenuTreeViaDescription(iDescription)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iClass := self.Args("class").String()
	if helper.IsHas(iClass) {
		_MenuTree, _error := model.GetMenuTreeViaClass(iClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iOptions := self.Args("options").Bytes()
	if helper.IsHas(iOptions) {
		_MenuTree, _error := model.GetMenuTreeViaOptions(iOptions)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iProvider := self.Args("provider").String()
	if helper.IsHas(iProvider) {
		_MenuTree, _error := model.GetMenuTreeViaProvider(iProvider)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iEnabled := self.Args("enabled").MustInt()
	if helper.IsHas(iEnabled) {
		_MenuTree, _error := model.GetMenuTreeViaEnabled(iEnabled)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iDiscovered := self.Args("discovered").MustInt()
	if helper.IsHas(iDiscovered) {
		_MenuTree, _error := model.GetMenuTreeViaDiscovered(iDiscovered)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iExpanded := self.Args("expanded").MustInt()
	if helper.IsHas(iExpanded) {
		_MenuTree, _error := model.GetMenuTreeViaExpanded(iExpanded)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iWeight := self.Args("weight").MustInt()
	if helper.IsHas(iWeight) {
		_MenuTree, _error := model.GetMenuTreeViaWeight(iWeight)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iMetadata := self.Args("metadata").Bytes()
	if helper.IsHas(iMetadata) {
		_MenuTree, _error := model.GetMenuTreeViaMetadata(iMetadata)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iHasChildren := self.Args("has_children").MustInt()
	if helper.IsHas(iHasChildren) {
		_MenuTree, _error := model.GetMenuTreeViaHasChildren(iHasChildren)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iDepth := self.Args("depth").MustInt()
	if helper.IsHas(iDepth) {
		_MenuTree, _error := model.GetMenuTreeViaDepth(iDepth)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP1 := self.Args("p1").MustInt()
	if helper.IsHas(iP1) {
		_MenuTree, _error := model.GetMenuTreeViaP1(iP1)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP2 := self.Args("p2").MustInt()
	if helper.IsHas(iP2) {
		_MenuTree, _error := model.GetMenuTreeViaP2(iP2)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP3 := self.Args("p3").MustInt()
	if helper.IsHas(iP3) {
		_MenuTree, _error := model.GetMenuTreeViaP3(iP3)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP4 := self.Args("p4").MustInt()
	if helper.IsHas(iP4) {
		_MenuTree, _error := model.GetMenuTreeViaP4(iP4)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP5 := self.Args("p5").MustInt()
	if helper.IsHas(iP5) {
		_MenuTree, _error := model.GetMenuTreeViaP5(iP5)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP6 := self.Args("p6").MustInt()
	if helper.IsHas(iP6) {
		_MenuTree, _error := model.GetMenuTreeViaP6(iP6)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP7 := self.Args("p7").MustInt()
	if helper.IsHas(iP7) {
		_MenuTree, _error := model.GetMenuTreeViaP7(iP7)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP8 := self.Args("p8").MustInt()
	if helper.IsHas(iP8) {
		_MenuTree, _error := model.GetMenuTreeViaP8(iP8)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iP9 := self.Args("p9").MustInt()
	if helper.IsHas(iP9) {
		_MenuTree, _error := model.GetMenuTreeViaP9(iP9)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func GetMenuTreeViaFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	iFormClass := self.Args("form_class").String()
	if helper.IsHas(iFormClass) {
		_MenuTree, _error := model.GetMenuTreeViaFormClass(iFormClass)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the GetMenuTreeViaFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaMenuNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	MenuName_ := self.Args("menu_name").String()
	if helper.IsHas(MenuName_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaMenuName(MenuName_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaMenuName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaMlidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Mlid_ := self.Args("mlid").MustInt()
	if helper.IsHas(Mlid_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaMlid(Mlid_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaMlid's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Id_ := self.Args("id").String()
	if helper.IsHas(Id_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaId(Id_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaId's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Parent_ := self.Args("parent").String()
	if helper.IsHas(Parent_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaParent(Parent_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaParent's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteName_ := self.Args("route_name").String()
	if helper.IsHas(RouteName_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaRouteName(RouteName_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaRouteName's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteParamKey_ := self.Args("route_param_key").String()
	if helper.IsHas(RouteParamKey_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaRouteParamKey(RouteParamKey_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaRouteParamKey's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteParameters_ := self.Args("route_parameters").Bytes()
	if helper.IsHas(RouteParameters_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaRouteParameters(RouteParameters_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaRouteParameters's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Url_ := self.Args("url").String()
	if helper.IsHas(Url_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaUrl(Url_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaUrl's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Title_ := self.Args("title").Bytes()
	if helper.IsHas(Title_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaTitle(Title_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaTitle's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Description_ := self.Args("description").Bytes()
	if helper.IsHas(Description_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaDescription(Description_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaDescription's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Class_ := self.Args("class").String()
	if helper.IsHas(Class_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaClass(Class_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Options_ := self.Args("options").Bytes()
	if helper.IsHas(Options_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaOptions(Options_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaOptions's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Provider_ := self.Args("provider").String()
	if helper.IsHas(Provider_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaProvider(Provider_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaProvider's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Enabled_ := self.Args("enabled").MustInt()
	if helper.IsHas(Enabled_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaEnabled(Enabled_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaEnabled's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Discovered_ := self.Args("discovered").MustInt()
	if helper.IsHas(Discovered_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaDiscovered(Discovered_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaDiscovered's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Expanded_ := self.Args("expanded").MustInt()
	if helper.IsHas(Expanded_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaExpanded(Expanded_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaExpanded's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Weight_ := self.Args("weight").MustInt()
	if helper.IsHas(Weight_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaWeight(Weight_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaWeight's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Metadata_ := self.Args("metadata").Bytes()
	if helper.IsHas(Metadata_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaMetadata(Metadata_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaMetadata's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	HasChildren_ := self.Args("has_children").MustInt()
	if helper.IsHas(HasChildren_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaHasChildren(HasChildren_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaHasChildren's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Depth_ := self.Args("depth").MustInt()
	if helper.IsHas(Depth_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaDepth(Depth_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaDepth's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P1_ := self.Args("p1").MustInt()
	if helper.IsHas(P1_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaP1(P1_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaP1's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P2_ := self.Args("p2").MustInt()
	if helper.IsHas(P2_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaP2(P2_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaP2's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P3_ := self.Args("p3").MustInt()
	if helper.IsHas(P3_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaP3(P3_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaP3's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P4_ := self.Args("p4").MustInt()
	if helper.IsHas(P4_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaP4(P4_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaP4's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P5_ := self.Args("p5").MustInt()
	if helper.IsHas(P5_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaP5(P5_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaP5's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P6_ := self.Args("p6").MustInt()
	if helper.IsHas(P6_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaP6(P6_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaP6's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P7_ := self.Args("p7").MustInt()
	if helper.IsHas(P7_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaP7(P7_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaP7's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P8_ := self.Args("p8").MustInt()
	if helper.IsHas(P8_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaP8(P8_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaP8's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P9_ := self.Args("p9").MustInt()
	if helper.IsHas(P9_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaP9(P9_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaP9's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostSetMenuTreeViaFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	FormClass_ := self.Args("form_class").String()
	if helper.IsHas(FormClass_) {
		var iMenuTree model.MenuTree
		self.Bind(&iMenuTree)
		_MenuTree, _error := model.SetMenuTreeViaFormClass(FormClass_, &iMenuTree)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		return self.JSON(_MenuTree)
	}
	herr.Message = "Can't get to the SetMenuTreeViaFormClass's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostAddMenuTreeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	MenuName_ := self.Args("menu_name").String()
	Mlid_ := self.Args("mlid").MustInt()
	Id_ := self.Args("id").String()
	Parent_ := self.Args("parent").String()
	RouteName_ := self.Args("route_name").String()
	RouteParamKey_ := self.Args("route_param_key").String()
	RouteParameters_ := self.Args("route_parameters").Bytes()
	Url_ := self.Args("url").String()
	Title_ := self.Args("title").Bytes()
	Description_ := self.Args("description").Bytes()
	Class_ := self.Args("class").String()
	Options_ := self.Args("options").Bytes()
	Provider_ := self.Args("provider").String()
	Enabled_ := self.Args("enabled").MustInt()
	Discovered_ := self.Args("discovered").MustInt()
	Expanded_ := self.Args("expanded").MustInt()
	Weight_ := self.Args("weight").MustInt()
	Metadata_ := self.Args("metadata").Bytes()
	HasChildren_ := self.Args("has_children").MustInt()
	Depth_ := self.Args("depth").MustInt()
	P1_ := self.Args("p1").MustInt()
	P2_ := self.Args("p2").MustInt()
	P3_ := self.Args("p3").MustInt()
	P4_ := self.Args("p4").MustInt()
	P5_ := self.Args("p5").MustInt()
	P6_ := self.Args("p6").MustInt()
	P7_ := self.Args("p7").MustInt()
	P8_ := self.Args("p8").MustInt()
	P9_ := self.Args("p9").MustInt()
	FormClass_ := self.Args("form_class").String()

	if helper.IsHas(MenuName_) {
		_error := model.AddMenuTree(MenuName_,Mlid_,Id_,Parent_,RouteName_,RouteParamKey_,RouteParameters_,Url_,Title_,Description_,Class_,Options_,Provider_,Enabled_,Discovered_,Expanded_,Weight_,Metadata_,HasChildren_,Depth_,P1_,P2_,P3_,P4_,P5_,P6_,P7_,P8_,P9_,FormClass_)
		if _error != nil {
			herr.Message = _error.Error()
			return self.JSON(herr, macross.StatusServiceUnavailable)
		}
		herr.Message = "StatusOK"
		herr.Status = macross.StatusOK
		return self.JSON(herr)
	}
	herr.Message = "Can't get to the AddMenuTree's args."
	return self.JSON(herr, macross.StatusServiceUnavailable)
}

func PostMenuTreeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_string, _error := model.PostMenuTree(&iMenuTree)
	if (helper.IsHas(_string)) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	} else {
		var m = map[string]interface{}{}
		m["created"] = _string
		return self.JSON(m, macross.StatusCreated)
	}
	return self.JSON(herr)
}

func PutMenuTreeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_string, _error := model.PutMenuTree(&iMenuTree)
	if (helper.IsHas(_string)) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	} else {
		var m = map[string]interface{}{}
		m["updated"] = _string
		return self.JSON(m)
	}
	return self.JSON(herr)
}

func PutMenuTreeViaMenuNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	MenuName_ := self.Args("menu_name").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaMenuName(MenuName_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaMlidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Mlid_ := self.Args("mlid").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaMlid(Mlid_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Id_ := self.Args("id").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaId(Id_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Parent_ := self.Args("parent").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaParent(Parent_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteName_ := self.Args("route_name").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaRouteName(RouteName_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteParamKey_ := self.Args("route_param_key").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaRouteParamKey(RouteParamKey_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteParameters_ := self.Args("route_parameters").Bytes()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaRouteParameters(RouteParameters_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Url_ := self.Args("url").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaUrl(Url_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Title_ := self.Args("title").Bytes()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaTitle(Title_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Description_ := self.Args("description").Bytes()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaDescription(Description_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Class_ := self.Args("class").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaClass(Class_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Options_ := self.Args("options").Bytes()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaOptions(Options_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Provider_ := self.Args("provider").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaProvider(Provider_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Enabled_ := self.Args("enabled").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaEnabled(Enabled_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Discovered_ := self.Args("discovered").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaDiscovered(Discovered_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Expanded_ := self.Args("expanded").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaExpanded(Expanded_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Weight_ := self.Args("weight").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaWeight(Weight_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Metadata_ := self.Args("metadata").Bytes()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaMetadata(Metadata_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	HasChildren_ := self.Args("has_children").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaHasChildren(HasChildren_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Depth_ := self.Args("depth").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaDepth(Depth_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P1_ := self.Args("p1").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaP1(P1_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P2_ := self.Args("p2").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaP2(P2_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P3_ := self.Args("p3").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaP3(P3_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P4_ := self.Args("p4").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaP4(P4_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P5_ := self.Args("p5").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaP5(P5_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P6_ := self.Args("p6").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaP6(P6_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P7_ := self.Args("p7").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaP7(P7_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P8_ := self.Args("p8").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaP8(P8_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P9_ := self.Args("p9").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaP9(P9_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutMenuTreeViaFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	FormClass_ := self.Args("form_class").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	_int64, _error := model.PutMenuTreeViaFormClass(FormClass_, &iMenuTree)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaMenuNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	MenuName_ := self.Args("menu_name").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaMenuName(MenuName_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaMlidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Mlid_ := self.Args("mlid").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaMlid(Mlid_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Id_ := self.Args("id").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaId(Id_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Parent_ := self.Args("parent").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaParent(Parent_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteName_ := self.Args("route_name").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaRouteName(RouteName_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteParamKey_ := self.Args("route_param_key").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaRouteParamKey(RouteParamKey_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteParameters_ := self.Args("route_parameters").Bytes()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaRouteParameters(RouteParameters_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Url_ := self.Args("url").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaUrl(Url_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Title_ := self.Args("title").Bytes()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaTitle(Title_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Description_ := self.Args("description").Bytes()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaDescription(Description_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Class_ := self.Args("class").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaClass(Class_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Options_ := self.Args("options").Bytes()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaOptions(Options_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Provider_ := self.Args("provider").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaProvider(Provider_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Enabled_ := self.Args("enabled").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaEnabled(Enabled_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Discovered_ := self.Args("discovered").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaDiscovered(Discovered_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Expanded_ := self.Args("expanded").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaExpanded(Expanded_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Weight_ := self.Args("weight").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaWeight(Weight_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Metadata_ := self.Args("metadata").Bytes()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaMetadata(Metadata_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	HasChildren_ := self.Args("has_children").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaHasChildren(HasChildren_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Depth_ := self.Args("depth").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaDepth(Depth_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P1_ := self.Args("p1").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaP1(P1_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P2_ := self.Args("p2").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaP2(P2_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P3_ := self.Args("p3").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaP3(P3_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P4_ := self.Args("p4").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaP4(P4_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P5_ := self.Args("p5").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaP5(P5_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P6_ := self.Args("p6").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaP6(P6_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P7_ := self.Args("p7").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaP7(P7_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P8_ := self.Args("p8").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaP8(P8_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P9_ := self.Args("p9").MustInt()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaP9(P9_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func PutUpdateMenuTreeViaFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	FormClass_ := self.Args("form_class").String()
	var iMenuTree model.MenuTree
	self.Bind(&iMenuTree)
	var iMap = helper.StructToMap(iMenuTree)
	_error := model.UpdateMenuTreeViaFormClass(FormClass_, &iMap)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	MenuName_ := self.Args("menu_name").String()
	_int64, _error := model.DeleteMenuTree(MenuName_)
	if (_int64 <= 0) || (_error != nil) {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	} else {
		var m = map[string]interface{}{}
		m["deleted"] = _int64
		return self.JSON(m)
	}
	return self.JSON(herr)
}

func DeleteMenuTreeViaMenuNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	MenuName_ := self.Args("menu_name").String()
	_error := model.DeleteMenuTreeViaMenuName(MenuName_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaMlidHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Mlid_ := self.Args("mlid").MustInt()
	_error := model.DeleteMenuTreeViaMlid(Mlid_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaIdHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Id_ := self.Args("id").String()
	_error := model.DeleteMenuTreeViaId(Id_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaParentHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Parent_ := self.Args("parent").String()
	_error := model.DeleteMenuTreeViaParent(Parent_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaRouteNameHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteName_ := self.Args("route_name").String()
	_error := model.DeleteMenuTreeViaRouteName(RouteName_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaRouteParamKeyHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteParamKey_ := self.Args("route_param_key").String()
	_error := model.DeleteMenuTreeViaRouteParamKey(RouteParamKey_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaRouteParametersHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	RouteParameters_ := self.Args("route_parameters").Bytes()
	_error := model.DeleteMenuTreeViaRouteParameters(RouteParameters_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaUrlHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Url_ := self.Args("url").String()
	_error := model.DeleteMenuTreeViaUrl(Url_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaTitleHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Title_ := self.Args("title").Bytes()
	_error := model.DeleteMenuTreeViaTitle(Title_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaDescriptionHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Description_ := self.Args("description").Bytes()
	_error := model.DeleteMenuTreeViaDescription(Description_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Class_ := self.Args("class").String()
	_error := model.DeleteMenuTreeViaClass(Class_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaOptionsHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Options_ := self.Args("options").Bytes()
	_error := model.DeleteMenuTreeViaOptions(Options_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaProviderHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Provider_ := self.Args("provider").String()
	_error := model.DeleteMenuTreeViaProvider(Provider_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaEnabledHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Enabled_ := self.Args("enabled").MustInt()
	_error := model.DeleteMenuTreeViaEnabled(Enabled_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaDiscoveredHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Discovered_ := self.Args("discovered").MustInt()
	_error := model.DeleteMenuTreeViaDiscovered(Discovered_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaExpandedHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Expanded_ := self.Args("expanded").MustInt()
	_error := model.DeleteMenuTreeViaExpanded(Expanded_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaWeightHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Weight_ := self.Args("weight").MustInt()
	_error := model.DeleteMenuTreeViaWeight(Weight_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaMetadataHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Metadata_ := self.Args("metadata").Bytes()
	_error := model.DeleteMenuTreeViaMetadata(Metadata_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaHasChildrenHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	HasChildren_ := self.Args("has_children").MustInt()
	_error := model.DeleteMenuTreeViaHasChildren(HasChildren_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaDepthHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	Depth_ := self.Args("depth").MustInt()
	_error := model.DeleteMenuTreeViaDepth(Depth_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaP1Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P1_ := self.Args("p1").MustInt()
	_error := model.DeleteMenuTreeViaP1(P1_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaP2Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P2_ := self.Args("p2").MustInt()
	_error := model.DeleteMenuTreeViaP2(P2_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaP3Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P3_ := self.Args("p3").MustInt()
	_error := model.DeleteMenuTreeViaP3(P3_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaP4Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P4_ := self.Args("p4").MustInt()
	_error := model.DeleteMenuTreeViaP4(P4_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaP5Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P5_ := self.Args("p5").MustInt()
	_error := model.DeleteMenuTreeViaP5(P5_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaP6Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P6_ := self.Args("p6").MustInt()
	_error := model.DeleteMenuTreeViaP6(P6_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaP7Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P7_ := self.Args("p7").MustInt()
	_error := model.DeleteMenuTreeViaP7(P7_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaP8Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P8_ := self.Args("p8").MustInt()
	_error := model.DeleteMenuTreeViaP8(P8_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaP9Handler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	P9_ := self.Args("p9").MustInt()
	_error := model.DeleteMenuTreeViaP9(P9_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}

func DeleteMenuTreeViaFormClassHandler(self *macross.Context) error {
	var herr = new(macross.HTTPError)
	herr.Message = "ErrServiceUnavailable"
	herr.Status = macross.StatusServiceUnavailable
	FormClass_ := self.Args("form_class").String()
	_error := model.DeleteMenuTreeViaFormClass(FormClass_)
	if _error != nil {
		herr.Message = _error.Error()
		return self.JSON(herr, macross.StatusServiceUnavailable)
	}
	herr.Message = "StatusOK"
	herr.Status = macross.StatusOK
	return self.JSON(herr)
}
